char::(eck_pad3)=0x80004000
short::(t_debug_bba)=0x80004030
short::(art)=0x80004050
int::(int, t_registers)=0x80004210
int::(int, t_data)=0x800042A0
int::(int, t_hardware)=0x80004360
float::(ush_cache)=0x80004390
short::(_init_info)=0x800066FC
JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::__ct(void)=0x80006EA0
JGeometry::TVec3<float>::__ct(float)=0x80006EB0
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::identity(void)=0x80006EC0
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::mult(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>&) const=0x80006F00
JGeometry::TVec3<float>::set<float>(float, float, float, _v)=0x80006F90
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::multTranspose(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>&) const=0x80006FA0
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::invert(const JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>&)=0x80007060
JGeometry::TUtil<float>::epsilonEquals(float, float, float)=0x80007350
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::concat(const JGeometry::SMatrix34C<float>&, const JGeometry::SMatrix34C<float>&)=0x80007380
JGeometry::SMatrix34C<float>::set(float, float, float, float, float, float, float, float, float, float, float, float)=0x80007630
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::concat(const JGeometry::SMatrix34C<float>&)=0x80007680
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getQuat(JGeometry::TQuat4<float>&) const=0x80007930
JGeometry::TUtil<float>::sqrt(float)=0x80007B60
JGeometry::TVec4<float>::set<float>(float, float, float, float, _v)=0x80007BA0
JGeometry::TQuat4<float>::setEuler(float, float, float)=0x80007BC0
JGeometry::TQuat4<float>::setRotate(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80007D10
JGeometry::TQuat4<float>::slerp(const JGeometry::TQuat4<float>&, float)=0x80007E30
JGeometry::TQuat4<float>::normalize(const JGeometry::TQuat4<float>&)=0x80008020
JGeometry::TQuat4<float>::getEuler(JGeometry::TVec3<float>&) const=0x800080F0
JGeometry::TQuat4<float>::__as(const JGeometry::TQuat4<float>&)=0x80008320
MR::startLevelSound(const LiveActor*, const char*, long, long, long)=0x80008390
@unnamed@LiveActorUtil_cpp@::changeBckForEffectKeeper(const LiveActor*)=0x800086A0
MR::startBck(const LiveActor*, const char*, const char*)=0x800086C0
MR::isBckStopped(const LiveActor*)=0x80008730
MR::tryStartAllAnim(const LiveActor*, const char*)=0x80008740
MR::startAction(const LiveActor*, const char*)=0x80008810
MR::tryStartActionNotPlaying(const LiveActor*, const char*)=0x80008C10
MR::isActionEnd(const LiveActor*)=0x80008CD0
MR::isAnyAnimPlaying(const LiveActor*, const char*)=0x80008DC0
MR::startBckWithInterpole(const LiveActor*, const char*, long)=0x80008F30
MR::startBckNoInterpole(const LiveActor*, const char*)=0x80008FA0
MR::startBckAtFirstStep(const LiveActor*, const char*)=0x80009010
MR::tryStartBck(const LiveActor*, const char*, const char*)=0x80009090
MR::tryStartBckAndBtp(const LiveActor*, const char*, const char*)=0x80009130
MR::setAllAnimFrame(const LiveActor*, const char*, float)=0x800091A0
MR::setAllAnimFrameAndStop(const LiveActor*, const char*, float)=0x800092A0
MR::setAllAnimFrameAtEnd(const LiveActor*, const char*)=0x800093B0
MR::isAnyAnimStopped(const LiveActor*, const char*)=0x80009660
MR::isAnyAnimOneTimeAndStopped(const LiveActor*, const char*)=0x800097A0
MR::isBtkStopped(const LiveActor*)=0x800098E0
MR::isBrkStopped(const LiveActor*)=0x800098F0
MR::isBtpStopped(const LiveActor*)=0x80009900
MR::isBpkStopped(const LiveActor*)=0x80009910
MR::isBvaStopped(const LiveActor*)=0x80009920
MR::isBckOneTimeAndStopped(const LiveActor*)=0x80009930
MR::isBtkOneTimeAndStopped(const LiveActor*)=0x80009940
MR::isBrkOneTimeAndStopped(const LiveActor*)=0x80009950
MR::isBckLooped(const LiveActor*)=0x80009960
MR::checkPassBckFrame(const LiveActor*, float)=0x80009990
MR::setBckFrameAtRandom(const LiveActor*)=0x800099E0
MR::setBtkFrameAtRandom(const LiveActor*)=0x80009A70
MR::setBckFrameAndStop(const LiveActor*, float)=0x80009B10
MR::setBtkFrameAndStop(const LiveActor*, float)=0x80009B50
MR::setBrkFrameAndStop(const LiveActor*, float)=0x80009BB0
MR::setBtpFrameAndStop(const LiveActor*, float)=0x80009C10
MR::setBpkFrameAndStop(const LiveActor*, float)=0x80009C70
MR::setBvaFrameAndStop(const LiveActor*, float)=0x80009CD0
MR::setBckFrameEndAndStop(const LiveActor*)=0x80009D30
MR::setBrkFrameEndAndStop(const LiveActor*)=0x80009DA0
MR::startBckAndSetFrameAndStop(const LiveActor*, const char*, float)=0x80009E20
MR::startBtkAndSetFrameAndStop(const LiveActor*, const char*, float)=0x80009EC0
MR::startBrkAndSetFrameAndStop(const LiveActor*, const char*, float)=0x80009F10
MR::startBtpAndSetFrameAndStop(const LiveActor*, const char*, float)=0x80009F60
MR::startBvaAndSetFrameAndStop(const LiveActor*, const char*, float)=0x80009FB0
MR::startBtk(const LiveActor*, const char*)=0x8000A000
MR::startBrk(const LiveActor*, const char*)=0x8000A010
MR::startBtp(const LiveActor*, const char*)=0x8000A020
MR::startBpk(const LiveActor*, const char*)=0x8000A030
MR::startBva(const LiveActor*, const char*)=0x8000A040
MR::startBckIfExist(const LiveActor*, const char*)=0x8000A050
MR::startBtkIfExist(const LiveActor*, const char*)=0x8000A0F0
MR::startBrkIfExist(const LiveActor*, const char*)=0x8000A160
MR::startBtpIfExist(const LiveActor*, const char*)=0x8000A1D0
MR::startBpkIfExist(const LiveActor*, const char*)=0x8000A240
MR::startBvaIfExist(const LiveActor*, const char*)=0x8000A2B0
MR::stopBck(const LiveActor*)=0x8000A4E0
MR::stopBtk(const LiveActor*)=0x8000A510
MR::stopBrk(const LiveActor*)=0x8000A520
MR::stopBtp(const LiveActor*)=0x8000A530
MR::stopBva(const LiveActor*)=0x8000A540
MR::setBckRate(const LiveActor*, float)=0x8000A550
MR::setBtkRate(const LiveActor*, float)=0x8000A5A0
MR::setBrkRate(const LiveActor*, float)=0x8000A5F0
MR::setBtpRate(const LiveActor*, float)=0x8000A640
MR::setBpkRate(const LiveActor*, float)=0x8000A690
MR::setBvaRate(const LiveActor*, float)=0x8000A6E0
MR::setBckFrame(const LiveActor*, float)=0x8000A730
MR::setBtkFrame(const LiveActor*, float)=0x8000A7B0
MR::setBrkFrame(const LiveActor*, float)=0x8000A7F0
MR::setBtpFrame(const LiveActor*, float)=0x8000A830
MR::setBpkFrame(const LiveActor*, float)=0x8000A870
MR::setBvaFrame(const LiveActor*, float)=0x8000A8B0
MR::isBckPlaying(const LiveActor*, const char*)=0x8000A8F0
MR::isBtkPlaying(const LiveActor*, const char*)=0x8000A900
MR::isBrkPlaying(const LiveActor*, const char*)=0x8000A910
MR::isBtpPlaying(const LiveActor*, const char*)=0x8000A920
MR::isBpkPlaying(const LiveActor*, const char*)=0x8000A930
MR::isBvaPlaying(const LiveActor*, const char*)=0x8000A940
MR::isBckPlayingIfExist(const LiveActor*, const char*)=0x8000A950
MR::isBtkPlayingIfExist(const LiveActor*, const char*)=0x8000A9C0
MR::isBrkPlayingIfExist(const LiveActor*, const char*)=0x8000AA20
MR::isBtpPlayingIfExist(const LiveActor*, const char*)=0x8000AA80
MR::isBpkPlayingIfExist(const LiveActor*, const char*)=0x8000AAE0
MR::isBvaPlayingIfExist(const LiveActor*, const char*)=0x8000AB40
MR::isPlayingAnim(const LiveActor*, const char*)=0x8000ABA0
MR::isExistAnim(const LiveActor*, const char*)=0x8000AC70
MR::isExistBck(const LiveActor*, const char*)=0x8000AD40
MR::isExistBtk(const LiveActor*, const char*)=0x8000ADB0
MR::isExistBrk(const LiveActor*, const char*)=0x8000AE10
MR::isExistBtp(const LiveActor*, const char*)=0x8000AE70
MR::isExistBpk(const LiveActor*, const char*)=0x8000AED0
MR::isExistBva(const LiveActor*, const char*)=0x8000AF30
MR::getBckCtrl(const LiveActor*)=0x8000AF90
MR::getBtkCtrl(const LiveActor*)=0x8000AFA0
MR::getBrkCtrl(const LiveActor*)=0x8000AFB0
MR::getBtpCtrl(const LiveActor*)=0x8000AFC0
MR::getBpkCtrl(const LiveActor*)=0x8000AFD0
MR::getBvaCtrl(const LiveActor*)=0x8000AFE0
MR::updateMaterial(LiveActor*)=0x8000AFF0
@unnamed@ActorCameraUtil_cpp@::createActorCameraName(char*, unsigned long, const LiveActor*, const ActorCameraInfo*)=0x8000B000
@unnamed@ActorCameraUtil_cpp@::createMultiActorCameraName(char*, unsigned long, const LiveActor*, const ActorCameraInfo*, const char*)=0x8000B040
MR::createActorCameraInfo(const JMapInfoIter&)=0x8000B080
MR::createActorCameraInfoIfExist(const JMapInfoIter&, ActorCameraInfo*)=0x8000B0C0
MR::initActorCamera(const LiveActor*, const JMapInfoIter&, ActorCameraInfo*)=0x8000B140
MR::initMultiActorCamera(const LiveActor*, const JMapInfoIter&, ActorCameraInfo*, const char*)=0x8000B150
MR::initMultiActorCameraNoInit(const LiveActor*, ActorCameraInfo*, const char*)=0x8000B1D0
MR::initActorCameraProgrammable(const LiveActor*)=0x8000B260
MR::startActorCameraNoTarget(const LiveActor*, const ActorCameraInfo*, long)=0x8000B270
CameraTargetArg::__ct(void)=0x8000B2D0
MR::startActorCameraTargetPlayer(const LiveActor*, const ActorCameraInfo*, long)=0x8000B2F0
MR::startActorCameraTargetSelf(const LiveActor*, const ActorCameraInfo*, long)=0x8000B350
CameraTargetArg::__ct(CameraTargetMtx*)=0x8000B410
MR::startActorCameraTargetOther(const LiveActor*, const ActorCameraInfo*, const CameraTargetArg&, long)=0x8000B430
MR::startMultiActorCameraNoTarget(const LiveActor*, const ActorCameraInfo*, const char*, long)=0x8000B440
MR::startMultiActorCameraTargetPlayer(const LiveActor*, const ActorCameraInfo*, const char*, long)=0x8000B4A0
MR::startMultiActorCameraTargetSelf(const LiveActor*, const ActorCameraInfo*, const char*, long)=0x8000B510
MR::startMultiActorCameraTargetOther(const LiveActor*, const ActorCameraInfo*, const char*, const CameraTargetArg&, long)=0x8000B5D0
MR::startAnimCameraTargetPlayer(const LiveActor*, const ActorCameraInfo*, const char*, long, float)=0x8000B670
MR::startAnimCameraTargetSelf(const LiveActor*, const ActorCameraInfo*, const char*, long, float)=0x8000B710
MR::startAnimCameraTargetOther(const LiveActor*, const ActorCameraInfo*, const char*, const CameraTargetArg&, long, float)=0x8000B7B0
MR::startActorCameraProgrammable(const LiveActor*, long)=0x8000B840
MR::endActorCamera(const LiveActor*, const ActorCameraInfo*, bool, long)=0x8000B850
MR::endMultiActorCamera(const LiveActor*, const ActorCameraInfo*, const char*, bool, long)=0x8000B860
MR::endActorCameraAtLanding(const LiveActor*, const ActorCameraInfo*, long)=0x8000B900
MR::endActorCameraProgrammable(const LiveActor*, long, bool)=0x8000B9B0
MR::isActiveActorCamera(const LiveActor*, const ActorCameraInfo*)=0x8000B9C0
MR::isActiveMultiActorCamera(const LiveActor*, const ActorCameraInfo*, const char*)=0x8000B9D0
MR::setProgrammableCameraParam(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8000BA50
MR::setProgrammableCameraParamFovy(const LiveActor*, float)=0x8000BA60
MR::initAnimCamera(const LiveActor*, const ActorCameraInfo*, const char*)=0x8000BA70
MR::initAnimCamera(const LiveActor*, const ActorCameraInfo*, const char*, ResourceHolder*)=0x8000BAC0
MR::endAnimCamera(const LiveActor*, const ActorCameraInfo*, const char*, long, bool)=0x8000BB70
MR::isAnimCameraEnd(const LiveActor*, const ActorCameraInfo*, const char*)=0x8000BC70
MR::getActorCameraFrames(const LiveActor*, const ActorCameraInfo*)=0x8000BCD0
MR::getMultiActorCameraFrames(const LiveActor*, const ActorCameraInfo*, const char*)=0x8000BCE0
MR::isExistActorCamera(const ActorCameraInfo*)=0x8000BD60
MR::startRumbleWithShakeCameraWeak(const LiveActor*, const char*, const char*, float, float)=0x8000BD90
MR::startRumbleWithShakeCameraNormalWeak(const LiveActor*, const char*, const char*, float, float)=0x8000BE30
MR::startRumbleWithShakeCameraStrong(const LiveActor*, const char*, const char*, float, float)=0x8000BED0
JMapInfoIter::getValue<float>(const char*, float*, _b) const=0x8000C000
JMapInfoIter::getValue<long>(const char*, long*, _b) const=0x8000C080
JGeometry::TVec3<float>::__ct(const JGeometry::TVec3<float>&)=0x8000C150
MR::processInitFunction(LiveActor*, const JMapInfoIter&, bool)=0x8000C170
MR::processInitFunction(LiveActor*, const JMapInfoIter&, const char*, bool)=0x8000C1E0
MR::processInitFunction(LiveActor*, const JMapInfoIter&, const char*, const char*, bool)=0x8000C1F0
MR::processInitFunction(LiveActor*, const char*, bool)=0x8000C200
MR::processInitFunction(LiveActor*, const char*, const char*, bool)=0x8000C250
MR::makeInitActorPath(const char*, const char*)=0x8000C2A0
MR::isValidInitActorPath(const char*, const char*)=0x8000C310
MR::processInitFunction(LiveActor*, const JMapInfoIter&, const char*, bool, const char*, bool)=0x8000C340
MR::processInitFunction(LiveActor*, const char*, bool, bool)=0x8000CDE0
MR::processInitFunction(LiveActor*, const char*, bool, const char*, bool)=0x8000CE30
MR::initDefaultPos(LiveActor*, const JMapInfoIter&)=0x8000CE80
MR::getDefaultPos(LiveActor*, const JMapInfoIter&)=0x8000CF40
JMapInfoIter::isValid(void) const=0x8000CFB0
MR::tryInitFromRestartPos(LiveActor*, const JMapInfoIter&)=0x8000D010
MR::initSensors(LiveActor*, const char*, const char*)=0x8000D0E0
MR::initSwitches(LiveActor*, const JMapInfoIter&, const char*, const char*)=0x8000D320
MR::loadTexFromArc(LiveActor*, const char*, const char*)=0x8000D620
JUTTexture::__ct(const ResTIMG*, unsigned char)=0x8000D680
MR::loadTexFromArc(LiveActor*, const char*)=0x8000D6D0
JGeometry::TVec3<float>::dot(const JGeometry::TVec3<float>&) const=0x8000D750
JGeometry::TVec3<float>::scale(float, const JGeometry::TVec3<float>&)=0x8000D770
JGeometry::TUtil<float>::inv_sqrt(float)=0x8000D7A0
JGeometry::TUtil<float>::asin(float)=0x8000D7E0
JGeometry::TVec4<float>::scale(float)=0x8000D880
MR::calcDistance(const HitSensor*, const HitSensor*, JGeometry::TVec3<float>*)=0x8000DAD0
JMathInlineVEC::PSVECSubtract(const Vec*, const Vec*, Vec*)=0x8000DB80
JGeometry::TVec3<float>::zero(void)=0x8000DBB0
MR::calcDistance(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000DBD0
MR::calcDistance(const LiveActor*, const LiveActor*)=0x8000DBE0
MR::calcDistanceHorizontal(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8000DBF0
MR::calcDistanceHorizontal(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000DC60
MR::calcDistanceVertical(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8000DCC0
MR::calcDistanceVertical(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000DD30
MR::calcDistanceToPlayer(const LiveActor*)=0x8000DDA0
MR::calcDistanceToPlayerH(const LiveActor*)=0x8000DDF0
MR::isNear(const HitSensor*, const HitSensor*, float)=0x8000DF00
JGeometry::TVec3<float>::squared(const JGeometry::TVec3<float>&) const=0x8000DF50
MR::isNear(const LiveActor*, const LiveActor*, float)=0x8000DF80
MR::isNear(const LiveActor*, const JGeometry::TVec3<float>&, float)=0x8000DFD0
MR::isNearPlayer(const LiveActor*, float)=0x8000E020
MR::isNearPlayerAnyTime(const LiveActor*, float)=0x8000E080
MR::isNearPlayer(const JGeometry::TVec3<float>&, float)=0x8000E0E0
MR::isNearPlayerPose(const LiveActor*, float, float)=0x8000E150
JGeometry::TVec3<float>::squared(void) const=0x8000E240
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getYDir(JGeometry::TVec3<float>&) const=0x8000E260
MR::isNearPlayerHorizontal(const LiveActor*, float)=0x8000E280
MR::calcFrontVec(JGeometry::TVec3<float>*, const LiveActor*)=0x8000E340
MR::calcUpVec(JGeometry::TVec3<float>*, const LiveActor*)=0x8000E3A0
MR::calcSideVec(JGeometry::TVec3<float>*, const LiveActor*)=0x8000E400
MR::calcPositionUpOffset(JGeometry::TVec3<float>*, const LiveActor*, float)=0x8000E4C0
MR::calcVecToPlayer(JGeometry::TVec3<float>*, const LiveActor*)=0x8000E520
JGeometry::TVec3<float>::scale(float)=0x8000E6E0
JGeometry::TVec3<float>::add(const JGeometry::TVec3<float>&)=0x8000E710
JGeometry::TVec3<float>::__as(const JGeometry::TVec3<float>&)=0x8000E740
MR::calcVecToPlayerH(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>*)=0x8000E8B0
MR::calcVecFromPlayerH(JGeometry::TVec3<float>*, const LiveActor*)=0x8000E900
JGeometry::TVec3<float>::set<float>(const JGeometry::TVec3<float>&, _v)=0x8000E9C0
MR::calcVecToTargetPosH(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>*)=0x8000E9E0
MR::calcVecFromTargetPosH(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>*)=0x8000EA70
MR::isFaceToTargetDegree(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8000EB20
MR::isFaceToPlayerDegree(const LiveActor*, const JGeometry::TVec3<float>&, float)=0x8000EB90
MR::isFaceToTargetDegree(const LiveActor*, const JGeometry::TVec3<float>&, float)=0x8000EC00
MR::isFaceToPlayerDegree(const LiveActor*, float)=0x8000EC80
MR::isFaceToPlayerDegreeHV(const LiveActor*, const JGeometry::TVec3<float>&, float, float)=0x8000ECF0
MR::isFaceToTargetHorizontalDegree(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8000ED80
MR::isFaceToPlayerHorizontalDegree(const LiveActor*, const JGeometry::TVec3<float>&, float)=0x8000EE30
MR::isClockwiseToDir(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8000EE90
MR::isClockwiseToPlayer(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000EF00
MR::isPlayerLeftSide(const LiveActor*)=0x8000EF90
JGeometry::TVec3<float>::__ct<float>(float, float, float, _Pv)=0x8000F020
MR::isLeftSideFromPlayer(const LiveActor*)=0x8000F030
MR::isInSightConePlayer(const LiveActor*, const JGeometry::TVec3<float>&, float, float)=0x8000F0B0
MR::isInSightFanPlayer(const LiveActor*, const JGeometry::TVec3<float>&, float, float, float)=0x8000F120
MR::isOnPlayer(const LiveActor*)=0x8000F1A0
MR::isPlayerExistSide(const LiveActor*, float, float)=0x8000F1B0
MR::isPlayerExistUp(const LiveActor*, float, float)=0x8000F2A0
MR::isPlayerExistDown(const LiveActor*, float, float)=0x8000F360
JGeometry::negateInternal(const float*, float*)=0x8000F440
MR::isInWater(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000F460
MR::isInDeath(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000F4B0
MR::makeMtxTR(A4_fPC9LiveActor)=0x8000F540
MR::makeMtxTRS(A4_fPC9LiveActor)=0x8000F560
MR::makeMtxTransRotateY(A4_fPC9LiveActor)=0x8000F5B0
MR::calcMtxFromGravityAndZAxis(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8000F6D0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getZDir(JGeometry::TVec3<float>&) const=0x8000F7F0
MR::calcMtxFromGravityAndZAxis(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const LiveActor*, const JGeometry::TVec3<float>&)=0x8000F810
MR::calcAndSetBaseTRMtxFromGravityAndZAxis(const LiveActor*, const JGeometry::TVec3<float>&)=0x8000F820
MR::calcActorAxis(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const LiveActor*)=0x8000FA80
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getXDir(JGeometry::TVec3<float>&) const=0x8000FB00
MR::calcActorAxisY(JGeometry::TVec3<float>*, const LiveActor*)=0x8000FB20
MR::calcActorAxisZ(JGeometry::TVec3<float>*, const LiveActor*)=0x8000FB80
MR::faceToVector(JGeometry::TQuat4<float>*, JGeometry::TVec3<float>, float)=0x8000FBE0
JGeometry::TQuat4<float>::getYDir(JGeometry::TVec3<float>&) const=0x8000FC80
MR::faceToVector(A4_fQ29JGeometry8TVec3<float>f)=0x8000FCF0
MR::faceToPoint(A4_fQ29JGeometry8TVec3<float>f)=0x8000FE90
MR::makeQuatFromRotate(JGeometry::TQuat4<float>*, const LiveActor*)=0x80010060
MR::makeQuatAndFrontFromRotate(JGeometry::TQuat4<float>*, JGeometry::TVec3<float>*, const LiveActor*)=0x80010070
JGeometry::TQuat4<float>::getZDir(JGeometry::TVec3<float>&) const=0x800100C0
MR::turnQuatUpToGravity(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const LiveActor*)=0x80010340
JGeometry::TQuat4<float>::normalize(void)=0x80010480
MR::blendQuatFromGroundAndFront(JGeometry::TQuat4<float>*, const LiveActor*, const JGeometry::TVec3<float>&, float, float)=0x80010560
MR::resetPosition(LiveActor*)=0x80010690
MR::resetPosition(LiveActor*, const JGeometry::TVec3<float>&)=0x80010710
MR::resetPosition(LiveActor*, const char*)=0x80010750
MR::makeMtxOnMapCollision(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, LiveActor*, float)=0x800107E0
MR::calcVelocityMoveToDirectionHorizon(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, float)=0x80010970
MR::calcVelocityMoveToDirectionHorizon(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, float, float, float, float)=0x800109F0
MR::calcVelocityMoveToDirection(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, float)=0x80010B60
MR::calcVelocityMoveToDirection(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, float, float, float, float)=0x80010BD0
MR::calcVelocityMoveToTarget(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&, float)=0x80010C40
MR::addVelocityMoveToDirection(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80010D60
MR::addVelocityMoveToTargetHorizon(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80010F00
MR::addVelocityMoveToTargetHorizon(LiveActor*, const JGeometry::TVec3<float>&, float, float, float, float)=0x80010F70
MR::addVelocityMoveToTarget(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80011000
MR::addVelocityMoveToTarget(LiveActor*, const JGeometry::TVec3<float>&, float, float, float, float)=0x80011070
MR::addVelocityAwayFromTarget(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80011100
MR::addVelocityClockwiseToTarget(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80011280
MR::addVelocityClockwiseToPlayer(LiveActor*, float)=0x800112E0
MR::addVelocityJump(LiveActor*, float)=0x80011350
MR::addVelocityLimit(LiveActor*, const JGeometry::TVec3<float>&)=0x800113B0
MR::setVelocityJump(LiveActor*, float)=0x80011470
MR::addVelocityToGravity(LiveActor*, float)=0x800114D0
MR::addVelocityToGravityOrGround(LiveActor*, float)=0x80011530
MR::addVelocityToCollisionNormal(LiveActor*, float)=0x800115A0
MR::addVelocityKeepHeight(LiveActor*, const JGeometry::TVec3<float>&, float, float)=0x80011650
MR::addVelocityKeepHeight(LiveActor*, const JGeometry::TVec3<float>&, float, float, float)=0x80011670
MR::addVelocityKeepHeightUseShadow(LiveActor*, float, float, float, const char*)=0x80011720
MR::addVelocityKeepHeightUseShadow(LiveActor*, float, float, float, float, const char*)=0x80011800
MR::addVelocitySeparateHV(LiveActor*, const JGeometry::TVec3<float>&, float, float)=0x80011920
MR::setVelocitySeparateHV(LiveActor*, const JGeometry::TVec3<float>&, float, float)=0x800119F0
MR::attenuateVelocityExceptDirection(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80011AC0
MR::restrictVelocity(LiveActor*, float)=0x80011B50
JGeometry::TVec3<float>::setLength(float)=0x80011BB0
MR::killVelocityOnGroundH(LiveActor*)=0x80011C50
MR::killVelocityOnGroundCosH(LiveActor*, float)=0x80011CB0
MR::killVelocityToTarget(LiveActor*, const JGeometry::TVec3<float>&)=0x80011D40
MR::forceBindOnGround(LiveActor*, float, float)=0x80011E80
MR::reboundVelocityFromEachCollision(LiveActor*, float, float, float, float)=0x80012090
MR::reboundVelocityFromCollision(LiveActor*, float, float, float)=0x80012270
MR::zeroVelocity(LiveActor*)=0x80012400
MR::setVelocity(LiveActor*, const JGeometry::TVec3<float>&)=0x80012410
MR::addVelocity(LiveActor*, const JGeometry::TVec3<float>&)=0x80012420
MR::attenuateVelocity(LiveActor*, float)=0x80012430
MR::calcVelocityLength(const LiveActor*)=0x80012440
MR::calcGravitySpeed(const LiveActor*)=0x800124E0
MR::applyVelocityDampAndGravity(LiveActor*, float, float, float, float, float)=0x80012500
MR::sendMsgPushAndKillVelocityToTarget(LiveActor*, HitSensor*, HitSensor*)=0x80012850
MR::addVelocityFromPush(LiveActor*, float, HitSensor*, HitSensor*)=0x80012920
MR::addVelocityFromPushHorizon(LiveActor*, float, HitSensor*, HitSensor*)=0x800129E0
MR::addVelocitySeparateHV(LiveActor*, HitSensor*, HitSensor*, float, float)=0x80012A80
MR::setVelocitySeparateHV(LiveActor*, HitSensor*, HitSensor*, float, float)=0x80012B00
MR::reflectVelocityH(LiveActor*, HitSensor*, HitSensor*, float)=0x80012C50
MR::calcVelocityAreaMoveOnGround(JGeometry::TVec3<float>*, const LiveActor*)=0x80012D00
MR::calcVelocityRailMoveOnGround(JGeometry::TVec3<float>*, const LiveActor*)=0x80012D70
MR::calcVelocityAreaOrRailMoveOnGround(JGeometry::TVec3<float>*, const LiveActor*)=0x80012E50
MR::rotateDirectionGravityDegree(const LiveActor*, JGeometry::TVec3<float>*, float)=0x80012F30
MR::turnDirection(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x80012F40
MR::turnDirectionDegree(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x80012F60
MR::cosDegree(float)=0x80012FB0
MR::turnDirectionToTarget(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x80013000
MR::turnDirectionToTargetDegree(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x80013070
MR::turnDirectionToTargetDegreeHorizon(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x800130F0
MR::turnDirectionToTargetUseGroundNormalDegree(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x80013180
MR::turnDirectionToPlayerDegree(const LiveActor*, JGeometry::TVec3<float>*, float)=0x800132A0
MR::turnDirectionToPlayerDegreeHorizon(const LiveActor*, JGeometry::TVec3<float>*, float)=0x80013300
MR::turnDirectionFromTargetDegree(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x80013360
MR::turnDirectionFromTargetDegreeHorizon(const LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x800133E0
MR::turnDirectionFromPlayerDegree(const LiveActor*, JGeometry::TVec3<float>*, float)=0x80013470
MR::turnDirectionFromPlayerDegreeHorizon(const LiveActor*, JGeometry::TVec3<float>*, float)=0x800134D0
MR::turnDirectionToGround(const LiveActor*, JGeometry::TVec3<float>*)=0x80013530
MR::moveAndTurnToDirection(LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, float, float, float)=0x800135C0
MR::moveAndTurnToTarget(LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, float, float, float)=0x800136C0
MR::moveAndTurnToPlayer(LiveActor*, JGeometry::TVec3<float>*, float, float, float, float)=0x80013750
JGeometry::TVec3<float>::__ct<int>(int, int, int, _Pv)=0x80013990
MR::flyAndTurnAlongRailSearchingPlayer(LiveActor*, JGeometry::TVec3<float>*, float, float, float, float, float, bool)=0x800139F0
MR::escapeFromPlayer(LiveActor*, JGeometry::TVec3<float>*, float, float, float, float)=0x80013B40
MR::calcRotate(LiveActor*, const JGeometry::TVec3<float>&, float)=0x80013BE0
std::atan2(float, float)=0x80013DF0
MR::moveAndTurnToDirection(LiveActor*, const JGeometry::TVec3<float>&, float, float, float, float)=0x80013E20
MR::moveAndTurnToTarget(LiveActor*, const JGeometry::TVec3<float>&, float, float, float, float)=0x80013EB0
MR::moveAndTurnToPlayer(LiveActor*, float, float, float, float)=0x80013F70
MR::moveAndTurnAlongRail(LiveActor*, float, float, float, float, float, bool*)=0x80013FE0
MR::setSensorFollowPos(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x80014680
MR::setSensorFollowMtx(LiveActor*, const char*, A4_f)=0x800146C0
MR::addHitSensor(LiveActor*, const char*, unsigned long, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014700
MR::addHitSensorBinder(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014740
MR::addHitSensorPriorBinder(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014780
MR::addHitSensorRide(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x800147C0
MR::addHitSensorMapObj(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014800
MR::addHitSensorMapObjSimple(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014840
MR::addHitSensorMapObjMoveCollision(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014880
MR::addHitSensorEnemy(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x800148C0
MR::addHitSensorEnemyAttack(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014900
MR::addHitSensorNpc(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014940
MR::addHitSensorEye(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014980
MR::addHitSensorPush(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x800149C0
MR::addHitSensorPosRide(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80014A00
MR::addHitSensorPosMapObj(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80014A60
MR::addHitSensorPosEnemyAttack(LiveActor*, const char*, unsigned short, float, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80014AC0
MR::addHitSensorMtx(LiveActor*, const char*, unsigned long, unsigned short, float, A4_fRCQ29JGeometry8TVec3<float>)=0x80014B20
MR::addHitSensorMtxRide(LiveActor*, const char*, unsigned short, float, A4_fRCQ29JGeometry8TVec3<float>)=0x80014B70
MR::addHitSensorMtxEnemy(LiveActor*, const char*, unsigned short, float, A4_fRCQ29JGeometry8TVec3<float>)=0x80014BD0
MR::addHitSensorMtxEnemyAttack(LiveActor*, const char*, unsigned short, float, A4_fRCQ29JGeometry8TVec3<float>)=0x80014C30
MR::addHitSensorMtxAnimal(LiveActor*, const char*, unsigned short, float, A4_fRCQ29JGeometry8TVec3<float>)=0x80014C90
MR::addHitSensorAtJoint(LiveActor*, const char*, const char*, unsigned long, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014CF0
MR::addHitSensorAtJointMapObj(LiveActor*, const char*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014D80
MR::addHitSensorAtJointMapObjSimple(LiveActor*, const char*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014E10
MR::addHitSensorAtJointEnemy(LiveActor*, const char*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014EA0
MR::addHitSensorAtJointEnemyAttack(LiveActor*, const char*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014F30
MR::addHitSensorAtJointNpc(LiveActor*, const char*, const char*, unsigned short, float, const JGeometry::TVec3<float>&)=0x80014FC0
MR::addHitSensorCallback(LiveActor*, const char*, unsigned long, unsigned short, float)=0x80015050
MR::addHitSensorCallbackBinder(LiveActor*, const char*, unsigned short, float)=0x80015080
MR::addHitSensorCallbackPriorBinder(LiveActor*, const char*, unsigned short, float)=0x800150C0
MR::addHitSensorCallbackRide(LiveActor*, const char*, unsigned short, float)=0x80015100
MR::addHitSensorCallbackMapObj(LiveActor*, const char*, unsigned short, float)=0x80015140
MR::addHitSensorCallbackEnemyAttack(LiveActor*, const char*, unsigned short, float)=0x80015180
MR::addHitSensorCallbackEye(LiveActor*, const char*, unsigned short, float)=0x800151C0
MR::addBodyMessageSensor(LiveActor*, unsigned long)=0x80015200
MR::addBodyMessageSensorReceiver(LiveActor*)=0x80015270
MR::addBodyMessageSensorMapObj(LiveActor*)=0x80015280
MR::addBodyMessageSensorMapObjPress(LiveActor*)=0x80015290
MR::addBodyMessageSensorEnemy(LiveActor*)=0x800152A0
MR::addMessageSensorReceiver(LiveActor*, const char*)=0x800152B0
MR::addHitSensorMapObj(LiveActor*, const char*)=0x80015320
MR::tryUpdateHitSensorsAll(LiveActor*)=0x80015390
MR::updateHitSensorsAll(LiveActor*)=0x800153D0
MR::isSensorType(const HitSensor*, unsigned long)=0x800153E0
MR::setSensorType(LiveActor*, const char*, unsigned long)=0x800153F0
MR::isSensorValid(const HitSensor*)=0x80015430
MR::getSensorWithIndex(LiveActor*, int)=0x80015460
MR::getTaken(const LiveActor*)=0x80015490
MR::setSensorPos(HitSensor*, const JGeometry::TVec3<float>&)=0x800154B0
MR::setSensorPos(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x800154C0
MR::setSensorOffset(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x80015500
MR::getSensorRadius(HitSensor*)=0x80015540
MR::getSensorRadius(LiveActor*, const char*)=0x80015550
MR::setSensorRadius(HitSensor*, float)=0x80015580
MR::setSensorRadius(LiveActor*, const char*, float)=0x80015590
MR::scaleAllSensorRadius(LiveActor*, float)=0x800155D0
MR::getSensorHostPos(const HitSensor*)=0x80015650
MR::getSensorHostGravity(const HitSensor*)=0x80015660
MR::validateHitSensors(LiveActor*)=0x80015670
MR::invalidateHitSensors(LiveActor*)=0x80015690
MR::validateHitSensor(HitSensor*)=0x800156B0
MR::invalidateHitSensor(HitSensor*)=0x800156C0
MR::validateHitSensor(LiveActor*, const char*)=0x800156D0
MR::invalidateHitSensor(LiveActor*, const char*)=0x80015700
MR::tryValidateHitSensor(LiveActor*, const char*)=0x80015730
MR::tryInvalidateHitSensor(LiveActor*, const char*)=0x800157A0
MR::clearHitSensors(LiveActor*)=0x80015810
MR::getSensorNum(const LiveActor*)=0x80015830
MR::getSensor(LiveActor*, int)=0x80015850
MR::getSensorHost(const HitSensor*)=0x80015880
MR::isSensor(const HitSensor*, const char*)=0x80015890
MR::isSensorPlayer(const HitSensor*)=0x800158D0
MR::isSensorYoshi(const HitSensor*)=0x800158E0
MR::isSensorBinder(const HitSensor*)=0x800158F0
MR::isSensorReceiver(const HitSensor*)=0x80015900
MR::isSensorRide(const HitSensor*)=0x80015910
MR::isSensorPlayerOrRide(const HitSensor*)=0x80015940
MR::isSensorPlayerOrYoshi(const HitSensor*)=0x80015980
MR::isSensorPlayerOrYoshiOrRide(const HitSensor*)=0x800159E0
MR::isSensorEnemy(const HitSensor*)=0x80015A40
MR::isSensorEnemyAttack(const HitSensor*)=0x80015A70
MR::isSensorNpc(const HitSensor*)=0x80015A80
MR::isSensorMapObj(const HitSensor*)=0x80015AA0
MR::isSensorAutoRush(const HitSensor*)=0x80015AD0
MR::isSensorRush(const HitSensor*)=0x80015B00
MR::isSensorPressObj(const HitSensor*)=0x80015B30
MR::isSensorEye(const HitSensor*)=0x80015B50
MR::isSensorPush(const HitSensor*)=0x80015B60
MR::isSensorItem(const HitSensor*)=0x80015B70
MR::isSensorGhost(const HitSensor*)=0x80015BE0
MR::tryGetItem(HitSensor*, HitSensor*)=0x80015BF0
MR::getSensorPos(const HitSensor*)=0x80015C00
MR::getSensorPos(const LiveActor*, const char*)=0x80015C10
MR::calcSensorDirection(JGeometry::TVec3<float>*, const HitSensor*, const HitSensor*)=0x80015C80
MR::calcSensorDirectionNormalize(JGeometry::TVec3<float>*, const HitSensor*, const HitSensor*)=0x80015CE0
MR::calcSensorDistance(const HitSensor*, const HitSensor*)=0x80015D60
MR::calcSensorHorizonNormalize(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const HitSensor*, const HitSensor*)=0x80015D70
MR::getMessageSensor(void)=0x80015DF0
MR::sendArbitraryMsg(unsigned long, HitSensor*, HitSensor*)=0x80015E20
MR::sendMsgPush(HitSensor*, HitSensor*)=0x80015E30
MR::sendMsgReflect(HitSensor*, HitSensor*)=0x80015E40
MR::sendMsgReflectV(HitSensor*, HitSensor*)=0x80015E50
MR::sendMsgPlayerTrample(HitSensor*, HitSensor*)=0x80015E70
MR::sendMsgPlayerPunch(HitSensor*, HitSensor*)=0x80015E80
MR::sendMsgInvincibleAttack(HitSensor*, HitSensor*)=0x80015E90
MR::sendMsgDrillAttack(HitSensor*, HitSensor*)=0x80015EA0
MR::sendMsgRockAttack(HitSensor*, HitSensor*)=0x80015EB0
MR::sendMsgJump(HitSensor*, HitSensor*)=0x80015EC0
MR::sendMsgTouchJump(HitSensor*, HitSensor*)=0x80015ED0
MR::sendMsgTaken(HitSensor*, HitSensor*)=0x80015EE0
MR::sendMsgAwayJump(HitSensor*, HitSensor*)=0x80015EF0
MR::sendMsgRushEnd(HitSensor*, HitSensor*)=0x80015F10
MR::sendMsgIsRushEnable(HitSensor*, HitSensor*)=0x80015F20
MR::sendMsgEnemyAttackMsgToDir(unsigned long, HitSensor*, HitSensor*, const JGeometry::TVec3<float>&)=0x80015F30
MR::sendMsgEnemyAttackFlipVeryWeak(HitSensor*, HitSensor*)=0x80015FB0
MR::sendMsgEnemyAttackFlipWeak(HitSensor*, HitSensor*)=0x80015FC0
MR::sendMsgEnemyAttackFlipWeakJump(HitSensor*, HitSensor*)=0x80015FD0
MR::sendMsgEnemyAttackFlip(HitSensor*, HitSensor*)=0x80015FE0
MR::sendMsgEnemyAttackFlipToDir(HitSensor*, HitSensor*, const JGeometry::TVec3<float>&)=0x80015FF0
MR::sendMsgEnemyAttackFlipJump(HitSensor*, HitSensor*)=0x80016010
MR::sendMsgEnemyAttackFlipRot(HitSensor*, HitSensor*)=0x80016020
MR::sendMsgEnemyAttackFlipMaximumToDir(HitSensor*, HitSensor*, const JGeometry::TVec3<float>&)=0x80016030
MR::sendMsgEnemyAttack(HitSensor*, HitSensor*)=0x80016050
MR::sendMsgEnemyAttackOrPush(HitSensor*, HitSensor*)=0x80016060
MR::sendMsgEnemyAttackStrong(HitSensor*, HitSensor*)=0x800160D0
MR::sendMsgEnemyAttackStrongOrPush(HitSensor*, HitSensor*)=0x800160E0
MR::sendMsgEnemyAttackStrongToDir(HitSensor*, HitSensor*, const JGeometry::TVec3<float>&)=0x80016150
MR::sendMsgEnemyAttackFire(HitSensor*, HitSensor*)=0x80016170
MR::sendMsgEnemyAttackFireStrong(HitSensor*, HitSensor*)=0x80016180
MR::sendMsgEnemyAttackElectric(HitSensor*, HitSensor*)=0x80016190
MR::sendMsgEnemyAttackFreeze(HitSensor*, HitSensor*)=0x800161A0
MR::sendMsgEnemyAttackExplosion(HitSensor*, HitSensor*)=0x800161B0
MR::sendMsgEnemyAttackCounterSpin(HitSensor*, HitSensor*)=0x800161C0
MR::sendMsgEnemyAttackCounterHipDrop(HitSensor*, HitSensor*)=0x800161D0
MR::sendMsgLockOnStarPieceShoot(HitSensor*, HitSensor*)=0x800161E0
MR::sendMsgStarPieceAttack(HitSensor*, HitSensor*)=0x800161F0
MR::sendMsgStarPieceGift(HitSensor*, HitSensor*, unsigned long)=0x80016200
MR::sendMsgEnemyAttackMaximum(HitSensor*, HitSensor*)=0x80016210
MR::sendMsgEnemyAttackMaximumToDir(HitSensor*, HitSensor*, const JGeometry::TVec3<float>&)=0x80016220
MR::sendMsgEnemyAttackToBindedSensor(LiveActor*, HitSensor*)=0x80016240
MR::sendMsgEnemyAttackExplosionToBindedSensor(LiveActor*, HitSensor*)=0x80016250
MR::sendSimpleMsgToActor(unsigned long, LiveActor*)=0x800162D0
MR::sendMsgToBindedSensor(unsigned long, LiveActor*, HitSensor*)=0x80016350
MR::sendMsgToBindedSensor(unsigned long, HitSensor*)=0x80016420
MR::sendMsgToGroundSensor(unsigned long, HitSensor*)=0x80016430
MR::sendMsgToWallSensor(unsigned long, HitSensor*)=0x80016490
MR::sendMsgToRoofSensor(unsigned long, HitSensor*)=0x800164F0
MR::sendMsgToEnemyAttackBlow(HitSensor*, HitSensor*)=0x800165C0
MR::sendMsgToEnemyAttackTrample(HitSensor*, HitSensor*)=0x80016600
MR::sendMsgToEnemyAttackBlowOrTrample(HitSensor*, HitSensor*, float)=0x80016620
MR::sendMsgToEnemyAttackShockWave(HitSensor*, HitSensor*)=0x800166C0
MR::sendMsgToAllLiveActor(unsigned long, LiveActor*)=0x800166D0
MR::sendMsgToGroupMember(unsigned long, LiveActor*, HitSensor*, const char*)=0x80016790
MR::sendMsgExplosionToNearActor(HitSensor*, float)=0x800168A0
MR::isInSpinStormRange(unsigned long, HitSensor*, HitSensor*, float)=0x80016950
MR::receiveItemShowMsg(unsigned long, HitSensor*, HitSensor*)=0x800169A0
MR::receiveItemHideMsg(unsigned long, HitSensor*, HitSensor*)=0x80016A00
MR::getGroundSensor(const LiveActor*)=0x80016A60
MR::getRoofSensor(const LiveActor*)=0x80016A70
MR::getWallSensor(const LiveActor*)=0x80016A80
MR::isMsgPlayerHitAll(unsigned long)=0x80016AA0
MR::isMsgPlayerSpinAttack(unsigned long)=0x80016B00
MR::isMsgPlayerSpinAttackOrSupportTico(unsigned long)=0x80016B10
MR::isMsgPlayerTrample(unsigned long)=0x80016B30
MR::isMsgPlayerHipDrop(unsigned long)=0x80016B40
MR::isMsgPlayerHipDropFloor(unsigned long)=0x80016B50
MR::isMsgPlayerUpperPunch(unsigned long)=0x80016B60
MR::isMsgPlayerKick(unsigned long)=0x80016B70
MR::isMsgJetTurtleAttack(unsigned long)=0x80016BE0
MR::isMsgYoshiProjectile(unsigned long)=0x80016BF0
MR::isMsgYoshiEat(unsigned long)=0x80016C00
MR::isMsgYoshiProjectileOrEat(unsigned long)=0x80016C10
MR::isMsgFireBallAttack(unsigned long)=0x80016C30
MR::isMsgSearchlightAttack(unsigned long)=0x80016C40
MR::isMsgFreezeAttack(unsigned long)=0x80016C50
MR::isMsgInvincibleAttack(unsigned long)=0x80016C60
MR::isMsgDrillAttack(unsigned long)=0x80016C70
MR::isMsgRockAttack(unsigned long)=0x80016C80
MR::isMsgSnowBallAttack(unsigned long)=0x80016C90
MR::isMsgSupportTicoSpin(unsigned long)=0x80016CA0
MR::isMsgAutoRushBegin(unsigned long)=0x80016CB0
MR::isMsgRushBegin(unsigned long)=0x80016CC0
MR::isMsgUpdateBaseMtx(unsigned long)=0x80016CE0
MR::isMsgRushForceCancel(unsigned long)=0x80016CF0
MR::isMsgRushCancel(unsigned long)=0x80016D00
MR::isMsgRushEnd(unsigned long)=0x80016D10
MR::isMsgIsRushEnable(unsigned long)=0x80016D20
MR::isMsgIsRushTakeOver(unsigned long)=0x80016D30
MR::isMsgFloorTouch(unsigned long)=0x80016D40
MR::isMsgWallTouch(unsigned long)=0x80016D50
MR::isMsgCeilTouch(unsigned long)=0x80016D70
MR::isMsgItemGet(unsigned long)=0x80016D80
MR::isMsgItemPull(unsigned long)=0x80016D90
MR::isMsgItemShow(unsigned long)=0x80016DA0
MR::isMsgItemHide(unsigned long)=0x80016DB0
MR::isMsgItemStartMove(unsigned long)=0x80016DD0
MR::isMsgItemEndMove(unsigned long)=0x80016DE0
MR::isMsgInhaleBlackHole(unsigned long)=0x80016E30
MR::isMsgEnemyAttack(unsigned long)=0x80016E50
MR::isMsgEnemyAttackFire(unsigned long)=0x80016E60
MR::isMsgEnemyAttackFireStrong(unsigned long)=0x80016E70
MR::isMsgEnemyAttackElectric(unsigned long)=0x80016E80
MR::isMsgExplosionAttack(unsigned long)=0x80016E90
MR::isMsgToEnemyAttackBlow(unsigned long)=0x80016EA0
MR::isMsgToEnemyAttackTrample(unsigned long)=0x80016EC0
MR::isMsgToEnemyAttackShockWave(unsigned long)=0x80016EF0
MR::isMsgSpinStormRange(unsigned long)=0x80016F00
MR::isMsgSuccess(unsigned long)=0x80016F10
MR::isMsgRaceReady(unsigned long)=0x80016F20
MR::isMsgRaceStart(unsigned long)=0x80016F30
MR::isMsgRaceReset(unsigned long)=0x80016F40
MR::isMsgLockOnStarPieceShoot(unsigned long)=0x80016F50
MR::isMsgBallDashWall(unsigned long)=0x80016F60
MR::isMsgBallDashGround(unsigned long)=0x80016F70
MR::isMsgStartPowerStarGet(unsigned long)=0x80016F80
MR::isMsgTouchPlantItem(unsigned long)=0x80016F90
MR::isMsgHitmarkEmit(unsigned long)=0x80016FA0
MR::isMsgStarPieceAttack(unsigned long)=0x80016FB0
MR::isMsgStarPieceReflect(unsigned long)=0x80016FC0
MR::isMsgStarPieceGift(unsigned long)=0x80016FD0
MR::isMsgGroupMoveStart(unsigned long)=0x80017030
MR::isMsgGroupMoveStop(unsigned long)=0x80017040
MR::isMsgGroupShow(unsigned long)=0x80017050
MR::isMsgGroupHide(unsigned long)=0x80017060
MR::calcPosBetweenSensors(JGeometry::TVec3<float>*, const HitSensor*, const HitSensor*, float)=0x80017080
MR::tryForceKillIfMsgStartPowerStarGet(LiveActor*, unsigned long)=0x80017180
MR::initShadowFromCSV(LiveActor*, const char*, bool)=0x800171F0
ActorShadow::getShadowControllerCount(const LiveActor*)=0x80017340
ActorShadow::getShadowController(const LiveActor*, unsigned long)=0x80017360
ActorShadow::getShadowController(const LiveActor*, const char*)=0x80017370
ActorShadow::isExistShadowController(const LiveActor*, const char*)=0x80017380
ActorShadow::createShadowControllerVolumeParam(LiveActor*, const char*)=0x800173C0
ActorShadow::createShadowControllerSuefaceParam(LiveActor*, const char*)=0x80017460
ActorShadow::getShadowSurfaceOval(const LiveActor*, const char*)=0x80017500
ActorShadow::getShadowVolumeSphere(const LiveActor*, const char*)=0x80017530
ActorShadow::getShadowVolumeCylinder(const LiveActor*, const char*)=0x80017560
ActorShadow::getShadowVolumeBox(const LiveActor*, const char*)=0x80017590
ActorShadow::getShadowVolumeDrawer(const LiveActor*, const char*)=0x800175C0
JMapInfoIter::getValue<const char*>(const char*, const char*, _b) const=0x800175F0
ActorShadow::getJointNameFromCSV(const char*, const JMapInfoIter&)=0x80017660
ActorShadow::getShadowTypeFromCSV(const JMapInfoIter&)=0x800176D0
ActorShadow::setUpShadowControlBaseMtxFromCSV(ShadowController*, LiveActor*, const JMapInfoIter&)=0x80017760
ActorShadow::setUpShadowControlIsFollowScaleFromCSV(ShadowController*, const JMapInfoIter&)=0x80017910
JMapInfoIter::getValue<bool>(const char*, bool*, _b) const=0x80017980
ActorShadow::setUpShadowControlIsSyncShowFromCSV(ShadowController*, const JMapInfoIter&)=0x80017A10
ActorShadow::setUpShadowControlCalcCollisionFromCSV(ShadowController*, const JMapInfoIter&)=0x80017A80
ActorShadow::setUpShadowControlCalcGravityFromCSV(ShadowController*, const JMapInfoIter&)=0x80017B10
ActorShadow::setUpShadowControlFromCSV(ShadowController*, LiveActor*, const JMapInfoIter&)=0x80017BD0
ActorShadow::createShadowControlFromCSV(LiveActor*, const JMapInfoIter&)=0x80017CA0
ActorShadow::setUpShadowVolumeFromCSV(ShadowVolumeDrawer*, const JMapInfoIter&)=0x80017D70
ActorShadow::createShadowSurfaceCircleFromCSV(LiveActor*, const JMapInfoIter&)=0x80017E30
ActorShadow::createShadowSurfaceOvalFromCSV(LiveActor*, const JMapInfoIter&)=0x80017EC0
ActorShadow::createShadowSurfaceBoxFromCSV(LiveActor*, const JMapInfoIter&)=0x80017F60
ActorShadow::createShadowVolumeSphereFromCSV(LiveActor*, const JMapInfoIter&)=0x80018000
ActorShadow::createShadowVolumeOvalFromCSV(LiveActor*, const JMapInfoIter&)=0x800180A0
ActorShadow::createShadowVolumeOvalPoleFromCSV(LiveActor*, const JMapInfoIter&)=0x80018150
ActorShadow::createShadowVolumeCylinderFromCSV(LiveActor*, const JMapInfoIter&)=0x80018200
ActorShadow::createShadowVolumeBoxFromCSV(LiveActor*, const JMapInfoIter&)=0x800182A0
ActorShadow::createShadowVolumeFlatModelFromCSV(LiveActor*, const JMapInfoIter&)=0x80018350
ActorShadow::createShadowVolumeLineFromCSV(LiveActor*, const JMapInfoIter&)=0x800183F0
ActorShadow::addShadowFromCSV(LiveActor*, const JMapInfoIter&)=0x80018520
MR::initShadowFromCSVWithInitShadowVolumeSphere(LiveActor*, const char*)=0x80018620
MR::initShadowFromCSVWithoutInitShadowVolumeSphere(LiveActor*, const char*)=0x80018630
MR::initShadowControllerList(LiveActor*, unsigned long)=0x80018640
MR::addShadowVolumeOval(LiveActor*, const char*, const JGeometry::TVec3<float>&, A4_f)=0x80018650
MR::addShadowVolumeCylinder(LiveActor*, const char*, float)=0x800186F0
MR::addShadowVolumeBox(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x80018770
MR::addShadowVolumeBox(LiveActor*, const char*, const JGeometry::TVec3<float>&, A4_f)=0x800187D0
MR::addShadowVolumeLine(LiveActor*, const char*, LiveActor*, const char*, float, LiveActor*, const char*, float)=0x80018870
MR::addShadowVolumeFlatModel(LiveActor*, const char*, const char*, A4_f)=0x80018950
MR::initShadowSurfaceCircle(LiveActor*, float)=0x800189E0
MR::initShadowVolumeSphere(LiveActor*, float)=0x80018A70
MR::initShadowVolumeOval(LiveActor*, const JGeometry::TVec3<float>&)=0x80018B00
MR::initShadowVolumeCylinder(LiveActor*, float)=0x80018B70
MR::initShadowVolumeFlatModel(LiveActor*, const char*, A4_f)=0x80018BC0
MR::setShadowDropPositionPtr(LiveActor*, const char*, const JGeometry::TVec3<float>*)=0x80018C20
MR::setShadowDropPositionMtxPtr(LiveActor*, const char*, A4_fRCQ29JGeometry8TVec3<float>)=0x80018C60
MR::setShadowDropPositionAtJoint(LiveActor*, const char*, const char*, const JGeometry::TVec3<float>&)=0x80018CB0
MR::setShadowDropDirectionPtr(LiveActor*, const char*, const JGeometry::TVec3<float>*)=0x80018D10
MR::setShadowDropDirectionPtrAll(LiveActor*, const JGeometry::TVec3<float>*)=0x80018D50
MR::setShadowProjectionPtr(LiveActor*, const char*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*)=0x80018DC0
MR::setShadowDropPosition(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x80018E10
MR::setShadowDropDirection(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x80018E50
MR::setShadowDropLength(LiveActor*, const char*, float)=0x80018E90
MR::setShadowProjection(LiveActor*, const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x80018ED0
MR::setShadowSurfaceOvalColor(LiveActor*, const char*, Color8)=0x80018F20
MR::setShadowSurfaceOvalAlpha(LiveActor*, const char*, unsigned char)=0x80018F60
MR::setShadowVolumeSphereRadius(LiveActor*, const char*, float)=0x80018FA0
MR::setShadowVolumeCylinderRadius(LiveActor*, const char*, float)=0x80018FE0
MR::setShadowVolumeBoxSize(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x80019020
MR::setShadowVolumeStartDropOffset(LiveActor*, const char*, float)=0x80019060
MR::setShadowVolumeEndDropOffset(LiveActor*, const char*, float)=0x800190A0
MR::onShadowVolumeCutDropLength(LiveActor*, const char*)=0x800190E0
MR::onCalcShadow(LiveActor*, const char*)=0x80019110
MR::offCalcShadow(LiveActor*, const char*)=0x80019150
MR::onCalcShadowOneTime(LiveActor*, const char*)=0x80019190
MR::onCalcShadowAll(LiveActor*)=0x800191D0
MR::offCalcShadowAll(LiveActor*)=0x80019230
MR::onCalcShadowOneTimeAll(LiveActor*)=0x80019290
MR::onCalcShadowDropGravity(LiveActor*, const char*)=0x800192F0
MR::onCalcShadowDropGravityOneTime(LiveActor*, const char*)=0x80019320
MR::onCalcShadowDropPrivateGravity(LiveActor*, const char*)=0x80019350
MR::onCalcShadowDropPrivateGravityOneTime(LiveActor*, const char*)=0x80019380
MR::offCalcShadowDropPrivateGravity(LiveActor*, const char*)=0x800193B0
MR::excludeCalcShadowToMyCollision(LiveActor*, const char*)=0x800193E0
MR::excludeCalcShadowToCollision(LiveActor*, const char*, CollisionParts*)=0x80019410
MR::excludeCalcShadowToSensorAll(LiveActor*, const HitSensor*)=0x800194A0
MR::excludeCalcShadowToActorAll(LiveActor*, const LiveActor*)=0x80019530
MR::isExistShadow(const LiveActor*, const char*)=0x800195C0
MR::isExistShadows(const LiveActor*)=0x800195D0
MR::invalidateShadow(LiveActor*, const char*)=0x80019600
MR::validateShadow(LiveActor*, const char*)=0x80019640
MR::validateShadowGroup(LiveActor*, const char*)=0x80019680
MR::invalidateShadowAll(LiveActor*)=0x80019700
MR::validateShadowAll(LiveActor*)=0x80019760
MR::offShadowVisibleSyncHost(LiveActor*, const char*)=0x800197C0
MR::onShadowVisibleSyncHostAll(LiveActor*)=0x80019800
MR::offShadowVisibleSyncHostAll(LiveActor*)=0x80019860
MR::onShadowFollowHostScale(LiveActor*, const char*)=0x800198C0
MR::onShadowFollowHostScaleAll(LiveActor*)=0x80019900
MR::calcClippingRangeIncludeShadow(JGeometry::TVec3<float>*, float*, const LiveActor*, float)=0x80019960
MR::setClippingRangeIncludeShadow(LiveActor*, JGeometry::TVec3<float>*, float)=0x80019A90
MR::isShadowProjected(const LiveActor*, const char*)=0x80019B20
MR::getShadowProjectionPos(const LiveActor*, const char*, JGeometry::TVec3<float>*)=0x80019B50
MR::getShadowProjectionNormal(const LiveActor*, const char*, JGeometry::TVec3<float>*)=0x80019B90
MR::getShadowProjectionLength(const LiveActor*, const char*)=0x80019BD0
MR::getShadowProjectedSensor(const LiveActor*, const char*)=0x80019C20
MR::isShadowProjectedAny(const LiveActor*)=0x80019C50
MR::getShadowNearProjectionLength(const LiveActor*)=0x80019CC0
MR::clamp(long, long, long)=0x80019E00
MR::initActorState(LiveActor*, ActorStateBaseInterface*, const Nerve*, const char*)=0x80019ED0
ActorStateBaseInterface::init(void)=0x80019F40
MR::initActorState(NerveExecutor*, ActorStateBaseInterface*, const Nerve*, const char*)=0x80019F50
MR::updateActorState(LiveActor*)=0x80019FC0
MR::updateActorState(LiveActor*, ActorStateBaseInterface*)=0x80019FD0
ActorStateBaseInterface::appear(void)=0x8001A060
ActorStateBaseInterface::kill(void)=0x8001A070
MR::updateActorStateAndNextNerve(LiveActor*, const Nerve*)=0x8001A080
MR::updateActorStateAndNextNerve(LiveActor*, ActorStateBaseInterface*, const Nerve*)=0x8001A0E0
MR::updateActorState(NerveExecutor*)=0x8001A140
MR::updateActorState(NerveExecutor*, ActorStateBaseInterface*)=0x8001A150
MR::updateActorStateAndNextNerve(NerveExecutor*, const Nerve*)=0x8001A1E0
MR::updateActorStateAndNextNerve(NerveExecutor*, ActorStateBaseInterface*, const Nerve*)=0x8001A240
MR::useStageSwitchReadA(LiveActor*, const JMapInfoIter&)=0x8001A2C0
MR::useStageSwitchReadB(LiveActor*, const JMapInfoIter&)=0x8001A340
MR::useStageSwitchReadAppear(LiveActor*, const JMapInfoIter&)=0x8001A3C0
MR::useStageSwitchWriteA(LiveActor*, const JMapInfoIter&)=0x8001A440
MR::useStageSwitchWriteB(LiveActor*, const JMapInfoIter&)=0x8001A4C0
MR::initUseStageSwitchReadA(LiveActor*, const JMapInfoIter&)=0x8001A540
MR::initUseStageSwitchReadB(LiveActor*, const JMapInfoIter&)=0x8001A550
MR::initUseStageSwitchReadAppear(LiveActor*, const JMapInfoIter&)=0x8001A560
MR::useStageSwitchAwake(LiveActor*, const JMapInfoIter&)=0x8001A570
MR::initUseStageSwitchWriteA(LiveActor*, const JMapInfoIter&)=0x8001A580
MR::initUseStageSwitchWriteB(LiveActor*, const JMapInfoIter&)=0x8001A590
MR::useStageSwitchWriteDead(LiveActor*, const JMapInfoIter&)=0x8001A5A0
MR::initUseStageSwitchWriteDead(LiveActor*, const JMapInfoIter&)=0x8001A620
MR::useStageSwitchWriteAutoDead(LiveActor*, const JMapInfoIter&)=0x8001A630
MR::needStageSwitchReadA(LiveActor*, const JMapInfoIter&)=0x8001A670
MR::needStageSwitchReadB(LiveActor*, const JMapInfoIter&)=0x8001A680
MR::needStageSwitchReadAppear(LiveActor*, const JMapInfoIter&, _0)=0x8001A690
MR::needStageSwitchWriteA(LiveActor*, const JMapInfoIter&)=0x8001A6A0
MR::needStageSwitchWriteB(LiveActor*, const JMapInfoIter&)=0x8001A6B0
MR::needStageSwitchWriteDead(LiveActor*, const JMapInfoIter&)=0x8001A6C0
MR::needStageSwitchWriteAutoDead(LiveActor*, const JMapInfoIter&)=0x8001A6D0
MR::isValidSwitchA(const LiveActor*)=0x8001A710
MR::isValidSwitchB(const LiveActor*)=0x8001A760
MR::isValidSwitchAppear(const LiveActor*)=0x8001A7B0
MR::isValidSwitchDead(const LiveActor*)=0x8001A800
MR::isOnSwitchA(const LiveActor*)=0x8001A850
MR::isOnSwitchB(const LiveActor*)=0x8001A8A0
MR::isOnSwitchAppear(const LiveActor*)=0x8001A8F0
MR::onSwitchA(LiveActor*)=0x8001A940
MR::onSwitchB(LiveActor*)=0x8001A950
MR::onSwitchDead(LiveActor*)=0x8001A960
MR::offSwitchA(LiveActor*)=0x8001A970
MR::offSwitchB(LiveActor*)=0x8001A980
MR::offSwitchDead(LiveActor*)=0x8001A990
MR::syncStageSwitchAppear(LiveActor*)=0x8001A9A0
MR::useStageSwitchSyncAppear(LiveActor*, const JMapInfoIter&)=0x8001AA10
MR::syncStageSwitchAppearAndSync(LiveActor*, const JMapInfoIter&)=0x8001AAB0
MR::listenStageSwitchOnAppear(LiveActor*, const MR::FunctorBase&)=0x8001AAF0
MR::listenStageSwitchOnOffAppear(LiveActor*, const MR::FunctorBase&, const MR::FunctorBase&)=0x8001AB00
MR::listenStageSwitchOnA(LiveActor*, const MR::FunctorBase&)=0x8001AB20
MR::listenStageSwitchOnOffA(LiveActor*, const MR::FunctorBase&, const MR::FunctorBase&)=0x8001AB30
MR::listenStageSwitchOnB(LiveActor*, const MR::FunctorBase&)=0x8001AB50
MR::listenStageSwitchOffB(LiveActor*, const MR::FunctorBase&)=0x8001AB60
MR::listenStageSwitchOnOffB(LiveActor*, const MR::FunctorBase&, const MR::FunctorBase&)=0x8001AB70
MR::useStageSwitchReadParam(LiveActor*, const JMapInfoIter&)=0x8001AB90
MR::isValidSwitchParam(const LiveActor*)=0x8001AC10
MR::isOnSwitchParam(const LiveActor*)=0x8001AC60
MR::startStageBGM(const char*, bool)=0x8001ACD0
MR::startStageBGMFromStageName(const char*, const char*, long)=0x8001AD40
MR::stopStageBGM(unsigned long)=0x8001ADF0
MR::unlockStageBGM(void)=0x8001AE40
MR::moveVolumeStageBGM(float, unsigned long)=0x8001AE90
MR::moveVolumeStageBGMForNoteFairy(float, unsigned long)=0x8001AEF0
MR::isPlayingStageBgm(void)=0x8001B090
MR::isPlayingStageBgmID(unsigned long)=0x8001B0E0
MR::isPlayingStageBgmName(const char*)=0x8001B170
MR::isPreparedStageBgm(void)=0x8001B1B0
MR::setStageBGMState(long, unsigned long)=0x8001B1F0
MR::setStageBGMStateBit(unsigned long)=0x8001B250
MR::startSubBGM(const char*, bool)=0x8001B5F0
MR::stopSubBGM(unsigned long)=0x8001B640
MR::moveVolumeSubBGM(float, unsigned long)=0x8001B690
MR::isPlayingSubBgmID(unsigned long)=0x8001B6F0
MR::startBossBGM(long)=0x8001B780
MR::startDepartBGM(void)=0x8001B930
MR::startGliderBGM(void)=0x8001B940
MR::startMinigameBGM(void)=0x8001B9E0
MR::startBossRushBGM(void)=0x8001BAE0
MR::startAfterBossRushBGM(void)=0x8001BB20
MR::startStarChanceBGM(bool)=0x8001BBD0
MR::startMarioFaceShipBGM(void)=0x8001BDA0
MR::startGrandStarReturnBGM(void)=0x8001BEA0
MR::isFirstGrandStarReturnBGMStage(void)=0x8001BEE0
MR::setCubeBgmChangeInvalid(void)=0x8001C0E0
MR::clearBgmQueue(void)=0x8001C140
MR::BitArray::__ct(int)=0x8001C430
MR::BitArray::isOn(int) const=0x8001C4A0
MR::BitArray::set(int, bool)=0x8001C4D0
@unnamed@CameraUtil_cpp@::calcNormalizedScreenPosToScreenPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8001C530
MR::getScreenHeight(void)=0x8001C5F0
MR::calcScreenPosition(JGeometry::TVec2<float>*, const JGeometry::TVec3<float>&)=0x8001C600
MR::calcScreenPosition(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8001C680
JGeometry::TVec4<float>::__ct<float>(float, float, float, float, _Pv)=0x8001C6F0
MR::calcNormalizedScreenPosition(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8001C710
MR::calcNormalizedScreenPositionFromView(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8001C770
MR::calcWorldPositionFromScreen(JGeometry::TVec3<float>*, const JGeometry::TVec2<float>&, float)=0x8001C8B0
JGeometry::TVec2<float>::__ct<float>(float, float, _Pv)=0x8001C980
MR::calcWorldPositionFromCenterScreen(JGeometry::TVec3<float>*, const JGeometry::TVec2<float>&, float)=0x8001C990
MR::tan(float)=0x8001CAE0
MR::calcWorldRayDirectionFromScreen(JGeometry::TVec3<float>*, const JGeometry::TVec2<float>&)=0x8001CB90
JGeometry::TVec3<float>::sub(const JGeometry::TVec3<float>&)=0x8001CBF0
MR::calcCameraDistanceZ(const JGeometry::TVec3<float>&)=0x8001CC20
MR::loadProjectionMtx(void)=0x8001CC90
MR::loadViewMtx(void)=0x8001CCD0
MR::getCameraViewMtx(void)=0x8001CD10
MR::getCameraInvViewMtx(void)=0x8001CD40
MR::getCameraProjectionMtx(void)=0x8001CD70
MR::getAspect(void)=0x8001CDA0
MR::getNearZ(void)=0x8001CDD0
MR::getFarZ(void)=0x8001CE00
MR::getFovy(void)=0x8001CE30
MR::setCameraViewMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, bool, bool, const JGeometry::TVec3<float>&)=0x8001CE60
MR::setNearZ(float)=0x8001CEC0
MR::setFovy(void)=0x8001CF00
MR::setShakeOffset(float, float)=0x8001CF40
MR::getCamPos(void)=0x8001CF90
MR::getCamXdir(void)=0x8001D000
MR::getCamYdir(void)=0x8001D070
MR::getCamZdir(void)=0x8001D0E0
JGeometry::TVec3<float>::__mi(void) const=0x8001D160
MR::isExistMirrorCamera(void)=0x8001D180
MR::getMirrorCameraViewMtx(void)=0x8001D190
MR::getMirrorModelTexMtx(void)=0x8001D1C0
MR::completeCameraParameters(void)=0x8001D1F0
MR::resetCameraMan(void)=0x8001D220
MR::startCameraInterpolation(unsigned long)=0x8001D250
MR::declareEventCamera(const ActorCameraInfo*, const char*)=0x8001D290
MR::endEventCamera(const ActorCameraInfo*, const char*, bool, long)=0x8001D2E0
MR::endEventCameraAtLanding(const ActorCameraInfo*, const char*, long)=0x8001D340
MR::isEventCameraActive(void)=0x8001D390
MR::isEventCameraActive(const ActorCameraInfo*, const char*)=0x8001D3C0
MR::declareGlobalEventCamera(const char*)=0x8001D570
MR::endGlobalEventCamera(const char*, long, bool)=0x8001D5B0
MR::declareGlobalEventCameraAbyss(const char*)=0x8001D640
MR::declareGlobalEventCameraFixedThere(const char*, bool, float)=0x8001D6C0
MR::declareGlobalEventCameraDead(const char*, float, long, long)=0x8001D770
MR::declareEventCameraAnim(const ActorCameraInfo*, const char*, void*)=0x8001D860
MR::isAnimCameraEnd(const ActorCameraInfo*, const char*)=0x8001D920
MR::getAnimCameraFrame(const ActorCameraInfo*, const char*)=0x8001D970
MR::pauseOnAnimCamera(const ActorCameraInfo*, const char*)=0x8001DA60
MR::pauseOffAnimCamera(const ActorCameraInfo*, const char*)=0x8001DAB0
MR::declareBlackHoleCamera(const char*)=0x8001DB00
MR::startBlackHoleCamera(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8001DB90
MR::declareLauncherCamera(void)=0x8001DC30
MR::endLauncherCamera(void)=0x8001DD30
MR::setLauncherCameraAngle(float, float, float, float)=0x8001DD70
MR::declareLauncherFlightCamera(void)=0x8001DE40
MR::endLauncherFlightCamera(void)=0x8001DF20
MR::isActiveLauncherCamera(void)=0x8001DF60
MR::isActiveLauncherFlightCamera(void)=0x8001DF90
MR::startSubjectiveCamera(long)=0x8001DFC0
MR::endSubjectiveCamera(long)=0x8001E000
MR::declareEventCameraProgrammable(const char*)=0x8001E040
MR::setProgrammableCameraParam(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x8001E0C0
MR::setProgrammableCameraParamFovy(const char*, float)=0x8001E170
MR::getEventCameraFrames(const ActorCameraInfo*, const char*)=0x8001E210
@unnamed@CameraUtil_cpp@::createRegisterName(const NameObj*, unsigned long)=0x8001E270
MR::declareCameraRegisterMtx(const NameObj*, unsigned long, A4_f)=0x8001E2E0
MR::declareCameraRegisterVec(const NameObj*, unsigned long, JGeometry::TVec3<float>*)=0x8001E330
MR::startStartPosCamera(bool)=0x8001E380
MR::endStartPosCamera(void)=0x8001E3C0
MR::isStartPosCameraEnd(void)=0x8001E3F0
MR::hasStartAnimCamera(void)=0x8001E420
MR::startStartAnimCamera(void)=0x8001E450
MR::isStartAnimCameraEnd(void)=0x8001E480
MR::getStartAnimCameraFrame(void)=0x8001E4B0
MR::endStartAnimCamera(void)=0x8001E4E0
MR::isCameraInterpolatingNearlyEnd(void)=0x8001E510
MR::isFirstPersonCamera(void)=0x8001E540
MR::isPossibleToShiftToFirstPersonCamera(void)=0x8001E570
MR::isCameraPossibleToRoundLeft(void)=0x8001E5F0
MR::isCameraPossibleToRoundRight(void)=0x8001E620
MR::isCameraControlNG(void)=0x8001E650
MR::startTalkCamera(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, long)=0x8001E6D0
MR::endTalkCamera(bool, long)=0x8001E740
MR::pauseOnCameraDirector(void)=0x8001E790
MR::pauseOffCameraDirector(void)=0x8001E7C0
MR::getCameraWatchPos(void)=0x8001E7F0
MR::zoomInTargetGameCamera(void)=0x8001E820
MR::zoomOutTargetGameCamera(void)=0x8001E850
MR::isCameraInWater(void)=0x8001E880
MR::resetCameraLocalOffset(void)=0x8001E890
MR::overlayWithPreviousScreen(unsigned long)=0x8001E8C0
MR::isSubjectiveCameraOnForObjClipping(void)=0x8001E900
MR::setGameCameraTargetToPlayer(void)=0x8001E960
MR::setGameCameraTarget(const CameraTargetArg&)=0x8001E9A0
MR::changeEventCameraTarget(const ActorCameraInfo*, const char*, const CameraTargetArg&)=0x8001E9B0
MR::startEventCameraNoTarget(const ActorCameraInfo*, const char*, long)=0x8001E9C0
MR::startEventCameraTargetPlayer(const ActorCameraInfo*, const char*, long)=0x8001EA20
MR::startEventCamera(const ActorCameraInfo*, const char*, const CameraTargetArg&, long)=0x8001EA80
MR::startGlobalEventCameraNoTarget(const char*, long)=0x8001EAE0
MR::startGlobalEventCamera(const char*, const CameraTargetArg&, long)=0x8001EB40
MR::startEventCameraAnim(const ActorCameraInfo*, const char*, const CameraTargetArg&, long, float)=0x8001EB90
MR::startLauncherCamera(const CameraTargetArg&)=0x8001EC40
MR::startLauncherFlightCamera(long)=0x8001EC80
MR::cleanEventCameraTarget_temporally(void)=0x8001ECE0
MR::startCSSound(const char*, const char*, long)=0x8001EE80
JKRHeap::do_getCurrentGroupId(void)=0x8001F330
JKRHeap::do_changeGroupID(unsigned char)=0x8001F340
JKRHeap::dump_sort(void)=0x8001F350
MR::tryRegisterDemoCast(LiveActor*, const JMapInfoIter&)=0x8001F360
MR::registerDemoActionFunctor(const LiveActor*, const MR::FunctorBase&, const char*)=0x8001F3B0
MR::registerDemoActionNerve(const LiveActor*, const Nerve*, const char*)=0x8001F3C0
MR::tryRegisterDemoActionFunctor(const LiveActor*, const MR::FunctorBase&, const char*)=0x8001F3D0
MR::tryRegisterDemoActionNerve(const LiveActor*, const Nerve*, const char*)=0x8001F430
MR::tryRegisterDemoCast(LiveActor*, const char*, const JMapInfoIter&)=0x8001F490
MR::registerDemoCast(LiveActor*, const char*, const JMapInfoIter&)=0x8001F4E0
MR::initTalkAnimDemoCast(LiveActor*, const JMapInfoIter&, const char*, const char*)=0x8001F530
MR::registerDemoActionFunctorDirect(const LiveActor*, const MR::FunctorBase&, const char*, const char*)=0x8001F5A0
MR::tryRegisterDemoActionFunctorDirect(const LiveActor*, const MR::FunctorBase&, const char*, const char*)=0x8001F5C0
MR::tryStartDemoRegistered(LiveActor*, const char*)=0x8001F630
MR::tryStartDemoRegisteredMarioPuppetable(LiveActor*, const char*)=0x8001F640
MR::registerDemoSimpleCastAll(LiveActor*)=0x8001F650
MR::registerDemoSimpleCastAll(LayoutActor*)=0x8001F660
MR::registerDemoSimpleCastAll(NameObj*)=0x8001F670
MR::isDemoCast(const LiveActor*, const char*)=0x8001F680
MR::isRegisteredDemoActionAppear(const LiveActor*)=0x8001F700
MR::isRegisteredDemoActionNerve(const LiveActor*)=0x8001F710
MR::tryStartDemo(LiveActor*, const char*)=0x8001F720
MR::tryStartDemo(LayoutActor*, const char*)=0x8001F790
MR::tryStartDemoWithoutCinemaFrame(LiveActor*, const char*)=0x8001F8E0
MR::tryStartDemoMarioPuppetableWithoutCinemaFrame(LiveActor*, const char*)=0x8001FA30
MR::tryStartTimeKeepDemo(NameObj*, const char*, const char*)=0x8001FAA0
MR::tryStartTimeKeepDemoMarioPuppetable(NameObj*, const char*, const char*)=0x8001FBB0
MR::tryStartTimeKeepDemoMarioPuppetable(LiveActor*, const char*, const char*)=0x8001FC70
MR::requestStartDemo(LiveActor*, const char*, const Nerve*, const Nerve*)=0x8001FE70
MR::requestStartDemoWithoutCinemaFrame(LiveActor*, const char*, const Nerve*, const Nerve*)=0x8001FF30
MR::requestStartDemoWithoutCinemaFrame(LayoutActor*, const char*, const Nerve*, const Nerve*)=0x8001FF70
MR::requestStartDemoMarioPuppetable(LiveActor*, const char*, const Nerve*, const Nerve*)=0x8001FFB0
MR::requestStartDemoMarioPuppetable(NerveExecutor*, LiveActor*, const char*, const Nerve*, const Nerve*)=0x8001FFF0
MR::requestStartTimeKeepDemo(NameObj*, const char*, const char*)=0x800200D0
MR::requestStartTimeKeepDemoMarioPuppetable(NameObj*, const char*, const char*)=0x800200F0
MR::requestStartDemoRegisteredMarioPuppetable(LiveActor*, const Nerve*, const Nerve*, const char*)=0x80020130
MR::endDemo(NameObj*, const char*)=0x800201C0
MR::endDemoWaitCameraInterpolating(NameObj*, const char*)=0x80020210
MR::startTimeKeepDemo(NameObj*, const char*, const char*)=0x80020A30
MR::startTimeKeepDemoMarioPuppetable(NameObj*, const char*, const char*)=0x80020AA0
MR::isDemoExist(const char*)=0x80020B40
MR::isDemoActive(void)=0x80020B80
MR::isDemoActive(const char*)=0x80020BB0
MR::canStartDemo(void)=0x80020C20
MR::isTimeKeepDemoActive(void)=0x80020C90
MR::isDemoActiveRegistered(const LiveActor*)=0x80020CE0
MR::isDemoPartExist(const LiveActor*, const char*)=0x80020D30
MR::isDemoLastStep(void)=0x80020D80
MR::isDemoPartActive(const char*)=0x80020D90
MR::isDemoPartStep(const char*, long)=0x80020DA0
MR::isDemoPartFirstStep(const char*)=0x80020E20
MR::isDemoPartLastStep(const char*)=0x80020E90
MR::isDemoPartGreaterStep(const char*, long)=0x80020F10
MR::getDemoPartTotalStep(const char*)=0x80020F90
MR::calcDemoPartStepRate(const char*)=0x80020FA0
MR::getDemoPartStep(const char*)=0x80021020
MR::pauseTimeKeepDemo(LiveActor*)=0x80021030
MR::resumeTimeKeepDemo(LiveActor*)=0x80021040
MR::isPauseTimeKeepDemo(LiveActor*)=0x80021050
MR::isPowerStarGetDemoActive(void)=0x80021060
MR::getCurrentDemoPartNameMain(const char*)=0x800210A0
MR::isSystemTalking(void)=0x80021190
MR::isNormalTalking(void)=0x800211E0
MR::getTalkingActor(void)=0x80021230
JGeometry::TVec3<float>::__ct(void)=0x80021280
MR::reinitGX(void)=0x800212E0
MR::resetTextureCacheSize(void)=0x80021340
MR::drawInitFor2DModel(void)=0x800213A0
MR::getFrameBufferWidth(void)=0x80021520
MR::loadProjectionMtxFor2D(void)=0x80021530
J2DOrthoGraph::__dt(void)=0x800215C0
J2DGrafContext::__dt(void)=0x80021600
MR::setupDrawForNW4RLayout(float)=0x80021640
MR::clearAlphaBuffer(unsigned char, const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&)=0x80021AB0
MR::fillScreen(const _GXColor&)=0x80022060
MR::setupShadowVolumeDraw(void)=0x800220D0
MR::drawSimpleModel(J3DModelData*)=0x80022220
MR::fillSilhouetteColor(void)=0x80022470
MR::getMarioShadowVec(void)=0x80022860
MR::setMarioShadowTex(const JUTTexture*)=0x80022870
J2DOrthoGraphSimple::__ct(void)=0x80022930
JGeometry::TBox2<float>::__ct(float, float, float, float)=0x80022A40
J2DOrthoGraphSimple::setPort(void)=0x80022A60
J2DGrafContext::place(float, float, float, float)=0x80022A70
J2DOrthoGraph::getGrafType(void) const=0x80022AC0
short::(nit_\DrawUtil_cpp)=0x80022AD0
MR::isExistEffect(const LiveActor*, const char*)=0x80022AE0
MR::requestEffectStopSceneStart(void)=0x80022B50
MR::requestEffectStopSceneEnd(void)=0x80022B60
MR::addEffect(LiveActor*, const char*)=0x80022B70
MR::getEffect(const LiveActor*, const char*)=0x80022B80
MR::getEffect(const LayoutActor*, const char*)=0x80022B90
MR::isExistEffectKeeper(const LiveActor*)=0x80022BA0
MR::isExistEffectKeeper(const LayoutActor*)=0x80022BB0
MR::emitEffect(LiveActor*, const char*)=0x80022BC0
MR::emitEffectWithScale(LiveActor*, const char*, float, long)=0x80022BD0
MR::emitEffectWithEmitterCallBack(LiveActor*, const char*, MultiEmitterCallBackBase*)=0x80022C40
MR::emitEffectWithParticleCallBack(LiveActor*, const char*, MultiEmitterParticleCallBack*)=0x80022C90
MR::tryEmitEffect(LiveActor*, const char*)=0x80022CE0
MR::tryDeleteEffect(LiveActor*, const char*)=0x80022D40
MR::deleteEffect(LiveActor*, const char*)=0x80022E80
MR::forceDeleteEffect(LiveActor*, const char*)=0x80022E90
MR::deleteEffectAll(LiveActor*)=0x80022EA0
MR::forceDeleteEffectAll(LiveActor*)=0x80022EB0
MR::isRegisteredEffect(const LiveActor*, const char*)=0x80022EC0
MR::isEffectValid(const LiveActor*, const char*)=0x80022EE0
MR::onDrawEffect(LiveActor*)=0x80022F20
MR::offDrawEffect(LiveActor*)=0x80022F30
MR::onCalcEmitter(LiveActor*)=0x80022F40
MR::offCalcEmitter(LiveActor*)=0x80022F50
MR::pauseOffEffectAll(LiveActor*)=0x80022F60
MR::setAllEffectDrawOrder(LiveActor*, long)=0x80022F70
MR::onEmitEffectSyncClipping(LiveActor*, const char*)=0x80022FE0
MR::onForceDeleteEffectSyncClipping(LiveActor*, const char*)=0x80023010
MR::setEffectName(LiveActor*, const char*, const char*)=0x80023040
MR::setEffectHostSRT(LiveActor*, const char*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*)=0x80023050
MR::setEffectHostMtx(LiveActor*, const char*, A4_f)=0x80023110
MR::setAllEffectHostMtx(LiveActor*, A4_f)=0x800231B0
MR::setEffectBaseScale(LiveActor*, const char*, float)=0x80023230
MR::setEffectColor(LiveActor*, const char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)=0x80023270
MR::setEffectPrmColor(LiveActor*, const char*, unsigned char, unsigned char, unsigned char)=0x80023300
MR::setEffectEnvColor(LiveActor*, const char*, unsigned char, unsigned char, unsigned char)=0x80023360
MR::setEffectLocalScale(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x800233C0
MR::addEffectHitNormal(LiveActor*, const char*)=0x80023400
MR::emitEffectHit(LiveActor*, const JGeometry::TVec3<float>&, const char*)=0x80023470
MR::emitEffectHit(LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const char*)=0x800234C0
MR::emitEffectHit(LiveActor*, A4_fPCc)=0x80023530
MR::emitEffectHitBetweenSensors(LiveActor*, const HitSensor*, const HitSensor*, float, const char*)=0x80023580
MR::initEffectAfterPlacement(LiveActor*, bool)=0x800235D0
MR::updateEffectFloorCode(LiveActor*, const Triangle*)=0x80023620
MR::updateEffectFloorCodeLineToMap(LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80023630
MR::updateEffectFloorCodeLineToMap(LiveActor*, float, float)=0x800236B0
JGeometry::TVec3<float>::__ml(float) const=0x80023780
MR::incPlayerAndTryScenarioMissNum(void)=0x800237F0
MR::getPlayerLeft(void)=0x80023880
MR::addPlayerLeft(int)=0x80023890
MR::decPlayerLeft(void)=0x800238D0
MR::incPlayerMissNum(void)=0x80023920
MR::isPlayerLuigi(void)=0x80023950
MR::getStarPieceNum(void)=0x80023960
MR::addStarPiece(int)=0x800239C0
MR::incCoin(int, LiveActor*)=0x80023A70
MR::decCoin(int)=0x80023B00
MR::getCoinNum(void)=0x80023B70
MR::incPurpleCoin(void)=0x80023BD0
MR::getPurpleCoinNum(void)=0x80023C30
MR::isPurpleCoinNum100(void)=0x80023C60
MR::explainBeeMarioIfAtFirst(void)=0x80023CA0
MR::explainTeresaMarioIfAtFirst(void)=0x80023CD0
MR::explainHopperMarioIfAtFirst(void)=0x80023D00
MR::explainFireMarioIfAtFirst(void)=0x80023D30
MR::explainIceMarioIfAtFirst(void)=0x80023D60
MR::explainFlyingMarioIfAtFirst(void)=0x80023D90
MR::explainInvincibleMarioIfAtFirst(void)=0x80023DC0
MR::explainRockMarioIfAtFirst(void)=0x80023DF0
MR::explainCloudMarioIfAtFirst(void)=0x80023E20
MR::explainDrillIfAtFirst(void)=0x80023E50
MR::explainLifeUpIfAtFirst(void)=0x80023E80
MR::explainOneUpIfAtFirst(void)=0x80023EB0
MR::explainYoshiIfAtFirst(void)=0x80023EE0
MR::explainCometMedalIfAtFirst(void)=0x80023F30
MR::explainMarioFacePlanetAtFirst(void)=0x80023F80
MR::onGameEventFlagBeeMarioAtFirst(void)=0x80023FB0
MR::onGameEventFlagTeresaMarioAtFirst(void)=0x80023FF0
MR::onGameEventFlagHopperMarioAtFirst(void)=0x80024030
MR::onGameEventFlagFireMarioAtFirst(void)=0x80024070
MR::onGameEventFlagIceMarioAtFirst(void)=0x800240B0
MR::onGameEventFlagFlyingMarioAtFirst(void)=0x800240F0
MR::onGameEventFlagInvincibleMarioAtFirst(void)=0x80024130
MR::onGameEventFlagRockMarioAtFirst(void)=0x80024170
MR::onGameEventFlagCloudMarioAtFirst(void)=0x800241B0
MR::onGameEventFlagDrillAtFirst(void)=0x800241F0
MR::onGameEventFlagLifeUpAtFirst(void)=0x80024230
MR::onGameEventFlagOneUpAtFirst(void)=0x80024270
MR::onGameEventFlagTamakoroTutorialAtFirst(void)=0x800242B0
MR::onGameEventFlagGliBirdTutorialAtFirst(void)=0x800242F0
MR::onGameEventFlagYoshiAtFirst(void)=0x80024330
MR::onGameEventFlagCometMedalAtFirst(void)=0x80024370
MR::onGameEventFlagSupportTicoAtFirst(void)=0x800243B0
MR::onGameEventFlagKinopioBankAtFirst(void)=0x800243F0
MR::isOnGameEventFlagBeeMarioAtFirst(void)=0x80024430
MR::isOnGameEventFlagTeresaMarioAtFirst(void)=0x80024470
MR::isOnGameEventFlagHopperMarioAtFirst(void)=0x800244B0
MR::isOnGameEventFlagFireMarioAtFirst(void)=0x800244F0
MR::isOnGameEventFlagIceMarioAtFirst(void)=0x80024530
MR::isOnGameEventFlagFlyingMarioAtFirst(void)=0x80024570
MR::isOnGameEventFlagInvincibleMarioAtFirst(void)=0x800245B0
MR::isOnGameEventFlagRockMarioAtFirst(void)=0x800245F0
MR::isOnGameEventFlagCloudMarioAtFirst(void)=0x80024630
MR::isOnGameEventFlagDrillAtFirst(void)=0x80024670
MR::isOnGameEventFlagLifeUpAtFirst(void)=0x800246B0
MR::isOnGameEventFlagOneUpAtFirst(void)=0x800246F0
MR::isOnGameEventFlagTamakoroTutorialAtFirst(void)=0x80024730
MR::isOnGameEventFlagGliBirdTutorialAtFirst(void)=0x80024770
MR::isOnGameEventFlagYoshiFirst(void)=0x800247B0
MR::isOnGameEventFlagCometMedalAtFirst(void)=0x800247F0
MR::isOnGameEventFlagSupportTicoAtFirst(void)=0x80024830
MR::isOnGameEventFlagKinopioBankAtFirst(void)=0x80024870
MR::isOnGameEventFlagNormalEnding(void)=0x800248B0
MR::isOnGameEventFlag120PowerStarsEnding(void)=0x800248C0
MR::isAlreadyVisitedCurrentStageAndScenario(void)=0x80024A20
MR::hasPowerStarInCurrentStage(long)=0x80024A60
MR::isPowerStarGreenInCurrentStage(long)=0x80024AA0
MR::isPowerStarBronzeInCurrentStage(long)=0x80024AE0
MR::isGrandStarInCurrentStage(long)=0x80024B20
MR::hasPowerStarInCurrentStageWithDeclarer(const char*, long)=0x80024B60
MR::isPowerStarGreenInCurrentStageWithDeclarer(const char*, long)=0x80024B70
MR::isPowerStarBronzeInCurrentStageWithDeclarer(const char*, long)=0x80024B80
MR::isGrandStarInCurrentStageWithDeclarer(const char*, long)=0x80024B90
MR::isScenarioOpenInCurrentStageWithDeclarer(const char*)=0x80024BA0
MR::isOnGameEventFlagPowerStarSuccess(const char*, long)=0x80024C30
MR::hasGrandStar(int)=0x80024C40
MR::getPowerStarNumOwnedInStage(const char*)=0x80024C50
MR::isPowerStarGreen(const char*, long)=0x80024C80
MR::isPowerStarGreenInCurrentStage(void)=0x80024CC0
MR::isPowerStarBronze(const char*, long)=0x80024D10
MR::getPowerStarNum(void)=0x80024D50
MR::setRaceBestTime(int, unsigned long)=0x80024DE0
MR::getRaceBestTime(int)=0x80024E20
MR::getRaceCurrentTime(void)=0x80024E50
MR::registerStorageSpinDriverPathDrawRange(const NameObj*, const JMapInfoIter&, int, float*)=0x80024E60
MR::updateStorageSpinDriverPathDrawRange(int, float)=0x80024E70
MR::isGalaxyDarkCometAppearInCurrentStage(void)=0x80024ED0
MR::isGalaxyQuickCometAppearInCurrentStage(void)=0x80024EE0
MR::isGalaxyPurpleCometAppearInCurrentStage(void)=0x80024EF0
MR::isGalaxyHorrorInCurrentStage(void)=0x80024F00
MR::isGalaxyRainbowInCurrentStage(void)=0x80024F10
MR::startGalaxyCometEvent(void)=0x80024F20
MR::isGalaxyCompletedNoGreen(const char*)=0x80025150
MR::isGalaxyCompletedWithGreen(const char*)=0x80025180
MR::setRestartMarioNo(const JMapIdInfo&)=0x800251E0
MR::isGhostLuigiOpenInStage(const char*, long)=0x80025220
MR::isIslandFleetGalaxy1FirstTime(void)=0x80025400
MR::isFileExist(const char*, bool)=0x80025520
MR::getFileSize(const char*, bool)=0x80025580
MR::makeObjectArchiveFileName(char*, unsigned long, const char*)=0x80025600
MR::makeLayoutArchiveFileName(char*, unsigned long, const char*)=0x80025730
MR::makeLayoutArchiveFileNameFromPrefix(char*, unsigned long, const char*, bool)=0x80025800
MR::makeDemoArchiveFileName(char*, unsigned long, const char*)=0x80025940
MR::makeScenarioArchiveFileName(char*, unsigned long, const char*)=0x80025950
MR::loadToMainRAM(const char*, unsigned char*, JKRHeap*, int)=0x80025970
MR::mountArchive(const char*, JKRHeap*, bool)=0x80025A70
MR::receiveFile(const char*)=0x80025B50
MR::mountAsyncArchive(const char*)=0x80025B90
MR::receiveAllRequestedFile(void)=0x80025BD0
MR::createAndAddArchive(void*, JKRHeap*, const char*)=0x80025BE0
MR::getMountedArchiveAndHeap(const char*, JKRArchive*, JKRHeap*)=0x80025C00
MR::removeResourceAndFileHolderIfIsEqualHeap(JKRHeap*)=0x80025D70
MR::decompressFileFromArchive(JKRArchive*, const char*, JKRHeap*, int)=0x80025DB0
FootPrint::__ct(const char*, long, long)=0x80025E80
FootPrint::__ct(const char*, long)=0x80025EE0
FootPrint::initMember(long, long)=0x80025F40
FootPrintInfo::__ct(void)=0x80026030
FootPrint::setTexture(ResTIMG*)=0x80026040
FootPrint::movement(void)=0x800260D0
FootPrint::addPrint(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x800261B0
FootPrint::draw(void) const=0x80026310
JGeometry::TVec3<float>::__apl(const JGeometry::TVec3<float>&)=0x80026550
FootPrint::clear(void)=0x80026580
FootPrint::clearForce(void)=0x80026590
FootPrint::getPrintPos(unsigned long) const=0x800265A0
FootPrint::invalidate(unsigned long)=0x800265C0
FootPrint::isValid(unsigned long) const=0x800265F0
NameObj::unk2(void)=0x800269E0
NameObj::unk1(void)=0x800269F0
FootPrint::__dt(void)=0x80026A00
JGeometry::TVec3<float>::negate(const JGeometry::TVec3<float>&)=0x80026A60
JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getTrans(JGeometry::TVec3<float>&) const=0x80026A80
JGeometry::TPartition3<float>::set(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80026AA0
JGeometry::TVec3<float>::sub(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80026B30
FurBank::check(J3DModelData*, unsigned long)=0x80026B60
FurDrawManager::__ct(unsigned char)=0x80026BC0
FurDrawManager::add(FurCtrl*, unsigned char)=0x80026C90
FurDrawManager::draw(void) const=0x80026CD0
J3DModel::__dt(void)=0x80027100
FurCtrl::calcLayerForm(void)=0x800272C0
FurCtrl::drawFur(void)=0x80027480
FurCtrl::createFurMap(void)=0x80027740
MR::initFurParamFromDvd(FurParam*, DynamicFurParam*, char*, unsigned long)=0x800277C0
MR::getFurDrawManager(void)=0x80027A90
J3DModel2::__dt(void)=0x80027AC0
FurDrawManager::__dt(void)=0x80027B20
FurDrawer::update(void)=0x80027E10
FurDrawer::CLayerParam::calcValue(long, long) const=0x80027E30
FurDrawer::setupMaterial(DynamicFurParam*) const=0x80027EC0
FurDrawer::setupLayerMaterial(long) const=0x80028590
FurMulti::__ct(LiveActor*, unsigned long)=0x800288B0
FurBank::regist(FurMulti*, unsigned long)=0x80028960
FurMulti::setLayerDirect(unsigned long, unsigned long, unsigned long, unsigned long, FurParam*, ResTIMG*, ResTIMG*, ResTIMG*, ResTIMG*)=0x800289A0
FurMulti::addToManager(void)=0x80028B90
FurMulti::offDraw(unsigned long)=0x80028C00
FurMulti::onDraw(unsigned long)=0x80028C50
MR::initMultiFur(LiveActor*, long)=0x80028C90
CShader::__ct(const J3DModelData*, const ResTIMG*)=0x80029170
CShader::CIndex::__ct(void)=0x80029290
CShader::__dt(void)=0x800292B0
CShader::calc(J3DModel*)=0x80029320
JGeometry::TVec3<float>::__pl(const JGeometry::TVec3<float>&) const=0x800297B0
CShader::setup(J3DModelData*)=0x80029810
CShader::CLengthMap::__ct(const ResTIMG*)=0x80029B40
CShader::CLengthMap::setLengthMap(const ResTIMG*)=0x80029B80
MR::getCorePadPointingPosBasedOnScreen(JGeometry::TVec2<float>*, long)=0x80029DC0
MR::getCorePadPointingPos(JGeometry::TVec2<float>*, long)=0x80029E00
MR::getCorePadPastPointingPos(JGeometry::TVec2<float>*, long, long)=0x80029E40
MR::getCorePadEnablePastCount(long)=0x80029E90
MR::isCorePadPointInScreen(long)=0x80029EC0
MR::getCorePadDistanceToDisplay(long)=0x80029EF0
MR::getCorePadAcceleration(JGeometry::TVec3<float>*, long)=0x80029F20
MR::testCorePadButtonUp(long)=0x80029F60
MR::testCorePadButtonDown(long)=0x80029F90
MR::testCorePadButtonLeft(long)=0x80029FC0
MR::testCorePadButtonRight(long)=0x80029FF0
MR::testCorePadButtonA(long)=0x8002A020
MR::testCorePadButtonB(long)=0x8002A050
MR::testCorePadButtonPlus(long)=0x8002A080
MR::testCorePadButtonMinus(long)=0x8002A0B0
MR::testSubPadButtonC(long)=0x8002A0E0
MR::testSubPadButtonZ(long)=0x8002A110
MR::testPadButtonAnyWithoutHome(long)=0x8002A140
MR::testCorePadTriggerUp(long)=0x8002A340
MR::testCorePadTriggerDown(long)=0x8002A370
MR::testCorePadTriggerLeft(long)=0x8002A3A0
MR::testCorePadTriggerRight(long)=0x8002A3D0
MR::testCorePadTriggerA(long)=0x8002A400
MR::testCorePadTriggerB(long)=0x8002A430
MR::testCorePadTrigger1(long)=0x8002A460
MR::testCorePadTrigger2(long)=0x8002A490
MR::testCorePadTriggerPlus(long)=0x8002A4C0
MR::testCorePadTriggerMinus(long)=0x8002A4F0
MR::testCorePadTriggerAnyWithoutHome(long)=0x8002A520
MR::testCorePadTriggerHome(long)=0x8002A6D0
MR::testSubPadTriggerC(long)=0x8002A710
MR::testSubPadTriggerZ(long)=0x8002A740
MR::isCorePadSwing(long)=0x8002A770
MR::isCorePadSwingTrigger(long)=0x8002A7D0
MR::getSubPadStickX(long)=0x8002A800
MR::getSubPadStickY(long)=0x8002A830
MR::testSubPadStickTriggerLeft(long)=0x8002A860
MR::testSubPadStickTriggerRight(long)=0x8002A890
MR::getSubPadAcceleration(JGeometry::TVec3<float>*, long)=0x8002A8C0
MR::isSubPadSwing(long)=0x8002A900
MR::isPadSwing(long)=0x8002A930
MR::testSystemPadTriggerDecide(void)=0x8002A9A0
MR::testSystemTriggerA(void)=0x8002A9E0
MR::testSystemTriggerB(void)=0x8002AA20
MR::testDPDMenuPadDecideTrigger(void)=0x8002AB20
MR::testPlayer1TriggerA(void)=0x8002AB50
MR::testFpViewStartTrigger(void)=0x8002AB80
MR::testFpViewOutTrigger(void)=0x8002ABB0
MR::getPlayerStickX(void)=0x8002AC10
MR::getPlayerStickY(void)=0x8002ACF0
MR::getPlayerTriggerA(void)=0x8002ADB0
MR::getPlayerTriggerB(void)=0x8002ADE0
MR::getPlayerTriggerZ(void)=0x8002AE10
MR::getPlayerTriggerC(void)=0x8002AE40
MR::getPlayerLevelA(void)=0x8002AE70
MR::getPlayerLevelB(void)=0x8002AEA0
MR::getPlayerLevelZ(void)=0x8002AED0
MR::getPlayerLevelC(void)=0x8002AF00
MR::isGamePadStickOperated(long)=0x8002AF30
MR::calcWorldStickDirectionXZ(float*, float*, long)=0x8002AFA0
MR::calcWorldStickDirectionXZ(JGeometry::TVec3<float>*, long)=0x8002B080
MR::getWPadMaxCount(void)=0x8002B0A0
MR::isConnectedWPad(long)=0x8002B0B0
MR::isOperatingWPad(long)=0x8002B0E0
WPadFunction::getWPadRumble(long)=0x8002B150
@unnamed@GravityUtil_cpp@::getJMapInfoArgPlus(const JMapInfoIter&, const char*, float*)=0x8002B180
@unnamed@GravityUtil_cpp@::getJMapInfoArgPlus(const JMapInfoIter&, const char*, long*)=0x8002B220
@unnamed@GravityUtil_cpp@::calcGravityVectorOrZero(const NameObj*, const JGeometry::TVec3<float>&, unsigned long, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B2D0
MR::registerGravity(PlanetGravity*)=0x8002B350
MR::calcGravityVector(const LiveActor*, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B390
MR::calcGravityVector(const NameObj*, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B3B0
MR::calcDropShadowVector(const LiveActor*, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B3D0
MR::calcDropShadowVector(const NameObj*, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B3F0
MR::calcGravityAndDropShadowVector(const LiveActor*, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B410
MR::calcGravityVectorOrZero(const LiveActor*, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B430
MR::calcGravityVectorOrZero(const NameObj*, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B450
MR::calcDropShadowVectorOrZero(const NameObj*, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B470
MR::calcGravityAndDropShadowVectorOrZero(const LiveActor*, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B490
MR::calcAttractMarioLauncherOrZero(const LiveActor*, JGeometry::TVec3<float>*, GravityInfo*, unsigned long)=0x8002B4B0
MR::isZeroGravity(const LiveActor*)=0x8002B4D0
MR::isLightGravity(const GravityInfo&)=0x8002B510
MR::getJMapInfoGravityType(const JMapInfoIter&, PlanetGravity*)=0x8002B540
MR::getJMapInfoGravityPower(const JMapInfoIter&, PlanetGravity*)=0x8002B600
MR::settingGravityParamFromJMap(PlanetGravity*, const JMapInfoIter&)=0x8002B6B0
HashSortTable::__ct(unsigned long)=0x8002B7C0
HashSortTable::add(const char*, unsigned long, bool)=0x8002B840
HashSortTable::add(unsigned long, unsigned long)=0x8002B8B0
HashSortTable::addOrSkip(unsigned long, unsigned long)=0x8002B8F0
HashSortTable::sort(void)=0x8002B960
HashSortTable::search(unsigned long, unsigned long*)=0x8002BB10
HashSortTable::search(const char*, unsigned long*)=0x8002BBC0
HashSortTable::search(const char*, const char*, unsigned long*)=0x8002BC10
HashSortTable::swap(const char*, const char*)=0x8002BC70
MR::getHashCode(const char*)=0x8002BD00
MR::getHashCodeLower(const char*)=0x8002BD30
MR::isValidInfo(const JMapInfoIter&)=0x8002BD90
MR::getObjectName(const char*, const JMapInfoIter&)=0x8002BDA0
MR::isObjectName(const JMapInfoIter&, const char*)=0x8002BE30
MR::isExistJMapInfoArg0(const JMapInfoIter&)=0x8002BFD0
MR::getJMapInfoShapeIdWithInit(const JMapInfoIter&, long*)=0x8002C020
MR::getJMapInfoAreaIdWithInit(const JMapInfoIter&, long*)=0x8002C040
MR::getJMapInfoTransLocal(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002C060
MR::getJMapInfoTrans(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002C0F0
MR::getJMapInfoRotateLocal(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002C160
MR::getJMapInfoRotate(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002C1F0
MR::getJMapInfoScale(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002C360
MR::getJMapInfoMatrixFromRT(const JMapInfoIter&, JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x8002C3F0
MR::getJMapInfoV3f(const JMapInfoIter&, const char*, JGeometry::TVec3<float>*)=0x8002C470
MR::getJMapInfoArg0WithInit(const JMapInfoIter&, long*)=0x8002C540
MR::getJMapInfoArg0WithInit(const JMapInfoIter&, float*)=0x8002C560
MR::getJMapInfoArg0WithInit(const JMapInfoIter&, bool*)=0x8002C580
MR::getJMapInfoArg1WithInit(const JMapInfoIter&, long*)=0x8002C5A0
MR::getJMapInfoArg1WithInit(const JMapInfoIter&, float*)=0x8002C5C0
MR::getJMapInfoArg1WithInit(const JMapInfoIter&, bool*)=0x8002C5E0
MR::getJMapInfoArg2WithInit(const JMapInfoIter&, long*)=0x8002C600
MR::getJMapInfoArg2WithInit(const JMapInfoIter&, float*)=0x8002C620
MR::getJMapInfoArg2WithInit(const JMapInfoIter&, bool*)=0x8002C640
MR::getJMapInfoArg3WithInit(const JMapInfoIter&, long*)=0x8002C660
MR::getJMapInfoArg3WithInit(const JMapInfoIter&, bool*)=0x8002C680
MR::getJMapInfoArg4WithInit(const JMapInfoIter&, bool*)=0x8002C6A0
MR::getJMapInfoArg5WithInit(const JMapInfoIter&, long*)=0x8002C6C0
MR::getJMapInfoArg6WithInit(const JMapInfoIter&, long*)=0x8002C6E0
MR::getJMapInfoArg7WithInit(const JMapInfoIter&, long*)=0x8002C700
MR::getJMapInfoArg7WithInit(const JMapInfoIter&, bool*)=0x8002C720
MR::getJMapInfoArg0NoInit(const JMapInfoIter&, long*)=0x8002C740
MR::getJMapInfoArg0NoInit(const JMapInfoIter&, float*)=0x8002C750
MR::getJMapInfoArg0NoInit(const JMapInfoIter&, bool*)=0x8002C760
MR::getJMapInfoArg1NoInit(const JMapInfoIter&, long*)=0x8002C770
MR::getJMapInfoArg1NoInit(const JMapInfoIter&, float*)=0x8002C780
MR::getJMapInfoArg1NoInit(const JMapInfoIter&, bool*)=0x8002C790
MR::getJMapInfoArg2NoInit(const JMapInfoIter&, long*)=0x8002C7A0
MR::getJMapInfoArg2NoInit(const JMapInfoIter&, float*)=0x8002C7B0
MR::getJMapInfoArg2NoInit(const JMapInfoIter&, bool*)=0x8002C7C0
MR::getJMapInfoArg3NoInit(const JMapInfoIter&, long*)=0x8002C7D0
MR::getJMapInfoArg3NoInit(const JMapInfoIter&, float*)=0x8002C7E0
MR::getJMapInfoArg3NoInit(const JMapInfoIter&, bool*)=0x8002C7F0
MR::getJMapInfoArg4NoInit(const JMapInfoIter&, long*)=0x8002C800
MR::getJMapInfoArg4NoInit(const JMapInfoIter&, float*)=0x8002C810
MR::getJMapInfoArg4NoInit(const JMapInfoIter&, bool*)=0x8002C820
MR::getJMapInfoArg5NoInit(const JMapInfoIter&, long*)=0x8002C830
MR::getJMapInfoArg5NoInit(const JMapInfoIter&, float*)=0x8002C840
MR::getJMapInfoArg5NoInit(const JMapInfoIter&, bool*)=0x8002C850
MR::getJMapInfoArg6NoInit(const JMapInfoIter&, long*)=0x8002C860
MR::getJMapInfoArg6NoInit(const JMapInfoIter&, float*)=0x8002C870
MR::getJMapInfoArg6NoInit(const JMapInfoIter&, bool*)=0x8002C880
MR::getJMapInfoArg7NoInit(const JMapInfoIter&, long*)=0x8002C890
MR::getJMapInfoArg7NoInit(const JMapInfoIter&, float*)=0x8002C8A0
MR::getJMapInfoArg7NoInit(const JMapInfoIter&, bool*)=0x8002C8B0
MR::getJMapInfoFollowID(const JMapInfoIter&, long*)=0x8002C8C0
MR::getJMapInfoGroupID(const JMapInfoIter&, long*)=0x8002C8E0
MR::getJMapInfoClippingGroupID(const JMapInfoIter&, long*)=0x8002C950
MR::getJMapInfoDemoGroupID(const JMapInfoIter&, long*)=0x8002C970
MR::getJMapInfoLinkID(const JMapInfoIter&, long*)=0x8002C990
MR::getJMapInfoPriorityWithInit(const JMapInfoIter&, long*)=0x8002C9A0
MR::isConnectedWithRail(const JMapInfoIter&)=0x8002C9B0
MR::isExistStageSwitchA(const JMapInfoIter&)=0x8002CA30
MR::isExistStageSwitchB(const JMapInfoIter&)=0x8002CAA0
MR::isExistStageSwitchAppear(const JMapInfoIter&)=0x8002CB10
MR::isExistStageSwitchDead(const JMapInfoIter&)=0x8002CB80
MR::isExistStageSwitchAwake(const JMapInfoIter&)=0x8002CBF0
MR::isExistStageSwitchParam(const JMapInfoIter&)=0x8002CC60
MR::isExistMessageId(const JMapInfoIter&)=0x8002CCD0
MR::isEqualObjectName(const JMapInfoIter&, const char*)=0x8002CD40
MR::getJMapInfoCameraSetID(const JMapInfoIter&, long*)=0x8002CD80
MR::getJMapInfoViewGroupID(const JMapInfoIter&, long*)=0x8002CDF0
MR::getJMapInfoMessageID(const JMapInfoIter&, long*)=0x8002CE60
MR::getParamScale(const JMapInfoIter&, float*)=0x8002CED0
MR::getDemoCastID(const JMapInfoIter&)=0x8002CF50
MR::getDemoName(const JMapInfoIter&)=0x8002CF90
MR::getTimeSheetName(const JMapInfoIter&)=0x8002CFD0
MR::getDemoGroupID(const JMapInfoIter&)=0x8002D010
MR::getDemoGroupLinkID(const JMapInfoIter&)=0x8002D050
MR::getDemoSkip(const JMapInfoIter&)=0x8002D090
MR::getJMapInfoRailArg(const JMapInfoIter&, const char*, long*)=0x8002D0F0
MR::getJMapInfoRailArg0NoInit(const JMapInfoIter&, long*)=0x8002D150
MR::getRailId(const JMapInfoIter&, long*)=0x8002D160
MR::getNextLinkRailID(const JMapInfoIter&, long*)=0x8002D180
MR::isEqualRailUsage(const JMapInfoIter&, const char*)=0x8002D190
MR::getRailPointPos0(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002D1E0
MR::getRailPointPos1(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002D270
MR::getRailPointPos2(const JMapInfoIter&, JGeometry::TVec3<float>*)=0x8002D300
MR::isLoopRailPathIter(const JMapInfoIter&)=0x8002D390
MR::getLinkObjID(const JMapInfoIter&, long*)=0x8002D3E0
MR::getMapPartsID(const JMapInfoIter&, long*)=0x8002D3F0
MR::getGeneratorID(const JMapInfoIter&, long*)=0x8002D400
MR::getJoint(J3DModel*, const char*)=0x8002D410
MR::getJoint(const LiveActor*, const char*)=0x8002D460
MR::getJoint(const LiveActor*, unsigned short)=0x8002D4A0
MR::getJointMtx(J3DModel*, const char*)=0x8002D4E0
MR::getJointMtx(const LiveActor*, const char*)=0x8002D530
MR::getJointMtx(const LiveActor*, long)=0x8002D580
MR::getJointIndex(const LiveActor*, const char*)=0x8002D610
MR::getJointName(const LiveActor*, int)=0x8002D650
MR::getJointNum(const LiveActor*)=0x8002D690
MR::isExistJoint(const LiveActor*, const char*)=0x8002D6C0
JGeometry::SMatrix34C<float>::set(A4_Cf)=0x8002D710
MR::copyJointPos(J3DModel*, const char*, JGeometry::TVec3<float>*)=0x8002D750
MR::copyJointPos(const LiveActor*, const char*, JGeometry::TVec3<float>*)=0x8002D7A0
MR::copyJointPos(J3DModel*, int, JGeometry::TVec3<float>*)=0x8002D7F0
MR::copyJointPos(const LiveActor*, int, JGeometry::TVec3<float>*)=0x8002D820
MR::copyJointScale(const LiveActor*, const char*, JGeometry::TVec3<float>*)=0x8002D870
MR::hideJoint(J3DJoint*)=0x8002D920
MR::hideJoint(J3DModel*, const char*)=0x8002D950
MR::hideJoint(const LiveActor*, const char*)=0x8002D980
MR::hideJointAndChildren(J3DJoint*)=0x8002D9C0
MR::hideJointAndChildren(J3DModel*, const char*)=0x8002DA30
MR::hideJointAndChildren(const LiveActor*, const char*)=0x8002DA60
MR::showJoint(J3DJoint*)=0x8002DAA0
MR::showJoint(J3DModel*, const char*)=0x8002DAD0
MR::showJoint(const LiveActor*, const char*)=0x8002DB00
MR::showJointAndChildren(J3DJoint*)=0x8002DB40
MR::showJointAndChildren(J3DModel*, const char*)=0x8002DBB0
MR::showJointAndChildren(const LiveActor*, const char*)=0x8002DBE0
MR::searchChildJoint(J3DJoint*, J3DJoint*)=0x8002DC20
MR::getParentJoint(J3DModelData*, J3DJoint*)=0x8002DCD0
MR::getParentJoint(const LiveActor*, J3DJoint*)=0x8002DD10
nw4r::ut::detail::RuntimeTypeInfo::IsDerivedFrom(const nw4r::ut::detail::RuntimeTypeInfo*) const=0x8002DDC0
nw4r::lyt::Pane::GetRuntimeTypeInfo(void) const=0x8002DDF0
nw4r::lyt::Pane::SetVisible(bool)=0x8002DEC0
nw4r::ut::LinkList<nw4r::lyt::Pane,4>::GetBeginIter(void)=0x8002DEE0
nw4r::ut::LinkList<nw4r::lyt::Pane,4>::Iterator::__rf(void) const=0x8002DEF0
nw4r::ut::LinkList<nw4r::lyt::Pane,4>::GetEndIter(void)=0x8002DF40
nw4r::ut::__ne(nw4r::ut::LinkList<nw4r::lyt::Pane,4>::Iterator, nw4r::ut::LinkList<nw4r::lyt::Pane,4>::Iterator)=0x8002DF50
@unnamed@LayoutUtil_cpp@::hidePaneRecursive(nw4r::lyt::Pane*)=0x8002DF70
JGeometry::TVec2<float>::set<float>(float, float, _v)=0x8002E070
nw4r::ut::LinkList<nw4r::lyt::Pane,4>::ConstIterator::__rf(void) const=0x8002E180
nw4r::ut::__ne(nw4r::ut::LinkList<nw4r::lyt::Pane,4>::ConstIterator, nw4r::ut::LinkList<nw4r::lyt::Pane,4>::ConstIterator)=0x8002E1E0
@unnamed@LayoutUtil_cpp@::getTextDrawRectRecursive(nw4r::ut::Rect*, const nw4r::lyt::Pane*, bool)=0x8002E200
nw4r::ut::DynamicCast<const nw4r::lyt::TextBox*,const nw4r::lyt::Pane>(const nw4r::lyt::Pane*, _PCQ34nw4r3lyt7TextBox)=0x8002E3A0
@unnamed@LayoutUtil_cpp@::getTextLineNumMaxRecursiveSub(const nw4r::lyt::Pane*)=0x8002E410
MR::createAndAddLayoutHolder(const char*)=0x8002E500
MR::createAndAddLayoutHolderRawData(const char*)=0x8002E510
MR::createAndAddPaneCtrl(LayoutActor*, const char*, unsigned long)=0x8002E520
MR::createAndAddGroupCtrl(LayoutActor*, const char*, unsigned long)=0x8002E570
MR::isExistPaneCtrl(LayoutActor*, const char*)=0x8002E5C0
MR::setInfluencedAlphaToChild(const LayoutActor*)=0x8002E640
MR::setLayoutAlphaFloat(const LayoutActor*, float)=0x8002E6E0
MR::clamp(float, float, float)=0x8002E750
MR::executeTextBoxRecursive(LayoutActor*, const char*, const TextBoxRecursiveOperation&)=0x8002E780
MR::setTextBoxSystemMessageRecursive(LayoutActor*, const char*, const char*)=0x8002E860
MR::setTextBoxGameMessageRecursive(LayoutActor*, const char*, const char*)=0x8002E8B0
MR::setTextBoxNumberRecursive(LayoutActor*, const char*, long)=0x8002E900
MR::setTextBoxMessageRecursive(LayoutActor*, const char*, const wchar_t*)=0x8002E920
TextBoxRecursiveSetMessage::__dt(void)=0x8002E960
MR::setTextBoxFormatRecursive(LayoutActor*, const char*, const wchar_t*, e)=0x8002E9A0
MR::setTextBoxArgNumberRecursive(LayoutActor*, const char*, long, long)=0x8002EA60
TextBoxRecursiveSetArgNumber::__dt(void)=0x8002EAB0
MR::setTextBoxArgStringRecursive(LayoutActor*, const char*, const wchar_t*, long)=0x8002EAF0
TextBoxRecursiveSetArgString::__dt(void)=0x8002EB40
TextBoxRecursiveSetVerticalPosition::__dt(void)=0x8002EBC0
MR::setTextBoxVerticalPositionCenterRecursive(LayoutActor*, const char*)=0x8002EC00
MR::setTextBoxVerticalPositionBottomRecursive(LayoutActor*, const char*)=0x8002EC10
MR::clearTextBoxMessageRecursive(LayoutActor*, const char*)=0x8002EC20
MR::updateClearTimeTextBox(LayoutActor*, const char*, unsigned long)=0x8002EC30
MR::updateMinuteAndSecondTextBox(LayoutActor*, const char*, unsigned long)=0x8002EC80
MR::setTextBoxFontRecursive(LayoutActor*, const char*, nw4r::ut::Font*)=0x8002ECD0
TextBoxRecursiveSetFont::__dt(void)=0x8002ED10
MR::showPane(LayoutActor*, const char*)=0x8002ED50
MR::showPaneRecursive(LayoutActor*, const char*)=0x8002ED90
MR::hidePane(LayoutActor*, const char*)=0x8002EDD0
MR::hidePaneRecursive(LayoutActor*, const char*)=0x8002EE10
MR::isHiddenPane(const LayoutActor*, const char*)=0x8002EE50
MR::showScreen(LayoutActor*)=0x8002EEA0
MR::hideScreen(LayoutActor*)=0x8002EED0
MR::setFollowPos(const JGeometry::TVec2<float>*, const LayoutActor*, const char*)=0x8002EF00
MR::setFollowTypeReplace(const LayoutActor*, const char*)=0x8002EF50
MR::setFollowTypeAdd(const LayoutActor*, const char*)=0x8002EF90
MR::copyPaneTrans(JGeometry::TVec2<float>*, const LayoutActor*, const char*)=0x8002EFD0
MR::getPaneTransX(const LayoutActor*, const char*)=0x8002F030
MR::getPaneTransY(const LayoutActor*, const char*)=0x8002F090
MR::setLayoutPosAtPaneTrans(LayoutActor*, const LayoutActor*, const char*)=0x8002F0F0
MR::copyPaneScale(JGeometry::TVec2<float>*, const LayoutActor*, const char*)=0x8002F130
nw4r::math::VEC2::__as(const nw4r::math::VEC2&)=0x8002F180
MR::setLayoutScaleAtPaneScale(LayoutActor*, const LayoutActor*, const char*)=0x8002F1A0
MR::copyPaneRotate(JGeometry::TVec3<float>*, const LayoutActor*, const char*)=0x8002F210
MR::setPaneRotate(const LayoutActor*, float, float, float, const char*)=0x8002F270
MR::setLayoutScalePosAtPaneScaleTrans(LayoutActor*, const LayoutActor*, const char*)=0x8002F2D0
MR::setLayoutScalePosAtPaneScaleTransIfExecCalcAnim(LayoutActor*, const LayoutActor*, const char*)=0x8002F330
LayoutHolder::getResOther(const char*) const=0x8002F3A0
MR::createLytTexMap(const char*, const char*)=0x8002F3B0
nw4r::lyt::TexMap::__ct(const _GXTexObj&)=0x8002F450
MR::createLytTexMap(ResTIMG*)=0x8002F4A0
MR::getLytTexMap(LayoutActor*, const char*, unsigned char)=0x8002F530
MR::replacePaneTexture(LayoutActor*, const char*, const nw4r::lyt::TexMap*, unsigned char)=0x8002F640
MR::startAnim(LayoutActor*, const char*, unsigned long)=0x8002F720
MR::startAnimAtFirstStep(LayoutActor*, const char*, unsigned long)=0x8002F780
MR::startPaneAnim(LayoutActor*, const char*, const char*, unsigned long)=0x8002F7E0
MR::startPaneAnimAtStep(LayoutActor*, const char*, const char*, long, unsigned long)=0x8002F830
MR::startPaneAnimAtFirstStep(LayoutActor*, const char*, const char*, unsigned long)=0x8002F8A0
MR::startAnimAndSetFrameAndStop(LayoutActor*, const char*, float, unsigned long)=0x8002F910
MR::setAnimFrameAndStop(LayoutActor*, float, unsigned long)=0x8002F9F0
MR::setAnimFrameAndStopAtEnd(LayoutActor*, unsigned long)=0x8002FA50
MR::setAnimFrameAndStopAdjustTextWidth(LayoutActor*, const char*, unsigned long)=0x8002FAD0
nw4r::ut::Rect::__ct(void)=0x8002FB50
MR::setAnimFrameAndStopAdjustTextHeight(LayoutActor*, const char*, unsigned long)=0x8002FB70
MR::setPaneAnimFrameAndStop(LayoutActor*, const char*, float, unsigned long)=0x8002FBF0
MR::setAnimFrame(LayoutActor*, float, unsigned long)=0x8002FC60
MR::setPaneAnimFrame(LayoutActor*, const char*, float, unsigned long)=0x8002FCB0
MR::setAnimRate(LayoutActor*, float, unsigned long)=0x8002FD10
MR::setPaneAnimRate(LayoutActor*, const char*, float, unsigned long)=0x8002FD60
MR::stopAnim(LayoutActor*, unsigned long)=0x8002FDC0
MR::stopPaneAnim(LayoutActor*, const char*, unsigned long)=0x8002FE00
MR::isAnimStopped(const LayoutActor*, unsigned long)=0x8002FE50
MR::isPaneAnimStopped(const LayoutActor*, const char*, unsigned long)=0x8002FE90
MR::getAnimFrame(const LayoutActor*, unsigned long)=0x8002FEE0
MR::getPaneAnimFrame(const LayoutActor*, const char*, unsigned long)=0x8002FF20
MR::getAnimFrameMax(const LayoutActor*, unsigned long)=0x8002FF70
MR::getPaneAnimFrameMax(const LayoutActor*, const char*, unsigned long)=0x8002FFB0
MR::getAnimFrameMax(const LayoutActor*, const char*)=0x80030000
MR::getAnimCtrl(const LayoutActor*, unsigned long)=0x80030040
MR::getPaneAnimCtrl(const LayoutActor*, const char*, unsigned long)=0x80030080
MR::emitEffect(LayoutActor*, const char*)=0x800300D0
MR::deleteEffect(LayoutActor*, const char*)=0x800300E0
MR::forceDeleteEffect(LayoutActor*, const char*)=0x800300F0
MR::deleteEffectAll(LayoutActor*)=0x80030100
MR::forceDeleteEffectAll(LayoutActor*)=0x80030110
MR::setEffectHostMtx(LayoutActor*, const char*, A4_f)=0x80030120
MR::setEffectRate(LayoutActor*, const char*, float)=0x80030160
MR::setEffectDirectionalSpeed(LayoutActor*, const char*, float)=0x800301A0
MR::pauseOffEffectAll(LayoutActor*)=0x800301E0
MR::isRegisteredEffect(const LayoutActor*, const char*)=0x80030260
J2DPicture::draw(float, float, unsigned char, bool, bool, bool)=0x800302B0
MR::isStep(const LayoutActor*, long)=0x80030350
MR::isFirstStep(const LayoutActor*)=0x80030390
MR::isLessStep(const LayoutActor*, long)=0x800303A0
MR::isGreaterStep(const LayoutActor*, long)=0x80030400
MR::isGreaterEqualStep(const LayoutActor*, long)=0x80030440
MR::isIntervalStep(const LayoutActor*, long)=0x80030480
MR::isNewNerve(const LayoutActor*)=0x800304C0
MR::calcNerveEaseInRate(const LayoutActor*, long)=0x800304F0
MR::calcNerveEaseInValue(const LayoutActor*, long, long, float, float)=0x80030580
MR::setNerveAtStep(LayoutActor*, const Nerve*, long)=0x80030710
MR::setNerveAtAnimStopped(LayoutActor*, const Nerve*, unsigned long)=0x80030760
MR::setNerveAtPaneAnimStopped(LayoutActor*, const char*, const Nerve*, unsigned long)=0x800307C0
MR::killAtAnimStopped(LayoutActor*, unsigned long)=0x80030830
MR::isDead(const LayoutActor*)=0x800308A0
MR::isHiddenLayout(const LayoutActor*)=0x800308B0
MR::showLayout(LayoutActor*)=0x800308C0
MR::hideLayout(LayoutActor*)=0x800308D0
MR::isStopAnimFrame(const LayoutActor*)=0x800308E0
MR::stopAnimFrame(LayoutActor*)=0x800308F0
MR::releaseAnimFrame(LayoutActor*)=0x80030900
MR::onCalcAnim(LayoutActor*)=0x80030910
MR::offCalcAnim(LayoutActor*)=0x80030920
MR::isExecuteCalcAnimLayout(const LayoutActor*)=0x80030930
MR::isExecuteDrawLayout(const LayoutActor*)=0x80030970
MR::createSimpleLayout(const char*, const char*, unsigned long)=0x800309B0
MR::createSimpleLayoutTalkParts(const char*, const char*, unsigned long)=0x80030A20
MR::createAndSetupIconAButton(LayoutActor*, bool, bool)=0x80030A90
MR::getPane(const LayoutActor*, const char*)=0x80030B10
LayoutManager::getPane(const char*) const=0x80030B50
MR::getRootPane(const LayoutActor*)=0x80030B90
JGeometry::TBox2<float>::set(const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&)=0x80030BC0
MR::calcTextBoxRectRecursive(JGeometry::TBox2<float>*, const LayoutActor*, const char*)=0x80030BF0
MR::getTextLineNumMaxRecursive(const LayoutActor*, const char*)=0x80030CC0
MR::invalidateParentAnim(LayoutActor*)=0x80030D10
TextBoxRecursiveSetFont::execute(nw4r::lyt::TextBox*) const=0x80030D40
TextBoxRecursiveSetVerticalPosition::execute(nw4r::lyt::TextBox*) const=0x80030DA0
TextBoxRecursiveSetArgString::execute(nw4r::lyt::TextBox*) const=0x80030E20
TextBoxRecursiveSetArgNumber::execute(nw4r::lyt::TextBox*) const=0x80030E40
TextBoxRecursiveSetMessage::execute(nw4r::lyt::TextBox*) const=0x80030E60
MR::loadLight(long)=0x80030E70
MR::loadLightPlayer(void)=0x80030F10
MR::initActorLightInfoLightType(LiveActor*, long)=0x80030F70
MR::initActorLightInfoDrawBuffer(LiveActor*, DrawBuffer*)=0x80030F80
MR::requestPointLight(const LiveActor*, JGeometry::TVec3<float>, Color8, float, long)=0x80031080
MR::setPosition(LiveActor*, const JGeometry::TVec3<float>&)=0x80031170
MR::setPosition(LiveActor*, float, float, float)=0x80031180
MR::setRotation(LiveActor*, const JGeometry::TVec3<float>&)=0x80031190
MR::setRotation(LiveActor*, float, float, float)=0x800311A0
MR::setRotation(LiveActor*, float)=0x800311B0
MR::setScale(LiveActor*, const JGeometry::TVec3<float>&)=0x80031350
MR::setScale(LiveActor*, float, float, float)=0x80031360
MR::setScale(LiveActor*, float)=0x80031370
MR::copyTransRotateScale(const LiveActor*, LiveActor*)=0x80031380
MR::copyTransRotate(const LiveActor*, LiveActor*)=0x800313E0
MR::isValidMovement(const LiveActor*)=0x80031480
MR::isValidCalcAnim(const LiveActor*)=0x800314B0
MR::isValidCalcViewAndEntry(const LiveActor*)=0x800314F0
MR::isValidDraw(const LiveActor*)=0x80031520
MR::calcAnimDirect(LiveActor*)=0x80031560
MR::setClippingTypeSphere(LiveActor*, float)=0x800315C0
MR::setClippingTypeSphere(LiveActor*, float, const JGeometry::TVec3<float>*)=0x80031610
MR::setClippingTypeSphereContainsModelBoundingBox(LiveActor*, float)=0x80031670
MR::setClippingFar50m(LiveActor*)=0x800316E0
MR::setClippingFar100m(LiveActor*)=0x80031720
MR::setClippingFar200m(LiveActor*)=0x80031760
MR::setClippingFar300m(LiveActor*)=0x800317A0
MR::setClippingFarMax(LiveActor*)=0x800317E0
MR::setClippingFar(LiveActor*, float)=0x80031820
MR::setGroupClipping(LiveActor*, const JMapInfoIter&, int)=0x80031970
MR::validateClipping(LiveActor*)=0x800319C0
MR::invalidateClipping(LiveActor*)=0x80031A10
MR::changeShowModelFlagSyncNearClipping(LiveActor*, float)=0x80031A80
MR::isClipped(const LiveActor*)=0x80031AE0
MR::isInvalidClipping(const LiveActor*)=0x80031AF0
MR::setBaseTRMtx(LiveActor*, A4_f)=0x80031B00
MR::setBaseTRMtx(LiveActor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80031B40
MR::setBaseTRMtx(LiveActor*, const JGeometry::TQuat4<float>&)=0x80031B80
MR::setBaseScale(LiveActor*, const JGeometry::TVec3<float>&)=0x80031C80
MR::getResourceHolder(const LiveActor*)=0x80031CD0
MR::getModelResourceHolder(const LiveActor*)=0x80031CF0
MR::getTexFromModel(const char*, const LiveActor*)=0x80031D10
MR::getTexFromArc(const char*, const LiveActor*)=0x80031D80
MR::getModelResName(const LiveActor*)=0x80031DC0
MR::isExistTexture(const LiveActor*, const char*)=0x80031DF0
MR::isExistIndirectTexture(const LiveActor*)=0x80031E40
MR::newDifferedDLBuffer(LiveActor*)=0x80031ED0
MR::initDLMakerFog(LiveActor*, bool)=0x80031EE0
MR::initDLMakerMatColor0(LiveActor*, const char*, const J3DGXColor*)=0x80031EF0
MR::initDLMakerChangeTex(LiveActor*, const char*)=0x80031F10
MR::initDLMakerTexMtx(LiveActor*, const char*)=0x80031FE0
MR::initDLMakerProjmapEffectMtxSetter(LiveActor*)=0x80031FF0
MR::initMirrorReflection(LiveActor*)=0x80032090
MR::setMirrorReflectionInfoFromMtxYUp(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80032100
MR::setMirrorReflectionInfoFromModel(LiveActor*)=0x80032160
MR::changeModelDataTexAll(LiveActor*, const char*, const ResTIMG&)=0x800321A0
MR::initJointTransform(const LiveActor*)=0x80032360
MR::getJointTransform(const LiveActor*, const char*)=0x80032370
MR::getBckFrame(const LiveActor*)=0x80032380
MR::getBtkFrame(const LiveActor*)=0x800323B0
MR::getBrkFrame(const LiveActor*)=0x800323E0
MR::getBtpFrame(const LiveActor*)=0x80032410
MR::getBvaFrame(const LiveActor*)=0x80032440
MR::getBckRate(const LiveActor*)=0x80032470
MR::getBtkRate(const LiveActor*)=0x800324A0
MR::getBrkRate(const LiveActor*)=0x800324D0
MR::getBtpRate(const LiveActor*)=0x80032500
MR::getBpkRate(const LiveActor*)=0x80032530
MR::getBvaRate(const LiveActor*)=0x80032560
MR::getBckFrameMax(const LiveActor*)=0x80032590
MR::getBtkFrameMax(const LiveActor*)=0x800325E0
MR::getBrkFrameMax(const LiveActor*)=0x80032630
MR::getBtpFrameMax(const LiveActor*)=0x80032680
MR::getBvaFrameMax(const LiveActor*)=0x800326D0
MR::getPlayingBckName(const LiveActor*)=0x80032720
MR::reflectBckCtrlData(LiveActor*, const BckCtrlData&)=0x80032730
JAUSoundAnimator::setLoopFrame(float, float)=0x80032840
MR::initLightCtrl(LiveActor*)=0x800329E0
MR::initLightCtrlForPlayer(LiveActor*)=0x80032A20
MR::updateLightCtrl(LiveActor*)=0x80032A70
MR::updateLightCtrlDirect(LiveActor*)=0x80032A80
MR::loadActorLight(const LiveActor*)=0x80032A90
MR::getLightAmbientColor(const LiveActor*)=0x80032AA0
MR::getLightCtrl(const LiveActor*)=0x80032AD0
MR::isStep(const LiveActor*, long)=0x80032AE0
MR::isFirstStep(const LiveActor*)=0x80032B20
MR::isLessStep(const LiveActor*, long)=0x80032B30
MR::isLessEqualStep(const LiveActor*, long)=0x80032B70
MR::isGreaterStep(const LiveActor*, long)=0x80032BB0
MR::isGreaterEqualStep(const LiveActor*, long)=0x80032BF0
MR::isIntervalStep(const LiveActor*, long)=0x80032C30
MR::isNewNerve(const LiveActor*)=0x80032C70
MR::calcNerveRate(const LiveActor*, long)=0x80032CA0
MR::calcNerveRate(const LiveActor*, long, long)=0x80032D20
MR::calcNerveEaseInRate(const LiveActor*, long)=0x80032DB0
MR::calcNerveEaseOutRate(const LiveActor*, long)=0x80032E40
MR::calcNerveEaseOutRate(const LiveActor*, long, long)=0x80032ED0
MR::calcNerveEaseInOutRate(const LiveActor*, long)=0x80032F70
MR::calcNerveEaseInOutRate(const LiveActor*, long, long)=0x80033000
MR::calcNerveValue(const LiveActor*, long, float, float)=0x800330A0
MR::calcNerveValue(const LiveActor*, long, long, float, float)=0x80033160
MR::calcNerveEaseInValue(const LiveActor*, long, float, float)=0x80033230
MR::calcNerveEaseInValue(const LiveActor*, long, long, float, float)=0x800332F0
MR::calcNerveEaseOutValue(const LiveActor*, long, float, float)=0x800333C0
MR::calcNerveEaseOutValue(const LiveActor*, long, long, float, float)=0x80033480
MR::calcNerveEaseInOutValue(const LiveActor*, long, float, float)=0x80033550
MR::calcNerveEaseInOutValue(const LiveActor*, long, long, float, float)=0x80033610
MR::setNerveAtStep(LiveActor*, const Nerve*, long)=0x80033750
MR::setNerveAtBckStopped(LiveActor*, const Nerve*)=0x800337A0
MR::trySetNerve(LiveActor*, const Nerve*)=0x800337F0
MR::isOnGround(const LiveActor*)=0x80033850
MR::isOnGroundCos(const LiveActor*, float)=0x800338E0
MR::isBindedGround(const LiveActor*)=0x80033960
MR::isBindedWall(const LiveActor*)=0x80033990
MR::isBindedWallOfMap(const LiveActor*)=0x800339C0
MR::isBindedWallOfMoveLimit(const LiveActor*)=0x80033A20
MR::isBindedRoof(const LiveActor*)=0x80033A80
MR::isBinded(const LiveActor*)=0x80033AB0
MR::isPressedRoofAndGround(const LiveActor*)=0x80033B10
MR::getGroundNormal(const LiveActor*)=0x80033D60
MR::getWallNormal(const LiveActor*)=0x80033D70
MR::getRoofNormal(const LiveActor*)=0x80033D80
MR::getBindedNormal(const LiveActor*)=0x80033D90
MR::getBindedHitPos(const LiveActor*)=0x80033E30
MR::getGroundHitPos(const LiveActor*)=0x80033EB0
MR::getWallHitPos(const LiveActor*)=0x80033EC0
MR::calcHitPowerToGround(const LiveActor*)=0x80033ED0
MR::calcHitPowerToWall(const LiveActor*)=0x80033F40
MR::getBindedPlaneNum(const LiveActor*)=0x80033FB0
MR::getBindedPlaneNormal(const LiveActor*, int)=0x80033FC0
MR::getBindedPlaneSensor(const LiveActor*, int)=0x80033FF0
MR::getBindedFixReactionVector(const LiveActor*)=0x80034020
MR::setBinderOffsetVec(LiveActor*, const JGeometry::TVec3<float>*, bool)=0x80034030
MR::setBinderRadius(LiveActor*, float)=0x80034050
MR::getBinderRadius(const LiveActor*)=0x80034080
MR::setBinderIgnoreMovingCollision(LiveActor*)=0x80034090
MR::validateExCollisionParts(LiveActor*)=0x800340B0
MR::invalidateExCollisionParts(LiveActor*)=0x800340D0
MR::setBinderCollisionPartsFilter(LiveActor*, CollisionPartsFilterBase*)=0x800340F0
MR::setBinderExceptActor(LiveActor*, const LiveActor*)=0x80034160
MR::setBindTriangleFilter(LiveActor*, TriangleFilterBase*)=0x800341C0
MR::isExistBinder(const LiveActor*)=0x800341D0
MR::onEntryDrawBuffer(LiveActor*)=0x800341E0
MR::offEntryDrawBuffer(LiveActor*)=0x80034240
MR::isDead(const LiveActor*)=0x800342A0
MR::isHiddenModel(const LiveActor*)=0x800342B0
MR::showModel(LiveActor*)=0x800342C0
MR::showModelAndEffects(LiveActor*)=0x80034300
MR::hideModel(LiveActor*)=0x80034350
MR::hideModelAndEffects(LiveActor*)=0x80034390
MR::hideModelAndOnCalcAnim(LiveActor*)=0x800343E0
MR::showModelIfHidden(LiveActor*)=0x80034420
MR::hideModelIfShown(LiveActor*)=0x80034440
MR::hideModelAndOnCalcAnimIfShown(LiveActor*)=0x80034460
MR::isStopAnimFrame(const LiveActor*)=0x800344A0
MR::stopAnimFrame(LiveActor*)=0x800344B0
MR::releaseAnimFrame(LiveActor*)=0x800344C0
MR::isNoCalcAnim(const LiveActor*)=0x800344D0
MR::onCalcAnim(LiveActor*)=0x800344E0
MR::offCalcAnim(LiveActor*)=0x800344F0
MR::isNoCalcView(const LiveActor*)=0x80034500
MR::isNoEntryDrawBuffer(const LiveActor*)=0x80034510
MR::isNoBind(const LiveActor*)=0x80034520
MR::onBind(LiveActor*)=0x80034530
MR::offBind(LiveActor*)=0x80034540
MR::isCalcGravity(const LiveActor*)=0x80034550
MR::onCalcGravity(LiveActor*)=0x80034560
MR::offCalcGravity(LiveActor*)=0x800345A0
MR::joinToGroup(LiveActor*, const char*)=0x80034960
MR::joinToGroupArray(LiveActor*, const JMapInfoIter&, const char*, long)=0x800349B0
MR::getGroupFromArray(const LiveActor*)=0x80034A90
@unnamed@LiveActorUtil_cpp@::callFuncAllGroupMember(const LiveActor*, void(LiveActor*))=0x80034AD0
@unnamed@LiveActorUtil_cpp@::callMethodAllGroupMember(const LiveActor*, M9LiveActorFPCvPv_v)=0x80034B60
MR::callMakeActorDeadAllGroupMember(const LiveActor*)=0x80034BF0
MR::callKillAllGroupMember(const LiveActor*)=0x80034C30
MR::callMakeActorAppearedAllGroupMember(const LiveActor*)=0x80034C70
MR::callAppearAllGroupMember(const LiveActor*)=0x80034CB0
MR::callRequestMovementOnAllGroupMember(const LiveActor*)=0x80034CF0
MR::callInvalidateClippingAllGroupMember(const LiveActor*)=0x80034D00
MR::callValidateClippingAllGroupMember(const LiveActor*)=0x80034D10
MR::addToAttributeGroupSearchTurtle(const LiveActor*)=0x80034D20
MR::isExistInAttributeGroupSearchTurtle(const LiveActor*)=0x80034D60
MR::calcGravity(LiveActor*)=0x80034DA0
MR::calcGravity(LiveActor*, const JGeometry::TVec3<float>&)=0x80034E00
MR::calcGravityOrZero(LiveActor*)=0x80034E60
MR::initFur(LiveActor*)=0x80034F10
MR::initFurEnemy(LiveActor*)=0x80034F20
MR::initFurPlanet(LiveActor*)=0x80034F30
MR::initFurPlayer(LiveActor*)=0x80034F40
MR::initCollisionParts(LiveActor*, const char*, HitSensor*, A4_f)=0x80034F50
MR::initCollisionPartsAutoEqualScale(LiveActor*, const char*, HitSensor*, A4_f)=0x80034F70
MR::initCollisionPartsAutoEqualScaleOne(LiveActor*, const char*, HitSensor*, A4_f)=0x80034F90
MR::initCollisionPartsFromResourceHolder(LiveActor*, const char*, HitSensor*, ResourceHolder*, A4_f)=0x80034FB0
@unnamed@LiveActorUtil_cpp@::createCollisionParts(ResourceHolder*, const char*, HitSensor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, MR::CollisionScaleType, long)=0x80034FC0
MR::createCollisionPartsFromLiveActor(LiveActor*, const char*, HitSensor*, MR::CollisionScaleType)=0x80035120
MR::createCollisionPartsFromLiveActor(LiveActor*, const char*, HitSensor*, A4_fQ22MR18CollisionScaleType)=0x80035190
MR::createCollisionPartsFromResourceHolder(ResourceHolder*, const char*, HitSensor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, MR::CollisionScaleType)=0x80035200
MR::tryCreateCollisionMoveLimit(LiveActor*, HitSensor*)=0x800352B0
MR::tryCreateCollisionWaterSurface(LiveActor*, HitSensor*)=0x80035370
MR::getCollisionBoundingSphereRange(const LiveActor*)=0x80035430
MR::isValidCollisionParts(LiveActor*)=0x80035440
MR::validateCollisionParts(LiveActor*)=0x80035450
MR::validateCollisionParts(CollisionParts*)=0x800354D0
MR::invalidateCollisionParts(LiveActor*)=0x80035520
MR::invalidateCollisionParts(CollisionParts*)=0x80035530
MR::onUpdateCollisionParts(LiveActor*)=0x80035570
MR::onUpdateCollisionPartsOneTimeImmediately(LiveActor*)=0x800355C0
MR::offUpdateCollisionParts(LiveActor*)=0x80035640
@unnamed@LiveActorUtil_cpp@::calcCollisionMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const LiveActor*, const CollisionParts*)=0x800356A0
MR::resetAllCollisionMtx(LiveActor*)=0x80035770
MR::setCollisionMtx(LiveActor*)=0x800357D0
MR::setCollisionMtx(LiveActor*, CollisionParts*)=0x800357E0
MR::getCollisionParts(LiveActor*)=0x80035850
MR::isExistCollisionParts(const LiveActor*)=0x80035860
MR::getCollisionSensorType(const CollisionParts*)=0x80035870
MR::createDemoActor(const char*, const char*, const char*, A4_f)=0x80035900
MR::createModelObjMapObj(const char*, const char*, A4_f)=0x80035B10
MR::createModelObjMapObjStrongLight(const char*, const char*, A4_f)=0x80035B90
MR::createModelObjNoSilhouettedMapObj(const char*, const char*, A4_f)=0x80035C10
MR::createModelObjNoSilhouettedMapObjStrongLight(const char*, const char*, A4_f)=0x80035C90
MR::createModelObjIndirectMapObj(const char*, const char*, A4_f)=0x80035D10
MR::createModelObjPlayerDecoration(const char*, const char*, A4_f)=0x80035D90
MR::createModelObjEnemy(const char*, const char*, A4_f)=0x80035E10
MR::createModelObjNpc(const char*, const char*, A4_f)=0x80035E90
MR::createModelObjBloomModel(const char*, const char*, A4_fb)=0x80035F10
@unnamed@LiveActorUtil_cpp@::createSubModelObjName(const LiveActor*, const char*)=0x80035FA0
@unnamed@LiveActorUtil_cpp@::createSubModel(LiveActor*, const char*, A4_fi)=0x800360D0
MR::createBreakModel(LiveActor*, A4_f)=0x80036200
MR::createBloomModel(LiveActor*, A4_f)=0x80036430
MR::createWaterModel(LiveActor*, A4_f)=0x80036480
MR::createIceModel(LiveActor*, A4_f)=0x800364A0
MR::createIndirectPlanetModel(LiveActor*, A4_f)=0x800364D0
MR::createIndirectModel(LiveActor*, A4_f)=0x800364F0
MR::createPartsModelMapObj(LiveActor*, const char*, const char*, A4_f)=0x80036590
MR::createPartsModelMapObjStrongLight(LiveActor*, const char*, const char*, A4_f)=0x80036610
MR::createPartsModelNoSilhouettedMapObj(LiveActor*, const char*, const char*, A4_f)=0x80036690
MR::createPartsModelEnemy(LiveActor*, const char*, const char*, A4_f)=0x80036710
MR::createPartsModelNpc(LiveActor*, const char*, const char*, A4_f)=0x80036790
MR::createPartsModelIndirectNpc(LiveActor*, const char*, const char*, A4_f)=0x80036820
MR::createPartsModelEnemyAndFix(LiveActor*, const char*, const char*, A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>PCc)=0x800368B0
MR::createPartsModelNpcAndFix(LiveActor*, const char*, const char*, const char*)=0x80036950
MR::createRailObj(const char*, LiveActor*, const JMapInfoIter&, int)=0x800369E0
MR::createLowModelObjName(const LiveActor*)=0x80036A50
MR::createMiddleModelObjName(const LiveActor*)=0x80036A60
MR::createLodCtrlNPC(LiveActor*, const JMapInfoIter&)=0x80036A70
MR::createLodCtrlPlanet(LiveActor*, const JMapInfoIter&, float, long)=0x80036B10
MR::tryCreateMirrorActor(LiveActor*, const char*)=0x80036BC0
MR::stopSceneAtStep(const LiveActor*, long, long)=0x80036C60
MR::tryRumblePadAndCameraDistanceStrong(const LiveActor*, float, float, float)=0x80036CA0
MR::tryRumblePadAndCameraDistanceMiddle(const LiveActor*, float, float, float)=0x80036D50
MR::getBodySensor(LiveActor*)=0x80036F40
MR::setBodySensorType(LiveActor*, unsigned long)=0x80036F50
MR::getMapPartsObjectNameIfExistShapeID(char*, unsigned long, const JMapInfoIter&)=0x80036F90
MR::max(float, float)=0x80037040
JGeometry::TVec3<float>::__mi(const JGeometry::TVec3<float>&) const=0x80037060
MR::initMapPartsClipping(LiveActor*, const JMapInfoIter&, JGeometry::TVec3<float>*, bool)=0x80037080
MR::createMapPartsRailGuideDrawer(LiveActor*, const char*, const JMapInfoIter&)=0x80037160
MR::getJMapInfoArgNoInit(const JMapInfoIter&, const char*, long*)=0x800371B0
MR::getJMapInfoArgNoInit(const JMapInfoIter&, const char*, float*)=0x80037240
MR::getMapPartsArgMoveConditionType(long*, const JMapInfoIter&)=0x800372B0
MR::getMapPartsArgRotateSpeed(float*, const JMapInfoIter&)=0x800372D0
MR::getMapPartsArgRotateTime(long*, const JMapInfoIter&)=0x800372F0
MR::getMapPartsArgRotateAngle(float*, const JMapInfoIter&)=0x80037310
MR::getMapPartsArgRotateAxis(long*, const JMapInfoIter&)=0x80037330
MR::getMapPartsArgRotateAccelType(long*, const JMapInfoIter&)=0x80037350
MR::getMapPartsArgRotateStopTime(long*, const JMapInfoIter&)=0x80037370
MR::getMapPartsArgRotateType(long*, const JMapInfoIter&)=0x80037390
MR::getMapPartsArgShadowType(long*, const JMapInfoIter&)=0x800373B0
MR::getMapPartsArgSignMotionType(long*, const JMapInfoIter&)=0x800373D0
MR::getMapPartsArgMovePosture(long*, const LiveActor*)=0x800373F0
MR::getMapPartsArgMoveStopType(long*, const LiveActor*)=0x80037400
MR::getMapPartsArgRailGuideType(long*, const LiveActor*)=0x80037410
MR::getMapPartsArgRailInitPosType(long*, const LiveActor*)=0x80037420
MR::getMapPartsArgMoveSpeed(float*, const LiveActor*)=0x80037440
MR::getMapPartsArgStopTime(long*, const LiveActor*)=0x80037450
MR::getMapPartsArgAccelTime(long*, const LiveActor*)=0x80037460
MR::getMapPartsArgSpeedCalcType(long*, const LiveActor*)=0x80037470
MR::getMapPartsArgRailRotateSpeed(float*, const LiveActor*, long)=0x80037480
MR::getMapPartsArgRailRotateTime(long*, const LiveActor*, long)=0x800374A0
MR::getMapPartsArgRailRotateAngle(float*, const LiveActor*, long)=0x800374C0
MR::getMapPartsArgRailRotateAxis(long*, const LiveActor*, long)=0x800374E0
MR::getMapPartsArgRailRotateType(long*, const LiveActor*, long)=0x80037500
MR::getMapPartsArgSpeedCalcType(long*, const LiveActor*, long)=0x80037520
MR::getMapPartsArgMoveTimeToNextPoint(long*, const LiveActor*)=0x80037540
MR::isMapPartsSignMotionTypeMoveStart(long)=0x80037550
MR::isMapPartsSignMotionTypeMoveWait(long)=0x80037570
MR::hasMapPartsMoveStartSignMotion(long)=0x80037590
MR::isMapPartsShadowTypeNone(long)=0x800375E0
MR::hasMapPartsShadow(long)=0x800375F0
MR::isMoveStartTypeUnconditional(long)=0x80037600
MR::isMoveStartTypePlayerOnStopEnd(long)=0x80037610
MR::isMapPartsRailInitPosTypeRailPos(long)=0x80037620
MR::isMapPartsRailInitPosTypeRailPoint(long)=0x80037630
MR::isMapPartsRailInitPosTypePoint0(long)=0x80037640
MR::isMapPartsRailSpeedCalcTypeTime(long)=0x80037650
@unnamed@MapUtil_cpp@::getStrikeInfoNumCategory(long)=0x80037660
@unnamed@MapUtil_cpp@::getFirstPolyOnLineCategory(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const TriangleFilterBase*, const CollisionPartsFilterBase*, long)=0x800376A0
Triangle::__as(const Triangle&)=0x80037800
@unnamed@MapUtil_cpp@::getFirstPolyOnLineCategoryExceptSensor(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const HitSensor*, long)=0x80037A10
@unnamed@MapUtil_cpp@::getFirstPolyOnLineCategoryExceptActor(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const LiveActor*, long)=0x80037A90
MR::getNormal(const Triangle*)=0x80037AD0
MR::isWallPolygon(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80037AE0
MR::isFloorPolygon(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80037B50
MR::isFloorPolygonCos(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x80037BB0
MR::isWallPolygon(float)=0x80037C40
MR::isFloorPolygon(float)=0x80037C60
MR::isCeilingPolygon(float)=0x80037CA0
MR::isWaterPolygon(const Triangle*)=0x80037CF0
MR::isThroughPolygon(const Triangle*)=0x80037D80
MR::getFirstPolyOnLineToMap(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80037E30
MR::getFirstPolyOnLineToMapAndMoveLimit(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80037E50
MR::getFirstPolyOnLineToWaterSurface(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80037E60
MR::getFirstPolyOnLineToMapExceptSensor(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const HitSensor*)=0x80037E70
MR::getFirstPolyOnLineToMapExceptActor(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const LiveActor*)=0x80038030
MR::getFirstPolyOnLineToMap(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x80038040
MR::getFirstPolyOnLineToWaterSurface(JGeometry::TVec3<float>*, Triangle*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x800381D0
MR::getFirstPolyNormalOnLineToMap(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, const HitSensor*)=0x800381F0
MR::isExistMapCollision(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80038280
MR::isExistMoveLimitCollision(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80038380
MR::isExistMapCollisionExceptSensor(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const LiveActor*)=0x800383E0
MR::isExistMapCollisionExceptActor(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const LiveActor*)=0x80038450
MR::checkStrikePointToMap(const JGeometry::TVec3<float>&, HitInfo*)=0x80038610
MR::checkStrikeBallToMap(const JGeometry::TVec3<float>&, float)=0x80038710
MR::isFallNextMove(const LiveActor*, float, float, float, const TriangleFilterBase*)=0x80038B00
MR::isFallNextMove(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, float, const TriangleFilterBase*)=0x80038B20
MR::isFallOrDangerNextMove(const LiveActor*, float, float, float)=0x80038CB0
MR::isFallOrDangerNextMove(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, float)=0x80038CF0
MR::calcVelocityMovingPoint(const Triangle*, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*)=0x80038D70
MR::cos(float)=0x80038E30
MR::sin(float)=0x80038E80
MR::createAreaPolygonList(Triangle*, unsigned long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80038EF0
MR::createAreaPolygonListArray(Triangle*, unsigned long, JGeometry::TVec3<float>*, unsigned long)=0x80038F50
MR::trySetMoveLimitCollision(LiveActor*)=0x800390B0
MR::isBindedGroundIce(const LiveActor*)=0x80039120
MR::isBindedGroundSand(const LiveActor*)=0x800391C0
MR::isBindedGroundSnow(const LiveActor*)=0x80039200
MR::isBindedGroundDamageFire(const LiveActor*)=0x80039270
MR::isBindedGroundDamageElectric(const LiveActor*)=0x800392B0
MR::isBindedGroundWaterBottomH(const LiveActor*)=0x800392F0
MR::isBindedGroundWaterBottomM(const LiveActor*)=0x80039330
MR::isBindedGroundWaterBottomL(const LiveActor*)=0x80039370
MR::isBindedGroundWater(const LiveActor*)=0x800393B0
MR::isBindedGroundSinkDeath(const LiveActor*)=0x80039420
MR::isBindedGroundAreaMove(const LiveActor*)=0x80039460
MR::isBindedGroundRailMove(const LiveActor*)=0x800394A0
MR::isBindedGroundBrake(const LiveActor*)=0x800394E0
MR::isBindedGroundSlip(const LiveActor*)=0x80039520
MR::isBindedDamageFire(const LiveActor*)=0x800395F0
MR::getCameraID(const Triangle*)=0x800396E0
MR::getFloorCodeString(const Triangle*)=0x80039720
MR::getWallCodeString(const Triangle*)=0x80039760
MR::getSoundCodeString(const Triangle*)=0x800397A0
MR::getFloorCodeIndex(const JMapInfoIter&)=0x800397E0
MR::getSoundCodeIndex(const JMapInfoIter&)=0x80039820
MR::getFloorCodeIndex(const Triangle*)=0x80039860
MR::getWallCodeIndex(const Triangle*)=0x800398A0
MR::isGroundCodeSnowIter(const JMapInfoIter&)=0x800398E0
MR::isGroundCodePressIter(const JMapInfoIter&)=0x80039950
MR::isGroundCodeWaterIter(const JMapInfoIter&)=0x800399C0
MR::isGroundCodeIceIter(const JMapInfoIter&)=0x80039A10
MR::isGroundCodeDeath(const Triangle*)=0x80039A70
MR::isGroundCodeSlip(const Triangle*)=0x80039AC0
MR::isGroundCodeDamage(const Triangle*)=0x80039B10
MR::isGroundCodeIce(const Triangle*)=0x80039B60
MR::isGroundCodeDamageFire(const Triangle*)=0x80039BB0
MR::isGroundCodeFireDance(const Triangle*)=0x80039C00
MR::isGroundCodeSand(const Triangle*)=0x80039C50
MR::isGroundCodeDamageElectric(const Triangle*)=0x80039CA0
MR::isGroundCodeWaterBottomH(const Triangle*)=0x80039CF0
MR::isGroundCodeWaterBottomM(const Triangle*)=0x80039D40
MR::isGroundCodeWaterBottomL(const Triangle*)=0x80039D90
MR::isGroundCodeWet(const Triangle*)=0x80039DE0
MR::isGroundCodeSinkDeath(const Triangle*)=0x80039E30
MR::isGroundCodeRailMove(const Triangle*)=0x80039E80
MR::isGroundCodeAreaMove(const Triangle*)=0x80039ED0
MR::isGroundCodePress(const Triangle*)=0x80039F20
MR::isGroundCodeNoStampSand(const Triangle*)=0x80039F50
MR::isGroundCodeSinkDeathMud(const Triangle*)=0x80039FA0
MR::isGroundCodeBrake(const Triangle*)=0x80039FF0
MR::isGroundCodeGlassIce(const Triangle*)=0x8003A040
MR::isGroundCodeNoDig(const Triangle*)=0x8003A090
MR::isGroundCodeForceDash(const Triangle*)=0x8003A0E0
MR::isGroundCodeWater(const Triangle*)=0x8003A130
MR::isWallCodeGhostThrough(const Triangle*)=0x8003A160
MR::isWallCodeRebound(const Triangle*)=0x8003A1B0
MR::isWallCodeNoAction(const Triangle*)=0x8003A200
MR::isCameraCodeThrough(const Triangle*)=0x8003A250
MR::isCodeSand(const Triangle*)=0x8003A2A0
MR::getCameraPolyFast(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const HitSensor*)=0x8003A370
MR::getFirstPolyOnLineBFast(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, Triangle*)=0x8003A4D0
Collision::checkStrikeBallToMap(const JGeometry::TVec3<float>&, float, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x8003AB90
Collision::checkStrikeBallToMapWithMovingReaction(const JGeometry::TVec3<float>&, float, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x8003AC00
Collision::checkStrikeBallToMapWithThickness(const JGeometry::TVec3<float>&, float, float, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x8003AC70
Collision::checkStrikeLineToMap(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x8003AE30
Collision::checkStrikeLineToSunshade(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x8003AFA0
Collision::getStrikeInfoMap(unsigned long)=0x8003B090
Collision::getStrikeInfoNumMap(void)=0x8003B190
MR::initAcosTable(void)=0x8003B250
MR::acosEx(float)=0x8003B350
MR::getRandom(void)=0x8003B3F0
MR::getRandom(float, float)=0x8003B440
MR::getRandom(long, long)=0x8003B4A0
MR::getRandomDegree(void)=0x8003B540
MR::isHalfProbability(void)=0x8003B570
MR::getSignHalfProbability(void)=0x8003B5A0
MR::getRandomVector(JGeometry::TVec3<float>*, float)=0x8003B5E0
MR::addRandomVector(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003B690
MR::turnRandomVector(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003B770
MR::getInterpolateValue(float, float, float)=0x8003B820
MR::getLinerValue(float, float, float, float)=0x8003B830
MR::getLinerValueFromMinMax(float, float, float, float, float)=0x8003B850
JGeometry::TUtil<float>::clamp(float, float, float)=0x8003B8E0
MR::getEaseInValue(float, float, float, float)=0x8003B9C0
MR::getEaseOutValue(float, float, float, float)=0x8003BA80
MR::getEaseInOutValue(float, float, float, float)=0x8003BB60
MR::getScaleWithReactionValueZeroToOne(float, float, float)=0x8003BD30
MR::getConvergeVibrationValue(float, float, float, float, float)=0x8003BDD0
MR::getReduceVibrationValue(float, float, float, float, float)=0x8003BE80
MR::makeAxisFrontUp(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003BF50
MR::makeAxisFrontSide(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003BFC0
MR::makeAxisUpFront(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003C030
MR::makeAxisUpSide(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003C0A0
MR::makeAxisVerticalZX(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8003C110
MR::makeAxisCrossPlane(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8003C220
MR::makeAxisAndCosignVecToVec(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003C280
MR::calcPerpendicFootToLine(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003C3A0
MR::calcPerpendicFootToLineInside(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003C460
MR::checkHitSegmentSphere(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, JGeometry::TVec3<float>*)=0x8003C530
MR::checkHitSemilinePlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003C720
MR::calcReboundVelocity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003C800
MR::calcReboundVelocity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, float)=0x8003C8C0
MR::calcParabolicFunctionParam(float*, float*, float, float)=0x8003C9C0
MR::makeQuatRotateRadian(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&)=0x8003CB40
MR::makeQuatRotateDegree(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&)=0x8003CB50
MR::makeQuatFromVec(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003CB70
MR::makeQuatSideUp(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003CBB0
MR::makeQuatUpFront(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003CBF0
MR::makeQuatFrontUp(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003CC30
MR::makeQuatUpNoSupport(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&)=0x8003CC70
MR::blendQuatUpFront(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x8003CCB0
JGeometry::TVec4<float>::set<float>(const JGeometry::TVec4<float>&, _v)=0x8003CE80
JGeometry::TQuat4<float>::setRotate(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003CEB0
MR::blendQuatFrontUp(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x8003CFB0
JGeometry::TQuat4<float>::setRotate(const JGeometry::TVec3<float>&, float)=0x8003D180
MR::rotateQuatMoment(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&)=0x8003D200
MR::rotateQuatRollBall(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003D260
JGeometry::TQuat4<float>::getXDir(JGeometry::TVec3<float>&) const=0x8003D3B0
MR::turnQuat(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003D520
MR::turnQuatXDirRad(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, float)=0x8003D680
MR::turnQuatYDirRad(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, float)=0x8003D6F0
MR::turnQuatZDirRad(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, float)=0x8003D760
MR::turnQuatXDirRate(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, float)=0x8003D7D0
MR::turnQuatYDirRate(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, float)=0x8003D8A0
MR::turnQuatZDirRate(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&, float)=0x8003D970
MR::sign(float)=0x8003DA40
J2DPicture::swap(float&, float&)=0x8003DA70
MR::floatToFixed16(JGeometry::TVec3<short>*, const JGeometry::TVec3<float>&, unsigned char)=0x8003DA90
MR::fixed16ToFloat(JGeometry::TVec3<float>*, const JGeometry::TVec3<short>&, unsigned char)=0x8003DB10
MR::clampVecAngleDeg(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003DBE0
MR::clampLength(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003DD30
MR::convergeRadian(float, float, float)=0x8003DDE0
MR::isInRange(float, float, float)=0x8003DE90
MR::rotateVecDegree(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003E040
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setRotate(const JGeometry::TVec3<float>&, float)=0x8003E0C0
MR::rotateVecDegree(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003E1E0
MR::rotateVecRadian(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float)=0x8003E260
MR::rotateVecRadian(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003E2D0
MR::calcLocalVec(JGeometry::TVec3<float>*, A4_f)=0x8003E410
MR::normalize(JGeometry::TVec2<float>*)=0x8003E4A0
MR::normalize(JGeometry::TVec3<float>*)=0x8003E500
MR::normalize(JGeometry::TVec2<float>*, const JGeometry::TVec2<float>&)=0x8003E510
MR::normalize(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8003E530
MR::normalizeOrZero(JGeometry::TVec2<float>*)=0x8003E570
MR::normalizeOrZero(JGeometry::TVec3<float>*)=0x8003E5D0
MR::normalizeOrZero(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*)=0x8003E630
MR::normalize(float, float, float)=0x8003E670
MR::normalizeAbs(float, float, float)=0x8003E720
MR::normalizeAngleAbs(float)=0x8003E760
MR::separateScalarAndDirection(float*, JGeometry::TVec2<float>*, const JGeometry::TVec2<float>&)=0x8003E7A0
JGeometry::TVec2<float>::dot(const JGeometry::TVec2<float>&) const=0x8003E820
MR::separateScalarAndDirection(float*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8003E840
MR::turnVecToVecCos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, const JGeometry::TVec3<float>&, float)=0x8003E8C0
MR::turnVecToVecCosOnPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003EAD0
MR::turnVecToVecCosOnPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003EC00
MR::turnVecToVecRadian(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, const JGeometry::TVec3<float>&)=0x8003EC20
MR::turnVecToVecDegree(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, const JGeometry::TVec3<float>&)=0x8003EE90
MR::calcMomentRollBall(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003EEC0
MR::calcReflectionVector(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, float)=0x8003EF60
MR::isSameDirection(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003F070
MR::isOppositeDirection(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8003F0F0
MR::isNearZero(float, float)=0x8003F170
MR::isNearZero(const JGeometry::TVec3<float>&, float)=0x8003F1A0
MR::isNearZero(const JGeometry::TVec2<float>&, float)=0x8003F220
MR::diffAngleAbs(float, float)=0x8003F280
MR::isAngleBetween(float, float, float)=0x8003F2C0
MR::blendAngle(float, float, float)=0x8003F380
MR::lerp(unsigned char, unsigned char, float)=0x8003F440
MR::lerp(float, float, float)=0x8003F4C0
MR::lerp(_GXColor, _GXColor, float)=0x8003F4D0
MR::sortSmall(long, float*, long*)=0x8003F570
MR::sortSmall(long, unsigned long*, long*)=0x8003F620
MR::PSvecBlend(const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, float, float)=0x8003F700
MR::vecBlend(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float)=0x8003F730
MR::vecBlendNormal(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float)=0x8003F750
MR::vecBlendSphere(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float)=0x8003F840
MR::blendColor(_GXColor*, const _GXColor&, const _GXColor&, float)=0x8003FA70
MR::turnVecToPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003FBC0
MR::getRotatedAxisY(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8003FC70
MR::getRotatedAxisZ(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8003FD80
MR::getMaxElement(const JGeometry::TVec3<float>&)=0x8003FE00
MR::getMaxAbsElement(const JGeometry::TVec3<float>&)=0x8003FE40
MR::getMaxElementIndex(const JGeometry::TVec3<float>&)=0x8003FE80
MR::getMaxAbsElementIndex(const JGeometry::TVec3<float>&)=0x8003FED0
MR::diffAngleAbsFast(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003FF20
MR::diffAngleAbs(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8003FF50
MR::diffAngleAbs(const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&)=0x80040020
MR::diffAngleSigned(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80040100
MR::diffAngleAbsHorizontal(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80040190
MR::diffAngleSignedHorizontal(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800401F0
MR::isNearAngleRadian(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x800402C0
MR::isNearAngleDegree(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x80040390
MR::isNearAngleRadianHV(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x800403A0
MR::isNearAngleDegreeHV(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x80040500
MR::createBoundingBox(const JGeometry::TVec3<float>*, unsigned long, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x80040510
MR::isNormalize(const JGeometry::TVec3<float>&, float)=0x80040600
MR::setNan(JGeometry::TVec3<float>&)=0x80040650
MR::isNan(const JGeometry::TVec3<float>&)=0x80040670
MR::calcRotateY(float, float)=0x800406E0
MR::vecKillElement(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*)=0x80040830
MR::vecRotAxis(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float)=0x800408A0
MR::rotAxisVecRad(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float)=0x800409D0
MR::getFootPoint(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*)=0x80040A20
MR::mod(float, float)=0x80040B20
MR::calcDirectionVec(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80040B50
MR::CurrentHeapRestorer::__ct(JKRHeap*)=0x80040C60
MR::CurrentHeapRestorer::__dt(void)=0x80040CC0
MR::NewDeleteAllocator::alloc(MEMAllocator*, unsigned long)=0x80040D30
MR::NewDeleteAllocator::free(MEMAllocator*, void*)=0x80040D40
MR::getHomeButtonLayoutAllocator(void)=0x80040D50
MR::getCurrentHeap(void)=0x80040D70
MR::getStationedHeapNapa(void)=0x80040D80
MR::getStationedHeapGDDR3(void)=0x80040D90
MR::getSceneHeapGDDR3(void)=0x80040DB0
MR::getHeapNapa(const JKRHeap*)=0x80040DF0
MR::getHeapGDDR3(const JKRHeap*)=0x80040E00
MR::becomeCurrentHeap(JKRHeap*)=0x80040E10
MR::isEqualCurrentHeap(JKRHeap*)=0x80040E70
MR::adjustHeapSize(JKRExpHeap*, const char*)=0x80040E90
KCollisionServer::isBinaryInitialized(const void*)=0x80040EA0
MR::copyMemory(void*, const void*, unsigned long)=0x800410A0
MR::fillMemory(void*, unsigned char, unsigned long)=0x800411B0
MR::zeroMemory(void*, unsigned long)=0x800411D0
MR::calcCheckSum(const void*, unsigned long)=0x800412D0
MR::allocFromWPadHeap(unsigned long)=0x80041310
MR::freeFromWPadHeap(void*)=0x80041330
MR::JKRHeapAllocator<0>::alloc(MEMAllocator*, unsigned long)=0x80041360
MR::getSystemMessageDirect(const char*)=0x80041380
MR::getGameMessageDirect(const char*)=0x800413C0
MR::getGalaxyNameOnCurrentLanguage(const char*)=0x80041480
MR::getGalaxyNameShortOnCurrentLanguage(const char*)=0x800414C0
MR::getCurrentGalaxyNameOnCurrentLanguage(void)=0x80041500
MR::getScenarioNameOnCurrentLanguage(const char*, long)=0x80041550
MR::getCurrentScenarioNameOnCurrentLanguage(void)=0x80041610
MR::getWorldNameOnCurrentLanguage(long)=0x80041650
MR::getLayoutMessageID(char*, const char*, const char*)=0x80041690
MR::isExistGameMessage(const char*)=0x800416B0
MessageEditorMessageTag::isGroupTagId(int, int) const=0x80041900
MR::countMessageLine(const wchar_t*)=0x80041930
MR::countMessageChar(const wchar_t*)=0x800419D0
MR::countMessageFigure(long)=0x80041B10
MR::getNextMessagePage(const wchar_t*)=0x80041B40
MR::hasME(void)=0x80042240
MR::startSystemME(const char*)=0x800422A0
MR::newJ3DModel(const ResourceHolder*, const char*, J3DMdlFlag)=0x800426C0
MR::updateModelAnimPlayer(LiveActor*)=0x80042BB0
MR::invalidateMtxCalc(J3DModelData*)=0x80042BF0
MR::invalidateJointCallback(J3DModelData*)=0x80042C30
MR::getJ3DModel(const LiveActor*)=0x80042C70
MR::calcJ3DModel(LiveActor*)=0x80042C90
MR::getJ3DModelData(const LiveActor*)=0x80042CF0
MR::getJ3DModelData(const char*)=0x80042D10
MR::getBckFrameMax(const LiveActor*, const char*)=0x80042D70
MR::getBrkFrameMax(const LiveActor*, const char*)=0x80042DB0
MR::getBvaFrameMax(const LiveActor*, const char*)=0x80042DF0
MR::isBckPlaying(XanimePlayer*, const char*)=0x80042E30
MR::getMaterialNo(J3DModel*, const char*)=0x80042F80
MR::getMaterial(J3DModelData*, const char*)=0x80042FB0
MR::getMaterial(J3DModelData*, int)=0x80042FF0
MR::getMaterial(J3DModel*, int)=0x80043000
MR::getMaterialNum(J3DModel*)=0x80043090
MR::getMaterialName(const J3DModelData*, int)=0x800430A0
MR::updateModelDiffDL(LiveActor*)=0x800430B0
MR::isEnvelope(J3DMaterial*)=0x800430E0
MR::hideMaterial(J3DModel*, const char*)=0x800430F0
MR::hideMaterial(const LiveActor*, const char*)=0x80043140
MR::showMaterial(J3DModel*, const char*)=0x80043180
MR::showMaterial(const LiveActor*, const char*)=0x800431D0
MR::isUseTex(J3DMaterial*, unsigned short)=0x800432E0
J3DTevBlock::getTexNo(unsigned long) const=0x800433B0
MR::isNormalTexMtx(J3DMaterial*)=0x800433E0
MR::isUseTexMtxEnvMap(J3DMaterial*)=0x80043640
MR::isUseTexMtxProjMap(J3DMaterial*)=0x80043790
MR::getResTIMG(const LiveActor*, int)=0x80043A40
MR::getResTIMG(const J3DModelData*, int)=0x80043A80
MR::getTexture(ResourceHolder*, const char*)=0x80043AA0
J3DShapeMtx::getUseMtxIndex(unsigned short) const=0x80043C90
MR::copyJointAnimation(LiveActor*, const LiveActor*)=0x80043D60
MR::syncMaterialAnimation(J3DModel*, J3DModel*)=0x80043E00
MR::syncMaterialAnimation(LiveActor*, const LiveActor*)=0x80043E90
MR::getLightNum(J3DMaterial*)=0x800440E0
MR::getLightNumMax(const LiveActor*)=0x80044140
MR::calcModelBoundingBox(JGeometry::TBox3<float>*, const LiveActor*)=0x800442B0
JGeometry::TVec3<float>::__ct(const Vec&)=0x80044550
JGeometry::TVec3<float>::mul(const JGeometry::TVec3<float>&)=0x80044570
MR::calcModelBoundingRadius(float*, const LiveActor*)=0x800445A0
MR::isExistCollisionResource(const LiveActor*, const char*)=0x80044680
MR::isExistModel(const char*)=0x800446E0
MR::isExistSubModel(const char*, const char*)=0x80044730
MR::makeMtxRotate(A4_fsss)=0x800447A0
MR::makeMtxRotate(A4_ffff)=0x80044860
MR::makeMtxRotate(A4_fRCQ29JGeometry8TVec3<float>)=0x800448C0
MR::makeMtxRotateY(A4_ff)=0x800448D0
MR::makeMtxTR(A4_fffffff)=0x80044950
MR::makeMtxTR(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80044AE0
MR::makeMtxTransRotateY(A4_fffff)=0x80044B00
MR::rotateMtxLocalX(A4_ff)=0x80044B60
MR::rotateMtxLocalY(A4_ff)=0x80044C40
MR::rotateMtxLocalZ(A4_ff)=0x80044D20
MR::rotateMtxLocalXDegree(A4_ff)=0x80044E00
MR::rotateMtxLocalYDegree(A4_ff)=0x80044E10
MR::rotateMtxLocalZDegree(A4_ff)=0x80044E20
MR::preScaleMtx(A4_ff)=0x80044E30
MR::preScaleMtx(A4_fRCQ29JGeometry8TVec3<float>)=0x80044E40
MR::preScaleMtx(A4_ffff)=0x80044E50
MR::scaleMtxToLocalMtx(A4_fPA4_fPA4_fRCQ29JGeometry8TVec3<float>)=0x80044EC0
JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setTrans(const JGeometry::TVec3<float>&)=0x80044FB0
MR::scaleMtxToLocalMtx(A4_fPA4_fRCQ29JGeometry8TVec3<float>)=0x80044FD0
MR::scaleMtxToDir(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80044FF0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setXYZDir(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800450E0
JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::zeroTrans(void)=0x80045130
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setScale(float, float, float)=0x80045150
MR::makeMtxTRS(A4_ffffffffff)=0x80045180
MR::makeMtxTRS(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80045370
MR::setMtxAxisXYZ(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x800453C0
MR::flattenMtx(A4_fPA4_fRCQ29JGeometry8TVec3<float>)=0x80045410
MR::flattenMtx(A4_fRCQ29JGeometry8TVec3<float>)=0x800454E0
MR::blendMtxRotate(A4_fPA4_ffPA4_f)=0x800454F0
MR::blendMtxRotateSlerp(A4_fPA4_ffPA4_f)=0x80045570
MR::blendMtx(A4_fPA4_ffPA4_f)=0x800455F0
MR::makeMtxWithoutScale(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x800456E0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getXYZDir(JGeometry::TVec3<float>&, JGeometry::TVec3<float>&, JGeometry::TVec3<float>&) const=0x80045770
MR::makeSRTFromMtxPtr(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, A4_fb)=0x800457F0
JMath::fastReciprocal(float)=0x80045970
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getEuler(JGeometry::TVec3<float>&) const=0x80045980
MR::makeRTFromMtxPtr(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, A4_fb)=0x80045A80
MR::makeMtxSideUp(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045B10
MR::makeMtxSideUpPos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045B90
MR::makeMtxSideFront(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045C20
MR::makeMtxUpSide(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045CA0
MR::makeMtxUpSidePos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045D20
MR::makeMtxUpFront(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045DB0
MR::makeMtxUpFrontPos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045E30
MR::makeMtxFrontSidePos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045EC0
MR::makeMtxFrontUp(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045F50
MR::makeMtxFrontUpPos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80045FD0
MR::makeMtxUpNoSupport(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&)=0x80046060
MR::makeMtxUpNoSupportPos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80046120
MR::makeMtxFrontNoSupport(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&)=0x800461B0
MR::makeMtxFrontNoSupportPos(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80046270
MR::orthogonalize(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80046300
MR::turnMtxToXDirRate(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, float)=0x80046520
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setQuat(const JGeometry::TQuat4<float>&)=0x80046590
MR::turnMtxToXDirDegree(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, float)=0x80046630
MR::turnMtxToYDirRate(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, float)=0x800466B0
MR::turnMtxToYDirDegree(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, float)=0x80046720
MR::turnMtxToLocalDirDegree(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x800467A0
MR::makeMtxMoment(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&)=0x80046890
JGeometry::TVec3<float>::isZero(void) const=0x80046910
JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::makeRotate(const JGeometry::TVec3<float>&, float)=0x80046940
MR::setMtxTrans(A4_ffff)=0x80046B00
MR::addTransMtx(A4_fRCQ29JGeometry8TVec3<float>)=0x80046B10
MR::addTransMtxLocal(A4_fRCQ29JGeometry8TVec3<float>)=0x80046B50
MR::addTransMtxLocalX(A4_ff)=0x80046BB0
MR::addTransMtxLocalY(A4_ff)=0x80046BF0
MR::addTransMtxLocalZ(A4_ff)=0x80046C30
MR::extractMtxXDir(A4_fPQ29JGeometry8TVec3<float>)=0x80046C70
MR::extractMtxYDir(A4_fPQ29JGeometry8TVec3<float>)=0x80046C90
MR::extractMtxZDir(A4_fPQ29JGeometry8TVec3<float>)=0x80046CB0
MR::extractMtxXYZDir(A4_fPQ29JGeometry8TVec3<float>PQ29JGeometry8TVec3<float>PQ29JGeometry8TVec3<float>)=0x80046CD0
MR::extractMtxTrans(A4_fPQ29JGeometry8TVec3<float>)=0x80046D30
MR::sqrt<float>(float, _f)=0x80046EF0
MR::isSameMtx(A4_fPA4_f)=0x80046F30
MR::isSameMtxRot(A4_fPA4_f)=0x80046F70
MR::isRotAxisY(A4_fPA4_f)=0x80046FC0
MR::calcMtxRotAxis(JGeometry::TVec3<float>*, A4_fPA4_f)=0x80047050
MR::tmpMtxTrans(const JGeometry::TVec3<float>&)=0x80047110
MR::tmpMtxScale(float, float, float)=0x80047160
MR::tmpMtxRotXRad(float)=0x80047180
MR::tmpMtxRotYRad(float)=0x800471E0
MR::tmpMtxRotZRad(float)=0x80047240
MR::tmpMtxRotXDeg(float)=0x800472A0
MR::tmpMtxRotYDeg(float)=0x80047300
MR::tmpMtxRotZDeg(float)=0x80047360
MR::orderRotateMtx(short, const JGeometry::TVec3<float>&, A4_f)=0x800473C0
MultiEventCamera::__ct(void)=0x80047510
MultiEventCamera::isEnd(void) const=0x80047570
MultiEventCamera::setUp(const char*, const ActorCameraInfo*, long)=0x80047580
MultiEventCamera::setEndCameraTypeSoon(void)=0x800475E0
MultiEventCamera::setEndCameraTypeAtLanding(void)=0x800475F0
MultiEventCamera::start(long)=0x80047600
MultiEventCamera::start(const CameraTargetArg&, long)=0x80047650
MultiEventCamera::update(void)=0x80047690
MultiEventCamera::nextForce(void)=0x80047710
MultiEventCamera::endForce(void)=0x80047750
MultiEventCamera::endForceSoon(void)=0x80047770
MultiEventCamera::endForceAtLanding(void)=0x80047790
MultiEventCamera::changeTarget(const CameraTargetArg&)=0x800477B0
MultiEventCamera::changeTargetPlayer(void)=0x80047820
MultiEventCamera::isActive(long) const=0x80047870
MultiEventCamera::declareEventCamera(long)=0x800478D0
MultiEventCamera::startCamera(void)=0x80047930
MultiEventCamera::endCamera(long)=0x800479B0
MR::isStep(const NerveExecutor*, long)=0x80047A50
MR::isFirstStep(const NerveExecutor*)=0x80047A90
MR::isLessStep(const NerveExecutor*, long)=0x80047AA0
MR::isLessEqualStep(const NerveExecutor*, long)=0x80047AE0
MR::isGreaterStep(const NerveExecutor*, long)=0x80047B20
MR::isGreaterEqualStep(const NerveExecutor*, long)=0x80047B60
MR::isIntervalStep(const NerveExecutor*, long)=0x80047BA0
MR::isNewNerve(const NerveExecutor*)=0x80047BE0
MR::calcNerveRate(const NerveExecutor*, long)=0x80047C10
MR::calcNerveEaseInRate(const NerveExecutor*, long)=0x80047D20
MR::calcNerveEaseOutRate(const NerveExecutor*, long)=0x80047DB0
MR::calcNerveValue(const NerveExecutor*, long, float, float)=0x80047ED0
MR::calcNerveEaseInOutValue(const NerveExecutor*, long, float, float)=0x800481E0
MR::calcNerveEaseInOutValue(const NerveExecutor*, long, long, float, float)=0x800482A0
MR::setNerveAtStep(NerveExecutor*, const Nerve*, long)=0x80048530
Color8::set(unsigned char, unsigned char, unsigned char, unsigned char)=0x80048580
JGeometry::TVec3<float>::__amu(float)=0x800485C0
MR::getNPCItemData(NPCActorItem*, long)=0x80048650
MR::startNPCTalkCamera(const TalkMessageCtrl*, A4_ffl)=0x80048BA0
MR::startNPCTalkCamera(const TalkMessageCtrl*, A4_fPA4_ffl)=0x80048C00
MR::createNPCGoods(LiveActor*, const char*, const char*)=0x80048E50
MR::createIndirectNPCGoods(LiveActor*, const char*, const char*)=0x80048F40
MR::isActionContinuous(const LiveActor*)=0x80049210
MR::isActionLoopedOrStopped(const LiveActor*)=0x80049270
MR::startMoveAction(NPCActor*)=0x800492D0
MR::tryStartTalkAction(NPCActor*)=0x80049370
MR::tryStartMoveTalkAction(NPCActor*)=0x800494B0
MR::tryStartTurnAction(NPCActor*)=0x80049610
MR::tryStartReaction(NPCActor*)=0x80049770
MR::tryTalkNearPlayerAndStartTalkAction(NPCActor*)=0x80049AA0
MR::tryTalkNearPlayerAndStartMoveTalkAction(NPCActor*)=0x80049AE0
MR::tryTalkNearPlayerAtEndAndStartTalkAction(NPCActor*)=0x80049B20
MR::tryTalkNearPlayerAtEndAndStartMoveTalkAction(NPCActor*)=0x80049B60
MR::tryStartReactionAndPushNerve(NPCActor*, const Nerve*)=0x80049BE0
MR::tryStartReactionAndPopNerve(NPCActor*)=0x80049C40
TakeOutStar::__ct(NPCActor*, const char*, const char*, const Nerve*, long)=0x8004A160
TakeOutStar::exeAnim(void)=0x8004A270
TakeOutStar::exeDemo(void)=0x8004A4E0
FadeStarter::exeFade(void)=0x8004A5A0
DemoStarter::exeFade(void)=0x8004A6C0
short::(nit_\NPCUtil_cpp)=0x8004A840
NrvTakeOutStar::TakeOutStarNrvAnim::__ct(void)=0x8004A8B0
NrvTakeOutStar::TakeOutStarNrvDemo::__ct(void)=0x8004A8C0
NrvTakeOutStar::TakeOutStarNrvTerm::__ct(void)=0x8004A8D0
NrvFadeStarter::FadeStarterNrvFade::__ct(void)=0x8004A8E0
NrvFadeStarter::FadeStarterNrvTerm::__ct(void)=0x8004A8F0
NrvDemoStarter::DemoStarterNrvInit::__ct(void)=0x8004A900
NrvDemoStarter::DemoStarterNrvFade::__ct(void)=0x8004A910
NrvDemoStarter::DemoStarterNrvWait::__ct(void)=0x8004A920
NrvDemoStarter::DemoStarterNrvTerm::__ct(void)=0x8004A930
NrvDemoStarter::DemoStarterNrvTerm::execute(Spine*) const=0x8004A940
NrvDemoStarter::DemoStarterNrvWait::execute(Spine*) const=0x8004A950
NrvDemoStarter::DemoStarterNrvFade::execute(Spine*) const=0x8004A9B0
NrvDemoStarter::DemoStarterNrvInit::execute(Spine*) const=0x8004A9C0
NrvFadeStarter::FadeStarterNrvTerm::execute(Spine*) const=0x8004A9D0
NrvFadeStarter::FadeStarterNrvFade::execute(Spine*) const=0x8004A9E0
NrvTakeOutStar::TakeOutStarNrvTerm::execute(Spine*) const=0x8004A9F0
NrvTakeOutStar::TakeOutStarNrvDemo::execute(Spine*) const=0x8004AA00
NrvTakeOutStar::TakeOutStarNrvAnim::execute(Spine*) const=0x8004AA10
MR::isJudgedToClipFrustum(const JGeometry::TVec3<float>&, float)=0x8004AA20
MR::isJudgedToClipFrustum300m(const JGeometry::TVec3<float>&, float)=0x8004AAC0
MR::isJudgedToNearClip(const JGeometry::TVec3<float>&, float)=0x8004AB10
MR::isInWater(const JGeometry::TVec3<float>&)=0x8004ABD0
MR::isInDeath(const JGeometry::TVec3<float>&)=0x8004AC10
MR::isInDarkMatter(const JGeometry::TVec3<float>&)=0x8004AC20
MR::connectToScene(LiveActor*, int, int, int, int)=0x8004AC30
MR::connectToScene(NameObj*, int, int, int, int)=0x8004AC40
MR::connectToSceneCollisionMapObj(LiveActor*)=0x8004AC80
MR::connectToSceneCollisionMapObjWeakLight(LiveActor*)=0x8004ACA0
MR::connectToSceneCollisionMapObjStrongLight(LiveActor*)=0x8004ACC0
MR::connectToSceneCollisionEnemy(LiveActor*)=0x8004ACE0
MR::connectToSceneCollisionEnemyStrongLight(LiveActor*)=0x8004AD00
MR::connectToSceneCollisionEnemyNoShadowedMapObjStrongLight(LiveActor*)=0x8004AD20
MR::connectToSceneNpc(LiveActor*)=0x8004AD40
MR::connectToSceneNpcMovement(LiveActor*)=0x8004AD60
MR::connectToSceneRide(LiveActor*)=0x8004AD80
MR::connectToSceneEnemy(LiveActor*)=0x8004ADA0
MR::connectToSceneEnemyMovement(NameObj*)=0x8004ADC0
MR::connectToSceneMapObj(LiveActor*)=0x8004AE10
MR::connectToSceneMapObjMovement(NameObj*)=0x8004AE30
MR::connectToSceneMapObjMovementCalcAnim(NameObj*)=0x8004AE80
MR::connectToSceneMapObjNoMovement(LiveActor*)=0x8004AED0
MR::connectToSceneMapObjNoCalcAnim(LiveActor*)=0x8004AEF0
MR::connectToSceneMapObjNoCalcAnimStrongLight(LiveActor*)=0x8004AF10
MR::connectToSceneMapObjDecoration(LiveActor*)=0x8004AF30
MR::connectToSceneMapObjDecorationStrongLight(LiveActor*)=0x8004AF50
MR::connectToSceneMapObjDecorationMovement(NameObj*)=0x8004AF70
MR::connectToSceneMapObjStrongLight(LiveActor*)=0x8004AFC0
MR::connectToScenePlanet(LiveActor*)=0x8004AFE0
MR::connectToSceneEnvironment(LiveActor*)=0x8004B050
MR::connectToSceneEnvironmentStrongLight(LiveActor*)=0x8004B070
MR::connectToClippedMapParts(LiveActor*)=0x8004B090
MR::connectToSceneEnemyDecoration(LiveActor*)=0x8004B0B0
MR::connectToSceneEnemyDecorationMovement(NameObj*)=0x8004B0D0
MR::connectToSceneEnemyDecorationMovementCalcAnim(NameObj*)=0x8004B120
MR::connectToSceneItem(LiveActor*)=0x8004B170
MR::connectToSceneItemStrongLight(LiveActor*)=0x8004B190
MR::connectToSceneIndirectEnemy(LiveActor*)=0x8004B1B0
MR::connectToSceneIndirectNpc(LiveActor*)=0x8004B1D0
MR::connectToSceneIndirectMapObj(LiveActor*)=0x8004B1F0
MR::connectToSceneIndirectMapObjStrongLight(LiveActor*)=0x8004B210
MR::connectToSceneScreenEffectMovement(NameObj*)=0x8004B230
MR::connectToSceneAreaObj(NameObj*)=0x8004B280
MR::connectToScene3DModelFor2D(LiveActor*)=0x8004B2D0
MR::connectToSceneLayout(NameObj*)=0x8004B2F0
MR::connectToSceneLayoutMovementCalcAnim(NameObj*)=0x8004B3E0
MR::connectToSceneLayoutDecoration(NameObj*)=0x8004B430
MR::connectToSceneTalkLayout(NameObj*)=0x8004B480
MR::connectToSceneWipeLayout(NameObj*)=0x8004B4D0
MR::connectToSceneLayoutOnPause(NameObj*)=0x8004B520
MR::connectToSceneLayoutMovement(NameObj*)=0x8004B570
MR::connectToSceneMirrorMapObj(LiveActor*)=0x8004B5C0
MR::connectToSceneMirrorMapObjDecoration(LiveActor*)=0x8004B5E0
MR::connectToSceneCamera(NameObj*)=0x8004B600
MR::connectToSceneNoShadowedMapObj(LiveActor*)=0x8004B650
MR::connectToSceneNoShadowedMapObjStrongLight(LiveActor*)=0x8004B670
MR::connectToSceneNoSilhouettedMapObj(LiveActor*)=0x8004B690
MR::connectToSceneNoSilhouettedMapObjStrongLight(LiveActor*)=0x8004B6B0
MR::connectToSceneSky(LiveActor*)=0x8004B730
MR::connectToSceneAir(LiveActor*)=0x8004B750
MR::connectToSceneSun(LiveActor*)=0x8004B770
MR::requestMovementOn(NameObj*)=0x8004B7F0
MR::requestMovementOn(LiveActor*)=0x8004B800
MR::requestMovementOn(LayoutActor*)=0x8004B850
MR::requestMovementOff(NameObj*)=0x8004B860
MR::requestMovementOff(LiveActor*)=0x8004B870
MR::requestMovementOff(LayoutActor*)=0x8004B8C0
MR::joinToNameObjGroup(NameObj*, const char*)=0x8004B8D0
MR::registerPreDrawFunction(const MR::FunctorBase&, int)=0x8004B920
MR::createDrawAdaptor(const char*, const MR::FunctorBase&)=0x8004B9E0
MR::createAdaptorAndConnectToDrawBloomModel(const char*, const MR::FunctorBase&)=0x8004BA70
MR::listenNameObjStageSwitchOnAppear(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&)=0x8004BB00
MR::listenNameObjStageSwitchOnOffAppear(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&, const MR::FunctorBase&)=0x8004BB70
MR::listenNameObjStageSwitchOnA(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&)=0x8004BBF0
MR::listenNameObjStageSwitchOnOffA(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&, const MR::FunctorBase&)=0x8004BC60
MR::listenNameObjStageSwitchOnB(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&)=0x8004BCE0
MR::listenNameObjStageSwitchOffB(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&)=0x8004BD50
MR::listenNameObjStageSwitchOnOffB(const NameObj*, const StageSwitchCtrl*, const MR::FunctorBase&, const MR::FunctorBase&)=0x8004BDC0
MR::createAndAddResourceHolder(const char*)=0x8004BE40
MR::loadTexFromArc(const char*, const char*, ResTIMG*)=0x8004BF10
MR::loadTexFromArc(const char*)=0x8004BF20
MR::isExistFileInArc(const ResourceHolder*, const char*, e)=0x8004C000
@unnamed@ObjUtil_cpp@::tryCreateCsvParserLocal(const ResourceHolder*, const char*, __va_list_struct*)=0x8004C090
MR::createCsvParser(const ResourceHolder*, const char*, e)=0x8004C160
MR::createCsvParser(const char*, const char*, e)=0x8004C1F0
MR::tryCreateCsvParser(const LiveActor*, const char*, e)=0x8004C290
MR::tryCreateCsvParser(const ResourceHolder*, const char*, e)=0x8004C330
MR::getCsvDataElementNum(const JMapInfo*)=0x8004C6D0
MR::getCsvDataStr(const char*, const JMapInfo*, const char*, long)=0x8004C6F0
JMapInfo::getValue<const char*>(int, const char*, const char*, _Cb) const=0x8004C710
MR::getCsvDataStrOrNULL(const char*, const JMapInfo*, const char*, long)=0x8004C780
MR::getCsvDataS32(long*, const JMapInfo*, const char*, long)=0x8004C7D0
JMapInfo::getValue<long>(int, const char*, long*, _Cb) const=0x8004C7F0
MR::getCsvDataU32(long*, const JMapInfo*, const char*, long)=0x8004C860
MR::getCsvDataS16(short*, const JMapInfo*, const char*, long)=0x8004C8D0
MR::getCsvDataU8(unsigned char*, const JMapInfo*, const char*, long)=0x8004C920
MR::getCsvDataF32(float*, const JMapInfo*, const char*, long)=0x8004C970
MR::getCsvDataBool(bool*, const JMapInfo*, const char*, long)=0x8004C9F0
MR::getCsvDataVec(Vec*, const JMapInfo*, const char*, long)=0x8004CA80
MR::getCsvDataColor(_GXColor*, const JMapInfo*, const char*, long)=0x8004CB40
JMapInfoIter::__eq(const JMapInfoIter&) const=0x8004CD00
JMapInfo::end(void) const=0x8004CD50
JMapInfo::findElement<long>(const char*, long, int, _12JMapInfoIter) const=0x8004CE30
MR::declarePowerStar(const NameObj*)=0x8004D2E0
MR::declarePowerStar(const NameObj*, long)=0x8004D2F0
MR::declarePowerStarCoin100(void)=0x8004D300
MR::appearPowerStarContinueCurrentDemo(const NameObj*, const JGeometry::TVec3<float>&)=0x8004D310
MR::appearPowerStarWithoutDemo(const NameObj*)=0x8004D330
MR::requestAppearPowerStar(const NameObj*, const JGeometry::TVec3<float>&)=0x8004D3F0
MR::requestAppearPowerStar(const NameObj*, long, const JGeometry::TVec3<float>&)=0x8004D410
MR::requestAppearPowerStar(const NameObj*, const LiveActor*, float)=0x8004D430
MR::requestAppearPowerStarCoin100(void)=0x8004D500
MR::isEndPowerStarAppearDemo(const NameObj*)=0x8004D520
MR::createPowerStarDemoModel(const NameObj*, const char*, A4_f)=0x8004D530
MR::declareCoin(const NameObj*, long)=0x8004D5D0
MR::getDeclareRemnantCoinCount(const NameObj*)=0x8004D620
MR::hopCoin(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8004D6A0
MR::appearCoinPop(const NameObj*, const JGeometry::TVec3<float>&, long)=0x8004D6F0
MR::appearCoinPopToDirection(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x8004D740
MR::appearCoinToVelocity(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x8004D7F0
MR::appearCoinCircle(const NameObj*, const JGeometry::TVec3<float>&, long)=0x8004D850
MR::declareStarPiece(const NameObj*, long)=0x8004D8A0
MR::getDeclareRemnantStarPieceCount(const NameObj*)=0x8004D8F0
MR::getDeclareRemnantStarPieceCountNotExist(const NameObj*)=0x8004D930
MR::declareStarPieceReceiver(const NameObj*, long)=0x8004D970
MR::clearGotCountStarPieceReceiver(const NameObj*)=0x8004D9C0
MR::hopStarPiece(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8004DA00
MR::appearStarPiece(const NameObj*, const JGeometry::TVec3<float>&, long, float, float, bool)=0x8004DA50
MR::appearStarPieceToDirection(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, float, float, bool)=0x8004DAD0
MR::initStarPieceGetCSSound(void)=0x8004DBE0
MR::createKinokoOneUp(void)=0x8004DC10
BenefitItemObj::__dt(void)=0x8004DC90
LiveActor::__dt(void)=0x8004DCF0
MR::appearKinokoOneUpPop(BenefitItemObj*, A4_ff)=0x8004DD50
MR::createKinokoSuper(void)=0x8004DF40
MR::appearKinokoSuper(BenefitItemLifeUp*, A4_ff)=0x8004DFB0
MR::stopScene(long)=0x8004DFF0
MR::stopSceneForDefaultHit(long)=0x8004E030
MR::tryRumblePad(const void*, const char*, long)=0x8004E070
MR::tryRumblePadVeryStrong(const void*, long)=0x8004E0C0
MR::tryRumblePadStrong(const void*, long)=0x8004E100
MR::tryRumblePadMiddle(const void*, long)=0x8004E140
MR::tryRumblePadWeak(const void*, long)=0x8004E180
MR::tryRumblePadVeryWeak(const void*, long)=0x8004E1C0
MR::tryRumbleDefaultHit(const void*, long)=0x8004E2B0
MR::shakeCameraVeryStrong(void)=0x8004E2F0
MR::shakeCameraStrong(void)=0x8004E320
MR::shakeCameraNormalStrong(void)=0x8004E350
MR::shakeCameraNormal(void)=0x8004E380
MR::shakeCameraNormalWeak(void)=0x8004E3B0
MR::shakeCameraWeak(void)=0x8004E3E0
MR::shakeCameraVeryWeak(void)=0x8004E410
MR::shakeCameraInfinity(NameObj*, float, float)=0x8004E440
MR::stopShakingCamera(NameObj*)=0x8004E4B0
MR::isName(const NameObj*, const char*)=0x8004E4F0
MR::isSame(const NameObj*, const NameObj*)=0x8004E520
MR::tryRegisterNamePosLinkObj(const NameObj*, const JMapInfoIter&, const char*)=0x8004E530
MR::findNamePos(const char*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8004E5E0
MR::findNamePosOnGround(const char*, A4_f)=0x8004E630
MR::tryFindNamePos(const char*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8004E810
MR::tryFindLinkNamePos(const NameObj*, const char*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8004E870
MR::tryFindLinkNamePos(const NameObj*, const char*, A4_f)=0x8004E8D0
LiveActor::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8004E970
LiveActor::receiveMsgPush(HitSensor*, HitSensor*)=0x8004E980
LiveActor::updateHitSensor(HitSensor*)=0x8004E990
BenefitItemOneUp::__dt(void)=0x8004E9A0
short::(nit_\ObjUtil_cpp)=0x8004EA00
ParabolicPath::__ct(void)=0x8004EA20
ParabolicPath::initFromMaxHeight(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8004EAA0
ParabolicPath::initFromUpVector(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8004EB30
ParabolicPath::initFromUpVectorAddHeight(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8004EC30
ParabolicPath::calcPosition(JGeometry::TVec3<float>*, float) const=0x8004ECD0
ParabolicPath::calcDirection(JGeometry::TVec3<float>*, float, float) const=0x8004ED80
ParabolicPath::getLength(float, float, long) const=0x8004EE40
ParabolicPath::calcPathSpeedFromAverageSpeed(float) const=0x8004EF50
MR::isOnGroundPlayer(void)=0x8004EFA0
MR::getPlayerGroundingPolygon(void)=0x8004EFB0
MR::forceKillPlayerByAbyss(void)=0x8004EFC0
MR::forceKillPlayerByWaterOrGroundRace(void)=0x8004EFD0
MR::forceKillPlayerByGroundRace(void)=0x8004F020
MR::isPlayerDead(void)=0x8004F040
MR::isPlayerRefuseTalk(void)=0x8004F070
MR::isPlayerTeresaDisappear(void)=0x8004F0A0
MR::isPlayerInAreaObj(const char*)=0x8004F0B0
MR::getPlayerPos(void)=0x8004F0F0
MR::getPlayerCenterPos(void)=0x8004F140
MR::getPlayerTakePos(JGeometry::TVec3<float>*)=0x8004F170
MR::setPlayerPos(const JGeometry::TVec3<float>&)=0x8004F180
MR::setPlayerUpperRotateY(float)=0x8004F190
MR::getPlayerRotate(void)=0x8004F1D0
MR::getPlayerShadowRotate(void)=0x8004F200
MR::copyPlayerTR(LiveActor*)=0x8004F230
MR::getPlayerVelocity(void)=0x8004F280
MR::getPlayerLastMove(void)=0x8004F290
MR::setPlayerJumpVec(const JGeometry::TVec3<float>&)=0x8004F2A0
MR::getPlayerHitRadius(void)=0x8004F2B0
MR::getPlayerGravity(void)=0x8004F320
MR::calcPlayerSpinPullVelocity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8004F350
MR::checkPlayerSwingTrigger(void)=0x8004F360
MR::calcDistanceToPlayer(const JGeometry::TVec3<float>&)=0x8004F390
MR::getPlayerUpVec(JGeometry::TVec3<float>*)=0x8004F3D0
MR::getPlayerFrontVec(JGeometry::TVec3<float>*)=0x8004F410
MR::getPlayerSideVec(JGeometry::TVec3<float>*)=0x8004F450
MR::getPlayerThrowVec(JGeometry::TVec3<float>*)=0x8004F490
MR::getPlayerGroundPos(JGeometry::TVec3<float>*)=0x8004F4A0
MR::getPlayerGroundNormal(void)=0x8004F4E0
MR::setPlayerFrontTargetVec(const JGeometry::TVec3<float>&, long)=0x8004F510
MR::setPlayerFrontVec(const JGeometry::TVec3<float>&, long)=0x8004F520
MR::setPlayerSwingInhibitTimer(unsigned short)=0x8004F530
MR::setPlayerSwingPermission(bool)=0x8004F560
MR::setPlayerStateWait(void)=0x8004F590
MR::startBckPlayer(const char*, const char*)=0x8004F5A0
MR::startBckPlayer(const char*, const BckCtrlData&)=0x8004F5C0
MR::isBckStoppedPlayer(void)=0x8004F700
MR::isBckOneTimeAndStoppedPlayer(void)=0x8004F730
MR::getBckFrameMaxPlayer(void)=0x8004F760
MR::getBckFrameMaxPlayer(const char*)=0x8004F770
MR::startBckPlayerJ(const char*)=0x8004F7B0
MR::becomeContinuousBckPlayer(void)=0x8004F7C0
MR::progressPlayerBckOnPause(void)=0x8004F7D0
MR::getPlayerCurrentBckName(void)=0x8004F7E0
MR::setBckBlendWeight(float, float)=0x8004F7F0
MR::setBckBlendWeight(float, float, float)=0x8004F830
MR::setBckBlendWeight(float, float, float, float)=0x8004F880
MR::setBckRatePlayer(float)=0x8004F8C0
MR::getPlayerXanimeResource(void)=0x8004F9A0
MR::jumpPlayer(const JGeometry::TVec3<float>&)=0x8004F9D0
MR::forceJumpPlayer(const JGeometry::TVec3<float>&)=0x8004F9E0
MR::forceFlyPlayer(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x8004F9F0
MR::tornadoJumpPlayer(void)=0x8004FA00
MR::miniTornadoJumpPlayer(void)=0x8004FA10
MR::becomePlayerNormalJumpStatus(void)=0x8004FA30
MR::isOnPlayer(const HitSensor*)=0x8004FA40
MR::isActorOnPlayer(const LiveActor*)=0x8004FAD0
MR::isOnPlayerShadow(const LiveActor*)=0x8004FB40
MR::setPlayerPos(const char*)=0x8004FB90
MR::setPlayerPosAndWait(const JGeometry::TVec3<float>&)=0x8004FBF0
MR::setPlayerPosAndWait(const char*)=0x8004FC50
MR::setPlayerLinkPosAndWait(const NameObj*, const char*, bool)=0x8004FCB0
MR::setPlayerPosOnGround(const char*)=0x8004FD30
MR::setPlayerPosOnGroundAndWait(const char*)=0x8004FD80
MR::isPlayerHipDropFalling(void)=0x8004FDF0
MR::isPlayerHipDropLand(void)=0x8004FE00
MR::incPlayerLife(unsigned long)=0x8004FE60
MR::incPlayerOxygen(unsigned long)=0x8004FE70
MR::isPlayerConfrontDeath(void)=0x8004FE80
MR::getStarPiecePlayer(void)=0x8004FE90
MR::notifyDirectGetStarPiecePlayer(void)=0x8004FEA0
MR::scatterStarPiecePlayer(unsigned long)=0x8004FEB0
MR::isPlayerSwingAction(void)=0x8004FED0
MR::isPlayerPointedBy2POnTriggerButton(void)=0x8004FF00
MR::isPlayerSquat(void)=0x8004FF30
MR::isPlayerInRush(void)=0x8004FF40
MR::isPlayerRecovering(void)=0x8004FF50
MR::isPlayerNeedBrakingCamera(void)=0x8004FF60
MR::isPlayerFlying(void)=0x8004FFC0
MR::isPlayerHanging(void)=0x80050000
MR::isPlayerBury(void)=0x80050010
MR::isPlayerElementModeTornado(void)=0x80050030
MR::isPlayerElementModeInvincible(void)=0x80050060
MR::isPlayerElementModeBee(void)=0x80050090
MR::isPlayerElementModeHopper(void)=0x800500C0
MR::isPlayerElementModeTeresa(void)=0x800500F0
MR::isPlayerElementModeIce(void)=0x80050120
MR::isPlayerElementModeFire(void)=0x80050150
MR::isPlayerElementModeYoshi(void)=0x80050180
MR::isPlayerElementModeCloud(void)=0x800501B0
MR::isPlayerElementModeRock(void)=0x800501E0
MR::isPlayerElementModeNormal(void)=0x80050210
MR::changePlayerModeBee(void)=0x80050240
MR::changePlayerModeHopper(void)=0x80050250
MR::changePlayerModeTeresa(void)=0x80050260
MR::changePlayerModeIce(void)=0x80050270
MR::changePlayerModeFire(void)=0x80050280
MR::changePlayerModeYoshi(void)=0x80050290
MR::changePlayerModeCloud(void)=0x800502A0
MR::changePlayerModeRock(void)=0x800502B0
MR::changePlayerModeFoo(void)=0x800502C0
MR::changePlayerModeInvincible(void)=0x800502D0
MR::changePlayerItemLifeUp(void)=0x800502E0
MR::curePlayerElementMode(void)=0x800502F0
MR::isPlayerParalyzing(void)=0x80050310
MR::isPlayerDamaging(void)=0x80050320
MR::isPlayerStaggering(void)=0x800503B0
MR::isPlayerSwimming(void)=0x800503E0
MR::isPlayerSleeping(void)=0x800503F0
MR::isPlayerJumpRising(void)=0x80050420
MR::endBindAndPlayerWait(LiveActor*)=0x80050450
MR::endBindAndPlayerJump(LiveActor*, const JGeometry::TVec3<float>&, unsigned long)=0x800504B0
MR::endBindAndPlayerForceJump(LiveActor*, const JGeometry::TVec3<float>&, unsigned long)=0x80050500
MR::endBindAndPlayerWeakGravityJump(LiveActor*, const JGeometry::TVec3<float>&)=0x80050550
MR::endBindAndPlayerForceWeakGravityJump(LiveActor*, const JGeometry::TVec3<float>&)=0x80050590
MR::endBindAndPlayerForceWeakGravityJumpInputOff(LiveActor*, const JGeometry::TVec3<float>&)=0x800505E0
MR::endBindAndPlayerWeakGravityLimitJump(LiveActor*, const JGeometry::TVec3<float>&)=0x80050630
MR::endBindAndSpinDriverJump(LiveActor*, const JGeometry::TVec3<float>&)=0x80050680
MR::endBindAndPlayerDamage(LiveActor*, const JGeometry::TVec3<float>&)=0x800506D0
MR::endBindAndPlayerFlip(LiveActor*, const JGeometry::TVec3<float>&)=0x80050730
MR::endBindAndPlayerJumpWithRollLanding(LiveActor*, const JGeometry::TVec3<float>&, unsigned long)=0x80050790
MR::endBindAndPlayerDamageMsg(LiveActor*, unsigned long)=0x800507E0
MR::endBindAndPlayerDamageMsg(LiveActor*, unsigned long, const JGeometry::TVec3<float>&)=0x80050840
MR::endBindAndPlayerAcidDamage(LiveActor*)=0x80050900
MR::endBindAndPlayerFreezeDamage(LiveActor*)=0x80050980
MR::endBindAndPlayerFireDamage(LiveActor*)=0x80050A00
MR::endBindAndPlayerElectricDamage(LiveActor*)=0x80050A80
MR::getCurrentRushActor(void)=0x80050B00
MR::getCurrentRushSensor(void)=0x80050B40
MR::tryPlayerCoinPull(void)=0x80050B80
MR::tryPlayerPullActor(HitSensor*)=0x80050B90
MR::tryPlayerDropTakingActor(void)=0x80050BD0
MR::tryPlayerKillTakingActor(void)=0x80050BE0
MR::isPlayerCarrySensorType(long)=0x80050BF0
MR::isPlayerCarryAny(void)=0x80050C50
MR::getPlayerCarrySensorType(void)=0x80050C80
MR::startSoundPlayer(const char*, long)=0x80050CC0
MR::startLevelSoundPlayer(const char*, long, long)=0x80050D60
MR::stopSoundPlayer(const char*, unsigned long)=0x80050EB0
MR::startSoundPlayerJ(const char*)=0x80050F00
MR::emitEffectPlayer(const char*)=0x80050F40
MR::deleteEffectPlayer(const char*)=0x80050F80
MR::showPlayer(void)=0x80050FC0
MR::hidePlayer(void)=0x80050FD0
MR::hidePlayerTryDeleteEffect(void)=0x80050FF0
MR::showPlayerJoint(const char*)=0x80051000
MR::hidePlayerJoint(const char*)=0x80051040
MR::setPlayerSpot(float, unsigned long)=0x80051090
MR::startPlayerDownWipe(void)=0x800510A0
MR::setCameraTargetToPlayer(CameraTargetArg*)=0x800510B0
MR::isPlayerDisableFpView(void)=0x800510F0
MR::isFpViewChangingFailure(void)=0x80051100
MR::stopPlayerFpView(void)=0x80051110
MR::startPlayerTalk(const LiveActor*)=0x80051120
MR::endPlayerTalk(void)=0x80051130
MR::isCurrentRushActor(const char*)=0x80051150
MR::isCurrentRushRockMario(void)=0x800511A0
MR::isCurrentRushTamakoro(void)=0x800511B0
MR::isCurrentRushSpinDriver(void)=0x800511C0
MR::isCurrentRushItemDrill(void)=0x80051230
MR::isExistMario(void)=0x80051240
MR::startPlayerEvent(const char*)=0x80051250
MR::offPlayerControl(void)=0x800512B0
MR::onPlayerControl(bool)=0x800512E0
MR::isOffPlayerControl(void)=0x80051310
MR::unlockPlayerAnimation(void)=0x80051320
MR::resetPlayerStatus(void)=0x80051350
MR::resetPlayerEffect(void)=0x80051380
MR::setPlayerBaseMtx(A4_f)=0x800513B0
MR::getPlayerBaseMtx(void)=0x800514A0
MR::getPlayerDemoActor(void)=0x80051510
MR::calcPlayerJointMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const char*)=0x80051590
MR::concatWithPlayerJointMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const char*)=0x800515D0
MR::pushPlayer(const JGeometry::TVec3<float>&)=0x800515F0
MR::pushPlayerFromArea(const JGeometry::TVec3<float>&)=0x80051600
MR::isPlayerInWaterMode(void)=0x80051620
MR::isPlayerOnWaterSurface(void)=0x80051630
MR::isPlayerHidden(void)=0x80051640
MR::calcPlayerWorldPadDir(JGeometry::TVec3<float>*, float, float)=0x80051670
MR::getFullScreenBlurTexture(void)=0x80051870
MR::getPlayerMovementTimer(void)=0x800518B0
MR::getPlayerBodySensor(void)=0x800518E0
MR::createRailGraphFromJMap(const JMapInfoIter&)=0x80051970
RailGraphIter::__ct(const RailGraphIter&)=0x80051B20
MR::createRailGraphIter(const RailGraph*)=0x80051B50
MR::moveNextNode(RailGraphIter*)=0x80051BC0
MR::moveNodeNearPosition(RailGraphIter*, const JGeometry::TVec3<float>&, float, RailGraphNodeSelecter*)=0x80051BD0
MR::selectReverseEdge(RailGraphIter*)=0x80051C10
MR::isSelectedEdge(const RailGraphIter*)=0x80051C60
MR::isWatchedPrevEdge(const RailGraphIter*)=0x80051C70
MR::getCurrentNodePosition(const RailGraphIter*)=0x80051C80
MR::getNextNodePosition(const RailGraphIter*)=0x80051C90
MR::calcWatchEdgeVector(const RailGraphIter*, JGeometry::TVec3<float>*)=0x80051CA0
MR::calcWatchEdgeDirection(const RailGraphIter*, JGeometry::TVec3<float>*)=0x80051D00
MR::getNearNodeIndex(const RailGraph*, const JGeometry::TVec3<float>&, float, RailGraphNodeSelecter*)=0x80051D40
MR::getSelectEdgeArg0(const RailGraphIter*)=0x80051E30
MR::getSelectEdgeArg1(const RailGraphIter*)=0x80051E60
MR::getSelectEdgeArg2(const RailGraphIter*)=0x80051E90
MR::getSelectEdgeArg3(const RailGraphIter*)=0x80051EC0
MR::getWatchEdgeArg7(const RailGraphIter*)=0x80051EF0
MR::moveTransToOtherActorRailPos(LiveActor*, const LiveActor*)=0x80051F20
MR::moveTransToCurrentRailPos(LiveActor*)=0x80051F30
MR::moveTransXZToCurrentRailPos(LiveActor*)=0x80051F40
MR::moveCoord(LiveActor*, float)=0x80051F60
MR::moveCoordAndTransToRailPoint(LiveActor*, long)=0x80051FA0
MR::moveCoordAndCheckPassPointNo(LiveActor*, float)=0x80052000
MR::moveCoordAndFollowTransAndCheckPassPointNo(LiveActor*, float)=0x80052080
MR::moveCoordAndFollowTransAndCheckPassPointNo(LiveActor*)=0x800520C0
MR::moveCoordToRailPoint(LiveActor*, long)=0x80052120
MR::moveCoordToNearestPos(LiveActor*, const JGeometry::TVec3<float>&)=0x80052160
MR::moveCoordAndFollowTrans(LiveActor*, float)=0x80052170
MR::moveCoordAndFollowTrans(LiveActor*)=0x800521B0
MR::moveCoordAndFollowTransXZ(LiveActor*)=0x800521F0
MR::moveCoordToStartPos(LiveActor*)=0x80052230
MR::moveCoordAndTransToStartPos(LiveActor*)=0x80052240
MR::moveCoordToEndPos(LiveActor*)=0x80052290
MR::moveRailToNextPoint(LiveActor*)=0x800522D0
MR::moveCoordAndTransToNearestRailPos(LiveActor*)=0x800522E0
MR::moveCoordAndTransToNearestRailPos(LiveActor*, const JGeometry::TVec3<float>&)=0x80052330
MR::moveCoordAndTransToNearestRailPoint(LiveActor*)=0x80052370
MR::moveCoordAndTransToNextPoint(LiveActor*)=0x800523C0
MR::moveCoordAndTransToRailStartPoint(LiveActor*)=0x80052400
MR::setRailDirectionToStart(LiveActor*)=0x800524B0
MR::setRailDirectionToEnd(LiveActor*)=0x800524D0
MR::setRailDirectionCloseToCoord(LiveActor*, float)=0x800524F0
MR::setRailDirectionCloseToNearestPos(LiveActor*, const JGeometry::TVec3<float>&)=0x800525C0
MR::reverseRailDirection(LiveActor*)=0x80052600
MR::calcMovingDirectionAlongRail(LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, bool, bool*)=0x80052610
MR::calcMovingDirectionAlongRailH(LiveActor*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, bool*)=0x800527B0
MR::calcRailClippingInfo(JGeometry::TVec3<float>*, float*, const LiveActor*, float, float)=0x800527C0
MR::min(float, float)=0x80052A40
MR::initAndSetRailClipping(JGeometry::TVec3<float>*, LiveActor*, float, float)=0x80052A60
MR::calcNearestRailCoord(const LiveActor*, const JGeometry::TVec3<float>&)=0x80052AC0
MR::calcNearestRailPos(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&)=0x80052AD0
MR::calcNearestRailDirection(JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&)=0x80052B30
MR::calcNearestRailPosAndDirection(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const LiveActor*, const JGeometry::TVec3<float>&)=0x80052B90
@unnamed@RailUtil_cpp@::updateBoundingBox(const RailRider*, JGeometry::TBox3<float>*)=0x80052C50
MR::calcBoundingBox(RailRider*, JGeometry::TBox3<float>*, float)=0x80052CF0
MR::calcBoundingBox(const LiveActor*, JGeometry::TBox3<float>*, float)=0x80052E10
MR::calcDifferenceRailCoord(const LiveActor*, float, float)=0x80052EC0
MR::calcDifferenceRailCoord(const LiveActor*, float)=0x80052F60
MR::calcDistanceHorizonToCurrentPos(const LiveActor*)=0x80052F80
MR::calcRailPosAtCoord(JGeometry::TVec3<float>*, const LiveActor*, float)=0x80053000
MR::calcRailPosFrontCoord(JGeometry::TVec3<float>*, const LiveActor*, float)=0x80053010
MR::repeat(float, float, float)=0x800530D0
MR::calcRailDirection(JGeometry::TVec3<float>*, const LiveActor*)=0x80053120
MR::calcRailDirectionAtCoord(JGeometry::TVec3<float>*, const LiveActor*, float)=0x80053140
MR::calcRailDirectionAtNextPoint(JGeometry::TVec3<float>*, const LiveActor*)=0x80053150
MR::calcRailPosAndDirectionAtCoord(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const LiveActor*, float)=0x80053270
MR::calcRailStartPos(JGeometry::TVec3<float>*, const LiveActor*)=0x800532D0
MR::calcRailEndPos(JGeometry::TVec3<float>*, const LiveActor*)=0x800532F0
MR::calcRailPointPos(JGeometry::TVec3<float>*, const LiveActor*, int)=0x80053340
MR::calcRailRandomPointPos(JGeometry::TVec3<float>*, const LiveActor*, int)=0x80053350
MR::calcRailStartPointPos(JGeometry::TVec3<float>*, const LiveActor*)=0x800533B0
MR::calcRailEndPointPos(JGeometry::TVec3<float>*, const LiveActor*)=0x800533D0
MR::calcRailEndPointDirection(JGeometry::TVec3<float>*, const LiveActor*)=0x80053420
MR::calcRailStartPointPosAndDirection(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const LiveActor*)=0x80053470
MR::calcRailEndPointPosAndDirection(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const LiveActor*)=0x800534D0
MR::calcDistanceToNextRailPoint(const LiveActor*, float*)=0x80053530
MR::calcDistanceToCurrentAndNextRailPoint(const LiveActor*, float*, float*)=0x800535E0
MR::isExistRail(const LiveActor*)=0x800537A0
MR::getRailPointNum(const LiveActor*)=0x800537B0
MR::getCurrentRailPointNo(const LiveActor*)=0x800537C0
MR::getNextRailPointNo(const LiveActor*)=0x800537D0
MR::getRailTotalLength(const LiveActor*)=0x800537E0
MR::getRailPartLength(const LiveActor*, int)=0x800537F0
MR::getRailPointCoord(const LiveActor*, int)=0x80053800
MR::getRailPos(const LiveActor*)=0x80053810
MR::getRailPointPosStart(const LiveActor*)=0x80053820
MR::getRailPointPosEnd(const LiveActor*)=0x80053830
MR::getRailDirection(const LiveActor*)=0x80053840
MR::getRailCoord(const LiveActor*)=0x80053850
MR::getRailCoordSpeed(const LiveActor*)=0x80053860
MR::setRailCoord(LiveActor*, float)=0x80053870
MR::setRailCoordSpeed(LiveActor*, float)=0x80053880
MR::accelerateRailCoordSpeed(LiveActor*, float)=0x80053890
MR::adjustmentRailCoordSpeed(LiveActor*, float, float)=0x80053900
MR::slowDownRailCoordSpeed(LiveActor*, float)=0x80053940
MR::moveRailRider(LiveActor*)=0x80053950
MR::isLoopRail(const LiveActor*)=0x80053960
MR::isRailReachedGoal(const LiveActor*)=0x80053970
MR::isRailReachedNearGoal(const LiveActor*, float)=0x80053980
MR::isRailReachedEdge(const LiveActor*)=0x80053A10
MR::isRailGoingToEnd(const LiveActor*)=0x80053A20
MR::isRailReachedNearNextPoint(const LiveActor*, float)=0x80053A30
MR::isRailReachedHorizonCurrentPos(const LiveActor*, float)=0x80053B40
MR::getRailArg0WithInit(const LiveActor*, long*)=0x80053B80
MR::getRailArg7WithInit(const LiveActor*, long*)=0x80053BA0
MR::getRailArg0NoInit(const LiveActor*, long*)=0x80053BC0
MR::getRailArg1NoInit(const LiveActor*, long*)=0x80053BE0
MR::getRailArg2NoInit(const LiveActor*, long*)=0x80053C00
MR::getRailArg3NoInit(const LiveActor*, long*)=0x80053C20
MR::getRailArg4NoInit(const LiveActor*, long*)=0x80053C40
MR::getRailArg5NoInit(const LiveActor*, long*)=0x80053C60
MR::getRailArg1WithInit(const RailRider*, long*)=0x80053C80
@unnamed@RailUtil_cpp@::getRailPointArgName(long)=0x80053C90
@unnamed@RailUtil_cpp@::getRailPointArgF32WithInit(const LiveActor*, long, long, float*)=0x80053D00
@unnamed@RailUtil_cpp@::getRailPointArgF32NoInit(const LiveActor*, long, long, float*)=0x80053D90
@unnamed@RailUtil_cpp@::getRailCurrentPointArgF32NoInit(const LiveActor*, long, float*)=0x80053E20
@unnamed@RailUtil_cpp@::getRailCurrentPointArgBoolNoInit(const LiveActor*, long, bool*)=0x80053EB0
@unnamed@RailUtil_cpp@::getRailNextPointArgF32NoInit(const LiveActor*, long, float*)=0x80053F40
@unnamed@RailUtil_cpp@::getRailNextPointArgBoolNoInit(const LiveActor*, long, bool*)=0x80053FD0
MR::getRailPointArg0WithInit(const LiveActor*, long, long*)=0x80054060
MR::getRailPointArg2WithInit(const LiveActor*, long, long*)=0x800540C0
MR::getRailPointArg0NoInit(const LiveActor*, long, long*)=0x80054120
MR::getRailPointArg4NoInit(const LiveActor*, long, long*)=0x80054180
MR::getRailPointArg6NoInit(const LiveActor*, long, long*)=0x800541E0
MR::getRailPointArg7NoInit(const LiveActor*, long, long*)=0x80054240
MR::getRailPointArg1NoInit(const LiveActor*, long, float*)=0x800542C0
MR::getCurrentRailPointArg0WithInit(const LiveActor*, long*)=0x800542D0
MR::getCurrentRailPointArg1WithInit(const LiveActor*, long*)=0x80054320
MR::getCurrentRailPointArg3WithInit(const LiveActor*, long*)=0x80054370
MR::getCurrentRailPointArg0NoInit(const LiveActor*, long*)=0x800543C0
MR::getCurrentRailPointArg1NoInit(const LiveActor*, long*)=0x80054410
MR::getCurrentRailPointArg5NoInit(const LiveActor*, long*)=0x80054460
MR::getCurrentRailPointArg7NoInit(const LiveActor*, long*)=0x800544B0
MR::getCurrentRailPointArg0NoInit(const LiveActor*, float*)=0x80054500
MR::getCurrentRailPointArg1NoInit(const LiveActor*, float*)=0x80054510
MR::getCurrentRailPointArg2NoInit(const LiveActor*, float*)=0x80054520
MR::getCurrentRailPointArg3NoInit(const LiveActor*, float*)=0x80054530
MR::getCurrentRailPointArg6NoInit(const LiveActor*, float*)=0x80054540
MR::getCurrentRailPointArg7NoInit(const LiveActor*, float*)=0x80054550
MR::getCurrentRailPointArg1NoInit(const LiveActor*, bool*)=0x80054560
MR::getCurrentRailPointArg4NoInit(const LiveActor*, bool*)=0x80054570
MR::getNextRailPointArg0WithInit(const LiveActor*, long*)=0x80054580
MR::getNextRailPointArg0NoInit(const LiveActor*, float*)=0x800545D0
MR::getNextRailPointArg1NoInit(const LiveActor*, float*)=0x800545E0
MR::getNextRailPointArg2NoInit(const LiveActor*, float*)=0x800545F0
MR::getNextRailPointArg3NoInit(const LiveActor*, float*)=0x80054600
MR::getNextRailPointArg6NoInit(const LiveActor*, float*)=0x80054610
MR::getNextRailPointArg7NoInit(const LiveActor*, float*)=0x80054620
MR::getNextRailPointArg2WithInit(const LiveActor*, bool*)=0x80054630
JGeometry::TVec3<float>::setAll<float>(float, _v)=0x80054650
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::mult33(JGeometry::TVec3<float>&) const=0x80055750
JGeometry::TVec2<float>::__as(const JGeometry::TVec2<float>&)=0x80055BE0
JGeometry::TVec2<float>::__pl(const JGeometry::TVec2<float>&) const=0x80055C00
JGeometry::TVec2<float>::__ml(float) const=0x80055C40
@unnamed@SceneUtil_cpp@::getRailInfoFromRailId(JMapInfoIter*, const JMapInfo*, const StageDataHolder*, int)=0x80056470
MR::getCurrentScenarioNo(void)=0x800564C0
MR::getCurrentSelectedScenarioNo(void)=0x800564D0
MR::setCurrentScenarioNo(long, long)=0x80056510
MR::isScenarioDecided(void)=0x80056530
MR::getCurrentStageName(void)=0x80056550
MR::isEqualSceneName(const char*)=0x80056560
MR::isEqualStageName(const char*)=0x80056570
MR::isStageNoPauseMenuStars(void)=0x80056610
MR::isStageMarioFaceShipAfterFinalKoopa(void)=0x80056690
MR::isStageMarioFaceShipAfterGrandStar(void)=0x800566E0
MR::isStageStarPieceFollowGroupLimit(void)=0x800567D0
MR::isStageFileSelect(void)=0x80056830
MR::isBeginScenarioStarter(void)=0x80056840
MR::isStageSuddenDeathDodoryu(void)=0x80056890
MR::isStageScoreAttack(void)=0x800568F0
MR::isStageMarioFaceShip(void)=0x80056A20
MR::isStageWorldMap(void)=0x80056A30
MR::isStageMarioFaceShipOrWorldMap(void)=0x80056AF0
MR::isStageDisablePauseMenu(void)=0x80056B40
MR::isStageStoryBook(void)=0x80056BE0
MR::isStageMarioFaceShipNormal(void)=0x80056CE0
MR::isStageBossParade(void)=0x80056D40
MR::isStageDimensionBigCastle(const char*)=0x80056D60
MR::isStagePurpleCoinsMoreThan100(const char*)=0x80056D70
MR::isStagePlayStarChance(long)=0x80056DF0
MR::isStageGlider(void)=0x800570C0
MR::isStageJungleGliderGalaxyExplainDemo(void)=0x80057120
MR::isStageKoopaVs3(void)=0x80057300
MR::isStageKoopaVs(void)=0x80057360
MR::setInitializeStatePlacementPlayer(void)=0x80057420
MR::setInitializeStatePlacementHighPriority(void)=0x80057430
MR::setInitializeStatePlacement(void)=0x80057440
MR::setInitializeStateAfterPlacement(void)=0x80057450
MR::isInitializeStateEnd(void)=0x80057460
MR::isInitializeStatePlacementSomething(void)=0x80057470
MR::stopSceneForScenarioOpeningCamera(void)=0x80057500
MR::playSceneForScenarioOpeningCamera(void)=0x80057530
MR::getCurrentMarioStartIdInfo(void)=0x80057560
MR::getCurrentMarioStartId(void)=0x80057570
MR::getStartPosNum(void)=0x800575A0
MR::getCurrentStartZoneId(void)=0x800575D0
MR::getInitializeStartIdInfo(void)=0x80057600
MR::getGeneralPosNum(void)=0x80057610
MR::getGeneralPosData(const char*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, JMapLinkInfo*, int)=0x80057640
MR::getRestartPosData(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JMapInfoIter&)=0x80057710
MR::getChildObjNum(const JMapInfoIter&)=0x80057840
MR::getChildObjName(const char*, const JMapInfoIter&, int)=0x80057880
MR::initChildObj(NameObj*, const JMapInfoIter&, int)=0x80057B40
MR::getAppearPowerStarObjName(long)=0x80057BB0
MR::getCurrentStagePowerStarNum(void)=0x80057BF0
MR::getZoneNum(void)=0x80057C20
MR::getZoneNameFromZoneId(long)=0x80057C50
MR::getZoneIdFromZoneName(const char*)=0x80057C90
MR::getPlacedHiddenStarScenarioNo(const char*, long)=0x80057CD0
MR::getRailInfo(JMapInfoIter*, const JMapInfo*, const JMapInfoIter&)=0x80057D80
MR::getNextLinkRailInfo(JMapInfoIter*, const JMapInfo*, const JMapInfoIter&)=0x80057DF0
MR::getCurrentStartCameraId(void)=0x80057E70
MR::getStartCameraIdInfoFromStartDataIndex(JMapIdInfo*, int)=0x80057EA0
MR::getPlacedRailNum(long)=0x80057EF0
MR::getCameraRailInfo(JMapInfoIter*, const JMapInfo*, long, long)=0x80057F50
MR::getCameraRailInfoFromRailDataIndex(JMapInfoIter*, const JMapInfo*, int, long)=0x80057FB0
MR::getStageCameraData(void*, long*, long)=0x80058030
MR::getCurrentScenarioStartAnimCameraData(void*, long*)=0x800580B0
MR::getCurrentScenarioDreamerPad(void*, long*)=0x80058120
MR::isPlacementLocalStage(void)=0x80058190
MR::getPlacedZoneId(const JMapInfoIter&)=0x800581C0
MR::getZonePlacementMtx(const JMapInfoIter&)=0x80058200
MR::getZonePlacementMtx(long)=0x80058240
MR::getJapaneseObjectName(const char*)=0x800582C0
MR::setCurrentPlacementZoneId(long)=0x80058310
MR::clearCurrentPlacementZoneId(void)=0x80058350
MR::getCurrentPlacementZoneId(void)=0x80058380
MR::isProductGameScene(void)=0x800583C0
short::(nit_\SceneUtil_cpp)=0x800583D0
MR::ProhibitSchedulerAndInterrupts::__ct(bool)=0x800583F0
MR::ProhibitSchedulerAndInterrupts::__dt(void)=0x80058430
@unnamed@ScreenUtil_cpp@::getCaptureScreenDirector(void)=0x80058490
@unnamed@ScreenUtil_cpp@::getStarPieceCounter(void)=0x800584F0
@unnamed@ScreenUtil_cpp@::getCoinCounter(void)=0x80058520
MR::getScreenWidth(void)=0x80058560
MR::getSafetyFrameWidth(void)=0x80058590
MR::getSafetyFrameLeft(void)=0x80058670
MR::getSafetyFrameRight(void)=0x800586C0
MR::convertFrameBufferPosToScreenPos(JGeometry::TVec2<float>*, const JGeometry::TVec2<float>&)=0x80058780
MR::convertScreenPosToFrameBufferPos(JGeometry::TVec2<float>*, const JGeometry::TVec2<float>&)=0x80058840
MR::startToCaptureScreen(const char*)=0x800588F0
MR::endToCaptureScreen(const char*)=0x80058930
MR::captureScreenIfAllow(const char*)=0x80058970
MR::getScreenResTIMG(void)=0x800589E0
MR::openWipeCircle(long)=0x80058A10
MR::closeWipeCircle(long)=0x80058A20
MR::forceOpenWipeCircle(void)=0x80058A30
MR::forceCloseWipeCircle(void)=0x80058A40
MR::openWipeFade(long)=0x80058A50
MR::closeWipeFade(long)=0x80058A60
MR::forceOpenWipeFade(void)=0x80058A70
MR::forceCloseWipeFade(void)=0x80058A80
MR::openWipeWhiteFade(long)=0x80058A90
MR::closeWipeWhiteFade(long)=0x80058AA0
MR::startGameOverWipe(void)=0x80058AB0
MR::startDownWipe(void)=0x80058AF0
MR::isWipeActive(void)=0x80058B30
MR::isWipeBlank(void)=0x80058BA0
MR::isWipeOpen(void)=0x80058BD0
MR::openSystemWipeCircle(long)=0x80058C00
MR::closeSystemWipeCircle(long)=0x80058CA0
MR::forceOpenSystemWipeCircle(long)=0x80058D10
MR::forceCloseSystemWipeCircle(void)=0x80058D30
MR::openSystemWipeFade(long)=0x80058D50
MR::closeSystemWipeFade(long)=0x80058DC0
MR::forceOpenSystemWipeFade(void)=0x80058E30
MR::forceCloseSystemWipeFade(void)=0x80058E50
MR::openSystemWipeWhiteFade(long)=0x80058E70
MR::closeSystemWipeWhiteFade(long)=0x80058EE0
MR::forceOpenSystemWipeWhiteFade(long)=0x80058F50
MR::forceCloseSystemWipeWhiteFade(void)=0x80058F70
MR::openSystemWipeMario(long)=0x80058F90
MR::closeSystemWipeMario(long)=0x80059000
MR::forceOpenSystemWipeMario(void)=0x80059070
MR::isSystemWipeActive(void)=0x80059090
MR::closeSystemWipeCircleWithCaptureScreen(long)=0x80059170
MR::closeSystemWipeFadeWithCaptureScreen(long)=0x800591A0
MR::setWipeCircleCenterPos(const JGeometry::TVec3<float>&)=0x800591D0
MR::requestMovementOnImageEffect(void)=0x800593F0
MR::setImageEffectControlAuto(void)=0x800594B0
MR::turnOffDOFInSubjective(void)=0x800594E0
MR::turnOnDOFInSubjective(void)=0x80059510
MR::turnOnNormalBloom(void)=0x80059540
MR::turnOnDepthOfField(bool)=0x80059570
MR::turnOffImageEffect(void)=0x800595B0
MR::createNormalBloom(void)=0x800595E0
MR::isNormalBloomOn(void)=0x800595F0
MR::isNormalBloomForEachModel(void)=0x80059670
MR::setNormalBloomIntensity(unsigned char)=0x800596D0
MR::setNormalBloomThreshold(unsigned char)=0x80059710
MR::setNormalBloomBlurIntensity1(unsigned char)=0x80059750
MR::setNormalBloomBlurIntensity2(unsigned char)=0x80059790
MR::createDepthOfFieldBlur(void)=0x800597D0
MR::setDepthOfFieldBlurIntensity(float)=0x800597E0
MR::createPostFog(void)=0x80059870
MR::createPostOutline(void)=0x80059880
MR::createCenterScreenBlur(void)=0x80059890
MR::startCenterScreenBlur(long, float, unsigned char, long, long)=0x800598A0
MR::requestPowerUpHPMeter(void)=0x800599E0
MR::requestForceAppearHPMeter(void)=0x80059A10
MR::startMissLayout(void)=0x80059A40
MR::isMissLayoutAnimEnd(void)=0x80059A70
MR::activateDefaultGameLayout(void)=0x80059AA0
MR::deactivateDefaultGameLayout(void)=0x80059AD0
MR::isActiveDefaultGameLayout(void)=0x80059B00
MR::forceAppearDefaultGameLayout(void)=0x80059B30
MR::pauseOffLensFlare(void)=0x80059BA0
MR::tryScreenToFrameCinemaFrame(void)=0x80059BE0
MR::tryFrameToBlankCinemaFrame(void)=0x80059C10
MR::tryBlankToFrameCinemaFrame(void)=0x80059C40
MR::tryFrameToScreenCinemaFrame(void)=0x80059C70
MR::forceToFrameCinemaFrame(void)=0x80059CA0
MR::forceToBlankCinemaFrame(void)=0x80059CD0
MR::isStopCinemaFrame(void)=0x80059D00
MR::setInformationMessageReplaceString(const wchar_t*, long)=0x80059EB0
MR::isDeadInformationMessage(void)=0x80059F60
MR::isYesNoSelected(void)=0x8005A020
MR::isYesNoSelectedYes(void)=0x8005A050
MR::setYesNoSelectorSE(const char*, const char*, const char*)=0x8005A080
MR::resetYesNoSelectorSE(void)=0x8005A0E0
MR::forceSyncStarPieceCounter(void)=0x8005A120
MR::forceAppearStarPieceCounterForTicoFat(void)=0x8005A150
MR::disappearStarPieceCounterForTicoFat(void)=0x8005A180
MR::forceSyncCoinCounter(void)=0x8005A1B0
MR::forceAppearCoinCounterForTicoFat(void)=0x8005A1E0
MR::disappearCoinCounterForTicoFat(void)=0x8005A210
MR::createPurpleCoinCounter(void)=0x8005A240
MR::validatePurpleCoinCounter(void)=0x8005A270
MR::requestCounterLayoutAppearanceForTicoEat(bool)=0x8005A3F0
MR::isExecScenarioStarter(void)=0x8005A430
MR::isStageStateScenarioOpeningCamera(void)=0x8005A440
MR::requestPowerStarGetDemo(void)=0x8005A460
MR::requestGrandStarGetDemo(void)=0x8005A470
MR::requestStartGameOverDemo(void)=0x8005A480
MR::requestEndGameOverDemo(void)=0x8005A490
MR::requestEndMissDemo(void)=0x8005A4A0
MR::executeOnWelcomeAndRetry(void)=0x8005A4B0
ResourceShare::__ct(void)=0x8005A4E0
ResourceShare::__dt(void)=0x8005A550
MR::actorSoundMovement(LiveActor*)=0x8005A640
MR::startBas(const LiveActor*, const char*, bool, float, float)=0x8005A6F0
MR::getMapSoundCodeFoot(const LiveActor*)=0x8005A830
MR::setSoundVolumeSetting(long, unsigned long)=0x8005ABE0
MR::startSystemSE(const char*, long, long)=0x8005AE40
MR::startSystemSE(JAISoundID, long, long)=0x8005AED0
MR::startSystemLevelSE(const char*, long, long)=0x8005AF20
MR::stopSystemSE(const char*, unsigned long)=0x8005AFD0
MR::stopSystemSE(JAISoundID, unsigned long)=0x8005B020
MR::startAtmosphereSE(const char*, long, long)=0x8005B060
MR::startAtmosphereLevelSE(const char*, long, long)=0x8005B0B0
MR::startSoundObject(AudSoundObject*, const char*)=0x8005B150
MR::startSoundObjectLevel(AudSoundObject*, const char*, long)=0x8005B1E0
JAISound::updateLifeTime(unsigned long)=0x8005B240
MR::startSound(const LiveActor*, const char*, long, long)=0x8005B3A0
MR::stopSound(const LiveActor*, const char*, unsigned long)=0x8005B600
MR::startSpinHitSound(const LiveActor*)=0x8005B870
MR::startBlowHitSound(const LiveActor*)=0x8005B890
MR::startDPDHitSound(void)=0x8005B8B0
MR::startDPDFreezeLevelSound(const LiveActor*)=0x8005B8C0
MR::start2PJumpAssistSound(void)=0x8005B930
MR::start2PJumpAssistJustSound(void)=0x8005B9A0
MR::start2PAttackAssistSound(void)=0x8005BA10
MR::limitedStarPieceHitSound(void)=0x8005BA80
@unnamed@StarPointerUtil_cpp@::getStarPointerOnOffController(void)=0x8005BCB0
@unnamed@StarPointerUtil_cpp@::always(long)=0x8005BCC0
@unnamed@StarPointerUtil_cpp@::onReaction(xlbbb)=0x8005BCD0
@unnamed@StarPointerUtil_cpp@::checkPointingTarget(@unnamed@StarPointerUtil_cpp@::StarPointerTargetInfo*, const JGeometry::TVec3<float>&, const JGeometry::TVec2<float>&, float, float)=0x8005BD40
@unnamed@StarPointerUtil_cpp@::checkPointingWithoutCheckZ(@unnamed@StarPointerUtil_cpp@::StarPointerTargetInfo*, const JGeometry::TVec3<float>&, const JGeometry::TVec2<float>&, float, float)=0x8005BD50
@unnamed@StarPointerUtil_cpp@::isStarPointerPointingCore(@unnamed@StarPointerUtil_cpp@::StarPointerTargetInfo*, const LiveActor*, long, bool(@unnamed@StarPointerUtil_cpp@::StarPointerTargetInfo*, const JGeometry::TVec3<float>&, const JGeometry::TVec2<float>&, float, float), bool(long), bool, bool, bool)=0x8005BD60
MR::initStarPointerGameScene(void)=0x8005BFB0
MR::createStarPointerLayout(void)=0x8005BFE0
MR::onStarPointerSceneOut(void)=0x8005C010
MR::setStarPointerModeBase(void)=0x8005C060
MR::setStarPointerCameraMtxAtGameScene(void)=0x8005C090
MR::isValidStarPointerTarget(const LiveActor*)=0x8005C0C0
MR::initStarPointerTarget(LiveActor*, float, const JGeometry::TVec3<float>&)=0x8005C0D0
MR::initStarPointerTargetAtPos(LiveActor*, float, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8005C150
MR::initStarPointerTargetAtJoint(LiveActor*, const char*, float, const JGeometry::TVec3<float>&)=0x8005C1D0
MR::addStarPointerTargetCircle(LayoutActor*, const char*, float, const JGeometry::TVec2<float>&, const char*)=0x8005C240
MR::isStarPointerValid(long)=0x8005C270
MR::isStarPointerPointing(const LiveActor*, long, bool, const char*)=0x8005C340
MR::tryStarPointerCheckWithoutRumble(LiveActor*, bool)=0x8005C360
MR::isStarPointerPointingPane(const LayoutActor*, const char*, long, bool, const char*)=0x8005C370
MR::isStarPointerPointingPaneForMeterLayout(const LayoutActor*, const char*, long, bool, const char*)=0x8005C3F0
JGeometry::TVec2<float>::__ct(const JGeometry::TVec2<float>&)=0x8005C580
MR::isStarPointerPointingTarget(const LayoutActor*, const char*, long, bool, const char*)=0x8005C5A0
MR::isStarPointerPointing1P(const LiveActor*, const char*, bool, bool)=0x8005C750
MR::isStarPointerPointing1PWithoutCheckZ(const LiveActor*, const char*, bool, bool)=0x8005C810
MR::isStarPointerPointing2P(const LiveActor*, const char*, bool, bool)=0x8005C8D0
MR::isStarPointerPointing2POnPressButton(const LiveActor*, const char*, bool, bool)=0x8005C990
MR::isStarPointerPointing2POnTriggerButton(const LiveActor*, const char*, bool, bool)=0x8005CA50
MR::isStarPointerPointing2PAttachTarget(const LiveActor*)=0x8005CAF0
MR::isStarPointerPointingFileSelect(const LiveActor*)=0x8005CB00
MR::isStarPointerPointing1Por2P(const LiveActor*, const char*, bool, bool)=0x8005CB60
MR::requestBlueStarGuidance(void)=0x8005CC90
MR::requestTicoFatGuidance(void)=0x8005CD00
MR::requestMarioLauncherGuidance(void)=0x8005CD50
MR::requestFileSelectGuidance(void)=0x8005CD90
MR::requestYoshiEatGuidance(void)=0x8005CDD0
MR::requestYoshiCaptureGuidance(void)=0x8005CEA0
MR::isExistStarPointerGuidance(void)=0x8005CF20
MR::isExistStarPointerGuidanceFrame1P(void)=0x8005CF50
MR::activeStarPointerGuidance(void)=0x8005CF80
MR::deactiveStarPointerGuidance(void)=0x8005CFC0
MR::isExistStarPointerTarget(const LiveActor*)=0x8005D000
MR::setStarPointerTargetRadius3d(LiveActor*, float)=0x8005D010
MR::isStarPointerPointing(const JGeometry::TVec3<float>&, float, long, bool)=0x8005D020
MR::getStarPointerViewMtx(void)=0x8005D190
MR::getStarPointerProjMtx(void)=0x8005D1C0
MR::getStarPointerRadius(long)=0x8005D1F0
MR::getStarPointerScreenPosition(long)=0x8005D250
MR::getStarPointerScreenPositionOrEdge(long)=0x8005D2A0
MR::getStarPointerScreenSpeed(long)=0x8005D300
MR::isStarPointerInScreen(long)=0x8005D350
MR::isStarPointerInScreenAnyPort(long*)=0x8005D3A0
MR::getStarPointerLastPointedPort(const LiveActor*)=0x8005D440
MR::getStarPointerScreenVelocity(long)=0x8005D470
MR::getStarPointerWorldPosUsingDepth(long)=0x8005D4C0
MR::calcStarPointerWorldPointingPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, long)=0x8005D510
MR::calcStarPointerPosOnPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, bool)=0x8005D590
JGeometry::TVec2<float>::set<float>(const JGeometry::TVec2<float>&, _v)=0x8005D7C0
MR::calcStarPointerWorldVelocityDirectionOnPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x8005D7E0
JGeometry::TVec2<float>::sub(const JGeometry::TVec2<float>&)=0x8005D9F0
MR::calcPointRadius2D(const JGeometry::TVec3<float>&, float)=0x8005DA20
MR::calcStarPointerStrokeRotateMoment(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, long)=0x8005DAE0
JGeometry::TVec2<float>::length(void) const=0x8005DED0
MR::calcStarPointerScreenDistanceToTarget(const LiveActor*, float*, long)=0x8005DEF0
MR::startStarPointerModeTitle(void*)=0x8005DFF0
MR::startStarPointerModeFileSelect(void*)=0x8005E030
MR::startStarPointerModeGame(void*)=0x8005E070
MR::startStarPointerModeDemo(void*)=0x8005E0B0
MR::startStarPointerModeDemoWithStarPointer(void*)=0x8005E0F0
MR::startStarPointerModeDemoWithHandPointerFinger(void*)=0x8005E130
MR::startStarPointerModeDemoMarioDeath(void*)=0x8005E170
MR::startStarPointerModeMarioLauncher(void*)=0x8005E1B0
MR::startStarPointerModeHomeButton(void*)=0x8005E1F0
MR::startStarPointerModeChooseYesNo(void*)=0x8005E230
MR::startStarPointerModePauseMenu(void*)=0x8005E270
MR::startStarPointerModeScenarioSelectScene(void*)=0x8005E2B0
MR::startStarPointerModeBlueStar(void*)=0x8005E2F0
MR::startStarPointerModePowerStarGetDemo(void*)=0x8005E330
MR::startStarPointerModeStarPieceTarget(void*)=0x8005E370
MR::startStarPointerModeSphereSelectorOnReaction(void*)=0x8005E3B0
MR::startStarPointerModeEnding(void*)=0x8005E3F0
MR::endStarPointerMode(void*)=0x8005E4B0
MR::requestStarPointerModeErrorWindow(void*)=0x8005E4F0
MR::requestStarPointerModeSaveLoad(void*)=0x8005E530
MR::requestStarPointerModeBlueStarReady(void*)=0x8005E570
MR::isStarPointerModeBlueStarReady(void)=0x8005E5F0
MR::isStarPointerModeStarPieceTarget(void)=0x8005E620
MR::isStarPointerModeMarioLauncher(void)=0x8005E650
StarPointerOnOffController::isMode(StarPointerModeEnum)=0x8005E680
MR::isStarPointerModeHomeButton(void)=0x8005E6C0
MR::isStarPointerModeErrorWindow(void)=0x8005E6F0
MR::enableStarPointerShootStarPiece(void)=0x8005ECC0
MR::disableStarPointerShootStarPiece(void)=0x8005ECF0
MR::isEnableStarPointerShootStarPiece(long)=0x8005ED20
MR::isStarPointer2PTransparencyMode(void)=0x8005ED80
MR::isStarPointer1PInvalid2PValidMode(void)=0x8005EEA0
MR::setStarPointerDrawSyncToken(void)=0x8005EED0
short::(nit_\StarPointerUtil_cpp)=0x8005EFE0
MR::addFilePrefix(char*, unsigned long, const char*, const char*)=0x8005F000
MR::makeDateString(wchar_t*, long, long, long, long)=0x8005F030
MR::makeTimeString(wchar_t*, long, long, long)=0x8005F0A0
MR::makeClearTimeString(wchar_t*, unsigned long)=0x8005F190
MR::makeRaceBestTimeString(wchar_t*, int)=0x8005F240
MR::makeRaceCurrentTimeString(wchar_t*)=0x8005F280
MR::makeMinuteAndSecondString(wchar_t*, unsigned long)=0x8005F370
MR::copyString(char*, const char*, unsigned long)=0x8005F400
MR::copyString(wchar_t*, const wchar_t*, unsigned long)=0x8005F410
MR::addPictureFontCode(wchar_t*, int)=0x8005F420
MR::addNewLine(wchar_t*)=0x8005F430
MR::getBasename(const char*)=0x8005F450
MR::removeExtensionString(char*, unsigned long, const char*)=0x8005F4A0
MR::extractString(char*, const char*, unsigned long, unsigned long)=0x8005F530
MR::convertUTF16ToASCII(char*, const wchar_t*, long)=0x8005F570
MR::strcasecmp(const char*, const char*)=0x8005F5C0
MR::isEqualString(const char*, const char*)=0x8005F5D0
MR::isEqualStringCase(const char*, const char*)=0x8005F600
MR::isEqualSubString(const char*, const char*)=0x8005F630
MR::hasStringSpace(const char*)=0x8005F660
MR::isDigitStringTail(const char*, int)=0x8005F690
MR::isExistString(const char*, const char*, unsigned long)=0x8005F740
MR::isNullOrEmptyString(const char*)=0x8005F7C0
MR::isMessageEditorNextTag(const wchar_t*)=0x8005F810
MR::getStringLengthWithMessageTag(const wchar_t*)=0x8005F890
MR::scan32(const char*, const char*, long*)=0x8005F920
MR::scanf32(const char*, const char*, float*)=0x8005F980
MR::scanu8x4(const char*, const char*, unsigned char*)=0x8005F9E0
MR::scanf32x4(const char*, const char*, float*)=0x8005FA70
MR::attachSupportTicoToTarget(const LiveActor*)=0x8005FE10
SwitchEventFunctorListener::__ct(void)=0x80060040
SwitchEventFunctorListener::setOnFunctor(const MR::FunctorBase&)=0x80060060
SwitchEventFunctorListener::setOffFunctor(const MR::FunctorBase&)=0x800600B0
SwitchEventFunctorListener::listenSwitchOnEvent(void)=0x80060100
SwitchEventFunctorListener::listenSwitchOffEvent(void)=0x80060120
SwitchEventListener::refresh(bool)=0x80060140
MR::getFontOnCurrentLanguage(void)=0x80060170
MR::getPictureFontNW4R(void)=0x80060180
MR::getMenuFontNW4R(void)=0x80060190
MR::getNumberFontNW4R(void)=0x800601A0
MR::getCinemaFontNW4R(void)=0x800601B0
MR::getParticleResourceHolder(void)=0x80060220
MR::requestChangeArchivePlayer(bool)=0x80060250
MR::waitEndChangeArchivePlayer(void)=0x80060260
@unnamed@SystemUtil_cpp@::getSceneNameObjHolder(void)=0x80060370
MR::suspendAllSceneNameObj(void)=0x80060380
MR::resumeAllSceneNameObj(void)=0x800603B0
MR::syncWithFlagsAllSceneNameObj(void)=0x800603E0
MR::setRandomSeedFromStageName(void)=0x80060410
MR::clearFileLoaderRequestFileInfo(bool)=0x80060450
MR::startFunctionAsyncExecute(const MR::FunctorBase&, int, const char*)=0x80060490
MR::startFunctionAsyncExecuteOnMainThread(const MR::FunctorBase&, const char*)=0x800604E0
MR::waitForEndFunctionAsyncExecute(const char*)=0x80060530
MR::isEndFunctionAsyncExecute(const char*)=0x80060570
MR::suspendAsyncExecuteThread(const char*)=0x80060610
MR::resumeAsyncExecuteThread(const char*)=0x80060670
MR::isSuspendedAsyncExecuteThread(const char*)=0x800606C0
MR::isScreen16Per9(void)=0x80060720
MR::setLayoutDefaultAllocator(void)=0x80060810
MR::registerBranchFunc(TalkMessageCtrl*, const TalkMessageFuncBase&)=0x80060820
MR::registerEventFunc(TalkMessageCtrl*, const TalkMessageFuncBase&)=0x80060830
MR::registerAnimeFunc(TalkMessageCtrl*, const TalkMessageFuncBase&)=0x80060840
MR::registerKillFunc(TalkMessageCtrl*, const TalkMessageFuncBase&)=0x80060850
MR::setMessageArg(TalkMessageCtrl*, int)=0x80060860
MR::createTalkCtrl(LiveActor*, const JMapInfoIter&, const char*, const JGeometry::TVec3<float>&, A4_f)=0x800608B0
MR::createTalkCtrlDirect(LiveActor*, const JMapInfoIter&, const char*, const JGeometry::TVec3<float>&, A4_f)=0x80060930
MR::tryTalkNearPlayer(TalkMessageCtrl*)=0x80060B70
MR::tryTalkNearPlayerAtEnd(TalkMessageCtrl*)=0x80060BE0
MR::tryTalkForce(TalkMessageCtrl*)=0x80060C60
MR::tryTalkForceAtEnd(TalkMessageCtrl*)=0x80060D40
MR::tryTalkForceWithoutDemo(TalkMessageCtrl*)=0x80060E20
MR::tryTalkForceWithoutDemoAtEnd(TalkMessageCtrl*)=0x80060F00
MR::tryTalkForceWithoutDemoMarioPuppetableAtEnd(TalkMessageCtrl*)=0x80060F70
MR::tryTalkRequest(TalkMessageCtrl*)=0x80061100
MR::tryTalkSelectLeft(TalkMessageCtrl*)=0x80061110
J3DPEBlockFull::getBlend(void)=0x80061170
MR::isNearPlayer(const TalkMessageCtrl*, float)=0x800611A0
MR::isTalkEntry(const TalkMessageCtrl*)=0x800611C0
MR::isTalkTalking(const TalkMessageCtrl*)=0x800611E0
MR::isTalkEnableEnd(const TalkMessageCtrl*)=0x80061200
MR::resetNode(TalkMessageCtrl*)=0x80061220
MR::readMessage(TalkMessageCtrl*)=0x80061260
MR::forwardNode(TalkMessageCtrl*)=0x80061280
MR::resetAndForwardNode(TalkMessageCtrl*, long)=0x800612C0
MR::tryForwardNode(TalkMessageCtrl*)=0x80061330
MR::isExistNextNode(const TalkMessageCtrl*)=0x800613A0
MR::isShortTalk(const TalkMessageCtrl*)=0x80061470
MR::setDistanceToTalk(TalkMessageCtrl*, float)=0x80061480
MR::onRootNodeAutomatic(TalkMessageCtrl*)=0x80061490
MR::offRootNodeAutomatic(TalkMessageCtrl*)=0x800614A0
MR::getAreaObjManager(const char*)=0x800615B0
MR::getAreaObj(const char*, const JGeometry::TVec3<float>&)=0x800615F0
MR::getAreaObjAtPlayerPos(const char*)=0x80061640
MR::isInAreaObj(const char*, const JGeometry::TVec3<float>&)=0x80061690
MR::isExistAreaObj(const char*)=0x800616E0
MR::getAreaObjArg(const AreaObj*, long)=0x80061720
MR::tryToUpdatePlayerRestartIdInfo(const JGeometry::TVec3<float>&)=0x80061790
MR::requestMovementOnAreas(const char*)=0x800617A0
MR::requestMovementOnSoundAreas(void)=0x800617E0
MR::getWaterAreaObj(WaterInfo*, const JGeometry::TVec3<float>&)=0x80061830
MR::getWaterAreaInfo(WaterInfo*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x800618C0
JGeometry::TVec3<float>::__ami(const JGeometry::TVec3<float>&)=0x80061EF0
MR::calcAreaMoveVelocity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x800625E0
MR::calcCubePos(const AreaObj*, JGeometry::TVec3<float>*)=0x80062700
MR::calcCubeRotate(const AreaObj*, JGeometry::TVec3<float>*)=0x80062710
MR::calcCubeAxisZ(const AreaObj*, JGeometry::TVec3<float>*)=0x80062720
MR::calcCubeWorldBox(JGeometry::TDirBox3<float>*, const AreaObj*)=0x80062780
MR::getCubeLocalBox(const AreaObj*)=0x80062790
MR::calcCubeLocalPos(JGeometry::TVec3<float>*, const AreaObj*, const JGeometry::TVec3<float>&)=0x800627A0
MR::calcSpherePos(JGeometry::TVec3<float>*, const AreaObj*)=0x800627B0
MR::getSphereRadius(const AreaObj*)=0x800627C0
MR::calcCylinderPos(JGeometry::TVec3<float>*, const AreaObj*)=0x80062870
MR::calcCylinderCenterPos(JGeometry::TVec3<float>*, const AreaObj*)=0x80062880
MR::calcCylinderUpVec(JGeometry::TVec3<float>*, const AreaObj*)=0x80062890
MR::getCylinderRadius(const AreaObj*)=0x80062960
MR::isInPlaneModeCube(const JGeometry::TVec3<float>&)=0x800629F0
MR::getAreaCenterPos(JGeometry::TVec3<float>*, const AreaObj*)=0x80062BB0
BaseMatrixFollower::__ct(NameObj*, const JMapInfoIter&)=0x80062C30
BaseMatrixFollower::getFollowTargetActor(void) const=0x80062CC0
BaseMatrixFollower::calcFollowMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*) const=0x80062CD0
BaseMatrixFollower::isEnableFollow(void) const=0x80062D30
BaseMatrixFollower::isValid(void) const=0x80062D60
BaseMatrixFollowTarget::__ct(const JMapLinkInfo*)=0x80062D70
BaseMatrixFollowTarget::set(LiveActor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, BaseMatrixFollowValidater*)=0x80062DC0
BaseMatrixFollowTarget::getHostBaseMtx(void) const=0x80062E20
BaseMatrixFollowTarget::isValid(long) const=0x80062E70
BaseMatrixFollowTargetHolder::__ct(const char*, long, long)=0x80062EA0
BaseMatrixFollowTargetHolder::initAfterPlacement(void)=0x80062F40
BaseMatrixFollower::setGravityFollowHost(const NameObj*)=0x80062FD0
BaseMatrixFollowTargetHolder::movement(void)=0x80062FE0
BaseMatrixFollower::update(void)=0x80063060
BaseMatrixFollowTargetHolder::addFollower(BaseMatrixFollower*)=0x80063070
BaseMatrixFollowTargetHolder::setFollowTargetInfo(LiveActor*, const JMapInfoIter&, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, BaseMatrixFollowValidater*)=0x80063100
BaseMatrixFollowTargetHolder::findFollowTarget(const JMapLinkInfo*)=0x80063190
BaseMatrixFollowTargetHolder::findFollowTarget(const BaseMatrixFollower*)=0x80063280
MR::isValidFollowID(const JMapInfoIter&)=0x800632A0
MR::addBaseMatrixFollower(BaseMatrixFollower*)=0x80063300
MR::addBaseMatrixFollowTarget(LiveActor*, const JMapInfoIter&, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, BaseMatrixFollowValidater*)=0x80063350
MR::AssignableArray<BaseMatrixFollowTarget*>::__dt(void)=0x800633D0
MR::AssignableArray<BaseMatrixFollower*>::__dt(void)=0x80063430
BaseMatrixFollowTargetHolder::__dt(void)=0x80063490
MR::BothDirPtrLink::__ct(void*)=0x80063510
MR::BothDirPtrLink::__dt(void)=0x80063530
MR::BothDirPtrList::__ct(bool)=0x800635A0
MR::BothDirPtrList::__dt(void)=0x800635E0
MR::BothDirPtrList::initiate(void)=0x80063650
MR::BothDirPtrList::setFirst(MR::BothDirPtrLink*)=0x80063670
MR::BothDirPtrList::append(MR::BothDirPtrLink*)=0x800636A0
MR::BothDirPtrList::remove(MR::BothDirPtrLink*)=0x80063750
CollisionPartsFilterSensor::isInvalidParts(const CollisionParts*) const=0x80063850
CollisionPartsFilterActor::isInvalidParts(const CollisionParts*) const=0x80063880
TDDraw::setup(unsigned long, unsigned long, unsigned char)=0x800639B0
TDDraw::sendPoint(const JGeometry::TVec3<float>&)=0x80063F40
TDDraw::drawFillBox3D(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, unsigned long)=0x80064FE0
TDDraw::cameraInit3D(void)=0x80065320
TDDraw::mixFogColor(JGeometry::TVec3<float>, float, unsigned long)=0x80065510
TDDraw::setGXColor(unsigned long, _GXColor*)=0x800655E0
TDDraw::invProject(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, A4_fPCfPCfb)=0x80065600
TDDraw::project2D(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80065840
TDDraw::project2D(JGeometry::TVec2<float>*, const JGeometry::TVec3<float>&)=0x80065950
TDDraw::fix2Dpos(JGeometry::TVec3<float>*)=0x80065990
MR::ddSetVtxFormat(unsigned long)=0x80065A30
MR::ddChangeTev(void)=0x80065B50
MR::ddSendVtxData(const JGeometry::TVec3<float>&, const JGeometry::TVec2<float>&)=0x80065CE0
MR::ddLightingOn(unsigned short)=0x80065D30
MR::ddLightingOff(void)=0x80065D90
FixedPosition::__ct(const LiveActor*, const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80065DF0
FixedPosition::__ct(const LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80065E50
FixedPosition::__ct(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80065EC0
FixedPosition::__ct(const LiveActor*, const char*, const LiveActor*)=0x80065EF0
FixedPosition::calc(void)=0x80066020
FixedPosition::setBaseMtx(A4_f)=0x80066220
FixedPosition::setLocalTrans(const JGeometry::TVec3<float>&)=0x80066230
FixedPosition::init(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80066240
BindSphere::__ct(const JGeometry::TVec3<float>&, float)=0x800662A0
BindCone::__ct(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x800662E0
IKJoint::__ct(void)=0x80066E70
IKJoint::checkReachIKTarget(float, float, float)=0x80066EC0
IKJoint::calcIKRootAngleCosign(float, float, float)=0x80066F00
IKJoint::update(A4_fPA4_fPA4_fRCQ29JGeometry8TVec3<float>)=0x80066FE0
IKJoint::updateByLocalRootAndDirection(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80067100
IKJoint::updateByDistanceOnly(float)=0x800671A0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setXDir(const JGeometry::TVec3<float>&)=0x80067310
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setYDir(const JGeometry::TVec3<float>&)=0x80067330
IKJoint::calcToTargetMatrixByFirstPose(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&) const=0x80067350
JMapIdInfo::__ct(long, const JMapInfoIter&)=0x800674B0
JMapIdInfo::__ct(long, long)=0x80067500
JMapIdInfo::initialize(long, const JMapInfoIter&)=0x80067510
MR::createJMapIdInfoFromGroupId(const JMapInfoIter&)=0x80067550
MR::createJMapIdInfoFromClippingGroupId(const JMapInfoIter&)=0x800675B0
JMapInfo::__ct(void)=0x80067610
JMapInfo::__dt(void)=0x80067630
JMapInfo::attach(const void*)=0x80067670
JMapInfo::setName(const char*)=0x80067690
JMapInfo::getName(void) const=0x800676A0
JMapInfo::searchItemInfo(const char*) const=0x800676B0
JMapInfo::getValueType(const char*) const=0x80067740
JMapInfo::getValueFast(int, int, const char*) const=0x80067790
JMapInfo::getValueFast(int, int, unsigned long*) const=0x80067810
JMapInfo::getValueFast(int, int, long*) const=0x800678A0
JMapLinkInfo::__ct(void)=0x80067950
JMapLinkInfo::__ct(const JMapInfoIter&, bool)=0x80067970
JMapLinkInfo::setLinkedInfo(const JMapInfoIter&)=0x800679C0
JMapLinkInfo::isValid(void) const=0x80067A90
JMapLinkInfo::invalidate(void)=0x80067AD0
JMapLinkInfo::setLinkInfo(const JMapInfoIter&)=0x80067AF0
JointController::__ct(void)=0x80067BE0
JointController::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80067C00
JointController::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80067C10
JointController::registerCallBack(void)=0x80067C20
JointController::calcJointMatrixAndSetSystem(J3DJoint*)=0x80067C40
J3DModel::getAnmMtx(int)=0x80067CE0
JointController::calcJointMatrixAfterChildAndSetSystem(J3DJoint*)=0x80067D00
JointController::staticCallBack(J3DJoint*, int)=0x80067D90
MR::setJointControllerParam(JointController*, const LiveActor*, const char*)=0x80067E20
MR::setJointControllerParam(JointController*, const LiveActor*, unsigned short)=0x80067E80
JointRumbler::__ct(LiveActor*, const char*, float, float, unsigned long, bool, long)=0x80067EE0
JointRumbler::update(void)=0x80068000
JointRumbler::start(void)=0x80068070
JointRumbler::reset(void)=0x800680B0
JointRumbler::isRumbling(void) const=0x80068100
JointRumbler::updateModelScale(float)=0x80068120
JointRumbler::updateScale(JGeometry::TVec3<float>*, float)=0x80068190
RumbleCalculator::__ct(float, float, float, unsigned long)=0x80068B30
RumbleCalculator::start(unsigned long)=0x80068B70
RumbleCalculator::calc(void)=0x80068BA0
RumbleCalculator::reset(void)=0x80068CB0
RumbleCalculatorCosMultLinear::__ct(float, float, float, unsigned long)=0x80068CC0
RumbleCalculatorCosMultLinear::calcValues(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80068D00
SpringValue::__ct(void)=0x80068D90
SpringValue::__ct(float, float, float, float, float)=0x80068DC0
SpringValue::setParam(float, float, float, float, float)=0x80068DE0
SpringValue::update(void)=0x80068E00
MR::createTriangleFilterFunc(bool(const Triangle*))=0x80068E60
TriangleFilterDangerCode::isInvalidTriangle(const Triangle*) const=0x80068EB0
TriangleFilterFunc::isInvalidTriangle(const Triangle*) const=0x80068F60
TriggerChecker::__ct(void)=0x80068F80
TriggerChecker::update(bool)=0x80068F90
TriggerChecker::setInput(bool)=0x80068FA0
TriggerChecker::getLevel(void) const=0x80068FB0
TriggerChecker::getOnTrigger(void) const=0x80068FC0
TriggerChecker::getOffTrigger(void) const=0x80068FF0
ValueControl::__ct(int)=0x80069020
ValueControl::setDirToOneResetFrame(void)=0x80069040
ValueControl::setDirToZero(void)=0x80069050
ValueControl::setDirToZeroResetFrame(void)=0x80069060
ValueControl::setMaxFrame(int)=0x80069070
ValueControl::update(void)=0x800690F0
ValueControl::setZero(void)=0x80069140
ValueControl::setOne(void)=0x80069180
ValueControl::getValue(void) const=0x800691C0
ValueControl::resetFrame(void)=0x80069210
AnmPlayerBase::__ct(const ResTable*)=0x80069240
J3DFrameCtrl::__dt(void)=0x800692B0
AnmPlayerBase::update(void)=0x800692F0
AnmPlayerBase::reflectFrame(void)=0x80069320
AnmPlayerBase::start(const char*)=0x80069350
AnmPlayerBase::changeAnimation(J3DAnmBase*)=0x800693F0
AnmPlayerBase::stop(void)=0x80069400
AnmPlayerBase::stopAnimation(void)=0x80069440
AnmPlayerBase::isPlaying(const char*) const=0x80069460
MaterialAnmPlayerBase::__ct(const ResTable*, J3DModelData*)=0x800694C0
MaterialAnmPlayerBase::beginDiff(void)=0x80069510
MaterialAnmPlayerBase::endDiff(void)=0x80069570
BckCtrl::__ct(ResourceHolder*, const char*)=0x800695A0
BckCtrlData::__ct(void)=0x800697D0
BckCtrl::add(const BckCtrlData&)=0x80069800
BckCtrlData::__as(const BckCtrlData&)=0x80069920
BckCtrl::overWrite(const BckCtrlData&)=0x80069970
BckCtrl::changeBckSetting(const char*, XanimePlayer*) const=0x80069A00
BckCtrl::find(const char*) const=0x80069AB0
BckCtrlFunction::reflectBckCtrlData(const BckCtrlData&, XanimePlayer*)=0x80069B80
BpkPlayer::__ct(const ResourceHolder*, J3DModelData*)=0x80069D70
BpkPlayer::attach(J3DAnmBase*, J3DModelData*)=0x80069DB0
BpkPlayer::detach(J3DAnmBase*, J3DModelData*)=0x80069DC0
BrkPlayer::__ct(const ResourceHolder*, J3DModelData*)=0x80069DD0
BrkPlayer::attach(J3DAnmBase*, J3DModelData*)=0x80069E10
BrkPlayer::detach(J3DAnmBase*, J3DModelData*)=0x80069E20
BtkPlayer::__ct(const ResourceHolder*, J3DModelData*)=0x80069E30
BtkPlayer::attach(J3DAnmBase*, J3DModelData*)=0x80069E70
BtkPlayer::detach(J3DAnmBase*, J3DModelData*)=0x80069E80
BtpPlayer::__ct(const ResourceHolder*, J3DModelData*)=0x80069E90
BtpPlayer::attach(J3DAnmBase*, J3DModelData*)=0x80069ED0
BtpPlayer::detach(J3DAnmBase*, J3DModelData*)=0x80069EE0
BvaPlayer::__ct(const ResTable*, J3DModel*)=0x80069EF0
BvaPlayer::calc(void)=0x80069F40
BvaPlayer::getAnmVisibility(void)=0x8006A020
LayoutAnmPlayer::__ct(const LayoutManager*)=0x8006A040
LayoutAnmPlayer::movement(void)=0x8006A0A0
LayoutAnmPlayer::reflectFrame(void)=0x8006A0C0
LayoutAnmPlayer::start(const char*)=0x8006A0E0
LayoutAnmPlayer::stop(void)=0x8006A180
MaterialAnmBuffer::__ct(const ResourceHolder*, J3DModelData*, bool)=0x8006A190
J3DMaterialAnm::__ct(void)=0x8006A260
J3DMatColorAnm::__ct(void)=0x8006A340
J3DMatColorAnm::__dt(void)=0x8006A360
J3DTexMtxAnm::__ct(void)=0x8006A3A0
J3DTexMtxAnm::__dt(void)=0x8006A3C0
J3DTexNoAnm::__ct(void)=0x8006A400
J3DTexNoAnm::__dt(void)=0x8006A430
J3DTevColorAnm::__ct(void)=0x8006A470
J3DTevColorAnm::__dt(void)=0x8006A490
J3DTevKColorAnm::__ct(void)=0x8006A4D0
J3DTevKColorAnm::__dt(void)=0x8006A4F0
J3DMaterialAnm::__dt(void)=0x8006A530
MaterialAnmBuffer::getDiffFlag(long) const=0x8006A600
MaterialAnmBuffer::getAllocMaterialAnmNum(J3DModelData*, bool) const=0x8006A610
MaterialAnmBuffer::searchUpdateMaterialID(const ResourceHolder*, J3DModelData*)=0x8006A630
MaterialAnmBuffer::setDiffFlag(const ResourceHolder*)=0x8006A730
MaterialAnmBuffer::getDifferedMaterialNum(const J3DModelData*) const=0x8006A8D0
MaterialAnmBuffer::attachMaterialAnmBuffer(J3DModelData*, bool)=0x8006A920
MR::offDiffFlagBtk(unsigned long*, const J3DAnmTextureSRTKey*, const char*)=0x8006AC30
Quaternion::__as(const Quaternion&)=0x8006AC90
XanimeTrack::init(void)=0x8006ACC0
XjointInfo::__ct(void)=0x8006ACE0
XtransformInfo::__ct(void)=0x8006AD70
XtransformInfo::__as(const XtransformInfo&)=0x8006ADC0
XjointTransform::__ct(void)=0x8006AE30
XanimeCore::shareJointTransform(const XanimeCore*)=0x8006AEC0
XanimeCore::enableJointTransform(J3DModelData*)=0x8006AED0
J3DTransformInfo::__as(const J3DTransformInfo&)=0x8006B000
XanimeCore::reconfigJointTransform(J3DModelData*)=0x8006B040
XanimeCore::initMember(unsigned long)=0x8006B0C0
XanimeCore::__ct(unsigned long, unsigned long, unsigned char)=0x8006B180
XanimeCore::__ct(unsigned long, XanimeCore*)=0x8006B210
XanimeCore::doFreeze(void)=0x8006B270
XanimeCore::setBck(unsigned long, J3DAnmTransform*)=0x8006B290
XanimeCore::setWeight(unsigned char, float)=0x8006B2D0
XanimeCore::calcBlend(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8006B2F0
XanimeCore::calcSingle(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8006B710
XanimeCore::calcBlendSpecial(void)=0x8006B8E0
XanimeCore::updateFrame(void)=0x8006BD00
XanimeCore::calcScaleBlendMaya(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8006BDD0
JMath::fastReciprocal(float, _0)=0x8006C300
XanimeCore::calcScaleBlendMayaNoTransform(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8006C310
XanimeCore::calcScaleBlendSI(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8006C4E0
XanimeCore::calcScaleBlendBasic(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8006C9A0
XanimeCore::calcScaleBlendSpecial(void)=0x8006CAB0
XanimeCore::freezeCopy(J3DModelData*, XanimeCore*, unsigned long, unsigned long)=0x8006CB50
XanimeCore::initT(J3DModelData*)=0x8006CC40
XanimeCore::fixT(JGeometry::TVec3<float>*)=0x8006CD30
J3DMtxCalc::getWeight(unsigned char) const=0x8006CD80
J3DMtxCalc::getAnmTransform(void)=0x8006CD90
J3DMtxCalc::getAnmTransform(unsigned char)=0x8006CDA0
J3DMtxCalc::setAnmTransform(J3DAnmTransform*)=0x8006CDB0
J3DMtxCalc::setAnmTransform(unsigned char, J3DAnmTransform*)=0x8006CDC0
XanimeCore::calc(void)=0x8006CDD0
XanimeCore::init(const Vec&, A3_A4_Cf)=0x8006CEF0
XanimeCore::__dt(void)=0x8006CF20
XanimePlayer::init(void)=0x8006CF60
XanimePlayer::__ct(J3DModel*, XanimeResourceTable*)=0x8006D010
XanimeFrameCtrl::__ct(void)=0x8006D160
XanimeFrameCtrl::__dt(void)=0x8006D1C0
XanimePlayer::__ct(J3DModel*, XanimeResourceTable*, XanimePlayer*)=0x8006D200
XanimePlayer::stopAnimation(const char*)=0x8006D350
XanimePlayer::changeTrackAnimation(unsigned char, const char*)=0x8006D3A0
XanimePlayer::changeTrackAnimation(unsigned char, unsigned long)=0x8006D400
XanimePlayer::changeSimpleBck(const char*)=0x8006D480
XanimePlayer::changeAnimationBck(const char*)=0x8006D500
XanimePlayer::changeAnimationByHash(unsigned long)=0x8006D560
XanimePlayer::swapFrameCtrl(const XanimeGroupInfo*)=0x8006D5B0
XanimePlayer::changeAnimation(const XanimeGroupInfo*)=0x8006D6D0
XanimePlayer::changeCurrentAnimation(const XanimeGroupInfo*)=0x8006D740
XanimePlayer::prepareAnimation(const XanimeGroupInfo*)=0x8006D760
XanimePlayer::runNextAnimation(void)=0x8006D7C0
XanimePlayer::changeAnimationSimple(J3DAnmTransform*)=0x8006D8F0
XanimePlayer::changeSpeed(float)=0x8006DA30
XanimePlayer::changeInterpoleFrame(long)=0x8006DA40
XanimePlayer::changeTrackWeight(unsigned long, float)=0x8006DA80
XanimePlayer::calcAnm(unsigned short)=0x8006DAC0
XanimePlayer::setModel(J3DModel*)=0x8006DB30
XanimePlayer::overWriteMtxCalc(unsigned short)=0x8006DB50
XanimePlayer::clearMtxCalc(unsigned short)=0x8006DB70
XanimePlayer::clearAnm(unsigned short)=0x8006DB90
XanimePlayer::updateBeforeMovement(void)=0x8006DBC0
XanimePlayer::updateAfterMovement(void)=0x8006DC50
XanimePlayer::updateInterpoleRatio(void)=0x8006DD80
XanimePlayer::getMainAnimationTrans(unsigned long, JGeometry::TVec3<float>*) const=0x8006DE20
XanimePlayer::isRun(const char*) const=0x8006DF00
XanimePlayer::isTerminate(const char*) const=0x8006E000
XanimePlayer::isTerminate(void) const=0x8006E070
XanimePlayer::setDefaultAnimation(const char*)=0x8006E0A0
XanimePlayer::runDefaultAnimation(void)=0x8006E110
XanimePlayer::isAnimationRunSimple(void) const=0x8006E190
XanimePlayer::getCurrentAnimationName(void) const=0x8006E1E0
XanimePlayer::getDefaultAnimationName(void) const=0x8006E200
XanimePlayer::getCurrentBckName(void) const=0x8006E220
XanimePlayer::getNameStringPointer(const char*) const=0x8006E230
XanimePlayer::checkPass(float) const=0x8006E2D0
XanimePlayer::getSimpleGroup(void) const=0x8006E390
XanimePlayer::duplicateSimpleGroup(void)=0x8006E3B0
XanimeGroupInfo::init(void)=0x8006E4E0
XanimeResourceTable::init(void)=0x8006E540
XanimeResourceTable::getGroupInfo(const char*) const=0x8006E570
XanimeResourceTable::getSimpleIndex(const char*) const=0x8006E610
XanimeResourceTable::getIndexFromHash(unsigned long) const=0x8006E690
XanimeResourceTable::getGroupInfoFromHash(unsigned long) const=0x8006E6E0
XanimeResourceTable::getGroupIndex(const char*) const=0x8006E730
XanimeResourceTable::getSingleIndex(const char*) const=0x8006E7B0
XanimeResourceTable::search(XanimeBckTable*, const char*, unsigned long) const=0x8006E840
XanimeResourceTable::__ct(ResourceHolder*)=0x8006E8E0
XanimeResourceTable::swapBckName(const char*, XanimeSwapTable*) const=0x8006E980
XanimeResourceTable::initGroupInfo(ResourceHolder*, XanimeGroupInfo*, XanimeAuxInfo*, XanimeOfsInfo*, XanimeBckTable*, XanimeBckTable2*, XanimeBckTable3*, XanimeBckTable4*, XanimeSwapTable*)=0x8006EA10
XanimeResourceTable::__ct(ResourceHolder*, XanimeGroupInfo*, XanimeAuxInfo*, XanimeOfsInfo*, XanimeBckTable*, XanimeBckTable2*, XanimeBckTable3*, XanimeBckTable4*, XanimeSwapTable*)=0x8006EE10
XanimeResourceTable::createSortTable(void)=0x8006EF50
XanimeResourceTable::findResMotion(const char*) const=0x8006EFE0
XanimeResourceTable::findStringMotion(const char*) const=0x8006F050
SyncBckEffectChecker::updateBefore(void)=0x8006F0B0
SyncBckEffectChecker::updateAfter(void)=0x8006F1A0
SyncBckEffectChecker::reset(void)=0x8006F1D0
SyncBckEffectChecker::checkPass(float) const=0x8006F520
SyncBckEffectChecker::checkPassIfRate0(float) const=0x8006F570
SyncBckEffectInfo::isRegisteredBck(const char*) const=0x8006F750
MR::Effect::isExistSyncBckDeleteFrame(const SyncBckEffectInfo*)=0x8006F7E0
AreaFormCube::__ct(int)=0x8006F810
AreaFormCube::init(const JMapInfoIter&)=0x8006F870
AreaFormCube::isInVolume(const JGeometry::TVec3<float>&) const=0x8006F8D0
AreaFormCube::calcWorldPos(JGeometry::TVec3<float>*) const=0x8006F990
AreaFormCube::calcWorldRotate(JGeometry::TVec3<float>*) const=0x8006F9C0
AreaFormCube::calcWorldBox(JGeometry::TDirBox3<float>*) const=0x8006FB40
AreaFormCube::calcLocalPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x8006FC00
AreaFormCube::calcLocalRotate(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x8006FC50
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::mult33(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>&) const=0x8006FCA0
AreaFormCube::getBaseSize(void)=0x8006FD20
AreaFormCube::updateBoxParam(void)=0x8006FD30
AreaFormCube::calcWorldMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*) const=0x8006FE60
AreaFormSphere::__ct(void)=0x8006FEC0
AreaFormSphere::init(const JMapInfoIter&)=0x8006FF10
AreaFormSphere::calcUpVec(JGeometry::TVec3<float>*) const=0x8006FFB0
AreaFormSphere::calcPos(JGeometry::TVec3<float>*) const=0x80070070
AreaFormSphere::isInVolume(const JGeometry::TVec3<float>&) const=0x800700A0
AreaFormBowl::__ct(void)=0x80070110
AreaFormBowl::init(const JMapInfoIter&)=0x80070140
AreaFormBowl::isInVolume(const JGeometry::TVec3<float>&) const=0x800701C0
AreaFormBowl::calcUpVec(const JGeometry::TVec3<float>&)=0x80070260
AreaFormCylinder::__ct(void)=0x800702F0
AreaFormCylinder::init(const JMapInfoIter&)=0x80070330
AreaFormCylinder::calcPos(JGeometry::TVec3<float>*) const=0x800703D0
AreaFormCylinder::calcCenterPos(JGeometry::TVec3<float>*) const=0x80070400
AreaFormCylinder::calcUpVec(JGeometry::TVec3<float>*) const=0x80070470
AreaFormCylinder::isInVolume(const JGeometry::TVec3<float>&) const=0x800704D0
AreaFormCylinder::calcDir(const JGeometry::TVec3<float>&)=0x800705B0
MR::createAreaForm(int)=0x80070650
AreaObj::__ct(const char*)=0x80070730
AreaObj::__ct(int, const char*)=0x800707B0
AreaObj::init(const JMapInfoIter&)=0x80070840
AreaObj::validate(void)=0x800709F0
AreaObj::invalidate(void)=0x80070A00
AreaObj::getManagerName(void) const=0x80070A10
MR::Functor<AreaObj>(AreaObj*, M7AreaObjFPCvPv_v_Q22MR39FunctorV0M<AreaObj*,M7AreaObjFPCvPv_v>)=0x80070A20
AreaObj::initForm(const JMapInfoIter&)=0x80070A60
AreaObj::isInVolume(const JGeometry::TVec3<float>&) const=0x80070AE0
AreaObj::onSwitchA(void)=0x80070B50
AreaObj::offSwitchA(void)=0x80070B60
AreaObj::isOnSwitchA(void) const=0x80070B70
AreaObj::isOnSwitchB(void) const=0x80070B80
AreaObj::isValidSwitchA(void) const=0x80070B90
AreaObj::isValidSwitchB(void) const=0x80070BA0
AreaObj::isNotHemisphere(void) const=0x80070BB0
AreaObj::setFollowMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80070BD0
AreaObj::getFollowMtx(void) const=0x80070BE0
AreaObjMgr::__ct(long, const char*)=0x80070BF0
AreaObjMgr::entry(AreaObj*)=0x80070C50
AreaObj::getAreaPriority(void) const=0x80070D40
AreaObjMgr::find_in(const JGeometry::TVec3<float>&) const=0x80070D50
AreaObjMgr::requestMovementOnAll(void)=0x80070E30
MR::AssignableArray<AreaObj*>::__dt(void)=0x80070E90
MR::FunctorV0M<AreaObj*,M7AreaObjFPCvPv_v>::__cl(void) const=0x80070EF0
MR::FunctorV0M<AreaObj*,M7AreaObjFPCvPv_v>::clone(JKRHeap*) const=0x80070F20
AreaObj::__dt(void)=0x80070F90
AreaObjMgr::__dt(void)=0x80070FF0
AreaObjContainer::createManager<AreaObjMgr>(long, const char*, _P10AreaObjMgr)=0x80071060
AreaObjContainer::createManager<CubeCameraMgr>(long, const char*, _P10AreaObjMgr)=0x800710B0
AreaObjContainer::createManager<GlaringLightAreaMgr>(long, const char*, _P10AreaObjMgr)=0x80071100
AreaObjContainer::createManager<ImageEffectAreaMgr>(long, const char*, _P10AreaObjMgr)=0x80071150
AreaObjContainer::createManager<LightAreaHolder>(long, const char*, _P10AreaObjMgr)=0x800711A0
AreaObjContainer::createManager<WarpCubeMgr>(long, const char*, _P10AreaObjMgr)=0x800711F0
AreaObjContainer::createManager<WaterAreaMgr>(long, const char*, _P10AreaObjMgr)=0x80071260
AreaObjContainer::__ct(const char*)=0x800712B0
AreaObjContainer::init(const JMapInfoIter&)=0x80071300
AreaObjContainer::getManager(const char*) const=0x800713D0
AreaObjContainer::getAreaObj(const char*, const JGeometry::TVec3<float>&) const=0x80071480
AreaObjContainer::isExistAreaObj(const char*) const=0x800714C0
MR::getAreaObjContainer(void)=0x800714F0
MR::AssignableArray<AreaObjMgr*>::__dt(void)=0x80071520
AreaObjContainer::__dt(void)=0x80071580
WarpCubeMgr::__dt(void)=0x800715F0
AreaObjFollower::__ct(AreaObj*, const JMapInfoIter&)=0x80071650
AreaObjFollower::update(void)=0x800716B0
MR::addBaseMatrixFollowerAreaObj(AreaObj*, const JMapInfoIter&)=0x80071720
AudioEffectArea::__ct(const char*)=0x80071790
AudioEffectArea::init(const JMapInfoIter&)=0x800717E0
AudioEffectArea::movement(void)=0x80071840
AudioEffectArea::getManagerName(void) const=0x800718B0
AudioEffectArea::__dt(void)=0x800718C0
MR::isStageTwisterTowerGalaxy(void)=0x80071920
BgmChangeArea::__ct(const char*)=0x80071930
BgmChangeArea::init(const JMapInfoIter&)=0x80071980
BgmChangeArea::movement(void)=0x80071A60
BgmChangeArea::getFadeTime(void) const=0x80071DF0
BgmChangeArea::__dt(void)=0x80071E10
BgmVolumeFadeArea::__ct(const char*)=0x80071E70
BgmVolumeFadeArea::init(const JMapInfoIter&)=0x80071EC0
BgmVolumeFadeArea::movement(const JMapInfoIter&)=0x80071F00
BgmVolumeFadeArea::getFadeTime(void) const=0x80071FF0
BgmVolumeFadeArea::getVolume(void) const=0x80072010
BgmVolumeFadeArea::__dt(void)=0x80072060
BloomArea::__ct(const char*)=0x800720C0
ImageEffectArea::__dt(void)=0x80072120
BloomArea::init(const JMapInfoIter&)=0x80072180
ImageEffectArea::isSyncWithPlayer(void) const=0x800721F0
BloomArea::getManagerName(void) const=0x80072200
BloomArea::__dt(void)=0x80072210
CancelBeeMorphArea::__ct(const char*)=0x80072270
CancelBeeMorphArea::init(const JMapInfoIter&)=0x800722B0
CancelBeeMorphArea::movement(void)=0x800722F0
CancelBeeMorphArea::__dt(void)=0x80072400
ClipDrawArea::__ct(const char*)=0x80072460
ClipDrawArea::init(const JMapInfoIter&)=0x800724A0
ClipDrawArea::__dt(void)=0x800724D0
CollisionArea::__ct(int, const char*)=0x80072530
CollisionArea::init(const JMapInfoIter&)=0x800725B0
CollisionArea::movement(void)=0x80072700
CollisionArea::hitCheck(const JGeometry::TVec3<float>&, float, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x80072960
AreaPolygon::__ct(void)=0x80073160
DynamicCollisionObj::__dt(void)=0x800731C0
AreaPolygon::init(const JMapInfoIter&)=0x80073220
AreaPolygon::setSurface(long)=0x800733C0
LiveActor::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800738B0
LiveActor::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800738C0
LiveActor::control(void)=0x800738D0
AreaPolygon::__dt(void)=0x800738E0
CollisionArea::__dt(void)=0x80073940
CubeCameraArea::__ct(const char*)=0x800739A0
CubeCameraArea::init(const JMapInfoIter&)=0x800739F0
CubeCameraArea::movement(void)=0x80073B70
CubeCameraArea::getAreaPriority(void) const=0x80073C20
CubeCameraArea::isValidCameraID(void) const=0x80073C30
CubeCameraArea::getCameraID(void) const=0x80073C40
CubeCameraArea::isInVolume(const JGeometry::TVec3<float>&) const=0x80073C50
CubeCameraArea::setCurrentCategory(long)=0x80073CA0
CubeCameraArea::getCategoryArg(void) const=0x80073CB0
CubeCameraMgr::__ct(long, const char*)=0x80073CC0
CubeCameraMgr::initAfterLoad(void)=0x80073D10
CubeCameraArea::getManagerName(void) const=0x80073D20
CubeCameraArea::__dt(void)=0x80073D30
CubeCameraMgr::__dt(void)=0x80073D90
CumulativeTimerSwitchArea::__ct(const char*)=0x80073DF0
CumulativeTimerSwitchArea::init(const JMapInfoIter&)=0x80073E30
CumulativeTimerSwitchArea::movement(void)=0x80073E90
CumulativeTimerSwitchArea::__dt(void)=0x80073F00
DeathArea::__ct(const char*)=0x80073F60
DeathArea::init(const JMapInfoIter&)=0x80073FA0
DeathArea::movement(void)=0x80073FE0
DeathArea::isInVolume(const JGeometry::TVec3<float>&) const=0x80074050
DeathArea::getDeathType(void) const=0x800740C0
DeathArea::getManagerName(void) const=0x800740E0
DeathArea::__dt(void)=0x800740F0
DepthOfFieldArea::__ct(const char*)=0x80074150
DepthOfFieldArea::init(const JMapInfoIter&)=0x800741A0
DepthOfFieldArea::getIntensity(void) const=0x800741F0
DepthOfFieldArea::getBlurMaxDist(void) const=0x80074240
DepthOfFieldArea::getArg4(void) const=0x80074260
DepthOfFieldArea::isSyncWithPlayer(void) const=0x80074270
DepthOfFieldArea::getManagerName(void) const=0x80074280
DepthOfFieldArea::__dt(void)=0x80074290
GlaringLightAreaMgr::__ct(long, const char*)=0x800742F0
GlaringLightAreaMgr::__dt(void)=0x80074330
HazeCube::__ct(long, const char*)=0x80074390
HazeCube::init(const JMapInfoIter&)=0x800743E0
HazeCube::isInVolume(const JGeometry::TVec3<float>&) const=0x80074450
HazeCube::getManagerName(void) const=0x800744C0
HazeCube::__dt(void)=0x800744D0
ImageEffectArea::__ct(int, const char*)=0x80074530
ImageEffectArea::init(const JMapInfoIter&)=0x80074580
ImageEffectAreaMgr::__ct(long, const char*)=0x80074590
ImageEffectAreaMgr::__dt(void)=0x800745D0
LightArea::__ct(const char*)=0x80074630
LightArea::init(const JMapInfoIter&)=0x80074680
LightArea::getManagerName(void) const=0x80074720
LightArea::__dt(void)=0x80074730
LightAreaHolder::__ct(long, const char*)=0x80074790
LightAreaHolder::tryFindLightID(const JGeometry::TVec3<float>&, ZoneLightID*) const=0x800747E0
LightAreaHolder::initAfterPlacement(void)=0x80074880
LightAreaHolder::__dt(void)=0x80074890
MercatorTransformCube::__ct(int, const char*)=0x800748F0
MercatorTransformCube::init(const JMapInfoIter&)=0x80074940
MercatorTransformCube::convertTransAndRotate(JGeometry::TVec3<float>*, JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, bool) const=0x800749B0
MercatorTransformCube::getSphereRadius(void) const=0x80074BB0
MercatorTransformCube::calcUV(JGeometry::TVec2<float>*, const JGeometry::TVec3<float>&) const=0x80074BF0
MercatorTransformCube::calcLocalBoxSize(JGeometry::TVec3<float>*) const=0x80074C80
MR::getMercatorCube(void)=0x80074CE0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getEulerXYZ(JGeometry::TVec3<float>&) const=0x80074D10
MR::calcRailClippingInfoForMercator(JGeometry::TVec3<float>*, float*, LiveActor*, float, float)=0x80074E10
MR::getDivideMercatorRailPosition(DivideMercatorRailPosInfo*, const LiveActor*, unsigned long, float, unsigned long)=0x80074F60
MercatorTransformCube::__dt(void)=0x80075320
MessageArea::__ct(const char*)=0x80075380
MessageArea::init(const JMapInfoIter&)=0x800753D0
MessageArea::__dt(void)=0x80075420
MorphSwitchArea::__ct(const char*)=0x80075480
MorphSwitchArea::init(const JMapInfoIter&)=0x800754D0
MorphSwitchArea::checkCondition(void) const=0x800755B0
MorphSwitchArea::__dt(void)=0x80075610
PostFogArea::__ct(const char*)=0x80075670
PostFogArea::init(const JMapInfoIter&)=0x800756C0
PostFogArea::getMinRange(void) const=0x800756F0
PostFogArea::getMaxRange(void) const=0x80075720
PostFogArea::getAlpha(void) const=0x80075750
PostFogArea::getRed(void) const=0x80075780
PostFogArea::getGreen(void) const=0x800757B0
PostFogArea::getBlue(void) const=0x800757E0
PostFogArea::getGradType(void) const=0x80075810
PostFogArea::getManagerName(void) const=0x80075820
PostFogArea::__dt(void)=0x80075830
PostOutlineArea::__ct(const char*)=0x80075890
PostOutlineArea::init(const JMapInfoIter&)=0x800758E0
PostOutlineArea::getIntensity(void) const=0x80075910
PostOutlineArea::getManagerName(void) const=0x80075940
PostOutlineArea::__dt(void)=0x80075950
SceneChangeArea::__ct(const char*)=0x800759B0
SceneChangeArea::init(const JMapInfoIter&)=0x800759F0
SceneChangeArea::movement(void)=0x80075A30
SceneChangeArea::__dt(void)=0x80075AA0
ShadowColorArea::__ct(const char*)=0x80075B00
ShadowColorArea::init(const JMapInfoIter&)=0x80075B40
ShadowColorArea::__dt(void)=0x80075B90
SoundEmitterCube::__ct(int, const char*)=0x80075BF0
SoundEmitterCube::init(const JMapInfoIter&)=0x80075C50
SoundEmitterCube::movement(void)=0x80075CD0
JGeometry::TBox<JGeometry::TVec3<float>>::extend(const JGeometry::TVec3<float>&)=0x80075F30
SoundEmitterCubeWorldMapSync::__ct(const char*)=0x80075FD0
SoundEmitterCube::__dt(void)=0x80076010
SoundEmitterCubeWorldMapSync::init(const JMapInfoIter&)=0x80076070
SoundEmitterCubeWorldMapSync::__dt(void)=0x800760C0
SoundEmitterSphere::__ct(int, const char*)=0x80076120
SoundEmitterSphere::init(const JMapInfoIter&)=0x80076180
SoundEmitterSphere::movement(void)=0x80076200
SoundEmitterSphere::__dt(void)=0x80076390
SoundPlayArea::__ct(const char*)=0x800763F0
SoundPlayArea::setupSoundPos(void)=0x80076440
SoundPlayArea::init(const JMapInfoIter&)=0x80076470
SoundPlayArea::movement(void)=0x80076510
SoundPlayArea::__dt(void)=0x800765D0
SpinGuidanceArea::__ct(const char*)=0x80076630
SpinGuidanceArea::init(const JMapInfoIter&)=0x80076670
SpinGuidanceArea::__dt(void)=0x80076710
SpinSwitchArea::__ct(const char*)=0x80076770
SpinSwitchArea::init(const JMapInfoIter&)=0x800767B0
SpinSwitchArea::movement(void)=0x80076800
SpinSwitchArea::__dt(void)=0x80076890
SunLightArea::__ct(const char*)=0x800768F0
SunLightArea::getManagerName(void) const=0x80076930
SunLightArea::__dt(void)=0x80076940
SwitchArea::__ct(const char*)=0x800769A0
SwitchArea::init(const JMapInfoIter&)=0x800769F0
SwitchArea::movement(void)=0x80076A40
SwitchArea::getManagerName(void) const=0x80076B20
SwitchArea::onSwitchA(void)=0x80076B30
SwitchArea::isUpdate(void) const=0x80076BC0
SwitchArea::checkPlayerDrillRush(void) const=0x80076C60
SwitchArea::__dt(void)=0x80076C80
ViewGroupCtrlArea::__ct(const char*)=0x80076CE0
ViewGroupCtrlArea::__dt(void)=0x80076D20
WarpCubeMgr::getPairCube(const AreaObj*)=0x80076D80
WarpCubeMgr::setInvalidateTimer(AreaObj*, unsigned short)=0x80076E10
WarpCubeMgr::startEventCamera(const AreaObj*)=0x80076E20
WarpCubeMgr::endEventCamera(void)=0x80076E70
WarpCube::init(const JMapInfoIter&)=0x80076EC0
WarpCube::movement(void)=0x80076FD0
WarpCube::draw(void) const=0x80077050
WarpCube::__dt(void)=0x800771C0
WaterArea::__ct(const char*)=0x80077220
WaterArea::init(const JMapInfoIter&)=0x80077260
WaterAreaMgr::__ct(long, const char*)=0x80077290
WaterArea::__dt(void)=0x800772D0
WaterAreaMgr::__dt(void)=0x80077330
YoshiEatGuidanceArea::__ct(const char*)=0x80077390
YoshiEatGuidanceArea::movement(void)=0x80077410
YoshiEatGuidanceArea::__dt(void)=0x800774A0
JAUSectionHeap::getHeap(void)=0x80077840
JAUAudioArcLoader::__dt(void)=0x80077890
AudSystem::__ct(JAUSectionHeap*, JKRArchive*, JKRArchive*)=0x800778F0
JAUSoundMgr::__dt(void)=0x80078090
AudAudience<4>::__dt(void)=0x80078410
AudAudience_<4,AudDopplerAudible<4>,AudDopplerAudienceState,AudAudience_withSetting_doppler>::__dt(void)=0x80078470
AudAudience_withSetting_doppler::__dt(void)=0x800784D0
JAUStdSoundInfo::__dt(void)=0x80078630
AudDopplerAudienceState::resetMtx(A4_Cf)=0x800786B0
JASHeap::__dt(void)=0x80078840
AudSystem::getChordInfo(void)=0x80078AF0
AudSystem::setSpeakerResource(JKRArchive*)=0x80078B10
AudSystem::frameWork(void)=0x80078B20
AudSystem::calc(void)=0x80078C50
AudSystem::startSound(JAISoundID, JAISoundHandle*, const JGeometry::TVec3<float>*)=0x80078CC0
AudSystem::startLevelSound(JAISoundID, JAISoundHandle*, const JGeometry::TVec3<float>*)=0x80078E70
JASCriticalSection::__dt(void)=0x800790A0
AudSystem::preProcessToReset(void)=0x800791D0
AudSystem::resetAudio(unsigned long, bool)=0x80079260
AudSystem::resumeReset(void)=0x800792C0
AudSystem::hasReset(void) const=0x80079340
AudSystem::enterHomeButtonMenu(void)=0x80079580
AudSystem::enterPauseMenu(void)=0x80079800
AudSystem::exitPauseMenu(void)=0x80079880
AudSystem::doDvdErrorProcess(void)=0x80079B10
AudSystem::exitDvdErrorProcess(void)=0x80079BB0
AudSystem::getNumOfPlaying(JAISoundID)=0x80079C40
AudSystem::__dt(void)=0x8007AB40
AudAudience_<4,AudDopplerAudible<4>,AudDopplerAudienceState,AudAudience_withSetting_doppler>::getMaxChannels(void)=0x8007AD90
AudAudience_<4,AudDopplerAudible<4>,AudDopplerAudienceState,AudAudience_withSetting_doppler>::newAudible(const JGeometry::TVec3<float>&, JAISoundID, const JGeometry::TVec3<float>*, unsigned long)=0x8007ADA0
AudAudience_<4,AudDopplerAudible<4>,AudDopplerAudienceState,AudAudience_withSetting_doppler>::deleteAudible(JAIAudible*)=0x8007B250
AudAudience_<4,AudDopplerAudible<4>,AudDopplerAudienceState,AudAudience_withSetting_doppler>::calcPriority(JAIAudible*)=0x8007B280
AudAudience_<4,AudDopplerAudible<4>,AudDopplerAudienceState,AudAudience_withSetting_doppler>::mixChannelOut(const JASSoundParams&, JAIAudible*, int)=0x8007B3B0
JASSoundParams::init(void)=0x8007B8C0
JASMemPool<AudMeTrack>::__ct(void)=0x8007BC10
JASMemPool<AudMeTrack>::__dt(void)=0x8007BC40
JASMemPool<AudMe>::__ct(void)=0x8007BCA0
JASMemPool<AudMe>::__dt(void)=0x8007BCD0
AudSystemVolumeController::setSeVolumeSetTrig(long, unsigned long)=0x8007BF30
AudSystemVolumeController::setSeVolumeSetInner(long, unsigned long)=0x8007C0D0
AudSystemVolumeController::pushVolumeSet(void)=0x8007C150
AudSystemVolumeController::popVolumeSet(void)=0x8007C180
AudAudience_withSetting::updateSetting(void)=0x8007C1C0
AudAudience_withSetting::__ct(void)=0x8007C270
AudWrap::getSystem(void)=0x8007C850
AudWrap::getBgmMgr(void)=0x8007C8A0
AudWrap::getStageBgm(void)=0x8007C8B0
AudWrap::getSubBgm(void)=0x8007C8C0
AudWrap::getSystemSeObject(void)=0x8007C960
AudWrap::getAtmosphereSeObject(void)=0x8007C970
AudWrap::getSoundObjHolder(void)=0x8007C980
AudWrap::getRemixSequencer(void)=0x8007C9D0
AudWrap::getRemixSeqObject(void)=0x8007C9E0
AudSoundObject::__ct(JGeometry::TVec3<float>*, unsigned char, JKRHeap*)=0x8007CA90
AudSoundObjHashData::__ct(void)=0x8007CB60
AudSoundObjHashData::init(void)=0x8007CB90
AudSoundObject::writePort(JAISoundHandle*, unsigned long, unsigned short)=0x8007CC90
AudSoundObject::startLevelSound(const char*)=0x8007D080
AudSoundObject::startSoundParam(JAISoundID, long, long)=0x8007D0E0
AudSoundObject::startLevelSoundParam(const char*, long, long)=0x8007D1C0
AudSoundObject::setMapCode(long)=0x8007D450
AudSoundObject::setMapCodeExtra(long)=0x8007D470
AudSoundObject::getMapCode(void) const=0x8007D4A0
AudSoundObject::clearMapCode(void)=0x8007D4C0
AudAnmSoundObject::__ct(JGeometry::TVec3<float>*, unsigned char, JKRHeap*)=0x8007FE20
AudAnmSoundObject::update(float)=0x8007FE80
JAUSoundAnimation::getNumSounds(void) const=0x80080390
JAUSoundAnimationSound::isNotingOn(float, bool) const=0x800803C0
JAUSoundAnimation::getSound(int) const=0x80080470
DrawBufferExecuter::offExecuteLight(void)=0x80080BA0
JAISoundHandle::__dt(void)=0x80080E00
MR::hasMapPartsShadow(long, _0)=0x80082004
MR::hasMapPartsShadow(long, _1)=0x800820A4
MR::hasMapPartsShadow(long, _2)=0x80082774
MR::hasMapPartsShadow(long, _3)=0x800827D4
MR::hasMapPartsShadow(long, _4)=0x800827F4
AudBgmKeeper::__ct(void)=0x800828A0
AudBgmKeeper::get(AudBgmKeeper::BgmType)=0x80082A40
AudBgmKeeper::release(AudBgm*)=0x80082AA0
AudBgmKeeper::getValidSingleBgm(void)=0x80082B80
AudBgmKeeper::getValidMultiBgm(void)=0x80082BD0
AudBgmMgr::__ct(void)=0x80082C20
AudBgmVolumeController::__dt(void)=0x80082CB0
AudBgmMgr::start(long, unsigned long, bool)=0x80082E00
AudBgmMgr::setNextBGM(long, unsigned long)=0x80082F50
AudBgmMgr::clearNextBGM(long)=0x80082F60
AudBgmMgr::clearLastBGM(long)=0x80082FB0
AudBgmMgr::startNextBgmWhenStopping(long)=0x800831C0
AudBgmMgr::releaseStoppingBgm(long)=0x80083260
AudBgmMgr::sendToRhythmSystem(long)=0x80083330
AudBgmRhythmStrategy::reject(void)=0x80083610
AudBgmVolumeController::__ct(void)=0x80083E50
AudBgmVolumeController::update(void)=0x80083F30
AudLimitedSoundInfo::update(void)=0x80084650
AudLimitedSoundInfo::isFree(void)=0x80084690
AudMicWrap::setMicEnv(void)=0x80084930
AudMicWrap::getMicPos(void)=0x800849C0
AudRemixMgr::__ct(JKRHeap*)=0x800849F0
AudRemixMgr::getRemixNoteGroupDataFromMelodyNo(long) const=0x80084BA0
AudRmxSeqNoteOnTimer::initData(void)=0x80084C30
AudRmxSeqNoteOnTimer::update(float)=0x80084CB0
AudRmxSeqNoteOnTimer::getFreeSeID(void)=0x80084E60
AudSceneMgr::loadStaticResource(void)=0x80085230
AudSceneMgr::loadStageResource(const char*, const char*)=0x800854D0
AudSceneMgr::setPlayerModeMario(void)=0x800858C0
AudSceneMgr::setPlayerModeLuigi(void)=0x800858D0
AudSoundNameConverter::getSoundID(int*, const char*)=0x80085F70
AudSoundObjHolder::add(AudSoundObject*)=0x80086630
AudSoundObjHolder::moveOver(long, long)=0x800866F0
AudSpeakerWrap::getResName(void)=0x80086720
AudTrackController::start(JAISoundHandle*)=0x80086C80
AudTrackController::stop(void)=0x80086C90
JAUWaveBankTable::getWaveBank(unsigned long)=0x800873E0
JMapInfoIter::__ne(const JMapInfoIter&) const=0x800876F0
JASBank::noteOn(const JASBank*, int, unsigned char, unsigned char, unsigned short, void(unsigned long, JASChannel*, JASDsp::TChannel*, void*), void*)=0x800886A0
JASWaveArc::setFileName(const char*)=0x80088BB0
JASWaveArc::load(JASHeap*)=0x80088C60
JAUSoundObject::startSound(JAISoundID)=0x80088D20
JAUSoundObject::startLevelSound(JAISoundID)=0x80088DF0
JAISoundParamsTransition::TTransition::apply(float)=0x800890F0
JASMemPool_MultiThreaded<JASChannel>::__ct(void)=0x800891B0
JASMemPool_MultiThreaded<JASChannel>::__dt(void)=0x800891E0
CSSoundNameConverter::getSoundID(const char*) const=0x80089280
BattanKing::__ct(const char*)=0x8008A650
BattanKing::init(const JMapInfoIter&)=0x8008A730
LiveActorGroup::__dt(void)=0x8008AD40
BattanKing::makeActorAppeared(void)=0x8008ADA0
BattanKing::makeActorDead(void)=0x8008ADF0
BattanKing::control(void)=0x8008AE70
Color8::__ct(_GXColor)=0x8008B150
BattanKing::calcAndSetBaseMtx(void)=0x8008BFC0
BattanKing::calcAnim(void)=0x8008C030
BattanKing::attackSensor(HitSensor*, HitSensor*)=0x8008C0E0
BattanKing::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8008C3C0
BattanKing::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8008C450
BattanKing::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8008C490
TriangleFilterDelegator<BattanKing>::isInvalidTriangle(const Triangle*) const=0x8008D1F0
BattanKing::__dt(void)=0x8008D250
PattanHolder::__dt(void)=0x8008D2B0
short::(nit_\BattanKing_cpp)=0x8008D310
BattanKingCollisionPress::init(const JMapInfoIter&)=0x8008DA30
BattanKingCollisionPress::makeActorAppeared(void)=0x8008DA40
BattanKingCollisionPress::makeActorDead(void)=0x8008DA80
BattanKingCollisionPress::movement(void)=0x8008DAC0
BattanKingCollisionPress::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8008DB00
BattanKingCollision::init(const JMapInfoIter&)=0x8008DC30
BattanKingCollision::appear(void)=0x8008DC40
BattanKingCollision::movement(void)=0x8008DC80
BattanKingCollision::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8008DCC0
BattanKingCollision::getBaseMtx(void) const=0x8008DCE0
BattanKingCollisionPress::getBaseMtx(void) const=0x8008DCF0
BattanKingCollisionPress::__dt(void)=0x8008DD00
BattanKingCollision::__dt(void)=0x8008DD60
short::(nit_\BattanKingCollision_cpp)=0x8008E3A0
ActorStateBaseInterface::control(void)=0x8008E790
BellyDragon::__ct(const char*)=0x8008E8A0
BellyDragon::init(const JMapInfoIter&)=0x8008E920
BellyDragon::appear(void)=0x8008ECD0
BellyDragon::kill(void)=0x8008ED20
BellyDragon::control(void)=0x8008F030
BellyDragon::calcAndSetBaseMtx(void)=0x8008F070
BellyDragon::attackSensor(HitSensor*, HitSensor*)=0x8008F0C0
BellyDragon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8008F140
BellyDragon::getBaseMtx(void) const=0x8008F1E0
BellyDragon::__dt(void)=0x8008F1F0
short::(nit_\BellyDragon_cpp)=0x8008F250
JAISeq::getTrack(void)=0x8008F8D0
JMath::gekko_ps_copy12(void*, const void*)=0x8008F8E0
ShadowVolumeDrawer::__dt(void)=0x80095A40
ShadowDrawer::__dt(void)=0x80095AA0
BossBussun::__ct(const char*)=0x80097F50
BossBussun::init(const JMapInfoIter&)=0x80098030
BossBussun::initAfterPlacement(void)=0x800983C0
BossBussun::kill(void)=0x80098550
BossBussun::control(void)=0x80098590
BossBussun::calcAndSetBaseMtx(void)=0x800986A0
BossBussun::attackSensor(HitSensor*, HitSensor*)=0x80098740
BossBussun::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80098930
MR::FunctorV0M<BossBussun*,M10BossBussunFPCvPv_v>::__cl(void) const=0x800996C0
MR::FunctorV0M<BossBussun*,M10BossBussunFPCvPv_v>::clone(JKRHeap*) const=0x800996F0
BossBussun::__dt(void)=0x80099760
short::(nit_\BossBussun_cpp)=0x800997C0
BossBussunShot::__ct(const char*)=0x8009A330
JGeometry::TQuat4<float>::__ct<float>(float, float, float, float, _Pv)=0x8009A3F0
BossBussunShot::init(const JMapInfoIter&)=0x8009A410
BossBussunShot::initAfterPlacement(void)=0x8009A590
BossBussunShot::control(void)=0x8009A5B0
BossBussunShot::calcAndSetBaseMtx(void)=0x8009A660
BossBussunShot::attackSensor(HitSensor*, HitSensor*)=0x8009A910
JointControlDelegator<BossBussunShot>::__dt(void)=0x8009AFB0
JointControlDelegator<BossBussunShot>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8009AFF0
JointControlDelegator<BossBussunShot>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8009B060
BossBussunShot::__dt(void)=0x8009B0D0
short::(nit_\BossBussunShot_cpp)=0x8009B130
StopSceneController::movement(void, _0)=0x8009C110
BossJugem::__ct(const char*)=0x8009D310
BossJugem::init(const JMapInfoIter&)=0x8009D400
BossJugem::makeActorAppeared(void)=0x8009D860
BossJugem::makeActorDead(void)=0x8009D8D0
BossJugem::control(void)=0x8009D910
BossJugem::calcAndSetBaseMtx(void)=0x8009EB40
BossJugem::attackSensor(HitSensor*, HitSensor*)=0x8009EBB0
BossJugem::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8009ECA0
MR::sinDegree(float)=0x8009F7C0
BossJugemCloud::__ct(BossJugem*, const char*, A4_f)=0x8009FF70
BossJugemCloud::init(const JMapInfoIter&)=0x8009FFE0
BossJugemCloud::control(void)=0x800A0100
BossJugemCloud::calcAndSetBaseMtx(void)=0x800A01A0
BossJugem::__dt(void)=0x800A0480
BossJugemCloud::__dt(void)=0x800A04E0
short::(nit_\BossJugem_cpp)=0x800A0540
BossStinkBug::__ct(const char*)=0x800A31D0
BossStinkBug::makeActorAppeared(void)=0x800A3300
BossStinkBug::makeActorDead(void)=0x800A3340
BossStinkBug::kill(void)=0x800A3380
BossStinkBug::init(const JMapInfoIter&)=0x800A33D0
BossStinkBug::start(void)=0x800A3670
BossStinkBug::initCamera(const JMapInfoIter&)=0x800A36C0
BossStinkBug::initSensor(void)=0x800A3740
BossStinkBug::initCollision(void)=0x800A3850
BossStinkBug::disposeBomb(void)=0x800A3900
BossStinkBug::reuestMovementOnParts(void)=0x800A3910
BossStinkBug::getWingModel(void)=0x800A3950
BossStinkBug::getBombLauncher(void)=0x800A3960
BossStinkBug::control(void)=0x800A3970
BossStinkBug::calcAndSetBaseMtx(void)=0x800A39D0
BossStinkBug::calcUpVec(JGeometry::TVec3<float>*) const=0x800A3A70
BossStinkBug::calcAnim(void)=0x800A3AF0
BossStinkBug::updateAction(void)=0x800A3B50
BossStinkBug::updatePose(void)=0x800A3B70
BossStinkBug::setPose(A4_f)=0x800A3C30
BossStinkBug::updateCamera(void)=0x800A3CA0
BossStinkBug::isValidFollowId(long) const=0x800A3CC0
BossStinkBug::validateCollisionGround(void)=0x800A3CE0
BossStinkBug::validateCollisionFly(void)=0x800A3D30
BossStinkBug::validateCollisionHitOnly(void)=0x800A3D80
BossStinkBug::invalidateCollision(void)=0x800A3DD0
BossStinkBug::onBindLeg(void)=0x800A3E30
BossStinkBug::offBindLeg(void)=0x800A3EE0
BossStinkBug::isLegInWater(void) const=0x800A3F60
BossStinkBug::updateJointControl(void)=0x800A3FD0
BossStinkBug::appearStarPiece(long)=0x800A41F0
BossStinkBug::attackSensor(HitSensor*, HitSensor*)=0x800A4270
BossStinkBug::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800A4290
BossStinkBug::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800A42B0
BossStinkBug::startEventCamera(const char*)=0x800A42D0
BossStinkBug::endEventCamera(const char*)=0x800A42E0
BossStinkBug::isSensorBody(const HitSensor*) const=0x800A4300
BossStinkBug::throwBomb(float, float)=0x800A4340
BossStinkBugFollowValidater::isValid(long) const=0x800A4450
MR::FunctorV0M<BossStinkBug*,M12BossStinkBugFPCvPv_v>::__cl(void) const=0x800A4460
MR::FunctorV0M<BossStinkBug*,M12BossStinkBugFPCvPv_v>::clone(JKRHeap*) const=0x800A4490
BossStinkBug::__dt(void)=0x800A4500
short::(nit_\BossStinkBug_cpp)=0x800A4560
BossStinkBugActionBase::__ct(const char*, BossStinkBug*)=0x800A4580
ActorStateBase<BossStinkBug>::__dt(void)=0x800A4660
BossStinkBugActionBase::updateGroundRegainRail(float)=0x800A46C0
BossStinkBugActionBase::updateGroundWalk(float)=0x800A4780
BossStinkBugActionBase::updateGroundFind(void)=0x800A4800
BossStinkBugActionBase::updateGroundShakeOff(void)=0x800A4890
BossStinkBugActionBase::updateGroundRun(float)=0x800A4920
BossStinkBugActionBase::updateGroundAttackSuccess(void)=0x800A49F0
BossStinkBugActionBase::updateGroundCoolDown(void)=0x800A4AB0
BossStinkBugActionBase::updateGroundTurn(void)=0x800A4B80
BossStinkBugActionBase::updateGroundDamage(void)=0x800A4C50
BossStinkBugActionBase::updateFly(void)=0x800A4D50
BossStinkBugActionBase::updateFlyShakeOffSign(long)=0x800A4DC0
BossStinkBugActionBase::updateFlyShakeOff(void)=0x800A4E90
BossStinkBugActionBase::updateFlyShakeOffWait(long)=0x800A4F30
BossStinkBugActionBase::updateFlyShakeOffEnd(void)=0x800A4FD0
BossStinkBugActionBase::updateFlyRollSign(long)=0x800A5060
BossStinkBugActionBase::updateFlyRoll(void)=0x800A5130
BossStinkBugActionBase::updateFlyRollWait(long)=0x800A51C0
BossStinkBugActionBase::updateFlyRollEnd(void)=0x800A5260
BossStinkBugActionBase::updateFlyTurnSign(void)=0x800A52F0
BossStinkBugActionBase::updateFlyTurn(void)=0x800A5390
BossStinkBugActionBase::updateFlyDash(float)=0x800A5460
BossStinkBugActionBase::updateFall(void)=0x800A5580
BossStinkBugActionBase::updateFallDamage(void)=0x800A5670
BossStinkBugActionBase::updateToGround(void)=0x800A5770
BossStinkBugActionBase::updateLand(void)=0x800A5940
BossStinkBugActionBase::updateToFly(void)=0x800A59E0
BossStinkBugActionBase::throwBomb(long)=0x800A5B40
BossStinkBugActionBase::resetThrowBombTiming(void)=0x800A5BA0
BossStinkBugActionBase::calcShakeOffSignSpeed(long) const=0x800A5BB0
BossStinkBugActionBase::calcKeepRollTime(long) const=0x800A5CB0
BossStinkBugActionBase::calcFlySoundVol(void) const=0x800A5DD0
BossStinkBugActionBase::calcIIRCutOff(void) const=0x800A5EF0
BossStinkBugActionBase::isAngry(void) const=0x800A6000
BossStinkBugActionBase::startSoundFly(long)=0x800A60D0
BossStinkBugActionBase::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800A6300
BossStinkBugActionBase::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800A6310
BossStinkBugActionBase::attackSensor(HitSensor*, HitSensor*)=0x800A6320
BossStinkBugActionBase::isValidFollowId(long) const=0x800A6330
BossStinkBugActionBase::__dt(void)=0x800A6340
BossStinkBugActionFlyHigh::__ct(BossStinkBug*)=0x800A63A0
BossStinkBugActionFlyHigh::appear(void)=0x800A6430
BossStinkBugActionFlyHigh::control(void)=0x800A64D0
BossStinkBugActionFlyHigh::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800A6520
BossStinkBugActionFlyHigh::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800A6630
BossStinkBugActionFlyHigh::isValidFollowId(long) const=0x800A67C0
BossStinkBugActionFlyHigh::exeFly(void)=0x800A6870
BossStinkBugActionFlyHigh::exeRollWait(void)=0x800A6910
BossStinkBugActionFlyHigh::isEnableHipDrop(void) const=0x800A6960
BossStinkBugActionFlyHigh::isEnableAttack(void) const=0x800A6AA0
BossStinkBugActionFlyHigh::isAngry(void) const=0x800A6B00
BossStinkBugActionFlyHigh::__dt(void)=0x800A6B10
short::(nit_\BossStinkBugActionFlyHigh_cpp)=0x800A6B70
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvFlyDash::__ct(void)=0x800A6C20
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvFly::__ct(void)=0x800A6C30
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOffSign::__ct(void)=0x800A6C40
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOff::__ct(void)=0x800A6C50
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOffWait::__ct(void)=0x800A6C60
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOffEnd::__ct(void)=0x800A6C70
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRollSign::__ct(void)=0x800A6C80
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRoll::__ct(void)=0x800A6C90
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRollWait::__ct(void)=0x800A6CA0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRollEnd::__ct(void)=0x800A6CB0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvTurnSign::__ct(void)=0x800A6CC0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvTurn::__ct(void)=0x800A6CD0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvFall::__ct(void)=0x800A6CE0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvToGround::__ct(void)=0x800A6CF0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvLand::__ct(void)=0x800A6D00
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvGroundRun::__ct(void)=0x800A6D10
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvToFly::__ct(void)=0x800A6D20
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvDamage::__ct(void)=0x800A6D30
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvDamage::execute(Spine*) const=0x800A6D40
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvToFly::execute(Spine*) const=0x800A6D90
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvGroundRun::execute(Spine*) const=0x800A6DE0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvLand::execute(Spine*) const=0x800A6E30
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvToGround::execute(Spine*) const=0x800A6E80
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvFall::execute(Spine*) const=0x800A6ED0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvTurn::execute(Spine*) const=0x800A6F20
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvTurnSign::execute(Spine*) const=0x800A6F70
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRollEnd::execute(Spine*) const=0x800A6FC0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRollWait::execute(Spine*) const=0x800A7010
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRoll::execute(Spine*) const=0x800A7020
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvRollSign::execute(Spine*) const=0x800A7070
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOffEnd::execute(Spine*) const=0x800A70D0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOffWait::execute(Spine*) const=0x800A7120
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOff::execute(Spine*) const=0x800A7180
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvShakeOffSign::execute(Spine*) const=0x800A71D0
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvFly::execute(Spine*) const=0x800A7230
NrvBossStinkBugActionFlyHigh::BossStinkBugActionFlyHighNrvFlyDash::execute(Spine*) const=0x800A7240
BossStinkBugActionFlyLow::__ct(BossStinkBug*)=0x800A7290
BossStinkBugActionFlyLow::appear(void)=0x800A7310
BossStinkBugActionFlyLow::control(void)=0x800A73C0
BossStinkBugActionFlyLow::isValidFollowId(long) const=0x800A7410
BossStinkBugActionFlyLow::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800A7420
BossStinkBugActionFlyLow::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800A74F0
BossStinkBugActionFlyLow::exeFly(void)=0x800A75A0
BossStinkBugActionFlyLow::isEnableHipDrop(void) const=0x800A76B0
BossStinkBugActionFlyLow::isEnableAttack(void) const=0x800A7760
BossStinkBugActionFlyLow::__dt(void)=0x800A77C0
short::(nit_\BossStinkBugActionFlyLow_cpp)=0x800A7820
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvFly::__ct(void)=0x800A7890
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOffSign::__ct(void)=0x800A78A0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOff::__ct(void)=0x800A78B0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOffWait::__ct(void)=0x800A78C0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOffEnd::__ct(void)=0x800A78D0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvFall::__ct(void)=0x800A78E0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvDamage::__ct(void)=0x800A78F0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvDash::__ct(void)=0x800A7900
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvTurnSign::__ct(void)=0x800A7910
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvTurn::__ct(void)=0x800A7920
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvTurn::execute(Spine*) const=0x800A7930
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvTurnSign::execute(Spine*) const=0x800A7980
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvDash::execute(Spine*) const=0x800A79D0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvDamage::execute(Spine*) const=0x800A7A20
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvFall::execute(Spine*) const=0x800A7A70
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOffEnd::execute(Spine*) const=0x800A7AC0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOffWait::execute(Spine*) const=0x800A7B10
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOff::execute(Spine*) const=0x800A7B60
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvShakeOffSign::execute(Spine*) const=0x800A7BB0
NrvBossStinkBugActionFlyLow::BossStinkBugActionFlyLowNrvFly::execute(Spine*) const=0x800A7C00
BossStinkBugActionGround::__ct(BossStinkBug*)=0x800A7C10
BossStinkBugActionGround::appear(void)=0x800A7C70
BossStinkBugActionGround::control(void)=0x800A7D00
BossStinkBugActionGround::isValidFollowId(long) const=0x800A7D50
BossStinkBugActionGround::attackSensor(HitSensor*, HitSensor*)=0x800A7D60
BossStinkBugActionGround::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800A7D70
BossStinkBugActionGround::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800A7E30
BossStinkBugActionGround::exeWalk(void)=0x800A7FB0
BossStinkBugActionGround::exeCoolDown(void)=0x800A8060
BossStinkBugActionGround::isEnableHipDrop(void) const=0x800A80D0
BossStinkBugActionGround::isEnableShakeStart(void) const=0x800A8190
BossStinkBugActionGround::__dt(void)=0x800A81F0
short::(nit_\BossStinkBugActionGround_cpp)=0x800A8250
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvStart::__ct(void)=0x800A82C0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvWalk::__ct(void)=0x800A82D0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvDamage::__ct(void)=0x800A82E0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvFind::__ct(void)=0x800A82F0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvShakeOff::__ct(void)=0x800A8300
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvShakeOffRun::__ct(void)=0x800A8310
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvRun::__ct(void)=0x800A8320
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvAttackSuccess::__ct(void)=0x800A8330
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvCoolDown::__ct(void)=0x800A8340
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvTurn::__ct(void)=0x800A8350
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvTurn::execute(Spine*) const=0x800A8360
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvCoolDown::execute(Spine*) const=0x800A83B0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvAttackSuccess::executeOnEnd(Spine*) const=0x800A83C0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvAttackSuccess::execute(Spine*) const=0x800A83D0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvRun::execute(Spine*) const=0x800A8420
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvShakeOffRun::execute(Spine*) const=0x800A8470
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvShakeOff::execute(Spine*) const=0x800A84C0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvFind::execute(Spine*) const=0x800A8510
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvDamage::execute(Spine*) const=0x800A8560
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvWalk::execute(Spine*) const=0x800A85B0
NrvBossStinkBugGroundBattle::BossStinkBugActionGroundNrvStart::execute(Spine*) const=0x800A85C0
BossStinkBugActionSequencer::__ct(BossStinkBug*, const JMapInfoIter&)=0x800A8610
BossStinkBugActionSequencer::isValidFollowId(long) const=0x800A8780
BossStinkBugActionSequencer::attackSensor(HitSensor*, HitSensor*)=0x800A87C0
BossStinkBugActionSequencer::startAction(void)=0x800A8840
BossStinkBugActionSequencer::exeOpeningDemo(void)=0x800A8890
BossStinkBugActionSequencer::exeGround(void)=0x800A88E0
BossStinkBugActionSequencer::exeFlyDemo(void)=0x800A8940
BossStinkBugActionSequencer::exeFlyLow(void)=0x800A8990
BossStinkBugActionSequencer::exeAngryDemo(void)=0x800A89F0
BossStinkBugActionSequencer::exeFlyHigh(void)=0x800A8A40
BossStinkBugActionSequencer::exeFinishDemo(void)=0x800A8AA0
BossStinkBugActionSequencer::__dt(void)=0x800A8AF0
short::(nit_\BossStinkBugActionSequencer_cpp)=0x800A8B50
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvWaitStart::__ct(void)=0x800A8BC0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvOpeningDemo::__ct(void)=0x800A8BD0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvGround::__ct(void)=0x800A8BE0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFlyDemo::__ct(void)=0x800A8BF0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFlyLow::__ct(void)=0x800A8C00
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvAngryDemo::__ct(void)=0x800A8C10
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFlyHigh::__ct(void)=0x800A8C20
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFinishDemo::__ct(void)=0x800A8C30
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvEnd::__ct(void)=0x800A8C40
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvEnd::execute(Spine*) const=0x800A8C50
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFinishDemo::execute(Spine*) const=0x800A8C60
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFlyHigh::execute(Spine*) const=0x800A8C70
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvAngryDemo::execute(Spine*) const=0x800A8C80
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFlyLow::execute(Spine*) const=0x800A8C90
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvFlyDemo::execute(Spine*) const=0x800A8CA0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvGround::execute(Spine*) const=0x800A8CB0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvOpeningDemo::execute(Spine*) const=0x800A8CC0
NrvBossStinkBugActionSequencer::BossStinkBugActionSequencerNrvWaitStart::execute(Spine*) const=0x800A8CD0
BossStinkBugAngryDemo::__ct(BossStinkBug*, const JMapInfoIter&)=0x800A8CE0
BossStinkBugAngryDemo::appear(void)=0x800A8D80
BossStinkBugAngryDemo::exeDemo(void)=0x800A8D90
BossStinkBugAngryDemo::exeDemoEnd(void)=0x800A8F50
BossStinkBugAngryDemo::__dt(void)=0x800A8FB0
short::(nit_\BossStinkBugAngryDemo_cpp)=0x800A9010
NrvBossStinkBugAngryDemo::BossStinkBugAngryDemoNrvTryStart::__ct(void)=0x800A9050
NrvBossStinkBugAngryDemo::BossStinkBugAngryDemoNrvDemo::__ct(void)=0x800A9060
NrvBossStinkBugAngryDemo::BossStinkBugAngryDemoNrvDemoEnd::__ct(void)=0x800A9070
NrvBossStinkBugAngryDemo::BossStinkBugAngryDemoNrvDemoEnd::execute(Spine*) const=0x800A9080
NrvBossStinkBugAngryDemo::BossStinkBugAngryDemoNrvDemo::execute(Spine*) const=0x800A9090
NrvBossStinkBugAngryDemo::BossStinkBugAngryDemoNrvTryStart::execute(Spine*) const=0x800A90A0
BossStinkBugBomb::__ct(const char*)=0x800A90F0
BossStinkBugBomb::init(const JMapInfoIter&)=0x800A9150
BossStinkBugBomb::control(void)=0x800A9210
BossStinkBugBomb::calcAndSetBaseMtx(void)=0x800A9250
BossStinkBugBomb::start(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800A9290
BossStinkBugBomb::attackSensor(HitSensor*, HitSensor*)=0x800A9320
BossStinkBugBomb::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800A93C0
BossStinkBugBomb::receiveMsgPush(HitSensor*, HitSensor*)=0x800A9460
BossStinkBugBomb::exeWait(void)=0x800A9470
BossStinkBugBomb::exeExplosion(void)=0x800A9640
BossStinkBugBomb::__dt(void)=0x800A9760
short::(nit_\BossStinkBugBomb_cpp)=0x800A97C0
NrvBossStinkBugBomb::BossStinkBugBombNrvWait::__ct(void)=0x800A9800
NrvBossStinkBugBomb::BossStinkBugBombNrvExplosion::__ct(void)=0x800A9810
NrvBossStinkBugBomb::BossStinkBugBombNrvExplosion::execute(Spine*) const=0x800A9880
NrvBossStinkBugBomb::BossStinkBugBombNrvWait::execute(Spine*) const=0x800A9890
BossStinkBugBombHolder::__ct(LiveActor*)=0x800A98A0
DeriveActorGroup<BossStinkBugBomb>::__dt(void)=0x800A9950
BossStinkBugBombHolder::__dt(void)=0x800A99B0
BossStinkBugFinishDemo::__ct(BossStinkBug*, const JMapInfoIter&)=0x800A9A10
BossStinkBugFinishDemo::appear(void)=0x800A9AB0
BossStinkBugFinishDemo::exeDemo(void)=0x800A9B10
BossStinkBugFinishDemo::exeAppearPowerStar(void)=0x800A9BD0
BossStinkBugFinishDemo::__dt(void)=0x800A9CB0
short::(nit_\BossStinkBugFinishDemo_cpp)=0x800A9D10
NrvBossStinkBugFinishDemo::BossStinkBugFinishDemoNrvTryStart::__ct(void)=0x800A9D50
NrvBossStinkBugFinishDemo::BossStinkBugFinishDemoNrvDemo::__ct(void)=0x800A9D60
NrvBossStinkBugFinishDemo::BossStinkBugFinishDemoNrvAppearPowerStar::__ct(void)=0x800A9D70
NrvBossStinkBugFinishDemo::BossStinkBugFinishDemoNrvAppearPowerStar::execute(Spine*) const=0x800A9D80
NrvBossStinkBugFinishDemo::BossStinkBugFinishDemoNrvDemo::execute(Spine*) const=0x800A9D90
NrvBossStinkBugFinishDemo::BossStinkBugFinishDemoNrvTryStart::execute(Spine*) const=0x800A9DA0
BossStinkBugFlyDemo::__ct(BossStinkBug*, const JMapInfoIter&)=0x800A9DB0
BossStinkBugFlyDemo::appear(void)=0x800A9E50
BossStinkBugFlyDemo::exeDemo(void)=0x800A9E60
BossStinkBugFlyDemo::exeDemoEnd(void)=0x800AA0A0
BossStinkBugFlyDemo::__dt(void)=0x800AA100
short::(nit_\BossStinkBugFlyDemo_cpp)=0x800AA160
NrvBossStinkBugFlyDemo::BossStinkBugFlyDemoNrvTryStart::__ct(void)=0x800AA1A0
NrvBossStinkBugFlyDemo::BossStinkBugFlyDemoNrvDemo::__ct(void)=0x800AA1B0
NrvBossStinkBugFlyDemo::BossStinkBugFlyDemoNrvDemoEnd::__ct(void)=0x800AA1C0
NrvBossStinkBugFlyDemo::BossStinkBugFlyDemoNrvDemoEnd::execute(Spine*) const=0x800AA1D0
NrvBossStinkBugFlyDemo::BossStinkBugFlyDemoNrvDemo::execute(Spine*) const=0x800AA1E0
NrvBossStinkBugFlyDemo::BossStinkBugFlyDemoNrvTryStart::execute(Spine*) const=0x800AA1F0
BossStinkBugFunction::addHeightOffset(JGeometry::TVec3<float>*, const BossStinkBug*, float)=0x800AA240
BossStinkBugFunction::addLocalHeightOffset(JGeometry::TVec3<float>*, BossStinkBug*, float)=0x800AA2E0
BossStinkBugFunction::calcDiffCurrentRailPosition(JGeometry::TVec3<float>*, BossStinkBug*, float, float)=0x800AA360
BossStinkBugFunction::moveRail(BossStinkBug*, float, float, float)=0x800AA400
BossStinkBugFunction::turnRailGround(BossStinkBug*, const JGeometry::TVec3<float>&, float, bool)=0x800AA4B0
BossStinkBugFunction::turnRail(BossStinkBug*, const JGeometry::TVec3<float>&, float, float, float, float, float, bool)=0x800AA570
BossStinkBugFunction::regainToRail(BossStinkBug*, const JGeometry::TVec3<float>&, float, float, float, float)=0x800AA770
BossStinkBugFunction::setFallVelocity(BossStinkBug*, const JGeometry::TVec3<float>&, float, float, float)=0x800AA8A0
BossStinkBugFunction::throwBomb(BossStinkBug*)=0x800AA990
BossStinkBugFunction::validateAttack(BossStinkBug*)=0x800AA9A0
BossStinkBugFunction::invalidateAttack(BossStinkBug*)=0x800AA9F0
BossStinkBugFunction::isHipDropableSensor(const BossStinkBug*, const HitSensor*)=0x800AAA40
BossStinkBugFunction::isExistPlayerBack(const BossStinkBug*, float)=0x800AAA50
BossStinkBugOpeningDemo::__ct(BossStinkBug*, const JMapInfoIter&)=0x800AAC00
BossStinkBugOpeningDemo::appear(void)=0x800AACA0
BossStinkBugOpeningDemo::exeDemo(void)=0x800AACB0
BossStinkBugOpeningDemo::exeDemoEnd(void)=0x800AADB0
BossStinkBugOpeningDemo::__dt(void)=0x800AAE10
short::(nit_\BossStinkBugOpeningDemo_cpp)=0x800AAE70
NrvBossStinkBugOpeningDemo::BossStinkBugOpeningDemoNrvTryStart::__ct(void)=0x800AAEB0
NrvBossStinkBugOpeningDemo::BossStinkBugOpeningDemoNrvDemo::__ct(void)=0x800AAEC0
NrvBossStinkBugOpeningDemo::BossStinkBugOpeningDemoNrvDemoEnd::__ct(void)=0x800AAED0
NrvBossStinkBugOpeningDemo::BossStinkBugOpeningDemoNrvDemoEnd::execute(Spine*) const=0x800AAEE0
NrvBossStinkBugOpeningDemo::BossStinkBugOpeningDemoNrvDemo::execute(Spine*) const=0x800AAEF0
NrvBossStinkBugOpeningDemo::BossStinkBugOpeningDemoNrvTryStart::execute(Spine*) const=0x800AAF00
@unnamed@DinoPackun_cpp@::DinoPackunParam::__ct(void)=0x800AAF50
DinoPackun::__ct(const char*)=0x800AAFC0
DinoPackun::init(const JMapInfoIter&)=0x800AB090
DinoPackunSequencer::isUseEggShell(void) const=0x800AB370
DinoPackunSequencer::init(void)=0x800AB380
DinoPackun::initTail(void)=0x800AB390
DinoPackun::initFootPrint(void)=0x800AB560
DinoPackun::initDemoPosition(const JMapInfoIter&)=0x800AB600
DinoPackun::initEggShell(void)=0x800AB670
DinoPackunSequencer::getVsCount(void) const=0x800AB7C0
DinoPackun::initBall(void)=0x800AB7D0
DinoPackun::initCamera(const JMapInfoIter&)=0x800AB880
DinoPackun::initScaleJointController(void)=0x800AB9F0
DinoPackun::makeActorDead(void)=0x800ABAF0
DinoPackun::startHitReaction(void)=0x800ABB40
DinoPackun::isHitReaction(long) const=0x800ABB90
DinoPackun::hitScaleJoint(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800ABBB0
DinoPackun::getEggShell(void)=0x800ABC10
DinoPackun::getEggBrokenModel(void)=0x800ABC20
DinoPackun::getBallModel(void)=0x800ABC30
DinoPackun::attackSensor(HitSensor*, HitSensor*)=0x800ABC40
DinoPackun::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800ABC60
DinoPackun::receiveMsgPush(HitSensor*, HitSensor*)=0x800ABC90
DinoPackun::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800ABCC0
DinoPackun::attackSensorTail(HitSensor*, HitSensor*)=0x800ABCF0
DinoPackun::receiveMsgPlayerAttackTail(unsigned long, HitSensor*, HitSensor*)=0x800ABD10
DinoPackun::startSequence(void)=0x800ABD40
DinoPackunSequencer::start(void)=0x800ABDA0
DinoPackun::control(void)=0x800ABDB0
DinoPackun::calcAndSetBaseMtx(void)=0x800ABE50
DinoPackun::updatePose(void)=0x800ABEC0
DinoPackun::updateFootPrintNerve(long, long)=0x800ABF70
DinoPackun::updateCameraInfo(void)=0x800AC160
DinoPackun::updateNormalVelocity(void)=0x800AC2B0
DinoPackun::updateRunVelocity(void)=0x800AC320
DinoPackun::appearStarPiece(long)=0x800AC330
DinoPackun::isSensorEgg(const HitSensor*) const=0x800AC3A0
DinoPackun::resetPosition(void)=0x800AC3E0
DinoPackun::adjustTailRootPosition(const JGeometry::TVec3<float>&, float)=0x800AC580
DinoPackun::activateParts(void)=0x800AC760
DinoPackun::onMovementParts(void)=0x800AC770
DinoPackun::onAimTailBall(long)=0x800AC7E0
DinoPackun::offAimTailBall(long)=0x800AC840
DinoPackun::startDemo(void)=0x800AC890
DinoPackun::startDemoAndReset(void)=0x800AC8C0
DinoPackun::endDemo(const char*)=0x800AC920
DinoPackun::startDamageCamera(void)=0x800AC970
DinoPackun::endDamageCamera(void)=0x800AC9D0
MR::createDinoPackunVs1(const char*)=0x800ACA20
MR::createDinoPackunVs2(const char*)=0x800ACA90
JointControlDelegator<DinoPackun>::__dt(void)=0x800ACB00
JointControlDelegator<DinoPackun>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800ACB40
JointControlDelegator<DinoPackun>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800ACBB0
MR::FunctorV0M<DinoPackun*,M10DinoPackunFPCvPv_v>::__cl(void) const=0x800ACC20
MR::FunctorV0M<DinoPackun*,M10DinoPackunFPCvPv_v>::clone(JKRHeap*) const=0x800ACC50
DinoPackun::__dt(void)=0x800ACCC0
short::(nit_\DinoPackun_cpp)=0x800ACD20
DinoPackunAction::__ct(const char*, DinoPackun*)=0x800ACDB0
ActorStateBase<DinoPackun>::__dt(void)=0x800ACE10
DinoPackunAction::sendBlowAttackMessage(HitSensor*, HitSensor*, bool)=0x800ACE70
DinoPackunAction::sendHitAttackMessage(HitSensor*, HitSensor*, bool)=0x800ACF60
DinoPackunAction::updateTurn(long, float)=0x800AD030
DinoPackunAction::updateWalk(long, float, long)=0x800AD0E0
DinoPackunAction::updateFind(long, float)=0x800AD1A0
DinoPackunAction::updateChase(long, float, float, float, long, long)=0x800AD290
DinoPackunAction::updateCoolDown(long)=0x800AD380
DinoPackunAction::updateAttackHit(void)=0x800AD400
DinoPackunAction::selectTurnDirection(void)=0x800AD4B0
DinoPackunAction::receiveOtherMsgTail(unsigned long, HitSensor*, HitSensor*)=0x800AD500
DinoPackunAction::receiveMsgPlayerAttackTail(unsigned long, HitSensor*, HitSensor*)=0x800AD510
DinoPackunAction::attackSensorTail(HitSensor*, HitSensor*)=0x800AD520
DinoPackunAction::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800AD530
DinoPackunAction::receiveMsgPush(HitSensor*, HitSensor*)=0x800AD540
DinoPackunAction::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800AD550
DinoPackunAction::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800AD560
DinoPackunAction::attackSensor(HitSensor*, HitSensor*)=0x800AD570
DinoPackunAction::__dt(void)=0x800AD580
DinoPackunBall::__ct(const char*, DinoPackun*)=0x800AD5E0
DinoPackunTailNode::__dt(void)=0x800AD670
DinoPackunBall::init(const JMapInfoIter&)=0x800AD6D0
DinoPackunBall::control(void)=0x800AD7E0
DinoPackunBall::calcAndSetBaseMtx(void)=0x800AD8D0
DinoPackunBall::addNodeVelocity(const JGeometry::TVec3<float>&)=0x800AD910
DinoPackunBall::setWeakSensor(HitSensor*)=0x800AD9B0
DinoPackunBall::createJointControllerOwn(LiveActor*, const char*)=0x800AD9C0
DinoPackunBall::requestLockPosition(void)=0x800ADAA0
DinoPackunBall::requestUnLockPosition(void)=0x800ADAE0
DinoPackunBall::addDodgeTargetVelocity(void)=0x800ADB20
DinoPackunBall::attackSensor(HitSensor*, HitSensor*)=0x800ADCA0
DinoPackunBall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800ADE50
DinoPackunBall::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800ADF00
DinoPackunBall::requestPunch(HitSensor*, HitSensor*)=0x800ADF30
DinoPackunBall::setDamageFire(void)=0x800ADFC0
DinoPackunBall::setDamageNone(void)=0x800ADFE0
DinoPackunBall::tryRebound(void)=0x800AE000
DinoPackunBall::exeWait(void)=0x800AE0A0
DinoPackunBall::exeShoot(void)=0x800AE180
DinoPackunBall::exeCharge(void)=0x800AE270
DinoPackunBall::exeReverse(void)=0x800AE340
DinoPackunBall::exeRebound(void)=0x800AE410
JointControlDelegator<DinoPackunTailNode>::__dt(void)=0x800AE480
JointControlDelegator<DinoPackunTailNode>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800AE4C0
JointControlDelegator<DinoPackunTailNode>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800AE530
DinoPackunBall::__dt(void)=0x800AE5A0
short::(nit_\DinoPackunBall_cpp)=0x800AE600
NrvDinoPackunBall::DinoPackunBallNrvWait::__ct(void)=0x800AE650
NrvDinoPackunBall::DinoPackunBallNrvShoot::__ct(void)=0x800AE660
NrvDinoPackunBall::DinoPackunBallNrvCharge::__ct(void)=0x800AE670
NrvDinoPackunBall::DinoPackunBallNrvReverse::__ct(void)=0x800AE680
NrvDinoPackunBall::DinoPackunBallNrvRebound::__ct(void)=0x800AE690
NrvDinoPackunBall::DinoPackunBallNrvLock::__ct(void)=0x800AE6A0
NrvDinoPackunBall::DinoPackunBallNrvLock::execute(Spine*) const=0x800AE6B0
NrvDinoPackunBall::DinoPackunBallNrvRebound::execute(Spine*) const=0x800AE6C0
NrvDinoPackunBall::DinoPackunBallNrvReverse::execute(Spine*) const=0x800AE6D0
NrvDinoPackunBall::DinoPackunBallNrvCharge::execute(Spine*) const=0x800AE6E0
NrvDinoPackunBall::DinoPackunBallNrvShoot::execute(Spine*) const=0x800AE6F0
NrvDinoPackunBall::DinoPackunBallNrvWait::execute(Spine*) const=0x800AE700
DinoPackunBattleEgg::__ct(DinoPackun*)=0x800AE710
DinoPackunBattleEgg::init(void)=0x800AE770
DinoPackunBattleEgg::appear(void)=0x800AE7D0
DinoPackunBattleEgg::attackSensor(HitSensor*, HitSensor*)=0x800AE820
DinoPackunBattleEgg::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800AE880
DinoPackunBattleEgg::receiveMsgPush(HitSensor*, HitSensor*)=0x800AE8E0
DinoPackunBattleEgg::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800AEA60
DinoPackunBattleEgg::exeTurn(void)=0x800AEAF0
DinoPackunBattleEgg::exeWalk(void)=0x800AEBB0
DinoPackunBattleEgg::__dt(void)=0x800AEC30
short::(nit_\DinoPackunBattleEgg_cpp)=0x800AEC90
NrvDinoPackunBattleEgg::DinoPackunBattleEggNrvTurn::__ct(void)=0x800AECE0
NrvDinoPackunBattleEgg::DinoPackunBattleEggNrvWalk::__ct(void)=0x800AECF0
NrvDinoPackunBattleEgg::DinoPackunBattleEggNrvDamage::__ct(void)=0x800AED00
NrvDinoPackunBattleEgg::DinoPackunBattleEggNrvDamage::execute(Spine*) const=0x800AED10
NrvDinoPackunBattleEgg::DinoPackunBattleEggNrvWalk::execute(Spine*) const=0x800AED60
NrvDinoPackunBattleEgg::DinoPackunBattleEggNrvTurn::execute(Spine*) const=0x800AED70
DinoPackunBattleEggVs2::__ct(DinoPackun*)=0x800AED80
DinoPackunBattleEggVs2::setTrackFire(DinoPackunTrackFireHolder*)=0x800AEDE0
DinoPackunBattleEggVs2::init(void)=0x800AEDF0
DinoPackunBattleEggVs2::appear(void)=0x800AEE70
DinoPackunBattleEggVs2::control(void)=0x800AEED0
DinoPackunBattleEggVs2::attackSensor(HitSensor*, HitSensor*)=0x800AEEF0
DinoPackunBattleEggVs2::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800AEFA0
DinoPackunBattleEggVs2::receiveMsgPush(HitSensor*, HitSensor*)=0x800AEFF0
DinoPackunBattleEggVs2::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800AF000
DinoPackunBattleEggVs2::exeTurn(void)=0x800AF0B0
DinoPackunBattleEggVs2::exeWalk(void)=0x800AF170
DinoPackunBattleEggVs2::exeDamage(void)=0x800AF290
DinoPackunBattleEggVs2::__dt(void)=0x800AF300
short::(nit_\DinoPackunBattleEggVs2_cpp)=0x800AF360
NrvDinoPackunBattleEgg::DinoPackunBattleEggVs2NrvTurn::__ct(void)=0x800AF3B0
NrvDinoPackunBattleEgg::DinoPackunBattleEggVs2NrvWalk::__ct(void)=0x800AF3C0
NrvDinoPackunBattleEgg::DinoPackunBattleEggVs2NrvDamage::__ct(void)=0x800AF3D0
NrvDinoPackunBattleEgg::DinoPackunBattleEggVs2NrvDamage::execute(Spine*) const=0x800AF3E0
NrvDinoPackunBattleEgg::DinoPackunBattleEggVs2NrvWalk::execute(Spine*) const=0x800AF3F0
NrvDinoPackunBattleEgg::DinoPackunBattleEggVs2NrvTurn::execute(Spine*) const=0x800AF400
DinoPackunBattleVs1Lv1::__ct(DinoPackun*)=0x800AF410
DinoPackunBattleVs1Lv1::appear(void)=0x800AF4A0
DinoPackunBattleVs1Lv1::attackSensor(HitSensor*, HitSensor*)=0x800AF500
DinoPackunBattleVs1Lv1::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800AF670
DinoPackunBattleVs1Lv1::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800AF730
DinoPackunBattleVs1Lv1::tryFind(void)=0x800AF7C0
DinoPackunBattleVs1Lv1::exeStart(void)=0x800AF820
DinoPackunBattleVs1Lv1::exeTurn(void)=0x800AF880
DinoPackunBattleVs1Lv1::exeWalk(void)=0x800AF960
DinoPackunBattleVs1Lv1::exeChase(void)=0x800AF9E0
DinoPackunBattleVs1Lv1::__dt(void)=0x800AFAC0
short::(nit_\DinoPackunBattleVs1Lv1_cpp)=0x800AFB20
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvStart::__ct(void)=0x800AFB80
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvTurn::__ct(void)=0x800AFB90
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvWalk::__ct(void)=0x800AFBA0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvFind::__ct(void)=0x800AFBB0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvChase::__ct(void)=0x800AFBC0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvCoolDown::__ct(void)=0x800AFBD0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvAttackHit::__ct(void)=0x800AFBE0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvDamage::__ct(void)=0x800AFBF0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvDamage::execute(Spine*) const=0x800AFC00
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvAttackHit::execute(Spine*) const=0x800AFC50
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvCoolDown::execute(Spine*) const=0x800AFCA0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvChase::execute(Spine*) const=0x800AFCF0
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvFind::execute(Spine*) const=0x800AFD00
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvWalk::execute(Spine*) const=0x800AFD50
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvTurn::execute(Spine*) const=0x800AFD60
NrvDinoPackunBattleVs1Lv1::DinoPackunBattleVs1Lv1NrvStart::execute(Spine*) const=0x800AFD70
DinoPackunBattleVs1Lv2::__ct(DinoPackun*)=0x800AFD80
DinoPackunBattleVs1Lv2::appear(void)=0x800AFE20
DinoPackunBattleVs1Lv2::attackSensor(HitSensor*, HitSensor*)=0x800AFEA0
DinoPackunBattleVs1Lv2::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800B0020
DinoPackunBattleVs1Lv2::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800B00E0
DinoPackunBattleVs1Lv2::setMiddleBattle(void)=0x800B0170
DinoPackunBattleVs1Lv2::setLastBattle(void)=0x800B0180
DinoPackunBattleVs1Lv2::setStartFromDemo(void)=0x800B0190
DinoPackunBattleVs1Lv2::setStartContinueBattle(void)=0x800B01A0
DinoPackunBattleVs1Lv2::tryFind(void)=0x800B01B0
DinoPackunBattleVs1Lv2::exeStart(void)=0x800B0210
DinoPackunBattleVs1Lv2::exeTurn(void)=0x800B0270
DinoPackunBattleVs1Lv2::exeWalk(void)=0x800B03B0
DinoPackunBattleVs1Lv2::exeChase(void)=0x800B0430
DinoPackunBattleVs1Lv2::__dt(void)=0x800B0510
short::(nit_\DinoPackunBattleVs1Lv2_cpp)=0x800B0570
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvStart::__ct(void)=0x800B05D0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvTurn::__ct(void)=0x800B05E0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvWalk::__ct(void)=0x800B05F0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvFind::__ct(void)=0x800B0600
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvChase::__ct(void)=0x800B0610
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvCoolDown::__ct(void)=0x800B0620
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvAttackHit::__ct(void)=0x800B0630
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvDamage::__ct(void)=0x800B0640
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvDamage::execute(Spine*) const=0x800B0650
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvAttackHit::execute(Spine*) const=0x800B06A0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvCoolDown::execute(Spine*) const=0x800B06F0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvChase::execute(Spine*) const=0x800B0740
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvFind::execute(Spine*) const=0x800B0750
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvWalk::execute(Spine*) const=0x800B07A0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvTurn::execute(Spine*) const=0x800B07B0
NrvDinoPackunBattleVs1Lv2::DinoPackunBattleVs1Lv2NrvStart::execute(Spine*) const=0x800B07C0
DinoPackunBattleVs2Lv1::__ct(DinoPackun*)=0x800B07D0
DinoPackunBattleVs2Lv1::setTrackFire(DinoPackunTrackFireHolder*)=0x800B0860
DinoPackunBattleVs2Lv1::setFireBall(DinoPackunFireHolder*)=0x800B0870
DinoPackunBattleVs2Lv1::setMiddleBattle(void)=0x800B0880
DinoPackunBattleVs2Lv1::setLastBattle(void)=0x800B0890
DinoPackunBattleVs2Lv1::init(void)=0x800B08A0
DinoPackunBattleVs2Lv1::appear(void)=0x800B0960
DinoPackunBattleVs2Lv1::control(void)=0x800B09F0
DinoPackunBattleVs2Lv1::attackSensor(HitSensor*, HitSensor*)=0x800B0A10
DinoPackunBattleVs2Lv1::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800B0BD0
DinoPackunBattleVs2Lv1::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800B0C80
DinoPackunBattleVs2Lv1::tryAwake(void)=0x800B0D40
DinoPackunBattleVs2Lv1::exeWalk(void)=0x800B0DA0
DinoPackunBattleVs2Lv1::endWalk(void)=0x800B0F40
DinoPackunBattleVs2Lv1::exeTurn(void)=0x800B0F60
DinoPackunBattleVs2Lv1::exeFindCrazy(void)=0x800B1060
DinoPackunBattleVs2Lv1::exeCrazy(void)=0x800B1140
DinoPackunBattleVs2Lv1::endCrazy(void)=0x800B1350
DinoPackunBattleVs2Lv1::exeChase(void)=0x800B1370
DinoPackunBattleVs2Lv1::endChase(void)=0x800B1560
DinoPackunBattleVs2Lv1::exeAttackHit(void)=0x800B1580
DinoPackunBattleVs2Lv1::updateOnOffFireTail(long, long, long)=0x800B15E0
DinoPackunBattleVs2Lv1::emitFireMouth(void)=0x800B1680
DinoPackunBattleVs2Lv1::emitFireTail(void)=0x800B17E0
DinoPackunBattleVs2Lv1::__dt(void)=0x800B18B0
short::(nit_\DinoPackunBattleVs2Lv1_cpp)=0x800B1910
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvTurn::__ct(void)=0x800B1990
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvWalk::__ct(void)=0x800B19A0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvFindCrazy::__ct(void)=0x800B19B0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvCrazy::__ct(void)=0x800B19C0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvChase::__ct(void)=0x800B19D0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvAwake::__ct(void)=0x800B19E0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvAttackHit::__ct(void)=0x800B19F0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvDamage::__ct(void)=0x800B1A00
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvDamage::execute(Spine*) const=0x800B1A10
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvAttackHit::execute(Spine*) const=0x800B1A60
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvAwake::executeOnEnd(Spine*) const=0x800B1A70
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvAwake::execute(Spine*) const=0x800B1A90
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvChase::executeOnEnd(Spine*) const=0x800B1AA0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvChase::execute(Spine*) const=0x800B1AB0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvCrazy::executeOnEnd(Spine*) const=0x800B1AC0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvCrazy::execute(Spine*) const=0x800B1AD0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvFindCrazy::execute(Spine*) const=0x800B1AE0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvWalk::executeOnEnd(Spine*) const=0x800B1AF0
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvWalk::execute(Spine*) const=0x800B1B00
NrvDinoPackunBattleVs2Lv1::DinoPackunBattleVs2Lv1NrvTurn::execute(Spine*) const=0x800B1B10
DinoPackunDemo::__ct(DinoPackun*)=0x800B1B20
DinoPackunDemo::init(void)=0x800B1B80
DinoPackunDemo::control(void)=0x800B1B90
DinoPackunDemo::startOpeningDemo(void)=0x800B1BA0
DinoPackunDemo::startCryDemo(void)=0x800B1BB0
DinoPackunDemo::startAngryDemo(void)=0x800B1BC0
DinoPackunDemo::startDownDemo(void)=0x800B1BD0
DinoPackunDemo::startTryDemo(const char*, const Nerve*)=0x800B1BE0
DinoPackunDemo::exeTryStartDemo(void)=0x800B1CC0
DinoPackunDemo::exeOpeningDemo(void)=0x800B1D20
DinoPackunDemo::exeCryDemo(void)=0x800B1FA0
DinoPackunDemo::exeAngryDemo(void)=0x800B20F0
DinoPackunDemo::exeDownDemo(void)=0x800B2310
DinoPackunDemo::exeAppearPowerStar(void)=0x800B2550
DinoPackunDemo::__dt(void)=0x800B2610
short::(nit_\DinoPackunDemo_cpp)=0x800B2670
NrvDinoPackunDemo::DinoPackunDemoNrvTryStartDemo::__ct(void)=0x800B26D0
NrvDinoPackunDemo::DinoPackunDemoNrvOpeningDemo::__ct(void)=0x800B26E0
NrvDinoPackunDemo::DinoPackunDemoNrvCryDemo::__ct(void)=0x800B26F0
NrvDinoPackunDemo::DinoPackunDemoNrvAngryDemo::__ct(void)=0x800B2700
NrvDinoPackunDemo::DinoPackunDemoNrvDownDemo::__ct(void)=0x800B2710
NrvDinoPackunDemo::DinoPackunDemoNrvAppearPowerStar::__ct(void)=0x800B2720
NrvDinoPackunDemo::DinoPackunDemoNrvAppearPowerStar::execute(Spine*) const=0x800B2750
NrvDinoPackunDemo::DinoPackunDemoNrvDownDemo::execute(Spine*) const=0x800B2760
NrvDinoPackunDemo::DinoPackunDemoNrvAngryDemo::execute(Spine*) const=0x800B2770
NrvDinoPackunDemo::DinoPackunDemoNrvCryDemo::execute(Spine*) const=0x800B2780
NrvDinoPackunDemo::DinoPackunDemoNrvOpeningDemo::execute(Spine*) const=0x800B2790
NrvDinoPackunDemo::DinoPackunDemoNrvTryStartDemo::execute(Spine*) const=0x800B27A0
DinoPackunDemoPosition::__ct(const char*)=0x800B27B0
DinoPackunDemoPosition::init(const JMapInfoIter&)=0x800B27F0
DinoPackunDemoPosition::control(void)=0x800B2870
DinoPackunDemoPosition::startOpeningDemo(void)=0x800B2880
DinoPackunDemoPosition::endDemo(void)=0x800B28D0
DinoPackunDemoPosition::exeOpeningDemo(void)=0x800B28E0
DinoPackunDemoPosition::__dt(void)=0x800B29C0
short::(nit_\DinoPackunDemoPosition_cpp)=0x800B2A20
NrvDinoPackunDemo::DinoPackunDemoPositionNrvOpeningDemo::__ct(void)=0x800B2A30
NrvDinoPackunDemo::DinoPackunDemoPositionNrvOpeningDemo::execute(Spine*) const=0x800B2A40
DinoPackunEggShell::__ct(const char*, HitSensor*, A4_f)=0x800B2A50
DinoPackunEggShell::init(const JMapInfoIter&)=0x800B2AB0
DinoPackunEggShell::control(void)=0x800B2B60
DinoPackunEggShell::calcAndSetBaseMtx(void)=0x800B2B70
DinoPackunEggShell::__dt(void)=0x800B2D40
short::(nit_\DinoPackunEggShell_cpp)=0x800B2DA0
NrvDinoPackunEggshell::DinoPackunEggShellNrvWait::__ct(void)=0x800B2DB0
NrvDinoPackunEggshell::DinoPackunEggShellNrvWait::execute(Spine*) const=0x800B2DC0
DinoPackunFireHolder::__ct(long)=0x800B2DD0
DeriveActorGroup<DinoPackunFire>::__dt(void)=0x800B2E70
DinoPackunFire::__ct(const char*)=0x800B2ED0
DinoPackunFire::init(const JMapInfoIter&)=0x800B2F30
DinoPackunFire::kill(void)=0x800B3090
DinoPackunFire::control(void)=0x800B30D0
DinoPackunFire::calcAndSetBaseMtx(void)=0x800B30E0
DinoPackunFire::attackSensor(HitSensor*, HitSensor*)=0x800B30F0
DinoPackunFire::appearShot(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800B3140
DinoPackunFire::exeShot(void)=0x800B31C0
DinoPackunFire::exeGround(void)=0x800B3340
DinoPackunFire::__dt(void)=0x800B33F0
DinoPackunFireHolder::__dt(void)=0x800B3450
short::(nit_\DinoPackunFire_cpp)=0x800B34B0
NrvDinoPackunFire::DinoPackunFireNrvShot::__ct(void)=0x800B34E0
NrvDinoPackunFire::DinoPackunFireNrvGround::__ct(void)=0x800B34F0
NrvDinoPackunFire::DinoPackunFireNrvGround::execute(Spine*) const=0x800B3500
NrvDinoPackunFire::DinoPackunFireNrvShot::execute(Spine*) const=0x800B3510
DinoPackunSequencer::__ct(const char*, DinoPackun*)=0x800B3520
DinoPackunSequencer::update(void)=0x800B3580
DinoPackunSequencer::attackSensor(HitSensor*, HitSensor*)=0x800B3590
DinoPackunSequencer::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800B35B0
DinoPackunSequencer::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800B35E0
DinoPackunSequencer::receiveMsgPush(HitSensor*, HitSensor*)=0x800B3610
DinoPackunSequencer::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800B3640
DinoPackunSequencer::attackSensorTail(HitSensor*, HitSensor*)=0x800B3670
DinoPackunSequencer::receiveMsgPlayerAttackTail(unsigned long, HitSensor*, HitSensor*)=0x800B3690
DinoPackunSequencer::receiveOtherMsgTail(unsigned long, HitSensor*, HitSensor*)=0x800B36C0
DinoPackunSequencer::__dt(void)=0x800B36F0
DinoPackunStateAwake::__ct(DinoPackun*)=0x800B3750
DinoPackunStateAwake::appear(void)=0x800B37C0
DinoPackunStateAwake::kill(void)=0x800B37D0
DinoPackunStateAwake::exeFind(void)=0x800B37F0
DinoPackunStateAwake::__dt(void)=0x800B38D0
short::(nit_\DinoPackunStateAwake_cpp)=0x800B3930
NrvDinoPackunStateAwake::DinoPackunStateAwakeNrvFind::__ct(void)=0x800B3940
NrvDinoPackunStateAwake::DinoPackunStateAwakeNrvFind::execute(Spine*) const=0x800B3950
DinoPackunStateDamage::__ct(DinoPackun*)=0x800B3960
DinoPackunStateDamage::appear(void)=0x800B39E0
DinoPackunStateDamage::isDamageMessage(unsigned long) const=0x800B39F0
DinoPackunStateDamage::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800B3A00
DinoPackunStateDamage::setDamageEgg(void)=0x800B3B00
DinoPackunStateDamage::setDamageNormal(void)=0x800B3B10
DinoPackunStateDamage::setDamageLast(void)=0x800B3B20
DinoPackunStateDamage::exePunched(void)=0x800B3B30
DinoPackunStateDamage::exePulled(void)=0x800B3C00
DinoPackunStateDamage::exeEggBroken(void)=0x800B3DF0
DinoPackunStateDamage::exeDamage(void)=0x800B4010
DinoPackunStateDamage::exeLastDamage(void)=0x800B4110
DinoPackunStateDamage::updateDamage(void)=0x800B4210
DinoPackunStateDamage::__dt(void)=0x800B42C0
short::(nit_\DinoPackunStateDamage_cpp)=0x800B4320
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvPunched::__ct(void)=0x800B43A0
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvTryPulledDemo::__ct(void)=0x800B43B0
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvPulled::__ct(void)=0x800B43C0
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvEggBroken::__ct(void)=0x800B43D0
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvDamage::__ct(void)=0x800B43E0
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvLastDamage::__ct(void)=0x800B43F0
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvLastDamage::execute(Spine*) const=0x800B4400
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvDamage::execute(Spine*) const=0x800B4410
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvEggBroken::execute(Spine*) const=0x800B4420
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvPulled::execute(Spine*) const=0x800B4430
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvTryPulledDemo::execute(Spine*) const=0x800B4440
NrvDinoPackunStateDamage::DinoPackunStateDamageNrvPunched::execute(Spine*) const=0x800B4490
DinoPackunStateFire::__ct(DinoPackun*)=0x800B44A0
DinoPackunStateFire::init(void)=0x800B4500
DinoPackunStateFire::appear(void)=0x800B4550
DinoPackunStateFire::exeNormal(void)=0x800B4560
DinoPackunStateFire::exeFireSign(void)=0x800B45D0
DinoPackunStateFire::exeCool(void)=0x800B4630
DinoPackunStateFire::requestFire(void)=0x800B46F0
DinoPackunStateFire::requestFireDirect(void)=0x800B4740
DinoPackunStateFire::requestFireSign(void)=0x800B4780
DinoPackunStateFire::requestCool(void)=0x800B47C0
DinoPackunStateFire::setFire(void)=0x800B4820
DinoPackunStateFire::setFireDirect(void)=0x800B48D0
DinoPackunStateFire::isFire(void) const=0x800B4910
DinoPackunStateFire::isEnableFire(void) const=0x800B4920
DinoPackunStateFire::isEnableCool(void) const=0x800B4980
DinoPackunStateFire::__dt(void)=0x800B49E0
short::(nit_\DinoPackunStateFire_cpp)=0x800B4A40
NrvDinoPackunStateFire::DinoPackunStateFireNrvNormal::__ct(void)=0x800B4A80
NrvDinoPackunStateFire::DinoPackunStateFireNrvFireSign::__ct(void)=0x800B4A90
NrvDinoPackunStateFire::DinoPackunStateFireNrvFire::__ct(void)=0x800B4AA0
NrvDinoPackunStateFire::DinoPackunStateFireNrvCool::__ct(void)=0x800B4AB0
NrvDinoPackunStateFire::DinoPackunStateFireNrvCool::execute(Spine*) const=0x800B4AC0
NrvDinoPackunStateFire::DinoPackunStateFireNrvFire::execute(Spine*) const=0x800B4AD0
NrvDinoPackunStateFire::DinoPackunStateFireNrvFireSign::execute(Spine*) const=0x800B4AE0
NrvDinoPackunStateFire::DinoPackunStateFireNrvNormal::execute(Spine*) const=0x800B4AF0
DinoPackunTail::__ct(unsigned long)=0x800B4B00
DinoPackunTail::addTailNode(DinoPackunTailNode*)=0x800B4B80
DinoPackunTail::activate(void)=0x800B4BC0
DinoPackunTail::deactivate(void)=0x800B4C40
DinoPackunTail::onMovement(void)=0x800B4CB0
DinoPackunTail::lockNodePosition(unsigned long)=0x800B4D10
DinoPackunTail::unlockNodePosition(unsigned long)=0x800B4D20
DinoPackunTail::lockEndNodePosition(void)=0x800B4D30
DinoPackunTail::unlockEndNodePosition(void)=0x800B4D50
DinoPackunTail::registerPreCalcJointCallBack(void)=0x800B4D70
DinoPackunTail::registerJointCallBack(void)=0x800B4DE0
DinoPackunTail::updateJoint(void)=0x800B4E50
DinoPackunTail::addAccelKeepBend(void)=0x800B4F10
DinoPackunTail::addAccelKeepDistance(void)=0x800B5120
DinoPackunTail::addAccelToBck(void)=0x800B52D0
DinoPackunTail::getTailNodePosition(JGeometry::TVec3<float>*, long) const=0x800B5380
DinoPackunTail::getEndTailPosition(JGeometry::TVec3<float>*) const=0x800B53A0
DinoPackunTail::getNode(unsigned long) const=0x800B53D0
DinoPackunTailNode::__ct(const char*, DinoPackun*)=0x800B53E0
DinoPackunTailNode::createJointController(LiveActor*, const char*)=0x800B5490
DinoPackunTailNode::resetJoint(void)=0x800B55A0
DinoPackunTailNode::getLinkLength(void) const=0x800B5600
DinoPackunTailNode::getKeepBendPower(void) const=0x800B5610
DinoPackunTailNode::preCalcJoint(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800B5620
DinoPackunTailNode::turnJointLocalXDir(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800B5650
DinoPackunTailNode::calcJointScale(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800B5840
DinoPackunTailNode::registerPreCalcJointCallBack(void)=0x800B5920
DinoPackunTailNode::registerJointCallBack(void)=0x800B5930
DinoPackunTailNode::lockPosition(void)=0x800B5940
DinoPackunTailNode::requestLockPosition(void)=0x800B5990
DinoPackunTailNode::unLockPosition(void)=0x800B59A0
DinoPackunTailNode::requestUnLockPosition(void)=0x800B59F0
DinoPackunTailNode::addNodeVelocityHost(const JGeometry::TVec3<float>&)=0x800B5A00
DinoPackunTailNode::getNodeDirection(void) const=0x800B5A20
DinoPackunTailNode::addNodeVelocity(const JGeometry::TVec3<float>&)=0x800B5A30
DinoPackunTailPart::__ct(const char*, DinoPackun*)=0x800B5A60
DinoPackunTailPart::init(const JMapInfoIter&)=0x800B5AC0
DinoPackunTailPart::control(void)=0x800B5B80
DinoPackunTailPart::createJointControllerOwn(LiveActor*, const char*)=0x800B5B90
DinoPackunTailPart::attackSensor(HitSensor*, HitSensor*)=0x800B5C70
DinoPackunTailPart::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800B5D60
DinoPackunTailPart::requestLockPosition(void)=0x800B5E10
DinoPackunTailPart::requestUnLockPosition(void)=0x800B5E50
DinoPackunTailPart::__dt(void)=0x800B5E90
short::(nit_\DinoPackunTailPart_cpp)=0x800B5EF0
NrvDinoPackunTailPart::DinoPackunTailPartNrvWait::__ct(void)=0x800B5F20
NrvDinoPackunTailPart::DinoPackunTailPartNrvLockPosition::__ct(void)=0x800B5F30
NrvDinoPackunTailPart::DinoPackunTailPartNrvLockPosition::execute(Spine*) const=0x800B5F40
NrvDinoPackunTailPart::DinoPackunTailPartNrvWait::execute(Spine*) const=0x800B5F50
DinoPackunTailRoot::__ct(const char*, DinoPackun*)=0x800B5FB0
DinoPackunTailRoot::init(const JMapInfoIter&)=0x800B5FF0
DinoPackunTailRoot::createJointControllerOwn(LiveActor*, const char*)=0x800B6030
DinoPackunTailRoot::calcJointDirection(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800B6110
DinoPackunTailRoot::addNodeVelocity(const JGeometry::TVec3<float>&)=0x800B61E0
JointControlDelegator<DinoPackunTailRoot>::__dt(void)=0x800B61F0
JointControlDelegator<DinoPackunTailRoot>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800B6230
JointControlDelegator<DinoPackunTailRoot>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800B62A0
DinoPackunTailRoot::__dt(void)=0x800B6310
DinoPackunTrackFireHolder::__ct(long)=0x800B6370
DeriveActorGroup<DinoPackunTrackFire>::__dt(void)=0x800B6410
DinoPackunTrackFire::__ct(const char*)=0x800B6470
DinoPackunTrackFire::init(const JMapInfoIter&)=0x800B64C0
DinoPackunTrackFire::control(void)=0x800B65E0
DinoPackunTrackFire::attackSensor(HitSensor*, HitSensor*)=0x800B6660
DinoPackunTrackFire::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800B66B0
DinoPackunTrackFire::appearAndSetPos(const JGeometry::TVec3<float>&)=0x800B66C0
DinoPackunTrackFire::exeWait(void)=0x800B6740
DinoPackunTrackFire::exeGround(void)=0x800B6800
DinoPackunTrackFire::getBaseMtx(void) const=0x800B6870
DinoPackunTrackFire::__dt(void)=0x800B6880
DinoPackunTrackFireHolder::__dt(void)=0x800B68E0
short::(nit_\DinoPackunTrackFire_cpp)=0x800B6940
NrvDinoPackunFire::DinoPackunTrackFireNrvWait::__ct(void)=0x800B6970
NrvDinoPackunFire::DinoPackunTrackFireNrvGround::__ct(void)=0x800B6980
NrvDinoPackunFire::DinoPackunTrackFireNrvGround::execute(Spine*) const=0x800B6990
NrvDinoPackunFire::DinoPackunTrackFireNrvWait::execute(Spine*) const=0x800B69A0
DinoPackunVs1::__ct(DinoPackun*)=0x800B69B0
DinoPackunVs1::init(void)=0x800B6A10
DinoPackunVs1::start(void)=0x800B6B00
DinoPackunVs1::exeOpeningDemo(void)=0x800B6B50
DinoPackunVs1::exeBattleEgg(void)=0x800B6BB0
DinoPackunVs1::exeCryDemo(void)=0x800B6C00
DinoPackunVs1::exeBattleLv1(void)=0x800B6C60
DinoPackunVs1::exeAngryDemo(void)=0x800B6CC0
DinoPackunVs1::exeBattleLv2(void)=0x800B6D20
DinoPackunVs1::exeBattleLv3(void)=0x800B6D90
DinoPackunVs1::exeDownDemo(void)=0x800B6E00
DinoPackunVs1::getVsCount(void) const=0x800B6E70
DinoPackunVs1::isUseEggShell(void) const=0x800B6E80
DinoPackunVs1::__dt(void)=0x800B6E90
short::(nit_\DinoPackunVs1_cpp)=0x800B6EF0
NrvDinoPackunVs1::DinoPackunVs1NrvWaitStart::__ct(void)=0x800B6F60
NrvDinoPackunVs1::DinoPackunVs1NrvOpeningDemo::__ct(void)=0x800B6F70
NrvDinoPackunVs1::DinoPackunVs1NrvBattleEgg::__ct(void)=0x800B6F80
NrvDinoPackunVs1::DinoPackunVs1NrvCryDemo::__ct(void)=0x800B6F90
NrvDinoPackunVs1::DinoPackunVs1NrvBattleLv1::__ct(void)=0x800B6FA0
NrvDinoPackunVs1::DinoPackunVs1NrvAngryDemo::__ct(void)=0x800B6FB0
NrvDinoPackunVs1::DinoPackunVs1NrvBattleLv2::__ct(void)=0x800B6FC0
NrvDinoPackunVs1::DinoPackunVs1NrvBattleLv3::__ct(void)=0x800B6FD0
NrvDinoPackunVs1::DinoPackunVs1NrvDownDemo::__ct(void)=0x800B6FE0
NrvDinoPackunVs1::DinoPackunVs1NrvDownDemo::execute(Spine*) const=0x800B6FF0
NrvDinoPackunVs1::DinoPackunVs1NrvBattleLv3::execute(Spine*) const=0x800B7000
NrvDinoPackunVs1::DinoPackunVs1NrvBattleLv2::execute(Spine*) const=0x800B7010
NrvDinoPackunVs1::DinoPackunVs1NrvAngryDemo::execute(Spine*) const=0x800B7020
NrvDinoPackunVs1::DinoPackunVs1NrvBattleLv1::execute(Spine*) const=0x800B7030
NrvDinoPackunVs1::DinoPackunVs1NrvCryDemo::execute(Spine*) const=0x800B7040
NrvDinoPackunVs1::DinoPackunVs1NrvBattleEgg::execute(Spine*) const=0x800B7050
NrvDinoPackunVs1::DinoPackunVs1NrvOpeningDemo::execute(Spine*) const=0x800B7060
NrvDinoPackunVs1::DinoPackunVs1NrvWaitStart::execute(Spine*) const=0x800B7070
DinoPackunVs2::__ct(DinoPackun*)=0x800B7080
DinoPackunVs2::init(void)=0x800B70E0
DinoPackunVs2::start(void)=0x800B7210
DinoPackunVs2::exeOpeningDemo(void)=0x800B7260
DinoPackunVs2::exeBattleEgg(void)=0x800B72F0
DinoPackunVs2::exeCryDemo(void)=0x800B7340
DinoPackunVs2::exeBattleLv1(void)=0x800B73A0
DinoPackunVs2::exeAngryDemo(void)=0x800B7440
DinoPackunVs2::exeBattleLv2(void)=0x800B74C0
DinoPackunVs2::exeBattleLv3(void)=0x800B7560
DinoPackunVs2::exeDownDemo(void)=0x800B7600
DinoPackunVs2::getVsCount(void) const=0x800B7670
DinoPackunVs2::isUseEggShell(void) const=0x800B7680
DinoPackunVs2::__dt(void)=0x800B7690
short::(nit_\DinoPackunVs2_cpp)=0x800B76F0
NrvDinoPackunVs2::DinoPackunVs2NrvWaitStart::__ct(void)=0x800B7760
NrvDinoPackunVs2::DinoPackunVs2NrvOpeningDemo::__ct(void)=0x800B7770
NrvDinoPackunVs2::DinoPackunVs2NrvBattleEgg::__ct(void)=0x800B7780
NrvDinoPackunVs2::DinoPackunVs2NrvCryDemo::__ct(void)=0x800B7790
NrvDinoPackunVs2::DinoPackunVs2NrvBattleLv1::__ct(void)=0x800B77A0
NrvDinoPackunVs2::DinoPackunVs2NrvAngryDemo::__ct(void)=0x800B77B0
NrvDinoPackunVs2::DinoPackunVs2NrvBattleLv2::__ct(void)=0x800B77C0
NrvDinoPackunVs2::DinoPackunVs2NrvBattleLv3::__ct(void)=0x800B77D0
NrvDinoPackunVs2::DinoPackunVs2NrvDownDemo::__ct(void)=0x800B77E0
NrvDinoPackunVs2::DinoPackunVs2NrvDownDemo::execute(Spine*) const=0x800B77F0
NrvDinoPackunVs2::DinoPackunVs2NrvBattleLv3::execute(Spine*) const=0x800B7800
NrvDinoPackunVs2::DinoPackunVs2NrvBattleLv2::execute(Spine*) const=0x800B7810
NrvDinoPackunVs2::DinoPackunVs2NrvAngryDemo::execute(Spine*) const=0x800B7820
NrvDinoPackunVs2::DinoPackunVs2NrvBattleLv1::execute(Spine*) const=0x800B7830
NrvDinoPackunVs2::DinoPackunVs2NrvCryDemo::execute(Spine*) const=0x800B7840
NrvDinoPackunVs2::DinoPackunVs2NrvBattleEgg::execute(Spine*) const=0x800B7850
NrvDinoPackunVs2::DinoPackunVs2NrvOpeningDemo::execute(Spine*) const=0x800B7860
NrvDinoPackunVs2::DinoPackunVs2NrvWaitStart::execute(Spine*) const=0x800B7870
DinoPackunBaby::__ct(const char*)=0x800B78F0
DinoPackunBaby::init(const JMapInfoIter&)=0x800B7980
DinoPackunBaby::control(void)=0x800B7E60
DinoPackunBaby::calcAndSetBaseMtx(void)=0x800B7EB0
DinoPackunBaby::attackSensor(HitSensor*, HitSensor*)=0x800B7EC0
DinoPackunBaby::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800B7F40
DinoPackunBaby::__dt(void)=0x800B7FE0
short::(nit_\DinoPackunBaby_cpp)=0x800B8040
PartsModel::__dt(void)=0x800BAFC0
Dodoryu::__ct(const char*)=0x800BB600
Dodoryu::init(const JMapInfoIter&)=0x800BB710
DodoryuStateBase::start(void)=0x800BB920
Dodoryu::initAfterPlacement(void)=0x800BB930
Dodoryu::control(void)=0x800BB940
Dodoryu::startClipped(void)=0x800BB9B0
DodoryuStateBase::catchStartClipped(void)=0x800BBA00
Dodoryu::endClipped(void)=0x800BBA10
DodoryuStateBase::catchEndClipped(void)=0x800BBA60
Dodoryu::snapToGround(void)=0x800BBA70
Dodoryu::snapToWall(void)=0x800BBB60
Dodoryu::setMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x800BBC60
Dodoryu::notifyOnSwitchA(void)=0x800BBCF0
Dodoryu::nextState(void)=0x800BBD50
DodoryuStateBase::end(void)=0x800BBE00
Dodoryu::pauseOff(void)=0x800BBE10
Dodoryu::startPlayerCenterCamera(void)=0x800BBE60
Dodoryu::endPlayerCenterCamera(void)=0x800BBEA0
DodoryuStateBase::catchSendPlayerFlying(HitSensor*, HitSensor*)=0x800BBEE0
Dodoryu::getPlayerResetMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, unsigned long) const=0x800BBEF0
Dodoryu::checkWallWithVelocity(void)=0x800BBF50
Dodoryu::reactJumpOutCommon(void) const=0x800BC070
Dodoryu::startSpinOutCamera(void)=0x800BC080
Dodoryu::endSpinOutCamera(void)=0x800BC0D0
Dodoryu::keepOffFromClosedArea(JGeometry::TVec3<float>*)=0x800BC0E0
Dodoryu::tryRumblePad(void)=0x800BC3C0
Dodoryu::invalidateEyeSensor(void)=0x800BC420
Dodoryu::validateEyeSensor(void)=0x800BC430
Dodoryu::invalidateStarPieceSensor(void)=0x800BC440
Dodoryu::validateStarPieceSensor(void)=0x800BC450
Dodoryu::isHeadNeedle(HitSensor*, HitSensor*) const=0x800BC460
Dodoryu::shiftMoveStateRail(float)=0x800BC510
Dodoryu::shiftMoveStateChase(float, float, float, float)=0x800BC520
Dodoryu::shiftMoveStateEscape(float, long, long, float, float)=0x800BC530
Dodoryu::shiftMoveStateJumpOut(float, float)=0x800BC540
Dodoryu::shiftMoveStateNull(void)=0x800BC550
Dodoryu::setMoveRailSpeed(float)=0x800BC560
Dodoryu::startHill(void)=0x800BC570
Dodoryu::stopHill(void)=0x800BC580
Dodoryu::stopHillForce(void)=0x800BC590
Dodoryu::killAllHillPieces(void)=0x800BC5A0
Dodoryu::setHillAppearNumHalf(void)=0x800BC5B0
Dodoryu::setHillAppearNumMax(void)=0x800BC5D0
Dodoryu::startLeadHillBck(const char*)=0x800BC5E0
Dodoryu::killLeadHill(void)=0x800BC650
Dodoryu::appearBank(void)=0x800BC670
Dodoryu::calcAndSetBaseMtx(void)=0x800BC680
Dodoryu::attackSensor(HitSensor*, HitSensor*)=0x800BC6C0
DodoryuStateBase::catchAttackSensor(HitSensor*, HitSensor*)=0x800BC770
Dodoryu::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800BC780
DodoryuStateBase::catchPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800BC890
Dodoryu::initHitSensor(void)=0x800BC8A0
Dodoryu::initSwitch(const JMapInfoIter&)=0x800BCA60
Dodoryu::createMogucchiHill(void)=0x800BCAF0
Dodoryu::createDodoryuBank(void)=0x800BCB40
Dodoryu::turnUpVecTo(const JGeometry::TVec3<float>&)=0x800BCB90
Dodoryu::checkHipDrop(void)=0x800BCD60
DodoryuStateBase::catchHipDrop(void)=0x800BCDC0
Dodoryu::initState(void)=0x800BCDD0
Dodoryu::updateRumblePad(void)=0x800BCF80
Dodoryu::updateCameraTarget(void)=0x800BCFB0
DodoryuBank::__ct(void)=0x800BD070
ModelObj::__dt(void)=0x800BD0E0
DodoryuBank::init(const JMapInfoIter&)=0x800BD140
DodoryuRabbit::init(const JMapInfoIter&)=0x800BD190
DodoryuRabbit::control(void)=0x800BD2C0
DodoryuRabbit::exeEscapeWaiting(void)=0x800BD420
DodoryuRabbit::exeEscape(void)=0x800BD480
DodoryuRabbit::exeEscapeSlow(void)=0x800BD540
DodoryuRabbit::exeRest(void)=0x800BD620
DodoryuRabbit::exeJump(void)=0x800BD6A0
DodoryuRabbit::exeWait(void)=0x800BD720
DodoryuRabbit::exeReturn(void)=0x800BD780
DodoryuRabbit::exePleasure(void)=0x800BD7E0
DodoryuRabbit::attackSensor(HitSensor*, HitSensor*)=0x800BD860
DodoryuRabbit::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800BD8D0
DodoryuRabbit::reset(bool)=0x800BD980
DodoryuRabbit::updatePos(float)=0x800BD9F0
DodoryuRabbit::calcCoordDiff(void) const=0x800BDB70
DodoryuRabbit::tryTalk(void)=0x800BDBE0
DodoryuLeadHill::__ct(Dodoryu*)=0x800BDC00
DodoryuLeadHill::init(const JMapInfoIter&)=0x800BDCA0
DodoryuLeadHill::control(void)=0x800BDD60
DodoryuLeadHill::calcJoint(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800BDD80
DodoryuLeadHill::calcAndSetBaseMtx(void)=0x800BDED0
DodoryuLeadHill::initJoint(void)=0x800BDF60
JointControlDelegator<DodoryuLeadHill>::__dt(void)=0x800BE080
JointControlDelegator<DodoryuLeadHill>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800BE0C0
JointControlDelegator<DodoryuLeadHill>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x800BE130
MR::Vector<MR::FixedArray<DodoryuStateBase*,16>>::push_back(const DodoryuStateBase*)=0x800BE1A0
MR::FunctorV0M<Dodoryu*,M7DodoryuFPCvPv_v>::__cl(void) const=0x800BE1C0
MR::FunctorV0M<Dodoryu*,M7DodoryuFPCvPv_v>::clone(JKRHeap*) const=0x800BE1F0
Dodoryu::__dt(void)=0x800BE260
DodoryuBank::__dt(void)=0x800BE2C0
DodoryuRabbit::__dt(void)=0x800BE320
DodoryuLeadHill::__dt(void)=0x800BE380
short::(nit_\Dodoryu_cpp)=0x800BE3E0
@unnamed@DodoryuDemo_cpp@::resetCastDisposition(Dodoryu*)=0x800BE5C0
DodoryuDemoOpening::__ct(Dodoryu*, const char*)=0x800BE630
DodoryuStateBase::__ct(Dodoryu*, const char*)=0x800BE690
DodoryuStateBase::__dt(void)=0x800BE6E0
DodoryuDemoOpening::init(const JMapInfoIter&)=0x800BE740
DodoryuDemoOpening::control(void)=0x800BE7A0
DodoryuDemoOpening::start(void)=0x800BE7C0
DodoryuDemoOpening::end(void)=0x800BE800
DodoryuDemoOpening::exeDemoWait(void)=0x800BE890
DodoryuDemoOpening::exeUnderground(void)=0x800BE9A0
DodoryuDemoOpening::exeUndergroundHide(void)=0x800BEA60
DodoryuDemoOpening::exeAppear(void)=0x800BEB00
DodoryuDemoOpening::exeWalk(void)=0x800BEC30
DodoryuDemoOpening::exeHideReady(void)=0x800BED10
DodoryuDemoOpening::exeHide(void)=0x800BEDE0
DodoryuDemoOpening::tryFinish(void)=0x800BEE80
DodoryuDemoAppear::__ct(Dodoryu*, const char*)=0x800BEF20
DodoryuDemoAppear::init(const JMapInfoIter&)=0x800BEF80
DodoryuDemoAppear::start(void)=0x800BEFE0
DodoryuDemoAppear::end(void)=0x800BEFF0
DodoryuDemoAppear::exeDemoWait(void)=0x800BF000
DodoryuDemoAppear::exePlay(void)=0x800BF090
DodoryuDemoAngry::__ct(Dodoryu*, const char*)=0x800BF1A0
DodoryuDemoAngry::init(const JMapInfoIter&)=0x800BF200
DodoryuDemoAngry::start(void)=0x800BF260
DodoryuDemoAngry::end(void)=0x800BF270
DodoryuDemoAngry::exeDemoWait(void)=0x800BF280
DodoryuDemoAngry::exePlay(void)=0x800BF300
DodoryuDemoDown::__ct(Dodoryu*, const char*)=0x800BF420
DodoryuDemoDown::init(const JMapInfoIter&)=0x800BF480
DodoryuDemoDown::start(void)=0x800BF4F0
DodoryuDemoDown::end(void)=0x800BF500
DodoryuDemoDown::exeDemoWait(void)=0x800BF510
DodoryuDemoDown::exePlay(void)=0x800BF590
DodoryuDemoOpening::__dt(void)=0x800BF680
DodoryuDemoAppear::__dt(void)=0x800BF6E0
DodoryuDemoAngry::__dt(void)=0x800BF740
DodoryuDemoDown::__dt(void)=0x800BF7A0
short::(nit_\DodoryuDemo_cpp)=0x800BF800
DodoryuHill::__ct(Dodoryu*)=0x800BFA30
MogucchiHill::__dt(void)=0x800BFAC0
DodoryuHill::notifyAppearAttackToPlayer(HitSensor*, HitSensor*)=0x800BFB20
MogucchiHill::notifyWaitAttackToPlayer(HitSensor*, HitSensor*)=0x800BFB30
DodoryuHill::__dt(void)=0x800BFB40
DodoryuSub::MoveState::__ct(DodoryuSub::MoveStateHolder*)=0x800BFBA0
DodoryuSub::MoveStateHolder::__ct(Dodoryu*)=0x800BFBD0
DodoryuSub::MoveStateHolder::execute(void)=0x800BFD10
DodoryuSub::MoveStateHolder::shiftRail(float)=0x800BFD60
DodoryuSub::MoveStateHolder::shiftChase(float, float, float, float)=0x800BFD70
DodoryuSub::MoveStateHolder::shiftEscape(float, long, long, float, float)=0x800BFDC0
DodoryuSub::MoveStateHolder::shiftJumpOut(float, float)=0x800BFE00
DodoryuSub::MoveStateHolder::shiftNull(void)=0x800BFE30
DodoryuSub::MoveStateHolder::brake(void)=0x800BFE40
DodoryuSub::MoveStateHolder::setRailSpeed(float)=0x800BFE90
DodoryuSub::MoveStateRail::__ct(DodoryuSub::MoveStateHolder*)=0x800BFEA0
DodoryuSub::MoveStateRail::execute(void)=0x800BFEF0
DodoryuSub::MoveStateChase::execute(void)=0x800C0070
DodoryuSub::MoveStateDetour::execute(void)=0x800C0140
DodoryuSub::MoveStateDetour::isPlayerOppositeFromWall(void) const=0x800C0250
DodoryuSub::MoveStateEscape::__ct(DodoryuSub::MoveStateHolder*)=0x800C02B0
DodoryuSub::MoveStateEscape::execute(void)=0x800C0320
DodoryuSub::MoveStateJumpOut::__ct(DodoryuSub::MoveStateHolder*)=0x800C0470
DodoryuSub::MoveStateJumpOut::execute(void)=0x800C04C0
DodoryuSub::MoveStateNull::execute(void)=0x800C05A0
DodoryuStateBase::calcAttackDir(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800C05B0
DodoryuStateBase::calcVerticalizedDir(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x800C06A0
DodoryuStateLv1::__ct(Dodoryu*, const char*)=0x800C0730
DodoryuStateLv1::init(const JMapInfoIter&)=0x800C07C0
DodoryuStateLv1::control(void)=0x800C0810
DodoryuStateLv1::exeHide(void)=0x800C0890
DodoryuStateLv1::exeAppearSign(void)=0x800C0990
DodoryuStateLv1::exeAppearStart(void)=0x800C0A00
DodoryuStateLv1::exeAppear(void)=0x800C0AA0
DodoryuStateLv1::exeAppearEnd(void)=0x800C0B30
DodoryuStateLv1::exeJumpOut(void)=0x800C0BA0
DodoryuStateLv1::exeDamage(void)=0x800C0C80
DodoryuStateLv1::exeDive(void)=0x800C0D30
DodoryuStateLv1::exeSpinOut(void)=0x800C0DF0
DodoryuStateLv1::start(void)=0x800C0F50
DodoryuStateLv1::catchAttackSensor(HitSensor*, HitSensor*)=0x800C0FA0
DodoryuStateLv1::catchHipDrop(void)=0x800C1090
DodoryuStateLv1::catchPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800C1170
DodoryuStateLv1::catchStartClipped(void)=0x800C1380
DodoryuStateLv1::isAttackable(void) const=0x800C1390
DodoryuStateLv1::executeHideJump(void)=0x800C1460
DodoryuStateLv1::startPop(void)=0x800C14E0
DodoryuStateLv1::updatePop(void)=0x800C1500
DodoryuStateLv1::isHipDropReactionJumpOut(void) const=0x800C1610
DodoryuStateLv1::isHipDropReactionPop(void) const=0x800C16B0
DodoryuStateLv1::isHipDropReactionNothing(void) const=0x800C1710
DodoryuStateLv1::setRailSpeed(float)=0x800C17C0
DodoryuStateLv1::startAnimAppear(void)=0x800C17E0
DodoryuStateLv1::startAnimWalk(void)=0x800C1870
DodoryuStateLv1::startAnimHide(void)=0x800C18D0
DodoryuStateLv1::startAnimEffectWalkAppear(void)=0x800C1920
DodoryuStateLv1::startAnimEffectWalk(void)=0x800C1970
DodoryuStateLv1::startAnimEffectWalkHide(void)=0x800C19C0
DodoryuStateLv1::__dt(void)=0x800C1A10
short::(nit_\DodoryuStateLv1_cpp)=0x800C1A70
DodoryuStateLv2::__ct(Dodoryu*, DodoryuChaseParam*, const char*)=0x800C1C30
DodoryuStateLv2::init(const JMapInfoIter&)=0x800C1D00
DodoryuStateLv2::control(void)=0x800C1D60
DodoryuStateLv2::start(void)=0x800C1DB0
DodoryuStateLv2::exeStart(void)=0x800C1E00
DodoryuStateLv2::exeReadyChase(void)=0x800C1E70
DodoryuStateLv2::exeChaseHide(void)=0x800C1F60
DodoryuStateLv2::exeReadyAppear(void)=0x800C2000
DodoryuStateLv2::exeAppearSign(void)=0x800C2100
DodoryuStateLv2::exeChaseAppearStart(void)=0x800C21C0
DodoryuStateLv2::exeChaseAppear(void)=0x800C2290
DodoryuStateLv2::exeChaseAppearEnd(void)=0x800C2300
DodoryuStateLv2::exeJumpOut(void)=0x800C23B0
DodoryuStateLv2::exeEscape(void)=0x800C24A0
DodoryuStateLv2::exeEscapeJump(void)=0x800C2590
DodoryuStateLv2::exeRecover(void)=0x800C2670
DodoryuStateLv2::exeDive(void)=0x800C2700
DodoryuStateLv2::exeKnockDown(void)=0x800C2790
DodoryuStateLv2::exeLaugh(void)=0x800C2890
DodoryuStateLv2::exeLaughEnd(void)=0x800C2960
DodoryuStateLv2::exeFindPos(void)=0x800C29D0
DodoryuStateLv2::exeHideAttack(void)=0x800C2B70
DodoryuStateLv2::exeChaseMoreStart(void)=0x800C2C10
DodoryuStateLv2::exeChaseMore(void)=0x800C2DF0
DodoryuStateLv2::exeChaseMoreEnd(void)=0x800C2F70
DodoryuStateLv2::catchHipDrop(void)=0x800C2FF0
DodoryuStateLv2::catchAttackSensor(HitSensor*, HitSensor*)=0x800C31B0
DodoryuStateLv2::catchPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800C3300
DodoryuStateLv2::catchStartClipped(void)=0x800C3490
DodoryuStateLv2::catchSendPlayerFlying(HitSensor*, HitSensor*)=0x800C34A0
DodoryuStateLv2::knockOver(void)=0x800C3510
DodoryuStateLv2::isEnableToCatchHipDrop(void) const=0x800C35D0
DodoryuStateLv2::isDown(void) const=0x800C36C0
DodoryuStateLv2::isAttackableNerve(void) const=0x800C3770
DodoryuStateLv2::tryShiftToChaseAppear(void)=0x800C3870
DodoryuStateLv2::tryShiftToChaseAppearEnd(void)=0x800C38E0
DodoryuStateLv2::isEscapeEnd(void) const=0x800C3960
DodoryuStateLv2::updateReadyChaseShake(void)=0x800C39D0
DodoryuStateLv2::updateChaseHideShake(void)=0x800C3A40
DodoryuStateLv2::updateHideShake(void)=0x800C3AC0
DodoryuStateLv2::updateDiveShake(void)=0x800C3B30
DodoryuStateLv2::calcRandomVelocity(long)=0x800C3BA0
DodoryuStateLv2::keepVerticalizedVelocity(void)=0x800C3CA0
DodoryuStateLv2::attackStrongToDir(HitSensor*, HitSensor*)=0x800C3D30
DodoryuStateLv2::hideJump(void)=0x800C3E20
DodoryuStateLv2::tryToShiftAppearSign(void)=0x800C3E70
DodoryuStateLv2::determinChaseMoreAccelCounter(void)=0x800C3F30
DodoryuStateLv2::determinChaseMoreBrakeCounter(void)=0x800C3F70
DodoryuStateLv2::turnToward(const JGeometry::TVec3<float>&, float)=0x800C3FB0
DodoryuStateLv2::addVelocity(bool)=0x800C4060
DodoryuStateLv2::calcLimitedRotateMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x800C4100
DodoryuStateLv2::isReflectSpinAttack(void) const=0x800C4300
DodoryuStateLv2::shiftChaseUnderground(void)=0x800C43B0
DodoryuStateLv2::shiftChaseExposingHead(void)=0x800C43D0
DodoryuStateLv2::shiftChaseExposingBust(void)=0x800C43F0
DodoryuStateLv2::shiftChaseInAnger(void)=0x800C4410
DodoryuStateLv2::shiftHideAttack(void)=0x800C4430
DodoryuStateLv2::startAnim(const DodoryuAnimSet&)=0x800C4450
DodoryuStateLv2::startBtk(const DodoryuAnimSet&)=0x800C44D0
DodoryuStateLv2::startBrk(const DodoryuAnimSet&)=0x800C44F0
DodoryuStateLv2::startBva(const DodoryuAnimSet&)=0x800C4510
DodoryuStateLv2::startLeadHillBck(const DodoryuAnimSet&)=0x800C4530
DodoryuStateLv2::__dt(void)=0x800C4550
short::(nit_\DodoryuStateLv2_cpp)=0x800C45B0
DodoryuStateWait::__ct(Dodoryu*, const char*)=0x800C4A10
DodoryuStateWait::init(const JMapInfoIter&)=0x800C4A70
DodoryuStateWait::exeWait(void)=0x800C4AC0
DodoryuStateWait::__dt(void)=0x800C4BE0
short::(nit_\DodoryuStateWait_cpp)=0x800C4C40
DodoryuUtil::calcVerticalizedDir(Dodoryu*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x800C4C70
DodoryuUtil::turnToward(Dodoryu*, const JGeometry::TVec3<float>&, float)=0x800C4D00
DodoryuUtil::accelerate(Dodoryu*, const JGeometry::TVec3<float>&, float, float, float)=0x800C4F50
DodoryuUtil::addVelocity(Dodoryu*, bool)=0x800C5060
DodoryuUtil::rotateVelocityByWall(Dodoryu*)=0x800C5100
DodoryuUtil::calcEscapeDir(Dodoryu*, JGeometry::TVec3<float>*, float)=0x800C51D0
KingTossin::__ct(const char*)=0x800C55B0
KingTossin::init(const JMapInfoIter&)=0x800C5660
KingTossin::kill(void)=0x800C57E0
KingTossin::calcAndSetBaseMtx(void)=0x800C5840
KingTossin::control(void)=0x800C5880
KingTossin::attackSensor(HitSensor*, HitSensor*)=0x800C58C0
KingTossin::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800C5A10
KingTossin::__dt(void)=0x800C8430
short::(nit_\KingTossin_cpp)=0x800C8490
Koopa::__ct(const char*)=0x800C8980
Koopa::init(const JMapInfoIter&)=0x800C8A50
Koopa::makeActorAppeared(void)=0x800C8FC0
Koopa::makeActorDead(void)=0x800C9010
Koopa::control(void)=0x800C9050
Koopa::calcAndSetBaseMtx(void)=0x800C9170
Koopa::attackSensor(HitSensor*, HitSensor*)=0x800C91B0
Koopa::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800C9220
Koopa::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800C92A0
TriangleFilterDelegator<Koopa>::isInvalidTriangle(const Triangle*) const=0x800C9370
MR::FunctorV0M<Koopa*,M5KoopaFPCvPv_v>::__cl(void) const=0x800C93A0
MR::FunctorV0M<Koopa*,M5KoopaFPCvPv_v>::clone(JKRHeap*) const=0x800C93D0
Koopa::__dt(void)=0x800C9440
short::(nit_\Koopa_cpp)=0x800C94A0
KoopaBattleAccessor::__ct(void)=0x800C9540
KoopaBattleAccessor::__dt(void)=0x800C98A0
KoopaDemoChamber::__ct(const char*)=0x800CA2C0
KoopaDemoChamber::makeActorAppeared(void)=0x800CA310
KoopaDemoChamber::makeActorDead(void)=0x800CA350
KoopaDemoChamber::init(const JMapInfoIter&)=0x800CA3B0
KoopaDemoChamber::control(void)=0x800CA530
KoopaDemoChamber::__dt(void)=0x800CA5D0
short::(nit_\KoopaDemoChamber_cpp)=0x800CA630
KoopaFinalBattlePos::__ct(const char*)=0x800CA6A0
KoopaFinalBattlePos::init(const JMapInfoIter&)=0x800CA6E0
KoopaFinalBattlePos::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800CA770
KoopaFinalBattlePos::__dt(void)=0x800CA7D0
KoopaJrCastle::__ct(const char*)=0x800CC560
KoopaJrCastle::init(const JMapInfoIter&)=0x800CC610
KoopaJrCastle::makeActorAppeared(void)=0x800CCC10
KoopaJrCastle::control(void)=0x800CCC50
KoopaJrCastle::attackSensor(HitSensor*, HitSensor*)=0x800CCF20
KoopaJrCastle::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800CCF80
KoopaJrCastle::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800CCFF0
KoopaJrCastleAccessor::__ct(void)=0x800CD060
KoopaJrCastle::getBaseMtx(void) const=0x800CD0B0
KoopaJrCastle::__dt(void)=0x800CD0C0
KoopaJrCastleAccessor::__dt(void)=0x800CD120
short::(nit_\KoopaJrCastle_cpp)=0x800CD180
MR::repeatDegree(float*)=0x800CEC10
JMathInlineVEC::PSVECAdd(const Vec*, const Vec*, Vec*)=0x800D3010
JKRHeap::getFreeSize(void, _0)=0x800D77AC
KoopaJrCastleWindHolder::__ct(void)=0x800D9630
KoopaJrCastleWindHolder::__dt(void)=0x800D98B0
KoopaJrCastleWindUp::__ct(const char*)=0x800DA250
KoopaJrCastleWindUp::init(const JMapInfoIter&)=0x800DA2B0
KoopaJrCastleWindUp::makeActorAppeared(void)=0x800DA520
KoopaJrCastleWindUp::appear(void)=0x800DA590
KoopaJrCastleWindUp::makeActorDead(void)=0x800DA5D0
KoopaJrCastleWindUp::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800DA8A0
KoopaJrCastleWindUp::__dt(void)=0x800DA8E0
short::(nit_\KoopaJrCastleWindUp_cpp)=0x800DA940
KoopaJrRobot::__ct(const char*)=0x800DA9D0
KoopaJrRobot::init(const JMapInfoIter&)=0x800DAA60
KoopaJrRobot::appear(void)=0x800DAD70
KoopaJrRobot::kill(void)=0x800DAE10
KoopaJrRobot::control(void)=0x800DB030
KoopaJrRobot::movement(void)=0x800DB0E0
KoopaJrRobot::calcAnim(void)=0x800DB140
KoopaJrRobot::calcAndSetBaseMtx(void)=0x800DB1C0
KoopaJrRobot::attackSensor(HitSensor*, HitSensor*)=0x800DB1D0
KoopaJrRobot::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800DB2A0
KoopaJrRobot::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800DB390
KoopaJrRobot::__dt(void)=0x800DB5C0
short::(nit_\KoopaJrRobot_cpp)=0x800DB640
KoopaJrRobotBreakableStep::__ct(const char*)=0x800E1C60
KoopaJrRobotBreakableStep::init(const JMapInfoIter&)=0x800E1CA0
KoopaJrRobotBreakableStep::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800E1EC0
KoopaJrRobotBreakableStep::__dt(void)=0x800E1F80
short::(nit_\KoopaJrRobotBreakableStep_cpp)=0x800E1FE0
KoopaSealField::__ct(const char*)=0x800E5C90
KoopaSealField::makeActorAppeared(void)=0x800E5CF0
KoopaSealField::makeActorDead(void)=0x800E5D60
KoopaSealField::init(const JMapInfoIter&)=0x800E5DD0
KoopaSealField::control(void)=0x800E6150
KoopaSealField::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800E6160
KoopaSealField::__dt(void)=0x800E65C0
short::(nit_\KoopaSealField_cpp)=0x800E6680
OtaKing::__ct(const char*)=0x800ED900
OtaKing::init(const JMapInfoIter&)=0x800ED9C0
OtaKing::movement(void)=0x800EDB70
OtaKing::makeActorAppeared(void)=0x800EDBD0
OtaKing::startAppearDemo(void)=0x800EDC60
OtaKing::control(void)=0x800EDCC0
OtaKing::calcAndSetBaseMtx(void)=0x800EDD50
OtaKing::attackSensor(HitSensor*, HitSensor*)=0x800EDDB0
OtaKing::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800EDE90
OtaKing::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800EDF30
OtaKing::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800EE070
OtaKing::initMapToolInfo(const JMapInfoIter&)=0x800EE1F0
OtaKing::initModel(const JMapInfoIter&)=0x800EE270
FireBubble::__defctor(void)=0x800EE660
FireBall::__defctor(void)=0x800EE670
CocoNutBall::__defctor(void)=0x800EE680
CocoNutBall::__dt(void)=0x800EE690
FireBall::__dt(void)=0x800EE6F0
FireBubble::__dt(void)=0x800EE750
OtaKing::initSensor(void)=0x800EE7B0
OtaKing::dirToPlayer(void)=0x800EE870
OtaKing::getDisappearedCocoNut(void)=0x800EE9E0
OtaKing::getDisappearedFireBall(void)=0x800EEA50
OtaKing::getDisappearedBubble(void)=0x800EEAC0
OtaKing::getDisappearedCocoNutNum(void) const=0x800EEB30
OtaKing::getDisappearedFireBallNum(void) const=0x800EEBA0
OtaKing::getDisappearedFireBubbleNum(void) const=0x800EEC10
OtaKing::isValidThrowCocoNut(void) const=0x800EEC80
OtaKing::isValidThrowFireBall(void) const=0x800EED60
OtaKing::isValidBubbleAttack(void) const=0x800EEE00
OtaKing::damage(void)=0x800EEE80
OtaKing::throwCocoNut(void)=0x800EF010
FixedPosition::copyTrans(JGeometry::TVec3<float>*) const=0x800EF120
OtaKing::throwFireBall(void)=0x800EF140
OtaKing::startBckWaitIfNotPlaying(void)=0x800EF2F0
OtaKing::startBckWithFrontFoot(const char*)=0x800EF370
OtaKing::isNerveValidNearAttack(void) const=0x800EF3F0
OtaKing::appearBubble(void)=0x800EF4A0
OtaKing::startDemo(void)=0x800EF690
OtaKing::appearStarPiece(void)=0x800EF730
OtaKing::initLongFoot(const JMapInfoIter&)=0x800EF7B0
JGeometry::TVec3<float>::set(const Vec&)=0x800EF9B0
OtaKing::tryThrowCocoNutOrFireBallIfWait(long)=0x800EF9D0
OtaKing::exeWaitOnSwitch(void)=0x800EFB50
OtaKing::exeAppearDemo(void)=0x800EFC20
OtaKing::exeWait(void)=0x800F0050
OtaKing::exeThrowCocoNut(void)=0x800F00B0
OtaKing::exeThrowFireBallWait(void)=0x800F0200
OtaKing::exeThrowFireBall(void)=0x800F0270
OtaKing::exeDamage(void)=0x800F03C0
OtaKing::exePowerUp(void)=0x800F04C0
OtaKing::exeDown(void)=0x800F07A0
OtaKing::exeDownDemo(void)=0x800F09C0
OtaKing::exeHitBack(void)=0x800F0C80
OtaKing::exeNearAttack(void)=0x800F0D80
OtaKing::exeBubbleAttack(void)=0x800F0E30
MR::FunctorV0M<OtaKing*,M7OtaKingFPCvPv_v>::__cl(void) const=0x800F0F10
MR::FunctorV0M<OtaKing*,M7OtaKingFPCvPv_v>::clone(JKRHeap*) const=0x800F0F40
OtaKing::__dt(void)=0x800F0FB0
short::(nit_\OtaKing_cpp)=0x800F1010
NrvOtaKing::OtaKingNrvWaitOnSwitch::__ct(void)=0x800F10C0
NrvOtaKing::OtaKingNrvAppearDemo::__ct(void)=0x800F10D0
NrvOtaKing::OtaKingNrvWait::__ct(void)=0x800F10E0
NrvOtaKing::OtaKingNrvThrowCocoNutWait::__ct(void)=0x800F10F0
NrvOtaKing::OtaKingNrvThrowCocoNut::__ct(void)=0x800F1100
NrvOtaKing::OtaKingNrvThrowFireBallWait::__ct(void)=0x800F1110
NrvOtaKing::OtaKingNrvThrowFireBall::__ct(void)=0x800F1120
NrvOtaKing::OtaKingNrvDamage::__ct(void)=0x800F1130
NrvOtaKing::OtaKingNrvPowerUp::__ct(void)=0x800F1140
NrvOtaKing::OtaKingNrvDown::__ct(void)=0x800F1150
NrvOtaKing::OtaKingNrvDownDemo::__ct(void)=0x800F1160
NrvOtaKing::OtaKingNrvDead::__ct(void)=0x800F1170
NrvOtaKing::OtaKingNrvHitBackStart::__ct(void)=0x800F1180
NrvOtaKing::OtaKingNrvHitBack::__ct(void)=0x800F1190
NrvOtaKing::OtaKingNrvNearAttack::__ct(void)=0x800F11A0
NrvOtaKing::OtaKingNrvBubbleAttack::__ct(void)=0x800F11B0
NrvOtaKing::OtaKingNrvWaitStartDemo::__ct(void)=0x800F11C0
NrvOtaKing::OtaKingNrvWaitStartDemo::execute(Spine*) const=0x800F11D0
NrvOtaKing::OtaKingNrvBubbleAttack::execute(Spine*) const=0x800F11E0
NrvOtaKing::OtaKingNrvNearAttack::execute(Spine*) const=0x800F11F0
NrvOtaKing::OtaKingNrvHitBack::execute(Spine*) const=0x800F1200
NrvOtaKing::OtaKingNrvHitBackStart::execute(Spine*) const=0x800F1210
NrvOtaKing::OtaKingNrvDead::execute(Spine*) const=0x800F1260
NrvOtaKing::OtaKingNrvDownDemo::execute(Spine*) const=0x800F12A0
NrvOtaKing::OtaKingNrvDown::execute(Spine*) const=0x800F12B0
NrvOtaKing::OtaKingNrvPowerUp::execute(Spine*) const=0x800F12C0
NrvOtaKing::OtaKingNrvDamage::execute(Spine*) const=0x800F12D0
NrvOtaKing::OtaKingNrvThrowFireBall::execute(Spine*) const=0x800F12E0
NrvOtaKing::OtaKingNrvThrowFireBallWait::execute(Spine*) const=0x800F12F0
NrvOtaKing::OtaKingNrvThrowCocoNut::execute(Spine*) const=0x800F1300
NrvOtaKing::OtaKingNrvThrowCocoNutWait::execute(Spine*) const=0x800F1310
NrvOtaKing::OtaKingNrvWait::execute(Spine*) const=0x800F1360
NrvOtaKing::OtaKingNrvAppearDemo::execute(Spine*) const=0x800F1370
NrvOtaKing::OtaKingNrvWaitOnSwitch::execute(Spine*) const=0x800F1380
OtaKingLongFoot::__ct(LiveActor*, long, const char*)=0x800F1390
OtaKingLongFoot::init(const JMapInfoIter&)=0x800F1400
OtaKingLongFoot::hide(void)=0x800F1480
OtaKingLongFoot::startAppearDemo(void)=0x800F14D0
OtaKingLongFoot::startDownDemo(void)=0x800F14E0
OtaKingLongFoot::endDemo(void)=0x800F14F0
OtaKingLongFoot::control(void)=0x800F1540
OtaKingLongFoot::calcAndSetBaseMtx(void)=0x800F1550
OtaKingLongFoot::attackSensor(HitSensor*, HitSensor*)=0x800F15B0
OtaKingLongFoot::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F1650
OtaKingLongFoot::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F16A0
OtaKingLongFoot::initSensor(void)=0x800F16F0
OtaKingLongFoot::exeAppearDemo(void)=0x800F1830
OtaKingLongFoot::__dt(void)=0x800F18B0
short::(nit_\OtaKingLongFoot_cpp)=0x800F1910
NrvOtaKingLongFoot::OtaKingLongFootNrvWait::__ct(void)=0x800F1950
NrvOtaKingLongFoot::OtaKingLongFootNrvDamage::__ct(void)=0x800F1960
NrvOtaKingLongFoot::OtaKingLongFootNrvAppearDemo::__ct(void)=0x800F1970
NrvOtaKingLongFoot::OtaKingLongFootNrvDownDemo::__ct(void)=0x800F1980
NrvOtaKingLongFoot::OtaKingLongFootNrvDownDemo::execute(Spine*) const=0x800F1990
NrvOtaKingLongFoot::OtaKingLongFootNrvAppearDemo::execute(Spine*) const=0x800F19E0
NrvOtaKingLongFoot::OtaKingLongFootNrvDamage::execute(Spine*) const=0x800F19F0
NrvOtaKingLongFoot::OtaKingLongFootNrvWait::execute(Spine*) const=0x800F1A50
OtaKingMagma::__ct(LiveActor*, long)=0x800F1AB0
OtaKingMagma::init(const JMapInfoIter&)=0x800F1B30
OtaKingMagma::appearDemo(void)=0x800F1C80
OtaKingMagma::attack(void)=0x800F1C90
OtaKingMagma::fireAttack(void)=0x800F1CA0
OtaKingMagma::hitBack(void)=0x800F1CB0
OtaKingMagma::damage(void)=0x800F1CC0
OtaKingMagma::down(void)=0x800F1CD0
OtaKingMagma::exeWait(void)=0x800F1E00
OtaKingMagma::exeAppearDemo(void)=0x800F1E90
OtaKingMagma::exeAttack(void)=0x800F1F30
OtaKingMagma::exeFireAttack(void)=0x800F1FD0
OtaKingMagma::exeHitBack(void)=0x800F2070
OtaKingMagma::exeDamage(void)=0x800F2120
OtaKingMagma::exeDown(void)=0x800F21C0
OtaKingMagma::exeEndWait(void)=0x800F2260
OtaKingMagma::__dt(void)=0x800F22E0
short::(nit_\OtaKingMagma_cpp)=0x800F2340
NrvOtaKingMagma::OtaKingMagmaNrvWait::__ct(void)=0x800F23A0
NrvOtaKingMagma::OtaKingMagmaNrvAppearDemo::__ct(void)=0x800F23B0
NrvOtaKingMagma::OtaKingMagmaNrvAttack::__ct(void)=0x800F23C0
NrvOtaKingMagma::OtaKingMagmaNrvFireAttack::__ct(void)=0x800F23D0
NrvOtaKingMagma::OtaKingMagmaNrvHitBack::__ct(void)=0x800F23E0
NrvOtaKingMagma::OtaKingMagmaNrvDamage::__ct(void)=0x800F23F0
NrvOtaKingMagma::OtaKingMagmaNrvDown::__ct(void)=0x800F2400
NrvOtaKingMagma::OtaKingMagmaNrvEndWait::__ct(void)=0x800F2410
NrvOtaKingMagma::OtaKingMagmaNrvEndWait::execute(Spine*) const=0x800F2420
NrvOtaKingMagma::OtaKingMagmaNrvDown::execute(Spine*) const=0x800F2430
NrvOtaKingMagma::OtaKingMagmaNrvDamage::execute(Spine*) const=0x800F2440
NrvOtaKingMagma::OtaKingMagmaNrvHitBack::execute(Spine*) const=0x800F2450
NrvOtaKingMagma::OtaKingMagmaNrvFireAttack::execute(Spine*) const=0x800F2460
NrvOtaKingMagma::OtaKingMagmaNrvAttack::execute(Spine*) const=0x800F2470
NrvOtaKingMagma::OtaKingMagmaNrvAppearDemo::execute(Spine*) const=0x800F2480
NrvOtaKingMagma::OtaKingMagmaNrvWait::execute(Spine*) const=0x800F2490
BombTeresaHolder::__ct(void)=0x800F24A0
DeriveActorGroup<BombTeresa>::__dt(void)=0x800F2560
BombTeresaHolder::disperseAll(void)=0x800F25C0
Polta::__ct(const char*)=0x800F2620
JGeometry::TQuat4<float>::__ct<int>(int, int, int, int, _Pv)=0x800F26F0
Polta::init(const JMapInfoIter&)=0x800F2760
Polta::initArm(void)=0x800F2940
Polta::initPartsModel(void)=0x800F2A20
Polta::initSensor(void)=0x800F2B00
Polta::initBombTeresaHolder(void)=0x800F2B60
Polta::initCamera(const JMapInfoIter&)=0x800F2BD0
Polta::appearBreakModel(const JGeometry::TVec3<float>&, const char*)=0x800F2C90
Polta::appearBreakModelFirst(const JGeometry::TVec3<float>&)=0x800F2CF0
Polta::appearBreakModelMiddle(const JGeometry::TVec3<float>&)=0x800F2D00
Polta::appearBreakModelLast(const JGeometry::TVec3<float>&)=0x800F2D10
Polta::appearStarPiece(long)=0x800F2D20
Polta::isEndBreakModel(void) const=0x800F2D90
Polta::killBreakModel(void)=0x800F2DA0
Polta::rotateToPlayer(void)=0x800F2DC0
Polta::calcToPlayerRotateSpeed(void) const=0x800F2E00
Polta::makeActorAppeared(void)=0x800F2EF0
Polta::makeActorDead(void)=0x800F2F00
Polta::kill(void)=0x800F2F10
Polta::control(void)=0x800F2F80
Polta::calcAnim(void)=0x800F2F90
Polta::calcAndSetBaseMtx(void)=0x800F2FA0
Polta::updatePose(float, float)=0x800F2FD0
Polta::start(void)=0x800F30A0
Polta::setStartPose(void)=0x800F30E0
Polta::attackSensor(HitSensor*, HitSensor*)=0x800F3130
Polta::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F3150
Polta::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F3170
Polta::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800F3190
MR::FunctorV0M<Polta*,M5PoltaFPCvPv_v>::__cl(void) const=0x800F31B0
MR::FunctorV0M<Polta*,M5PoltaFPCvPv_v>::clone(JKRHeap*) const=0x800F31E0
Polta::__dt(void)=0x800F3250
BombTeresaHolder::__dt(void)=0x800F32B0
PoltaActionBase::__ct(const char*, Polta*)=0x800F3310
ActorStateBase<Polta>::__dt(void)=0x800F3370
PoltaActionBase::updateWait(void)=0x800F33D0
PoltaActionBase::updateDamageBody(bool)=0x800F3450
PoltaActionBase::updateBreakBody(void)=0x800F35A0
PoltaActionBase::updateDamageCore(void)=0x800F36F0
PoltaActionBase::updateScreamSensor(void)=0x800F37C0
PoltaActionBase::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800F3830
PoltaActionBase::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F3840
PoltaActionBase::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F3850
PoltaActionBase::attackSensor(HitSensor*, HitSensor*)=0x800F3860
PoltaActionBase::__dt(void)=0x800F3870
PoltaActionSequencer::__ct(Polta*, const JMapInfoIter&)=0x800F38D0
PoltaActionSequencer::attackSensor(HitSensor*, HitSensor*)=0x800F39E0
PoltaActionSequencer::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F3A00
PoltaActionSequencer::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F3A30
PoltaActionSequencer::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800F3A60
PoltaActionSequencer::updateAction(void)=0x800F3A90
PoltaActionSequencer::startAction(void)=0x800F3AB0
PoltaActionSequencer::exeWaitStart(void)=0x800F3B00
PoltaActionSequencer::exeOpeningDemo(void)=0x800F3B50
PoltaActionSequencer::exeBattleLv1(void)=0x800F3BA0
PoltaActionSequencer::exePowerUpDemo(void)=0x800F3C10
PoltaActionSequencer::exeBattleLv2(void)=0x800F3C60
PoltaActionSequencer::exeDownDemo(void)=0x800F3CE0
PoltaActionSequencer::__dt(void)=0x800F3D50
short::(nit_\PoltaActionSequencer_cpp)=0x800F3DB0
NrvPoltaActionSequencer::PoltaActionSequencerNrvWaitStart::__ct(void)=0x800F3E00
NrvPoltaActionSequencer::PoltaActionSequencerNrvOpeningDemo::__ct(void)=0x800F3E10
NrvPoltaActionSequencer::PoltaActionSequencerNrvBattleLv1::__ct(void)=0x800F3E20
NrvPoltaActionSequencer::PoltaActionSequencerNrvPowerUpDemo::__ct(void)=0x800F3E30
NrvPoltaActionSequencer::PoltaActionSequencerNrvBattleLv2::__ct(void)=0x800F3E40
NrvPoltaActionSequencer::PoltaActionSequencerNrvDownDemo::__ct(void)=0x800F3E50
NrvPoltaActionSequencer::PoltaActionSequencerNrvDownDemo::execute(Spine*) const=0x800F3E60
NrvPoltaActionSequencer::PoltaActionSequencerNrvBattleLv2::execute(Spine*) const=0x800F3E70
NrvPoltaActionSequencer::PoltaActionSequencerNrvPowerUpDemo::execute(Spine*) const=0x800F3E80
NrvPoltaActionSequencer::PoltaActionSequencerNrvBattleLv1::execute(Spine*) const=0x800F3E90
NrvPoltaActionSequencer::PoltaActionSequencerNrvOpeningDemo::execute(Spine*) const=0x800F3EA0
NrvPoltaActionSequencer::PoltaActionSequencerNrvWaitStart::execute(Spine*) const=0x800F3EB0
PoltaArm::__ct(const char*, const char*, A4_f)=0x800F3EC0
PoltaArm::init(const JMapInfoIter&)=0x800F3F90
PoltaArm::initPartsModel(void)=0x800F4030
PoltaArm::appear(void)=0x800F4100
PoltaArm::makeActorDead(void)=0x800F4110
PoltaArm::control(void)=0x800F4150
PoltaArm::exeDamage(void)=0x800F41B0
PoltaArm::exeBreak(void)=0x800F42D0
PoltaArm::exeBreakBody(void)=0x800F4380
PoltaArm::exeRepair(void)=0x800F43F0
PoltaArm::exeBroken(void)=0x800F44D0
PoltaArm::isEnableHitSensor(void) const=0x800F4500
PoltaArm::isEnableAttack(void) const=0x800F4590
PoltaArm::isBroken(void) const=0x800F45E0
PoltaArm::start(void)=0x800F4670
PoltaArm::requestBreakBody(void)=0x800F4710
PoltaArm::requestDamage(void)=0x800F4790
PoltaArm::requestStartControll(void)=0x800F4850
PoltaArm::requestControlled(const char*)=0x800F48D0
PoltaArm::appearBreakModel(void)=0x800F4950
PoltaArm::__dt(void)=0x800F4A10
short::(nit_\PoltaArm_cpp)=0x800F4A70
NrvPoltaArm::PoltaArmNrvControlled::__ct(void)=0x800F4AD0
NrvPoltaArm::PoltaArmNrvDamage::__ct(void)=0x800F4AE0
NrvPoltaArm::PoltaArmNrvBreak::__ct(void)=0x800F4AF0
NrvPoltaArm::PoltaArmNrvBreakBody::__ct(void)=0x800F4B00
NrvPoltaArm::PoltaArmNrvBroken::__ct(void)=0x800F4B10
NrvPoltaArm::PoltaArmNrvRepair::__ct(void)=0x800F4B20
NrvPoltaArm::PoltaArmNrvWaitDamageEnd::__ct(void)=0x800F4B30
NrvPoltaArm::PoltaArmNrvWaitRepairEnd::__ct(void)=0x800F4B40
NrvPoltaArm::PoltaArmNrvWaitRepairEnd::execute(Spine*) const=0x800F4B50
NrvPoltaArm::PoltaArmNrvWaitDamageEnd::execute(Spine*) const=0x800F4B60
NrvPoltaArm::PoltaArmNrvRepair::executeOnEnd(Spine*) const=0x800F4B70
NrvPoltaArm::PoltaArmNrvRepair::execute(Spine*) const=0x800F4B90
NrvPoltaArm::PoltaArmNrvBroken::execute(Spine*) const=0x800F4BA0
NrvPoltaArm::PoltaArmNrvBreakBody::execute(Spine*) const=0x800F4BB0
NrvPoltaArm::PoltaArmNrvBreak::execute(Spine*) const=0x800F4BC0
NrvPoltaArm::PoltaArmNrvDamage::execute(Spine*) const=0x800F4BD0
NrvPoltaArm::PoltaArmNrvControlled::execute(Spine*) const=0x800F4BE0
PoltaBattleLv1::__ct(Polta*)=0x800F4BF0
PoltaBattleLv1::appear(void)=0x800F4CF0
PoltaBattleLv1::control(void)=0x800F4D90
PoltaBattleLv1::attackSensor(HitSensor*, HitSensor*)=0x800F4E90
PoltaBattleLv1::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F4F40
PoltaBattleLv1::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F4F90
PoltaBattleLv1::isEnableSensor(const HitSensor*) const=0x800F5080
PoltaBattleLv1::exeWait(void)=0x800F5160
PoltaBattleLv1::exeBreakBody(void)=0x800F5200
PoltaBattleLv1::exeStagger(void)=0x800F5260
PoltaBattleLv1::exeDamageCore(void)=0x800F52E0
PoltaBattleLv1::isEnableDamage(void) const=0x800F5390
PoltaBattleLv1::isEnableScream(void) const=0x800F53F0
PoltaBattleLv1::addDamageBody(void)=0x800F5400
PoltaBattleLv1::__dt(void)=0x800F5420
short::(nit_\PoltaBattleLv1_cpp)=0x800F5480
NrvPoltaBattleLv1::PoltaBattleLv1NrvWait::__ct(void)=0x800F54E0
NrvPoltaBattleLv1::PoltaBattleLv1NrvGenerateGroundRock::__ct(void)=0x800F54F0
NrvPoltaBattleLv1::PoltaBattleLv1NrvGenerateRock::__ct(void)=0x800F5500
NrvPoltaBattleLv1::PoltaBattleLv1NrvDamageBody::__ct(void)=0x800F5510
NrvPoltaBattleLv1::PoltaBattleLv1NrvBreakBody::__ct(void)=0x800F5520
NrvPoltaBattleLv1::PoltaBattleLv1NrvStagger::__ct(void)=0x800F5530
NrvPoltaBattleLv1::PoltaBattleLv1NrvDamageCore::__ct(void)=0x800F5540
NrvPoltaBattleLv1::PoltaBattleLv1NrvDamageCore::execute(Spine*) const=0x800F5550
NrvPoltaBattleLv1::PoltaBattleLv1NrvStagger::executeOnEnd(Spine*) const=0x800F5560
NrvPoltaBattleLv1::PoltaBattleLv1NrvStagger::execute(Spine*) const=0x800F5570
NrvPoltaBattleLv1::PoltaBattleLv1NrvBreakBody::execute(Spine*) const=0x800F5580
NrvPoltaBattleLv1::PoltaBattleLv1NrvDamageBody::execute(Spine*) const=0x800F5590
NrvPoltaBattleLv1::PoltaBattleLv1NrvGenerateRock::execute(Spine*) const=0x800F55F0
NrvPoltaBattleLv1::PoltaBattleLv1NrvGenerateGroundRock::execute(Spine*) const=0x800F5600
NrvPoltaBattleLv1::PoltaBattleLv1NrvWait::execute(Spine*) const=0x800F5610
PoltaBattleLv2::__ct(Polta*)=0x800F5620
PoltaBattleLv2::appear(void)=0x800F5750
PoltaBattleLv2::control(void)=0x800F57E0
PoltaBattleLv2::attackSensor(HitSensor*, HitSensor*)=0x800F58E0
PoltaBattleLv2::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F5A50
PoltaBattleLv2::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F5AA0
PoltaBattleLv2::tryAttackGround(void)=0x800F5BE0
PoltaBattleLv2::setNerveGenerateRock(void)=0x800F5D30
PoltaBattleLv2::tryGenerateRock(void)=0x800F5DB0
PoltaBattleLv2::exeBreakBody(void)=0x800F5E20
PoltaBattleLv2::exeStagger(void)=0x800F5E80
PoltaBattleLv2::exeDamageCore(void)=0x800F5F00
PoltaBattleLv2::isEnableSensor(const HitSensor*) const=0x800F5FC0
PoltaBattleLv2::isEnableAttack(const HitSensor*) const=0x800F60E0
PoltaBattleLv2::isEnableDamage(void) const=0x800F61E0
PoltaBattleLv2::isEnableScream(void) const=0x800F6240
PoltaBattleLv2::addDamageBody(void)=0x800F6250
PoltaBattleLv2::__dt(void)=0x800F6270
short::(nit_\PoltaBattleLv2_cpp)=0x800F62D0
NrvPoltaBattleLv2::PoltaBattleLv2NrvWait::__ct(void)=0x800F6340
NrvPoltaBattleLv2::PoltaBattleLv2NrvPunch::__ct(void)=0x800F6350
NrvPoltaBattleLv2::PoltaBattleLv2NrvAttackGround::__ct(void)=0x800F6360
NrvPoltaBattleLv2::PoltaBattleLv2NrvGenerateGroundRock::__ct(void)=0x800F6370
NrvPoltaBattleLv2::PoltaBattleLv2NrvGenerateRock::__ct(void)=0x800F6380
NrvPoltaBattleLv2::PoltaBattleLv2NrvDamageBody::__ct(void)=0x800F6390
NrvPoltaBattleLv2::PoltaBattleLv2NrvBreakBody::__ct(void)=0x800F63A0
NrvPoltaBattleLv2::PoltaBattleLv2NrvStagger::__ct(void)=0x800F63B0
NrvPoltaBattleLv2::PoltaBattleLv2NrvDamageCore::__ct(void)=0x800F63C0
NrvPoltaBattleLv2::PoltaBattleLv2NrvDamageCore::execute(Spine*) const=0x800F63D0
NrvPoltaBattleLv2::PoltaBattleLv2NrvStagger::executeOnEnd(Spine*) const=0x800F63E0
NrvPoltaBattleLv2::PoltaBattleLv2NrvStagger::execute(Spine*) const=0x800F63F0
NrvPoltaBattleLv2::PoltaBattleLv2NrvBreakBody::execute(Spine*) const=0x800F6400
NrvPoltaBattleLv2::PoltaBattleLv2NrvDamageBody::execute(Spine*) const=0x800F6410
NrvPoltaBattleLv2::PoltaBattleLv2NrvGenerateRock::execute(Spine*) const=0x800F6470
NrvPoltaBattleLv2::PoltaBattleLv2NrvGenerateGroundRock::execute(Spine*) const=0x800F6480
NrvPoltaBattleLv2::PoltaBattleLv2NrvAttackGround::execute(Spine*) const=0x800F6490
NrvPoltaBattleLv2::PoltaBattleLv2NrvPunch::execute(Spine*) const=0x800F64E0
NrvPoltaBattleLv2::PoltaBattleLv2NrvWait::execute(Spine*) const=0x800F6530
PoltaDemo::__ct(Polta*)=0x800F6580
PoltaDemo::init(void)=0x800F65E0
PoltaDemo::control(void)=0x800F65F0
PoltaDemo::startOpeningDemo(void)=0x800F6600
PoltaDemo::startPowerUpDemo(void)=0x800F6610
PoltaDemo::startDownDemo(void)=0x800F6620
PoltaDemo::startDemoSetting(void)=0x800F6630
PoltaDemo::startTryDemo(const char*, const Nerve*)=0x800F6760
PoltaDemo::exeTryStartDemo(void)=0x800F67C0
PoltaDemo::exeOpeningDemo(void)=0x800F6810
PoltaDemo::exePowerUpDemo(void)=0x800F69C0
PoltaDemo::exeDownDemo(void)=0x800F6C40
PoltaDemo::__dt(void)=0x800F6DB0
short::(nit_\PoltaDemo_cpp)=0x800F6E10
NrvPoltaDemo::PoltaDemoNrvTryStartDemo::__ct(void)=0x800F6E60
NrvPoltaDemo::PoltaDemoNrvOpeningDemo::__ct(void)=0x800F6E70
NrvPoltaDemo::PoltaDemoNrvPowerUpDemo::__ct(void)=0x800F6E80
NrvPoltaDemo::PoltaDemoNrvDownDemo::__ct(void)=0x800F6E90
NrvPoltaDemo::PoltaDemoNrvDownDemo::execute(Spine*) const=0x800F6EC0
NrvPoltaDemo::PoltaDemoNrvPowerUpDemo::execute(Spine*) const=0x800F6ED0
NrvPoltaDemo::PoltaDemoNrvOpeningDemo::execute(Spine*) const=0x800F6EE0
NrvPoltaDemo::PoltaDemoNrvTryStartDemo::execute(Spine*) const=0x800F6EF0
PoltaFunction::onMovement(Polta*)=0x800F6F00
PoltaFunction::emitEffectShadow(Polta*)=0x800F6F90
PoltaFunction::getLeftArmActor(Polta*)=0x800F6FA0
PoltaFunction::getRightArmActor(Polta*, _1)=0x800F6FB0
PoltaFunction::isCoreSensor(const Polta*, const HitSensor*)=0x800F6FC0
PoltaFunction::isBodySensor(const Polta*, const HitSensor*)=0x800F6FD0
PoltaFunction::isArmSensor(const Polta*, const HitSensor*)=0x800F6FE0
PoltaFunction::isLeftArmSensor(const Polta*, const HitSensor*)=0x800F7050
PoltaFunction::isRightArmSensor(const Polta*, const HitSensor*)=0x800F7060
PoltaFunction::isHeadSensor(const Polta*, const HitSensor*)=0x800F7070
PoltaFunction::setScreamSensorSize(Polta*, float)=0x800F7080
PoltaFunction::attackScreamSensor(Polta*, HitSensor*, HitSensor*)=0x800F7090
PoltaFunction::startAction(Polta*, const char*, bool)=0x800F7100
PoltaFunction::startBckBody(Polta*, const char*)=0x800F7160
PoltaFunction::setBodyHP(Polta*, long)=0x800F7170
PoltaFunction::damageLeftArm(Polta*)=0x800F7270
PoltaFunction::damageRightArm(Polta*)=0x800F7280
PoltaFunction::requestStartControllArm(Polta*)=0x800F7290
PoltaFunction::startArm(Polta*)=0x800F72D0
PoltaFunction::breakLeftArm(Polta*)=0x800F7310
PoltaFunction::breakRightArm(Polta*)=0x800F7320
PoltaFunction::killLeftArm(Polta*)=0x800F7330
PoltaFunction::killRightArm(Polta*)=0x800F7350
PoltaFunction::isBrokenLeftArm(Polta*)=0x800F7370
PoltaFunction::isBrokenRightArm(Polta*)=0x800F7380
PoltaFunction::isEnableAttackRightArm(Polta*)=0x800F7390
PoltaFunction::isEnableAttackLeftArm(Polta*)=0x800F73A0
PoltaFunction::isMaxGenerateBombTeresa(Polta*)=0x800F73B0
PoltaFunction::getCountDeadGroundRock(Polta*)=0x800F73E0
PoltaFunction::appearGroundRock(Polta*, float, float)=0x800F7420
PoltaFunction::appearRockCircle(Polta*, const JGeometry::TVec3<float>&, float, long, long, long)=0x800F7560
PoltaFunction::appearWhiteRockCircle(Polta*, const JGeometry::TVec3<float>&, float, long, long)=0x800F77C0
PoltaFunction::appearBlackRockCircle(Polta*, const JGeometry::TVec3<float>&, float, long, long)=0x800F77D0
PoltaFunction::appearYellowRockCircle(Polta*, const JGeometry::TVec3<float>&, float, long, long)=0x800F77E0
PoltaFunction::appearBombTeresaFromRoot(Polta*, float, float, long)=0x800F77F0
DeriveActorGroup<BombTeresa>::getDeadMember(void) const=0x800F7870
PoltaFunction::appearBombTeresaNormal(Polta*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800F78C0
PoltaFunction::disperseBombTeresa(Polta*)=0x800F7920
PoltaFunction::breakGroundRock(Polta*)=0x800F7930
PoltaFunction::killBombTeresa(Polta*)=0x800F7940
PoltaFunction::killPoltaRock(Polta*)=0x800F7950
PoltaFunction::killGroundRock(Polta*)=0x800F7960
PoltaGroundRock::__ct(const char*)=0x800F7970
PoltaGroundRock::init(const JMapInfoIter&)=0x800F79E0
PoltaGroundRock::initBreakModel(void)=0x800F7A70
PoltaGroundRock::control(void)=0x800F7AF0
PoltaGroundRock::calcAndSetBaseMtx(void)=0x800F7B00
PoltaGroundRock::start(LiveActor*, const JGeometry::TVec3<float>&)=0x800F7B40
PoltaGroundRock::requestBreak(void)=0x800F7C20
PoltaGroundRock::attackSensor(HitSensor*, HitSensor*)=0x800F7C60
PoltaGroundRock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F7CD0
PoltaGroundRock::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F7D60
PoltaGroundRock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x800F7E00
PoltaGroundRock::exeSign(void)=0x800F7E80
PoltaGroundRock::exeJut(void)=0x800F7F00
PoltaGroundRock::exeWait(void)=0x800F7FC0
PoltaGroundRock::exeBreak(void)=0x800F8020
PoltaGroundRock::isEnableAttack(void) const=0x800F8110
PoltaGroundRock::isEnableBreak(void) const=0x800F8120
PoltaGroundRock::__dt(void)=0x800F8150
short::(nit_\PoltaGroundRock_cpp)=0x800F81B0
NrvPoltaGroundRock::PoltaGroundRockNrvSign::__ct(void)=0x800F81F0
NrvPoltaGroundRock::PoltaGroundRockNrvJut::__ct(void)=0x800F8200
NrvPoltaGroundRock::PoltaGroundRockNrvWait::__ct(void)=0x800F8210
NrvPoltaGroundRock::PoltaGroundRockNrvBreak::__ct(void)=0x800F8220
NrvPoltaGroundRock::PoltaGroundRockNrvBreak::execute(Spine*) const=0x800F8230
NrvPoltaGroundRock::PoltaGroundRockNrvWait::execute(Spine*) const=0x800F8240
NrvPoltaGroundRock::PoltaGroundRockNrvJut::execute(Spine*) const=0x800F8250
NrvPoltaGroundRock::PoltaGroundRockNrvSign::execute(Spine*) const=0x800F8260
PoltaGroundRockHolder::__ct(void)=0x800F8270
DeriveActorGroup<PoltaGroundRock>::__dt(void)=0x800F8310
PoltaGroundRockHolder::breakAll(void)=0x800F8370
PoltaGroundRockHolder::__dt(void)=0x800F83D0
PoltaRock::__ct(const char*)=0x800F8430
PoltaRock::init(const JMapInfoIter&)=0x800F84B0
PoltaRock::kill(void)=0x800F8550
PoltaRock::control(void)=0x800F85E0
PoltaRock::calcAndSetBaseMtx(void)=0x800F85F0
PoltaRock::start(Polta*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x800F8630
PoltaRock::setColorWhite(void)=0x800F86B0
PoltaRock::setColorBlack(void)=0x800F8700
PoltaRock::setColorYellow(void)=0x800F8750
PoltaRock::attackSensor(HitSensor*, HitSensor*)=0x800F87A0
PoltaRock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800F8830
PoltaRock::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x800F88E0
PoltaRock::exeFloat(void)=0x800F8950
PoltaRock::exeSign(void)=0x800F8A90
PoltaRock::exeMove(void)=0x800F8BA0
PoltaRock::generateKill(void)=0x800F8D50
PoltaRock::isEnableAttack(void) const=0x800F8DE0
PoltaRock::isEnableExplosion(void) const=0x800F8E40
PoltaRock::__dt(void)=0x800F8F30
short::(nit_\PoltaRock_cpp)=0x800F8F90
NrvPoltaRock::PoltaRockNrvFloat::__ct(void)=0x800F8FD0
NrvPoltaRock::PoltaRockNrvSign::__ct(void)=0x800F8FE0
NrvPoltaRock::PoltaRockNrvMove::__ct(void)=0x800F8FF0
NrvPoltaRock::PoltaRockNrvMove::execute(Spine*) const=0x800F9060
NrvPoltaRock::PoltaRockNrvSign::execute(Spine*) const=0x800F9070
NrvPoltaRock::PoltaRockNrvFloat::execute(Spine*) const=0x800F9080
PoltaRockHolder::__ct(void)=0x800F9090
DeriveActorGroup<PoltaRock>::__dt(void)=0x800F9130
PoltaRockHolder::__dt(void)=0x800F9190
PoltaSensorCtrl::__ct(Polta*)=0x800F91F0
PoltaSensorCtrl::getSensorCount(void) const=0x800F9220
PoltaSensorCtrl::setScreamSensorSize(float)=0x800F9230
PoltaSensorCtrl::initSensor(void)=0x800F9250
PoltaSensorCtrl::isCoreSensor(const HitSensor*) const=0x800F94C0
PoltaSensorCtrl::isBodySensor(const HitSensor*) const=0x800F94E0
PoltaSensorCtrl::isLeftArmSensor(const HitSensor*) const=0x800F9520
PoltaSensorCtrl::isRightArmSensor(const HitSensor*) const=0x800F9560
PoltaSensorCtrl::isHeadSensor(const HitSensor*) const=0x800F95A0
PoltaSensorCtrl::isScreamSensor(const HitSensor*) const=0x800F95C0
PoltaStateAttackGround::__ct(Polta*)=0x800F95E0
PoltaStateAttackGround::appear(void)=0x800F9690
PoltaStateAttackGround::exeStart(void)=0x800F96B0
PoltaStateAttackGround::exeAttack(void)=0x800F97B0
PoltaStateAttackGround::exeToWait(void)=0x800F98C0
PoltaStateAttackGround::isEnableAttack(const HitSensor*) const=0x800F9930
PoltaStateAttackGround::__dt(void)=0x800F9980
short::(nit_\PoltaStateAttackGround_cpp)=0x800F99E0
NrvPoltaStateAttackGround::PoltaStateAttackGroundNrvStart::__ct(void)=0x800F9A20
NrvPoltaStateAttackGround::PoltaStateAttackGroundNrvAttack::__ct(void)=0x800F9A30
NrvPoltaStateAttackGround::PoltaStateAttackGroundNrvToWait::__ct(void)=0x800F9A40
NrvPoltaStateAttackGround::PoltaStateAttackGroundNrvToWait::execute(Spine*) const=0x800F9A50
NrvPoltaStateAttackGround::PoltaStateAttackGroundNrvAttack::execute(Spine*) const=0x800F9A60
NrvPoltaStateAttackGround::PoltaStateAttackGroundNrvStart::execute(Spine*) const=0x800F9A70
PoltaStateGenerateRock::__ct(Polta*)=0x800F9A80
PoltaStateGenerateRock::appear(void)=0x800F9B10
PoltaStateGenerateRock::exeSign(void)=0x800F9B60
PoltaStateGenerateRock::exeGenerate(void)=0x800F9BF0
PoltaStateGenerateRock::exeEnd(void)=0x800F9D60
PoltaStateGenerateRock::__dt(void)=0x800F9DF0
short::(nit_\PoltaStateGenerateRock_cpp)=0x800F9E50
NrvPoltaStateGenerateRock::PoltaStateGenerateRockNrvSign::__ct(void)=0x800F9E90
NrvPoltaStateGenerateRock::PoltaStateGenerateRockNrvGenerate::__ct(void)=0x800F9EA0
NrvPoltaStateGenerateRock::PoltaStateGenerateRockNrvEnd::__ct(void)=0x800F9EB0
NrvPoltaStateGenerateRock::PoltaStateGenerateRockNrvEnd::execute(Spine*) const=0x800F9EC0
NrvPoltaStateGenerateRock::PoltaStateGenerateRockNrvGenerate::execute(Spine*) const=0x800F9ED0
NrvPoltaStateGenerateRock::PoltaStateGenerateRockNrvSign::execute(Spine*) const=0x800F9EE0
PoltaStateGroundRockAttack::__ct(Polta*)=0x800F9EF0
PoltaStateGroundRockAttack::appear(void)=0x800F9F70
PoltaStateGroundRockAttack::exeSign(void)=0x800F9F80
PoltaStateGroundRockAttack::exeGenerate(void)=0x800FA010
PoltaStateGroundRockAttack::exeEnd(void)=0x800FA200
PoltaStateGroundRockAttack::__dt(void)=0x800FA270
short::(nit_\PoltaStateGroundRockAttack_cpp)=0x800FA2D0
NrvPoltaStateGenerateBombTeresa::PoltaStateGroundRockAttackNrvSign::__ct(void)=0x800FA310
NrvPoltaStateGenerateBombTeresa::PoltaStateGroundRockAttackNrvGenerate::__ct(void)=0x800FA320
NrvPoltaStateGenerateBombTeresa::PoltaStateGroundRockAttackNrvEnd::__ct(void)=0x800FA330
NrvPoltaStateGenerateBombTeresa::PoltaStateGroundRockAttackNrvEnd::execute(Spine*) const=0x800FA340
NrvPoltaStateGenerateBombTeresa::PoltaStateGroundRockAttackNrvGenerate::execute(Spine*) const=0x800FA350
NrvPoltaStateGenerateBombTeresa::PoltaStateGroundRockAttackNrvSign::execute(Spine*) const=0x800FA360
PoltaStatePunch::__ct(Polta*)=0x800FA370
PoltaStatePunch::appear(void)=0x800FA3F0
PoltaStatePunch::getAttackActor(void)=0x800FA410
PoltaStatePunch::exeStart(void)=0x800FA430
PoltaStatePunch::exeAttack(void)=0x800FA520
PoltaStatePunch::exeToWait(void)=0x800FA600
PoltaStatePunch::isEnableAttack(const HitSensor*) const=0x800FA6D0
PoltaStatePunch::isEnablePunchArm(void) const=0x800FA750
PoltaStatePunch::__dt(void)=0x800FA770
short::(nit_\PoltaStatePunch_cpp)=0x800FA7D0
NrvPoltaStatePunch::PoltaStatePunchNrvStart::__ct(void)=0x800FA810
NrvPoltaStatePunch::PoltaStatePunchNrvAttack::__ct(void)=0x800FA820
NrvPoltaStatePunch::PoltaStatePunchNrvToWait::__ct(void)=0x800FA830
NrvPoltaStatePunch::PoltaStatePunchNrvToWait::execute(Spine*) const=0x800FA840
NrvPoltaStatePunch::PoltaStatePunchNrvAttack::execute(Spine*) const=0x800FA850
NrvPoltaStatePunch::PoltaStatePunchNrvStart::execute(Spine*) const=0x800FA860
PoltaStateStagger::__ct(Polta*)=0x800FA870
PoltaStateStagger::setActionName(const char*)=0x800FA8F0
PoltaStateStagger::appear(void)=0x800FA900
PoltaStateStagger::exeWait(void)=0x800FA910
PoltaStateStagger::isEnableSensor(void) const=0x800FAAE0
PoltaStateStagger::__dt(void)=0x800FAAF0
short::(nit_\PoltaStateStagger_cpp)=0x800FAB50
NrvPoltaStateStagger::PoltaStateStaggerNrvWait::__ct(void)=0x800FAB60
NrvPoltaStateStagger::PoltaStateStaggerNrvWait::execute(Spine*) const=0x800FAB70
PoltaWaitStart::__ct(Polta*)=0x800FAB80
PoltaWaitStart::appear(void)=0x800FABD0
PoltaWaitStart::__dt(void)=0x800FAC20
Sandy::__ct(const char*)=0x800FAC80
Sandy::init(const JMapInfoIter&)=0x800FAD40
Sandy::movement(void)=0x800FB0E0
Sandy::appear(void)=0x800FB1C0
Sandy::kill(void)=0x800FB250
Sandy::control(void)=0x800FB590
Sandy::attackSensor(HitSensor*, HitSensor*)=0x800FB5D0
Sandy::calcAndSetBaseMtx(void)=0x800FB690
Sandy::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x800FB700
Sandy::__dt(void)=0x800FB810
TwoLegs::__ct(const char*)=0x80102CA0
TwoLegs::init(const JMapInfoIter&)=0x80102D40
TwoLegs::kill(void)=0x80103110
TwoLegs::control(void)=0x80103300
TwoLegs::calcAndSetBaseMtx(void)=0x80103350
TwoLegs::attackSensor(HitSensor*, HitSensor*)=0x80103420
TwoLegs::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801034C0
TwoLegs::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80103570
MR::FunctorV0M<TwoLegs*,M7TwoLegsFPCvPv_v>::__cl(void) const=0x80103F20
MR::FunctorV0M<TwoLegs*,M7TwoLegsFPCvPv_v>::clone(JKRHeap*) const=0x80103F50
TwoLegs::__dt(void)=0x80103FC0
short::(nit_\TwoLegs_cpp)=0x80104020
TwoLegsBullet::__ct(TwoLegs*, const char*)=0x801042E0
TwoLegsBullet::init(const JMapInfoIter&)=0x80104390
TwoLegsBullet::appear(void)=0x801044D0
TwoLegsBullet::kill(void)=0x80104560
TwoLegsBullet::control(void)=0x80104600
TwoLegsBullet::calcAndSetBaseMtx(void)=0x80104670
TwoLegsBullet::attackSensor(HitSensor*, HitSensor*)=0x80104750
TwoLegsBullet::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80104890
TwoLegsBullet::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80104990
TwoLegsBullet::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80104A10
TwoLegsBullet::__dt(void)=0x80105340
short::(nit_\TwoLegsBullet_cpp)=0x801053A0
JGeometry::TVec3<float>::add(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80105F00
Yukkina::__ct(const char*)=0x8010A3D0
Yukkina::init(const JMapInfoIter&)=0x8010A4E0
Yukkina::kill(void)=0x8010A6A0
Yukkina::control(void)=0x8010A6B0
Yukkina::calcAndSetBaseMtx(void)=0x8010A750
Yukkina::attackSensor(HitSensor*, HitSensor*)=0x8010A760
Yukkina::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8010A820
TriangleFilterDelegator<Yukkina>::isInvalidTriangle(const Triangle*) const=0x8010B690
Yukkina::__dt(void)=0x8010B6C0
short::(nit_\Yukkina_cpp)=0x8010B720
YukkinaGroundSnow::__ct(const char*)=0x8010B990
YukkinaGroundSnow::init(const JMapInfoIter&)=0x8010B9E0
YukkinaGroundSnow::control(void)=0x8010BA80
YukkinaGroundSnow::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8010BA90
YukkinaGroundSnow::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8010BAE0
YukkinaGroundSnow::exeAppear(void)=0x8010BBA0
YukkinaGroundSnow::exeWait(void)=0x8010BC10
YukkinaGroundSnow::exeBreak(void)=0x8010BC70
YukkinaGroundSnow::__dt(void)=0x8010BD10
short::(nit_\YukkinaGroundSnow_cpp)=0x8010BD70
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvHidden::__ct(void)=0x8010BDB0
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvAppear::__ct(void)=0x8010BDC0
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvWait::__ct(void)=0x8010BDD0
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvBreak::__ct(void)=0x8010BDE0
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvBreak::execute(Spine*) const=0x8010BDF0
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvWait::execute(Spine*) const=0x8010BE00
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvAppear::execute(Spine*) const=0x8010BE10
NrvYukkinaGroundSnow::YukkinaGroundSnowNrvHidden::execute(Spine*) const=0x8010BE20
CamHeliEffector::__ct(void)=0x8010BE80
CamHeliEffector::update(CameraMan*)=0x8010BEA0
CameraTargetObj::isCameraStateOn(unsigned long) const=0x8010C1C0
JGeometry::TQuat4<float>::transform(JGeometry::TVec3<float>&) const=0x8010C1D0
CamKarikariEffector::__ct(void)=0x8010C300
CamKarikariEffector::update(CameraMan*)=0x8010C310
JGeometry::TQuat4<float>::transform(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>&) const=0x8010C770
CamTranslatorAnim::setParam(const CameraParamChunk*)=0x8010C8B0
CamTranslatorAnim::getCamera(void) const=0x8010C8D0
CamTranslatorAnim::getAnimFrame(const CameraParamChunk*) const=0x8010C8E0
CamTranslatorBehind::setParam(const CameraParamChunk*)=0x8010C8F0
CamTranslatorBehind::getCamera(void) const=0x8010C950
CamTranslatorBlackHole::setParam(const CameraParamChunk*)=0x8010C960
CamTranslatorBlackHole::getCamera(void) const=0x8010C9D0
CamTranslatorCharmedFix::setParam(const CameraParamChunk*)=0x8010C9E0
CamTranslatorCharmedFix::getCamera(void) const=0x8010CA90
CamTranslatorCharmedVecReg::setParam(const CameraParamChunk*)=0x8010CAA0
CamTranslatorCharmedVecReg::getCamera(void) const=0x8010CB80
CamTranslatorCharmedVecRegTower::setParam(const CameraParamChunk*)=0x8010CB90
CamTranslatorCharmedVecRegTower::getCamera(void) const=0x8010CC90
CamTranslatorCubePlanet::setParam(const CameraParamChunk*)=0x8010CCA0
CamTranslatorCubePlanet::getCamera(void) const=0x8010CCE0
CamTranslatorDPD::setParam(const CameraParamChunk*)=0x8010CCF0
CamTranslatorDPD::getCamera(void) const=0x8010CD50
CamTranslatorDead::__ct(CameraDead*)=0x8010CD60
CamTranslatorDead::setParam(const CameraParamChunk*)=0x8010CD80
CamTranslatorDead::getCamera(void) const=0x8010CDB0
CamTranslatorFix::setParam(const CameraParamChunk*)=0x8010CDC0
CamTranslatorFix::getCamera(void) const=0x8010CE50
CamTranslatorFixedPoint::setParam(const CameraParamChunk*)=0x8010CE60
CamTranslatorFixedPoint::getCamera(void) const=0x8010CE80
CamTranslatorFixedThere::setParam(const CameraParamChunk*)=0x8010CE90
CamTranslatorFixedThere::getCamera(void) const=0x8010CEC0
CamTranslatorFollow::__ct(CameraFollow*)=0x8010CED0
CamTranslatorFollow::setParam(const CameraParamChunk*)=0x8010CEF0
CamTranslatorFollow::getCamera(void) const=0x8010CF20
CamTranslatorFooFighter::__ct(CameraFooFighter*)=0x8010CF30
CamTranslatorFooFighter::setParam(const CameraParamChunk*)=0x8010CF50
CamTranslatorFooFighter::getCamera(void) const=0x8010CF80
CamTranslatorFooFighterPlanet::__ct(CameraFooFighterPlanet*)=0x8010CF90
CamTranslatorFooFighterPlanet::setParam(const CameraParamChunk*)=0x8010CFB0
CamTranslatorFooFighterPlanet::getCamera(void) const=0x8010CFE0
CamTranslatorFrontAndBack::setParam(const CameraParamChunk*)=0x8010CFF0
CamTranslatorFrontAndBack::getCamera(void) const=0x8010D0F0
CamTranslatorFreeze::setParam(const CameraParamChunk*)=0x8010D100
CamTranslatorFreeze::getCamera(void) const=0x8010D110
CamTranslatorGround::setParam(const CameraParamChunk*)=0x8010D120
CamTranslatorGround::getCamera(void) const=0x8010D170
CamTranslatorInnerCylinder::setParam(const CameraParamChunk*)=0x8010D180
CamTranslatorInnerCylinder::getCamera(void) const=0x8010D270
CamTranslatorInwardSphere::setParam(const CameraParamChunk*)=0x8010D280
CamTranslatorInwardSphere::getCamera(void) const=0x8010D2B0
CamTranslatorInwardTower::setParam(const CameraParamChunk*)=0x8010D2C0
CamTranslatorInwardTower::getCamera(void) const=0x8010D390
CamTranslatorMedianPlanet::__ct(CameraMedianPlanet*)=0x8010D3A0
CamTranslatorMedianPlanet::setParam(const CameraParamChunk*)=0x8010D3C0
CamTranslatorMedianPlanet::getCamera(void) const=0x8010D4F0
CamTranslatorMedianTower::setParam(const CameraParamChunk*)=0x8010D500
CamTranslatorMedianTower::getCamera(void) const=0x8010D5C0
CamTranslatorMtxRegParallel::setParam(const CameraParamChunk*)=0x8010D5D0
CamTranslatorMtxRegParallel::getCamera(void) const=0x8010D660
CamTranslatorObjParallel::setParam(const CameraParamChunk*)=0x8010D670
CamTranslatorObjParallel::getCamera(void) const=0x8010D6A0
CamTranslatorParallel::setParam(const CameraParamChunk*)=0x8010D6B0
CamTranslatorParallel::getCamera(void) const=0x8010D720
CamTranslatorRaceFollow::setParam(const CameraParamChunk*)=0x8010D730
CamTranslatorRaceFollow::getCamera(void) const=0x8010D780
CamTranslatorRailDemo::setParam(const CameraParamChunk*)=0x8010D790
CamTranslatorRailDemo::getCamera(void) const=0x8010D7F0
CamTranslatorRailFollow::setParam(const CameraParamChunk*)=0x8010D800
CamTranslatorRailFollow::getCamera(void) const=0x8010D860
CamTranslatorRailWatch::setParam(const CameraParamChunk*)=0x8010D870
CamTranslatorRailWatch::getCamera(void) const=0x8010D8D0
CamTranslatorSlide::setParam(const CameraParamChunk*)=0x8010D8E0
CamTranslatorSlide::getCamera(void) const=0x8010DB10
CamTranslatorSphereTrundle::setParam(const CameraParamChunk*)=0x8010DB20
CamTranslatorSphereTrundle::getCamera(void) const=0x8010DBD0
CamTranslatorSpiral::setParam(const CameraParamChunk*)=0x8010DBE0
CamTranslatorSpiral::getCamera(void) const=0x8010DC40
CamTranslatorTalk::setParam(const CameraParamChunk*)=0x8010DC50
CamTranslatorTalk::getCamera(void) const=0x8010DC70
CamTranslatorTower::setParam(const CameraParamChunk*)=0x8010DC80
CamTranslatorTower::getCamera(void) const=0x8010DD20
CamTranslatorTowerPos::setParam(const CameraParamChunk*)=0x8010DD30
CamTranslatorTowerPos::getCamera(void) const=0x8010DDF0
CamTranslatorTripodPlanet::setParam(const CameraParamChunk*)=0x8010DE00
CamTranslatorTripodPlanet::getCamera(void) const=0x8010DED0
CamTranslatorTrundle::setParam(const CameraParamChunk*)=0x8010DEE0
CamTranslatorTrundle::getCamera(void) const=0x8010DFC0
CamTranslatorTwistedPassage::setParam(const CameraParamChunk*)=0x8010DFD0
CamTranslatorTwistedPassage::getCamera(void) const=0x8010E030
CamTranslatorWaterFollow::__ct(CameraWaterFollow*)=0x8010E040
CamTranslatorWaterFollow::setParam(const CameraParamChunk*)=0x8010E060
CamTranslatorWaterFollow::getCamera(void) const=0x8010E090
CamTranslatorWaterPlanet::__ct(CameraWaterPlanet*)=0x8010E0A0
CamTranslatorWaterPlanet::setParam(const CameraParamChunk*)=0x8010E0C0
CamTranslatorWaterPlanet::getCamera(void) const=0x8010E0F0
CamTranslatorWaterPlanetBoss::__ct(CameraWaterPlanetBoss*)=0x8010E100
CamTranslatorWaterPlanetBoss::setParam(const CameraParamChunk*)=0x8010E120
CamTranslatorWaterPlanetBoss::getCamera(void) const=0x8010E1B0
CamTranslatorWonderPlanet::__ct(CameraWonderPlanet*)=0x8010E1C0
CamTranslatorWonderPlanet::setParam(const CameraParamChunk*)=0x8010E1E0
CamTranslatorWonderPlanet::getCamera(void) const=0x8010E210
Camera::__ct(const char*)=0x8010E450
Camera::setZoneMtx(long)=0x8010E4C0
Camera::createTranslator(void)=0x8010E560
Camera::createVPanObj(void)=0x8010E5B0
CamTranslatorDummy::getCamera(void) const=0x8010E600
CamTranslatorDummy::setParam(const CameraParamChunk*)=0x8010E610
Camera::isEnableToReset(void) const=0x8010E620
Camera::isEnableToRoundRight(void) const=0x8010E630
Camera::isEnableToRoundLeft(void) const=0x8010E640
Camera::roundRight(void)=0x8010E650
Camera::roundLeft(void)=0x8010E660
Camera::isCorrectingErpPositionOff(void) const=0x8010E670
Camera::isSubjectiveCameraOff(void) const=0x8010E680
Camera::isZeroFrameMoveOff(void) const=0x8010E6A0
Camera::isCollisionOff(void) const=0x8010E6B0
Camera::isInterpolationOff(void) const=0x8010E6C0
Camera::reset(void)=0x8010E6D0
Camera::__dt(void)=0x8010E6E0
CamAnmDataAccessor::set(void*, void*)=0x8010E740
CamAnmDataAccessor::getPos(JGeometry::TVec3<float>*, float) const=0x8010E750
CamAnmDataAccessor::getWatchPos(JGeometry::TVec3<float>*, float) const=0x8010E7F0
CamAnmDataAccessor::getTwist(float) const=0x8010E890
CamAnmDataAccessor::getFovy(float) const=0x8010E8A0
CamAnmDataAccessor::get(float, unsigned long, unsigned long) const=0x8010E8B0
KeyCamAnmDataAccessor::set(void*, void*)=0x8010E9C0
KeyCamAnmDataAccessor::getPos(JGeometry::TVec3<float>*, float) const=0x8010E9D0
KeyCamAnmDataAccessor::getWatchPos(JGeometry::TVec3<float>*, float) const=0x8010EA80
KeyCamAnmDataAccessor::getTwist(float) const=0x8010EB30
KeyCamAnmDataAccessor::getFovy(float) const=0x8010EB50
KeyCamAnmDataAccessor::get(float, unsigned long, unsigned long, unsigned long) const=0x8010EB70
KeyCamAnmDataAccessor::searchKeyFrameIndex(float, unsigned long, unsigned long, unsigned long) const=0x8010EBA0
KeyCamAnmDataAccessor::get3f(float, unsigned long, unsigned long) const=0x8010EC00
KeyCamAnmDataAccessor::get4f(float, unsigned long, unsigned long) const=0x8010EC90
KeyCamAnmDataAccessor::calcHermite(float, float, float, float, float, float, float) const=0x8010ED20
CameraAnim::__ct(const char*)=0x8010ED70
CameraAnim::reset(void)=0x8010EE50
CameraAnim::calc(void)=0x8010EEE0
CameraAnim::setParam(unsigned char*, float)=0x8010F1E0
CameraAnim::isAnimEnd(void) const=0x8010F240
CameraAnim::getAnimFrame(unsigned char*)=0x8010F2B0
CameraAnim::createTranslator(void)=0x8010F390
CameraAnim::loadBin(unsigned char*)=0x8010F3E0
CameraAnim::__dt(void)=0x8010F550
CamAnmDataAccessor::__dt(void)=0x8010F5B0
KeyCamAnmDataAccessor::__dt(void)=0x8010F5F0
CameraBehind::__ct(const char*)=0x8010F630
CameraBehind::reset(void)=0x8010F690
CameraBehind::calc(void)=0x8010F6E0
CameraBehind::createTranslator(void)=0x8010F740
CameraBehind::calcPosAndUp(float)=0x8010F790
CameraBehind::__dt(void)=0x8010F9C0
CameraBlackHole::__ct(const char*)=0x8010FA20
CameraBlackHole::reset(void)=0x8010FA90
CameraBlackHole::calc(void)=0x8010FCF0
CameraBlackHole::createTranslator(void)=0x8010FD40
CameraBlackHole::__dt(void)=0x8010FD90
MR::crossToPolar(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float*, float*, float*)=0x8010FDF0
MR::polarToCross(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float, float, float)=0x8010FEE0
MR::polarToCrossDegree(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float, float, float)=0x8010FFD0
MR::diffRadian(float, float)=0x801100C0
MR::diffRadianAroundAxis(float*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80110180
MR::projectVecOnPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801102C0
CameraCharmedFix::__ct(const char*)=0x80110380
CameraCharmedFix::reset(void)=0x801103F0
CameraCharmedFix::calc(void)=0x80110460
CameraCharmedFix::createTranslator(void)=0x80110740
CameraCharmedFix::__dt(void)=0x80110790
CameraCharmedVecReg::__ct(const char*)=0x801107F0
CameraCharmedVecReg::reset(void)=0x80110860
CameraCharmedVecReg::calc(void)=0x801108E0
CameraCharmedVecReg::createTranslator(void)=0x80110D50
CameraCharmedVecReg::__dt(void)=0x80110DA0
CameraCharmedVecRegTower::__ct(const char*)=0x80110E00
CameraCharmedVecRegTower::reset(void)=0x80110E50
CameraCharmedVecRegTower::calc(void)=0x80110EC0
CameraCharmedVecRegTower::createTranslator(void)=0x80111360
CameraCharmedVecRegTower::__dt(void)=0x801113B0
CameraContext::__ct(void)=0x80111410
CameraContext::initParams(void)=0x80111460
JGeometry::SMatrix34C<float>::set(const JGeometry::SMatrix34C<float>&)=0x801116F0
CameraContext::getViewMtx(void) const=0x80111730
CameraContext::getInvViewMtx(void) const=0x80111740
CameraContext::getAspect(void) const=0x80111750
CameraContext::setViewMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, bool, bool, const JGeometry::TVec3<float>&)=0x80111820
CameraContext::setNearZ(float)=0x80111870
CameraContext::setFovy(float)=0x80111880
CameraContext::setShakeOffset(float, float)=0x80111890
CameraContext::updateProjectionMtx(void)=0x801118A0
CameraContext::__dt(void)=0x80111BA0
CameraCover::__ct(const char*)=0x80111C00
CameraCover::movement(void)=0x80111CB0
CameraCover::draw(void) const=0x80111D50
CameraCover::cover(unsigned long)=0x80111DD0
CameraCover::isCameraHopping(void) const=0x80111DE0
CameraCover::copyCamera(void)=0x80111E00
CameraCover::__dt(void)=0x80111E60
short::(nit_\CameraCover_cpp)=0x80111EC0
JGeometry::TUtil<float>::PI(void)=0x80111F00
CameraCubePlanet::__ct(const char*)=0x80111F10
CameraCubePlanet::reset(void)=0x80111F90
CameraCubePlanet::calc(void)=0x80111FF0
CameraCubePlanet::createTranslator(void)=0x80112340
CameraCubePlanet::isEnableToReset(void) const=0x80112390
CameraCubePlanet::isEnableToRoundRight(void) const=0x801123A0
CameraCubePlanet::isEnableToRoundLeft(void) const=0x801123B0
CameraCubePlanet::__dt(void)=0x801123C0
CameraDPD::__ct(const char*)=0x80112420
CameraDPD::reset(void)=0x801124C0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setZDir(const JGeometry::TVec3<float>&)=0x801128C0
CameraDPD::calc(void)=0x801128E0
CameraDPD::createTranslator(void)=0x80112E90
CameraDPD::__dt(void)=0x80112EE0
CameraDead::__ct(const char*)=0x80112F40
CameraDead::reset(void)=0x80112FA0
CameraDead::calc(void)=0x801131C0
CameraTargetObj::getRadius(void) const=0x80113480
CameraDead::createTranslator(void)=0x80113490
CameraDead::isInterpolationOff(void) const=0x801134D0
CameraDead::__dt(void)=0x801134E0
CameraDirector::__ct(const char*)=0x80113540
CameraDirector::init(const JMapInfoIter&)=0x80113870
CameraDirector::movement(void)=0x80113880
CameraPoseParam::copyFrom(const CameraPoseParam&)=0x80113960
CameraDirector::setTarget(CameraTargetObj*)=0x80113A00
CameraDirector::getTarget(void)=0x80113A10
CameraDirector::push(CameraMan*)=0x80113A20
CameraDirector::pop(void)=0x80113AB0
CameraDirector::backLastMtx(void)=0x80113B40
CameraDirector::getCurrentCameraMan(void) const=0x80113BB0
CameraDirector::updateCameraMan(void)=0x80113BD0
CameraDirector::calcPose(void)=0x80113C50
CameraMan::isCollisionOff(void) const=0x80113D50
CameraMan::isCorrectingErpPositionOff(void) const=0x80113D60
CameraMan::isSubjectiveCameraOff(void) const=0x80113D70
CameraMan::isZeroFrameMoveOff(void) const=0x80113D80
CameraDirector::calcSubjective(void)=0x80113D90
CameraDirector::isInterpolationOff(void)=0x801140F0
CameraMan::isInterpolationOff(void) const=0x80114160
CameraDirector::switchAntiOscillation(void)=0x80114170
CameraDirector::createViewMtx(void)=0x801141C0
CameraDirector::checkStartCondition(void)=0x80114230
CameraDirector::startEvent(long, const char*, const CameraTargetArg&, long)=0x801142B0
CameraDirector::endEvent(long, const char*, bool, long)=0x801143A0
CameraDirector::endEventAtLanding(long, const char*, long)=0x801144A0
CameraDirector::getEventParameter(long, const char*)=0x80114530
CameraDirector::requestToResetCameraMan(void)=0x801145A0
CameraDirector::setInterpolation(unsigned long)=0x801145B0
CameraDirector::cover(unsigned long)=0x80114620
CameraDirector::closeCreatingCameraChunk(void)=0x80114630
CameraDirector::initCameraCodeCollection(const char*, long)=0x801146B0
CameraDirector::registerCameraCode(unsigned long)=0x801146C0
CameraDirector::termCameraCodeCollection(void)=0x801146D0
CameraDirector::declareEvent(long, const char*)=0x801146E0
CameraDirector::started(void)=0x80114750
CameraDirector::setTargetActor(const LiveActor*)=0x80114760
CameraDirector::setTargetPlayer(const MarioActor*)=0x80114770
CameraDirector::isRotatingHard(void) const=0x80114780
CameraDirector::isSubjectiveCamera(void) const=0x801147C0
CameraDirector::isEnableToControl(void) const=0x801147D0
CameraDirector::isEnableToRoundLeft(void) const=0x80114880
CameraMan::isEnableToRoundLeft(void) const=0x801148B0
CameraDirector::isEnableToRoundRight(void) const=0x801148C0
CameraMan::isEnableToRoundRight(void) const=0x801148F0
CameraDirector::isEnableToReset(void) const=0x80114900
CameraMan::isEnableToReset(void) const=0x80114930
CameraDirector::isEventCameraActive(long, const char*) const=0x80114980
CameraDirector::isEventCameraActive(void) const=0x80114A00
CameraDirector::startStartPosCamera(bool)=0x80114B80
CameraDirector::isInterpolatingNearlyEnd(void) const=0x80114B90
CameraDirector::isForceCameraChange(void) const=0x80114BF0
CameraDirector::getDefaultFovy(void) const=0x80114C00
CameraDirector::startStartAnimCamera(void)=0x80114C10
CameraDirector::isStartAnimCameraEnd(void) const=0x80114C80
CameraDirector::getStartAnimCameraFrame(void) const=0x80114CA0
CameraDirector::endStartAnimCamera(void)=0x80114CC0
CameraDirector::startTalkCamera(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, long)=0x80114D00
CameraDirector::endTalkCamera(bool, long)=0x80114E10
CameraDirector::startSubjectiveCamera(long)=0x80114E30
CameraDirector::endSubjectiveCamera(long)=0x80114ED0
CameraDirector::isAnimCameraEnd(long, const char*) const=0x80114F70
CameraDirector::getAnimCameraFrame(long, const char*) const=0x80114FF0
CameraDirector::pauseOnAnimCamera(long, const char*)=0x80115100
CameraDirector::pauseOffAnimCamera(long, const char*)=0x80115180
CameraDirector::zoomInGameCamera(void)=0x80115200
CameraDirector::zoomOutGameCamera(void)=0x80115210
CameraDirector::checkEndOfEventCamera(void)=0x80115220
CameraDirector::controlCameraSE(void)=0x801152B0
CameraMan::roundLeft(void)=0x80115610
CameraMan::roundRight(void)=0x80115620
CameraDirector::removeEndEventAtLanding(long, const char*)=0x80115630
CameraDirector::calcViewMtxFromPoseParam(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const CameraPoseParam*)=0x80115720
CameraDirector::isPlayableCameraSE(bool)=0x80115930
CameraDirector::resetCameraMan(void)=0x80115A30
CameraDirector::createStartAnimCamera(void)=0x80115BB0
CameraDirector::createTalkCamera(void)=0x80115C30
CameraDirector::createSubjectiveCamera(void)=0x80115CF0
MR::getCameraDirector(void)=0x80115DB0
CameraParamChunkID_Tmp::getBuffer(unsigned long)=0x80115DE0
CameraDirector::__dt(void)=0x80115DF0
CameraFix::__ct(const char*)=0x80115E50
CameraFix::reset(void)=0x80115EE0
CameraFix::calc(void)=0x80115EF0
CameraFix::setParam(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801160D0
CameraFix::createTranslator(void)=0x80116130
CameraFix::__dt(void)=0x80116180
CameraFixedPoint::__ct(const char*)=0x801161E0
CameraFixedPoint::reset(void)=0x80116230
CameraFixedPoint::calc(void)=0x801162C0
CameraFixedPoint::createTranslator(void)=0x801165C0
CameraFixedPoint::setParam(const JGeometry::TVec3<float>&, unsigned long)=0x80116610
CameraFixedPoint::__dt(void)=0x80116630
CameraFixedThere::__ct(const char*)=0x80116690
CameraFixedThere::reset(void)=0x80116700
CameraFixedThere::calc(void)=0x80116770
CameraFixedThere::createTranslator(void)=0x80116830
CameraFixedThere::copyStatusFromPrevCamera(void)=0x80116880
CameraFixedThere::calcEyeDir(JGeometry::TVec3<float>*)=0x801169E0
CameraFixedThere::makeAxisAndRoll(void)=0x80116A70
CameraFixedThere::updateUpVec(const JGeometry::TVec3<float>&)=0x80116BD0
CameraFixedThere::updateNormalUpVec(const JGeometry::TVec3<float>&)=0x80116C50
CameraFixedThere::isCorrectingErpPositionOff(void) const=0x80116E30
CameraFixedThere::__dt(void)=0x80116E40
CameraFollow::__ct(const char*)=0x80116EA0
CameraFollow::reset(void)=0x80116F50
CameraFollow::calc(void)=0x80117070
CameraFollow::setParam(float, float, float, float, float, bool)=0x80117110
CameraFollow::createTranslator(void)=0x80117130
CameraFollow::isEnableToRoundLeft(void) const=0x80117170
CameraFollow::isEnableToRoundRight(void) const=0x801171B0
CameraFollow::calcIdealPos(void)=0x801171F0
CameraFollow::calcRotPos(void)=0x80117390
CameraFollow::constrainDistance(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80117600
CameraFollow::constrainAngleX(float*)=0x80117740
CameraFollow::constrainAngleY(float*, const JGeometry::TVec3<float>&, float)=0x801177A0
CameraFollow::getMagnitudeOfMovingRound(void) const=0x80117870
CameraTargetObj::isJumping(void) const=0x80117960
CameraFollow::checkShiftStateToRound(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80117970
CameraFollow::arrangeHeight(void)=0x80117A90
CameraFollow::reflectRotOffset(void)=0x80117B70
CameraFollow::isWallForward(void) const=0x80117C10
CameraFollow::arrangeLookUp(void)=0x80117CF0
CameraFollow::checkAscent(JGeometry::TVec3<float>*) const=0x80117D50
CameraFollow::arrangeLookDown(void)=0x80117E90
CameraFollow::checkDescent(JGeometry::TVec3<float>*) const=0x80117F50
CameraFollow::startRound(float, float)=0x80118090
CameraFollow::checkValidityOfRound(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80118110
CameraFollow::isUpsideDownByRoll(void) const=0x801182B0
CameraFollow::__dt(void)=0x80118330
short::(nit_\CameraFollow_cpp)=0x80118390
CameraFooFighter::__ct(const char*)=0x801183E0
CameraFooFighter::reset(void)=0x80118450
CameraFooFighter::calc(void)=0x801184E0
CameraFooFighter::createTranslator(void)=0x80118BE0
CameraFooFighter::__dt(void)=0x80118C20
CameraFooFighterPlanet::__ct(const char*)=0x80118C80
CameraFooFighterPlanet::reset(void)=0x80118CE0
CameraFooFighterPlanet::calc(void)=0x80118E70
CameraFooFighterPlanet::createTranslator(void)=0x80119230
CameraFooFighterPlanet::goRoundBehind(JGeometry::TVec3<float>&, JGeometry::TVec3<float>&, JGeometry::TVec3<float>&)=0x80119270
CameraFooFighterPlanet::__dt(void)=0x80119540
CameraFreeze::__ct(const char*)=0x801195A0
CameraFreeze::reset(void)=0x801195E0
CameraFreeze::calc(void)=0x80119670
CameraFreeze::createTranslator(void)=0x80119680
CameraFreeze::isCorrectingErpPositionOff(void)=0x801196D0
CameraFreeze::isSubjectiveCameraOff(void)=0x801196E0
CameraFreeze::__dt(void)=0x801196F0
CameraFrontAndBack::__ct(const char*)=0x80119750
CameraFrontAndBack::reset(void)=0x801197C0
CameraFrontAndBack::calc(void)=0x801197D0
CameraFrontAndBack::createTranslator(void)=0x80119AB0
CameraFrontAndBack::calcBaseQuat(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&)=0x80119B00
CameraFrontAndBack::calcDipQuat(JGeometry::TQuat4<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80119BB0
CameraFrontAndBack::__dt(void)=0x80119D10
CameraGround::__ct(const char*)=0x80119D70
CameraGround::reset(void)=0x80119DF0
CameraGround::calc(void)=0x80119E00
CameraGround::createTranslator(void)=0x8011A060
CameraGround::__dt(void)=0x8011A0B0
CameraHeightArrange::__ct(Camera*)=0x8011A110
CameraHeightArrange::updateJump(void)=0x8011A260
CameraHeightArrange::calcWatchPos(CameraTargetObj*)=0x8011A340
CameraHeightArrange::arrange(void)=0x8011A420
CameraHeightArrange::resetJump(void)=0x8011A4C0
CameraHeightArrange::reset(void)=0x8011A4E0
CameraHeightArrange::resetParameter(void)=0x8011A630
CameraHeightArrange::checkState(void)=0x8011A6B0
CameraHeightArrange::arrangeHeight(void)=0x8011A7F0
CameraHeightArrange::arrangeVPan(void)=0x8011A920
CameraHeightArrange::calcPose(void)=0x8011AA10
CameraHeightArrange::updateUpper(void)=0x8011AB30
CameraTargetObj::isFastRise(void) const=0x8011AD50
CameraHeightArrange::updateLower(void)=0x8011AD60
CameraTargetObj::isFastDrop(void) const=0x8011AF10
CameraHeightArrange::calcOffset(float)=0x8011AF20
CameraHeightArrange::chase(void)=0x8011B0F0
CameraHeightArrange::updateHeightAndOffset(void)=0x8011B1A0
CameraHeightArrange::getGlobalAxis(void)=0x8011B270
CameraHeightArrange::__dt(void)=0x8011B340
@unnamed@CameraHolder_cpp@::createCamera<CameraParallel>(void, _P6Camera)=0x8011B3A0
@unnamed@CameraHolder_cpp@::createCamera<CameraTower>(void, _P6Camera)=0x8011B3E0
@unnamed@CameraHolder_cpp@::createCamera<CameraFollow>(void, _P6Camera)=0x8011B420
@unnamed@CameraHolder_cpp@::createCamera<CameraWonderPlanet>(void, _P6Camera)=0x8011B460
@unnamed@CameraHolder_cpp@::createCamera<CameraFix>(void, _P6Camera)=0x8011B4A0
@unnamed@CameraHolder_cpp@::createCamera<CameraFixedPoint>(void, _P6Camera)=0x8011B4E0
@unnamed@CameraHolder_cpp@::createCamera<CameraBehind>(void, _P6Camera)=0x8011B520
@unnamed@CameraHolder_cpp@::createCamera<CameraInwardTower>(void, _P6Camera)=0x8011B560
@unnamed@CameraHolder_cpp@::createCamera<CameraFixedThere>(void, _P6Camera)=0x8011B5A0
@unnamed@CameraHolder_cpp@::createCamera<CameraTowerPos>(void, _P6Camera)=0x8011B5E0
@unnamed@CameraHolder_cpp@::createCamera<CameraTripodPlanet>(void, _P6Camera)=0x8011B620
@unnamed@CameraHolder_cpp@::createCamera<CameraDead>(void, _P6Camera)=0x8011B660
@unnamed@CameraHolder_cpp@::createCamera<CameraInwardSphere>(void, _P6Camera)=0x8011B6A0
@unnamed@CameraHolder_cpp@::createCamera<CameraRailDemo>(void, _P6Camera)=0x8011B6E0
@unnamed@CameraHolder_cpp@::createCamera<CameraRailFollow>(void, _P6Camera)=0x8011B720
@unnamed@CameraHolder_cpp@::createCamera<CameraObjParallel>(void, _P6Camera)=0x8011B760
@unnamed@CameraHolder_cpp@::createCamera<CameraCharmedFix>(void, _P6Camera)=0x8011B7A0
@unnamed@CameraHolder_cpp@::createCamera<CameraGround>(void, _P6Camera)=0x8011B7E0
@unnamed@CameraHolder_cpp@::createCamera<CameraTrundle>(void, _P6Camera)=0x8011B820
@unnamed@CameraHolder_cpp@::createCamera<CameraSphereTrundle>(void, _P6Camera)=0x8011B860
@unnamed@CameraHolder_cpp@::createCamera<CameraCubePlanet>(void, _P6Camera)=0x8011B8A0
@unnamed@CameraHolder_cpp@::createCamera<CameraInnerCylinder>(void, _P6Camera)=0x8011B8E0
@unnamed@CameraHolder_cpp@::createCamera<CameraSpiral>(void, _P6Camera)=0x8011B920
@unnamed@CameraHolder_cpp@::createCamera<CameraTalk>(void, _P6Camera)=0x8011B960
@unnamed@CameraHolder_cpp@::createCamera<CameraMtxRegParallel>(void, _P6Camera)=0x8011B9A0
@unnamed@CameraHolder_cpp@::createCamera<CameraCharmedVecReg>(void, _P6Camera)=0x8011B9E0
@unnamed@CameraHolder_cpp@::createCamera<CameraMedianPlanet>(void, _P6Camera)=0x8011BA20
@unnamed@CameraHolder_cpp@::createCamera<CameraTwistedPassage>(void, _P6Camera)=0x8011BA60
@unnamed@CameraHolder_cpp@::createCamera<CameraMedianTower>(void, _P6Camera)=0x8011BAA0
@unnamed@CameraHolder_cpp@::createCamera<CameraCharmedVecRegTower>(void, _P6Camera)=0x8011BAE0
@unnamed@CameraHolder_cpp@::createCamera<CameraFrontAndBack>(void, _P6Camera)=0x8011BB20
@unnamed@CameraHolder_cpp@::createCamera<CameraRaceFollow>(void, _P6Camera)=0x8011BB60
@unnamed@CameraHolder_cpp@::createCamera<CameraSlide>(void, _P6Camera)=0x8011BBA0
@unnamed@CameraHolder_cpp@::createCamera<CameraFooFighter>(void, _P6Camera)=0x8011BBE0
@unnamed@CameraHolder_cpp@::createCamera<CameraFooFighterPlanet>(void, _P6Camera)=0x8011BC20
@unnamed@CameraHolder_cpp@::createCamera<CameraFreeze>(void, _P6Camera)=0x8011BC60
@unnamed@CameraHolder_cpp@::createCamera<CameraBlackHole>(void, _P6Camera)=0x8011BCA0
@unnamed@CameraHolder_cpp@::createCamera<CameraAnim>(void, _P6Camera)=0x8011BCE0
@unnamed@CameraHolder_cpp@::createCamera<CameraDPD>(void, _P6Camera)=0x8011BD20
@unnamed@CameraHolder_cpp@::createCamera<CameraWaterFollow>(void, _P6Camera)=0x8011BD60
@unnamed@CameraHolder_cpp@::createCamera<CameraWaterPlanet>(void, _P6Camera)=0x8011BDA0
@unnamed@CameraHolder_cpp@::createCamera<CameraWaterPlanetBoss>(void, _P6Camera)=0x8011BDE0
@unnamed@CameraHolder_cpp@::createCamera<CameraRailWatch>(void, _P6Camera)=0x8011BE20
@unnamed@CameraHolder_cpp@::createCamera<CameraSubjective>(void, _P6Camera)=0x8011BE60
CameraHolder::__ct(const char*)=0x8011BEA0
CameraHolder::getTranslator(long)=0x8011BF10
CameraHolder::getIndexOf(const char*) const=0x8011BF20
CameraHolder::getDefaultCamera(void)=0x8011BF90
CameraHolder::getIndexOfDefault(void) const=0x8011BFB0
CameraHolder::getIndexOf(Camera*) const=0x8011BFC0
CameraHolder::createCameras(void)=0x8011C000
CameraHolder::getCameraInner(long) const=0x8011C0B0
CameraHolder::__dt(void)=0x8011C0C0
CameraInnerCylinder::__ct(const char*)=0x8011C120
CameraInnerCylinder::reset(void)=0x8011C1A0
CameraInnerCylinder::calc(void)=0x8011C1B0
CameraInnerCylinder::createTranslator(void)=0x8011C7D0
CameraInnerCylinder::__dt(void)=0x8011C820
CameraInwardSphere::__ct(const char*)=0x8011C880
CameraInwardSphere::reset(void)=0x8011C8F0
CameraInwardSphere::calc(void)=0x8011C9D0
CameraInwardSphere::createTranslator(void)=0x8011CE40
CameraInwardSphere::calcGravityCenter(void)=0x8011CE90
CameraInwardSphere::__dt(void)=0x8011D140
CameraInwardTower::__ct(const char*)=0x8011D1A0
CameraInwardTower::reset(void)=0x8011D230
CameraInwardTower::calc(void)=0x8011D2E0
CameraInwardTower::createTranslator(void)=0x8011D350
CameraInwardTower::calcIdealPose(void)=0x8011D3A0
CameraInwardTower::isEnableToReset(void) const=0x8011D770
CameraInwardTower::__dt(void)=0x8011D780
CameraLocalUtil::getWatchPos(const CameraMan*)=0x8011D7E0
CameraLocalUtil::getPos(const CameraMan*)=0x8011D7F0
CameraLocalUtil::getUpVec(const CameraMan*)=0x8011D800
CameraLocalUtil::getWatchUpVec(const CameraMan*)=0x8011D810
CameraLocalUtil::getFovy(const CameraMan*)=0x8011D820
CameraLocalUtil::getGlobalOffset(const CameraMan*)=0x8011D830
CameraLocalUtil::getLocalOffset(const CameraMan*)=0x8011D840
CameraLocalUtil::getRoll(const CameraMan*)=0x8011D850
CameraLocalUtil::setWatchPos(CameraMan*, const JGeometry::TVec3<float>&)=0x8011D860
CameraLocalUtil::setPos(CameraMan*, const JGeometry::TVec3<float>&)=0x8011D870
CameraLocalUtil::setUpVec(CameraMan*, const JGeometry::TVec3<float>&)=0x8011D880
CameraLocalUtil::setWatchUpVec(CameraMan*, const JGeometry::TVec3<float>&)=0x8011D890
CameraLocalUtil::setFovy(CameraMan*, float)=0x8011D8A0
CameraLocalUtil::setGlobalOffset(CameraMan*, const JGeometry::TVec3<float>&)=0x8011D8B0
CameraLocalUtil::setLocalOffset(CameraMan*, const JGeometry::TVec3<float>&)=0x8011D8C0
CameraLocalUtil::setFrontOffset(CameraMan*, float)=0x8011D8D0
CameraLocalUtil::setUpperOffset(CameraMan*, float)=0x8011D8E0
CameraLocalUtil::setRoll(CameraMan*, float)=0x8011D8F0
CameraLocalUtil::getTarget(const CameraMan*)=0x8011D900
CameraLocalUtil::getMtxReg(const char*)=0x8011D910
CameraLocalUtil::getVecReg(const char*)=0x8011D950
CameraLocalUtil::getDummyVecRegName(void)=0x8011D990
CameraLocalUtil::isForceCameraChange(void)=0x8011D9C0
CameraLocalUtil::getCameraDirector(void)=0x8011D9F0
CameraLocalUtil::setUsedTarget(const CameraMan*, CameraTargetObj*)=0x8011DA00
CameraLocalUtil::getTarget(const Camera*)=0x8011DA10
CameraLocalUtil::getWatchPos(const Camera*)=0x8011DA20
CameraLocalUtil::getPos(const Camera*)=0x8011DA30
CameraLocalUtil::getUpVec(const Camera*)=0x8011DA40
CameraLocalUtil::getWatchUpVec(const Camera*)=0x8011DA50
CameraLocalUtil::getFovy(const Camera*)=0x8011DA60
CameraLocalUtil::getGlobalOffset(const Camera*)=0x8011DA70
CameraLocalUtil::getLocalOffset(const Camera*)=0x8011DA80
CameraLocalUtil::getRoll(const Camera*)=0x8011DA90
CameraLocalUtil::setWatchPos(Camera*, const JGeometry::TVec3<float>&)=0x8011DAA0
CameraLocalUtil::setPos(Camera*, const JGeometry::TVec3<float>&)=0x8011DAB0
CameraLocalUtil::setUpVec(Camera*, const JGeometry::TVec3<float>&)=0x8011DAC0
CameraLocalUtil::setWatchUpVec(Camera*, const JGeometry::TVec3<float>&)=0x8011DAD0
CameraLocalUtil::setUpVecAndWatchUpVec(Camera*, const JGeometry::TVec3<float>&)=0x8011DAE0
CameraLocalUtil::setFovy(Camera*, float)=0x8011DB30
CameraLocalUtil::setGlobalOffset(Camera*, const JGeometry::TVec3<float>&)=0x8011DB40
CameraLocalUtil::setLocalOffset(Camera*, const JGeometry::TVec3<float>&)=0x8011DB50
CameraLocalUtil::setFrontOffset(Camera*, float)=0x8011DB60
CameraLocalUtil::setUpperOffset(Camera*, float)=0x8011DB70
CameraLocalUtil::setRoll(Camera*, float)=0x8011DB80
CameraLocalUtil::recalcUpVec(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8011DB90
CameraLocalUtil::makeWatchOffset(JGeometry::TVec3<float>*, Camera*, CameraTargetObj*, float)=0x8011DBF0
CameraLocalUtil::makeWatchPoint(JGeometry::TVec3<float>*, Camera*, CameraTargetObj*, float)=0x8011DDB0
CameraLocalUtil::makeWatchOffsetImm(JGeometry::TVec3<float>*, Camera*, CameraTargetObj*)=0x8011DE10
CameraLocalUtil::makeWatchPointImm(JGeometry::TVec3<float>*, Camera*, CameraTargetObj*)=0x8011DF30
CameraLocalUtil::tryCameraReset(void)=0x8011DF90
CameraLocalUtil::tryCameraResetTrigger(void)=0x8011DFD0
CameraLocalUtil::testCameraPadButtonReset(void)=0x8011E030
CameraLocalUtil::testCameraPadTriggerReset(void)=0x8011E070
CameraLocalUtil::testCameraPadTriggerRoundLeft(void)=0x8011E0E0
CameraLocalUtil::testCameraPadTriggerRoundRight(void)=0x8011E130
CameraLocalUtil::slerpCamera(JGeometry::TQuat4<float>*, const JGeometry::TQuat4<float>&, const JGeometry::TQuat4<float>&, float, bool)=0x8011E180
CameraLocalUtil::makeTowerCameraMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8011E300
CameraLocalUtil::arrangeDistanceByFovy(Camera*, JGeometry::TVec3<float>, float)=0x8011E410
CameraLocalUtil::arrangeDistanceByPushAndPull(Camera*, float, float)=0x8011E610
CameraLocalUtil::calcSafePose(CameraMan*, Camera*)=0x8011E720
CameraMan::__ct(const char*)=0x8011E9F0
CameraMan::owned(CameraDirector*)=0x8011EA60
CameraMan::released(CameraDirector*)=0x8011EA70
CameraMan::activate(CameraDirector*)=0x8011EA80
CameraMan::notifyActivate(void)=0x8011EAA0
CameraMan::deactivate(CameraDirector*)=0x8011EAB0
CameraMan::notifyDeactivate(void)=0x8011EAD0
CameraMan::movement(void)=0x8011EAE0
CameraMan::calc(void)=0x8011EB30
CameraMan::init(const JMapInfoIter&)=0x8011EB40
CameraMan::__dt(void)=0x8011EB50
CameraManEvent::__ct(CameraHolder*, CameraParamChunkHolder*, const char*)=0x8011EBB0
CameraManEvent::ChunkFIFOItem::__ct(void)=0x8011EC70
CameraManEvent::init(const JMapInfoIter&)=0x8011EC90
CameraManEvent::calc(void)=0x8011ECA0
CameraManEvent::start(long, const char*, const CameraTargetArg&, long)=0x8011ED10
CameraManEvent::end(long, const char*, long)=0x8011ED70
CameraManEvent::isActive(void) const=0x8011EEA0
CameraManEvent::isInterpolationOff(void) const=0x8011EED0
CameraManEvent::isCollisionOff(void) const=0x8011EF50
CameraManEvent::isZeroFrameMoveOff(void) const=0x8011EFD0
CameraManEvent::doesNextChunkHaveInterpolation(void) const=0x8011F000
CameraManEvent::isCorrectingErpPositionOff(void) const=0x8011F080
CameraManEvent::updateChunkFIFO(void)=0x8011F3B0
CameraManEvent::applyChunk(void)=0x8011F410
CameraManEvent::checkReset(CameraManEvent::ChunkFIFOItem*)=0x8011F490
CameraManEvent::changeCamera(void)=0x8011F520
CameraManEvent::setExtraParam(void)=0x8011F590
CameraManEvent::setVPanParam(void)=0x8011F680
CameraManEvent::resetCameraIfRequested(void)=0x8011F760
CameraManEvent::setSafePose(void)=0x8011F7C0
CameraManEvent::requestChunk(CameraParamChunkEvent*, CameraManEvent::EPriority, const CameraTargetArg&, long)=0x8011FB70
CameraManEvent::cleanChunkFIFO(CameraParamChunk*)=0x8011FBB0
CameraManEvent::isChunkFIFOEmpty(void) const=0x8011FC30
CameraManEvent::sendStartInterpolateFrame(CameraParamChunkEvent*, long)=0x8011FC80
CameraManEvent::getInterpolateFrame(CameraParamChunkEvent*, long) const=0x8011FCD0
CameraManEvent::sendFinishInterpolateFrame(CameraParamChunkEvent*, long)=0x8011FD10
CameraManEvent::searchPriority(CameraParamChunk*) const=0x8011FD70
CameraManEvent::isInFIFO(CameraParamChunk*) const=0x8011FDB0
CameraManEvent::notifyActivate(void)=0x8011FE40
CameraManEvent::notifyDeactivate(void)=0x8011FE50
CameraManEvent::__dt(void)=0x8011FE60
CameraManGame::__ct(CameraHolder*, CameraParamChunkHolder*, const char*)=0x8011FEC0
CameraManGame::init(const JMapInfoIter&)=0x8011FFB0
CameraManGame::calc(void)=0x8011FFC0
CameraManGame::notifyActivate(void)=0x80120040
CameraManGame::closeCreatingCameraChunk(void)=0x80120050
CameraManGame::startStartPosCamera(bool)=0x801200B0
CameraManGame::endStartPosCamera(void)=0x801200D0
CameraManGame::zoomIn(void)=0x801200E0
CameraManGame::zoomOut(void)=0x801201A0
CameraManGame::isInterpolationOff(void) const=0x801201B0
CameraManGame::isCollisionOff(void) const=0x80120230
CameraManGame::isZeroFrameMoveOff(void) const=0x801202B0
CameraManGame::isSubjectiveCameraOff(void) const=0x801202E0
CameraManGame::isCorrectingErpPositionOff(void) const=0x80120360
CameraManGame::isEnableToRoundLeft(void) const=0x801203C0
CameraManGame::selectCameraChunk(void)=0x801204B0
CameraManGame::setChunk(const CameraParamChunkID&)=0x801205F0
CameraManGame::setNullCamera(void)=0x80120670
CameraManGame::tryToReplaceChunkToDefault(CameraParamChunk*)=0x80120750
CameraManGame::requestResetIfNecessary(CameraParamChunk*)=0x80120810
CameraManGame::isNecessaryToReset(CameraParamChunk*) const=0x801208B0
CameraManGame::isCurrentChunkEnableEndInterp(void) const=0x80120960
CameraManGame::replaceCurrentChunkAndCamera(CameraParamChunk*)=0x801209F0
CameraManGame::applyParameter(void)=0x80120A40
CameraManGame::checkReset(void)=0x80120C20
CameraManGame::setSafePose(void)=0x80120C90
CameraManGame::keepAwayWatchPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80120DD0
CameraManGame::calcSafeUpVec(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80120EE0
CameraManGame::createDefaultCamera(void)=0x80121100
CameraManGame::createDefaultWaterCamera(void)=0x80121160
CameraManGame::createDefaultWaterSurfaceCamera(void)=0x80121230
CameraManGame::createDefaultFooFighterCamera(void)=0x80121320
CameraManGame::createStartAnimCamera(void)=0x801213F0
CameraManGame::createZoomCamera(void)=0x801214A0
CameraManGame::checkStateShift(void)=0x80121590
CameraManGame::tryShiftToGCapture(void)=0x80121610
CameraManGame::tryShiftToSwimOrWaterSurface(void)=0x80121660
CameraTargetObj::isWaterMode(void) const=0x801216F0
CameraTargetObj::isOnWaterSurface(void) const=0x80121700
CameraManGame::tryShiftToFooFighter(void)=0x80121710
CameraTargetObj::isFooFighterMode(void) const=0x80121770
CameraManGame::updateNormal(void)=0x80121A20
CameraTargetMtx::getCubeCameraArea(void) const=0x80121B10
CameraManGame::setCubeChunk(CubeCameraArea::ECategory)=0x80121B20
CameraManGame::tryStartPosCamera(void)=0x80121BF0
CameraManGame::tryZoomCamera(void)=0x80121CD0
CameraManGame::isZoomCamera(void) const=0x80121D50
CameraManGame::notifyDeactivate(void)=0x80121DC0
CameraManGame::__dt(void)=0x80121DD0
CameraManPause::__ct(const char*)=0x80121E30
CameraManPause::init(const JMapInfoIter&)=0x80121EB0
CameraManPause::calc(void)=0x80121EC0
CameraTargetObj::getMapBaseMtx(void) const=0x80122290
MR::clampBoth(float*, float, float)=0x801222A0
CameraManPause::notifyActivate(void)=0x801222D0
CameraManPause::notifyDeactivate(void)=0x80122420
CameraManPause::isZeroFrameMoveOff(void) const=0x80122430
CameraManPause::isCollisionOff(void) const=0x80122440
CameraManPause::__dt(void)=0x80122450
CameraManSubjective::__ct(const char*)=0x801224B0
CameraManSubjective::init(const JMapInfoIter&)=0x80122520
CameraManSubjective::calc(void)=0x80122530
CameraManSubjective::notifyActivate(void)=0x80122580
CameraManSubjective::notifyDeactivate(void)=0x801225A0
CameraManSubjective::__dt(void)=0x801225B0
CameraMedianPlanet::__ct(const char*)=0x80122610
CameraMedianPlanet::reset(void)=0x801226A0
CameraMedianPlanet::calc(void)=0x80122730
CameraMedianPlanet::createTranslator(void)=0x80122800
CameraMedianPlanet::getPrevFront(JGeometry::TVec3<float>*)=0x80122840
CameraMedianPlanet::constrainDipAngle(JGeometry::TVec3<float>*)=0x80122890
CameraMedianPlanet::makeTargetMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x801229C0
CameraMedianPlanet::peepMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80122AB0
CameraMedianPlanet::rotate33(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TVec3<float>&, float)=0x80122BC0
CameraMedianPlanet::constrainLength(JGeometry::TVec3<float>*)=0x80122D30
CameraMedianPlanet::getMaxRate(void)=0x80122E40
CameraMedianPlanet::getRegisterUpVec(JGeometry::TVec3<float>*)=0x80122FE0
CameraMedianPlanet::calcWatchPos(JGeometry::TVec3<float>*)=0x80123080
CameraMedianPlanet::calcUpVec(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80123190
CameraMedianPlanet::__dt(void)=0x80123340
CameraMedianTower::__ct(const char*)=0x801233A0
CameraMedianTower::reset(void)=0x80123440
CameraMedianTower::calc(void)=0x801234B0
CameraMedianTower::createTranslator(void)=0x80123840
CameraMedianTower::calcFovyPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80123890
CameraMedianTower::limitAngularVelocity(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801239F0
CameraMedianTower::calcDistance(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80123C50
CameraMedianTower::updateReset(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80123DF0
CameraMedianTower::__dt(void)=0x80123F40
CameraMtxRegParallel::__ct(const char*)=0x80123FA0
CameraMtxRegParallel::reset(void)=0x80124010
CameraMtxRegParallel::calc(void)=0x80124020
CameraMtxRegParallel::createTranslator(void)=0x80124060
CameraMtxRegParallel::calcIdealPose(void)=0x801240B0
CameraMtxRegParallel::__dt(void)=0x80124220
CameraObjParallel::__ct(const char*)=0x80124280
CameraObjParallel::reset(void)=0x801242D0
CameraObjParallel::calc(void)=0x801242E0
CameraObjParallel::createTranslator(void)=0x80124520
CameraObjParallel::__dt(void)=0x80124570
CameraParallel::__ct(const char*)=0x801245D0
CameraParallel::reset(void)=0x80124680
CameraParallel::calc(void)=0x801246F0
CameraParallel::createTranslator(void)=0x80124750
CameraParallel::isEnableToRoundLeft(void) const=0x801247A0
CameraParallel::isEnableToRoundRight(void) const=0x801247B0
CameraParallel::isEnableToReset(void) const=0x801247C0
CameraParallel::calcIdealPose(void)=0x801247D0
CameraParallel::calcRound(void)=0x80124950
CameraParallel::__dt(void)=0x80124DA0
CameraParamChunk::__ct(CameraHolder*, const CameraParamChunkID&)=0x80124E00
CameraGeneralParam::__ct(void)=0x80124EA0
CameraParamChunk::ExParam::init(void)=0x80124F30
CameraParamChunk::ExParam::__ct(void)=0x80124FE0
CameraParamChunk::getZoneID(void) const=0x80124FF0
CameraParamChunk::isOnNoReset(void) const=0x80125000
CameraParamChunk::isOnUseFovy(void) const=0x80125010
CameraParamChunk::isLOfsErpOff(void) const=0x80125020
CameraParamChunk::isAntiBlurOff(void) const=0x80125030
CameraParamChunk::isCollisionOff(void) const=0x80125040
CameraParamChunk::isSubjectiveCameraOff(void) const=0x80125050
CameraParamChunk::getVPanAxis(JGeometry::TVec3<float>*) const=0x80125060
CameraParamChunk::setCameraType(const char*, const CameraHolder*)=0x801250D0
CameraParamChunk::setUseFovy(bool)=0x80125110
CameraParamChunk::setLOfsErpOff(bool)=0x80125130
CameraParamChunk::setCollisionOff(bool)=0x80125150
CameraParamChunk::copy(const CameraParamChunk*)=0x80125170
CameraGeneralParam::__as(const CameraGeneralParam&)=0x80125250
CameraParamChunk::load(DotCamReader*, CameraHolder*)=0x801252E0
CameraParamChunk::initiate(void)=0x80125720
CameraParamChunk::arrangeCamTypeName(unsigned long, const char*)=0x80125770
CameraParamChunkGame::__ct(CameraHolder*, const CameraParamChunkID&)=0x80125870
CameraParamChunkGame::load(DotCamReader*, CameraHolder*)=0x801258D0
CameraParamChunkGame::initiate(void)=0x801259A0
CameraParamChunkGame::copy(const CameraParamChunk*)=0x801259F0
CameraParamChunkEvent::__ct(CameraHolder*, const CameraParamChunkID&)=0x80125A00
CameraParamChunkEvent::load(DotCamReader*, CameraHolder*)=0x80125A60
CameraParamChunkEvent::initiate(void)=0x80125B80
CameraParamChunkEvent::getClassName(void) const=0x80125BF0
CameraParamChunkGame::getClassName(void) const=0x80125C00
short::(nit_\CameraParamChunk_cpp)=0x80125C10
CameraParamChunkHolder::__ct(CameraHolder*, const char*)=0x80125C50
CameraParamChunkHolder::__dt(void)=0x80125CE0
CameraParamChunkHolder::createChunk(const CameraParamChunkID&, JKRHeap*)=0x80125D40
CameraParamChunkHolder::getChunk(const CameraParamChunkID&)=0x80125E50
CameraParamChunkHolder::sort(void)=0x80125E70
CameraParamChunkHolder::isNewAttribute(const CameraParamChunkID&)=0x80126080
CameraParamChunkHolder::findChunk(const CameraParamChunkID&)=0x80126100
CameraParamChunkHolder::findChunk(long, const char*)=0x80126210
CameraParamChunkHolder::arrangeChunk(CameraParamChunk*)=0x80126390
CameraParamChunkID::__ct(void)=0x80126840
CameraParamChunkID::__ct(const CameraParamChunkID&)=0x80126860
CameraParamChunkID::getBuffer(unsigned long)=0x801268E0
CameraParamChunkID::createCubeID(long, unsigned short)=0x801268F0
CameraParamChunkID::createGroupID(long, const char*, unsigned long, unsigned long)=0x80126960
CameraParamChunkID::createOtherID(long, const char*)=0x80126A00
CameraParamChunkID::createEventID(long, const char*)=0x80126A90
CameraParamChunkID::createStartID(long, unsigned short)=0x80126B20
CameraParamChunkID::__gt(const CameraParamChunkID&) const=0x80126C40
CameraParamChunkID::__eq(const CameraParamChunkID&) const=0x80126CE0
CameraParamChunkID::equals(long, const char*) const=0x80126D80
CameraParamString::__ct(void)=0x80126E00
CameraParamString::__as(const CameraParamString&)=0x80126E10
CameraParamString::setCharPtr(const char*)=0x80126E50
CameraParamString::getCharPtr(void) const=0x80126E60
CameraParamString::copy(const char*)=0x80126E70
MR::initCameraCodeCollection(const char*, long)=0x80126EA0
MR::registerCameraCode(unsigned long)=0x80126EF0
MR::termCameraCodeCollection(void)=0x80126F30
CameraPoseParam::__ct(void)=0x80126F60
CameraRaceFollow::__ct(const char*)=0x80126FD0
CameraRaceFollow::reset(void)=0x80127040
CameraRaceFollow::calc(void)=0x801270C0
CameraRaceFollow::createTranslator(void)=0x80127430
CameraRaceFollow::goRound(void)=0x80127480
CameraRaceFollow::__dt(void)=0x80127580
CameraRailDemo::__ct(const char*)=0x801275E0
CameraRailDemo::reset(void)=0x80127620
CameraRailDemo::calc(void)=0x80127640
CameraRailDemo::setParam(long, long, long, long, float)=0x801276B0
CameraRailDemo::createTranslator(void)=0x80127720
CameraRailDemo::calcLinear(void)=0x80127770
CameraRailDemo::calcEaseInOut(void)=0x80127890
CameraRailDemo::calcDamp(void)=0x801279C0
CameraRailDemo::__dt(void)=0x80127A80
CameraRailFollow::__ct(const char*)=0x80127AE0
CameraRailFollow::reset(void)=0x80127B50
CameraRailFollow::calc(void)=0x80127BB0
CameraRailFollow::setParam(long, long, float, float, float, long)=0x80127F50
CameraRailFollow::createTranslator(void)=0x80127FD0
CameraRailFollow::__dt(void)=0x80128020
CameraRailHolder::__ct(const char*)=0x80128080
CameraRailHolder::ZoneRail::__ct(void)=0x80128350
CameraRailHolder::RailSet::__as(const CameraRailHolder::RailSet&)=0x80128360
CameraRailHolder::getRider(long, long) const=0x80128380
CameraRailHolder::find(long, long) const=0x801283F0
CameraRailHolder::__dt(void)=0x80128460
CameraRailWatch::__ct(const char*)=0x801284C0
CameraRailWatch::reset(void)=0x80128520
CameraRailWatch::calc(void)=0x801285E0
CameraRailWatch::setParam(long, long, long, float, float, float)=0x80128A30
CameraRailWatch::createTranslator(void)=0x80128AB0
CameraRailWatch::__dt(void)=0x80128B00
CameraRegisterHolder::__ct(const char*)=0x80128B60
CameraRegisterHolder::declareMtxReg(const char*, A4_f)=0x80128BC0
CameraRegisterHolder::getMtx(const char*) const=0x80128BF0
CameraRegisterHolder::declareVecReg(const char*, const JGeometry::TVec3<float>*)=0x80128C40
CameraRegisterHolder::getVec(const char*) const=0x80128C70
CameraRegisterHolder::declareFloatReg(const char*, const float*)=0x80128CC0
CameraRegisterHolder::getDummyVecRegName(void) const=0x80128CF0
CameraRegisterHolder::initMtx(void)=0x80128D00
CameraRegisterHolder::initVec(void)=0x80128D30
CameraRegisterHolder::initFloat(void)=0x80128D60
CameraRegisterHolder::initDummyRegister(void)=0x80128D90
CameraRegisterHolder::searchName(const char*, unsigned long, const char*) const=0x80128E10
CameraRegisterHolder::__dt(void)=0x80128EA0
CameraRotChecker::__ct(void)=0x80128F00
CameraRotChecker::update(void)=0x80128F40
short::(nit_\CameraRotChecker_cpp)=0x80129030
CameraShakePatternSingly::__ct(float)=0x80129510
CameraShakePatternSingly::isEnd(void) const=0x80129540
CameraShakePatternSingly::getOffset(JGeometry::TVec2<float>*) const=0x80129560
CameraShakePatternSingly::start(void)=0x80129570
CameraShakePatternSingly::update(void)=0x80129580
CameraShakePatternSingly::setDirection(const JGeometry::TVec2<float>&)=0x80129680
CameraShakePatternVerticalSin::__ct(float, float)=0x801296C0
CameraShakePatternVerticalSin::isEnd(void) const=0x801296F0
CameraShakePatternVerticalSin::getOffset(JGeometry::TVec2<float>*) const=0x80129730
CameraShakePatternVerticalSin::start(void)=0x80129740
CameraShakePatternVerticalSin::update(void)=0x80129750
CameraShakePatternSingly::__dt(void)=0x801297F0
CameraShakePatternVerticalSin::__dt(void)=0x80129830
CameraShakeTask::__ct(CameraShakePattern*)=0x80129870
CameraShakeTask::start(unsigned long, unsigned long)=0x801298A0
CameraShakeTask::endForce(void)=0x801298D0
CameraShakeTask::movement(void)=0x801298E0
CameraShakeTask::getOffset(JGeometry::TVec2<float>*) const=0x80129960
CameraShakeTask::isEnd(void) const=0x801299F0
CameraShakeTask::startCommon(unsigned long)=0x80129A00
CameraShakeTask::updatePattern(void)=0x80129A30
CameraShakeTask::updateInterval(void)=0x80129AC0
CameraShaker::__ct(const char*)=0x80129B20
CameraShaker::movement(void)=0x80129B80
CameraShaker::shakeVertical(CameraShaker::ESinglyVerticalPower)=0x80129BD0
CameraShaker::shakeInfinity(NameObj*, float, float)=0x80129C20
CameraShaker::stopShakingInfinity(NameObj*)=0x80129CC0
CameraShaker::createSinglyVerticalTask(void)=0x80129D20
CameraShaker::createSinglyHorizontalTask(void)=0x80129DB0
CameraShaker::createInfinityTask(void)=0x80129E80
CameraShaker::updateSinglyVerticalTask(void)=0x80129F20
CameraShaker::updateSinglyHorizontalTask(void)=0x80129F80
CameraShaker::updateInfinityTask(void)=0x80129FE0
CameraShaker::setOffset(void)=0x8012A040
CameraShaker::addSinglyVerticalTaskOffset(JGeometry::TVec2<float>*)=0x8012A0B0
CameraShaker::addSinglyHorizontalTaskOffset(JGeometry::TVec2<float>*)=0x8012A140
CameraShaker::addInfinityTaskOffset(JGeometry::TVec2<float>*)=0x8012A1D0
CameraShaker::adjustOffsetToScreen(JGeometry::TVec2<float>*)=0x8012A260
CameraShaker::startInfinity(unsigned long, float, float)=0x8012A300
CameraShaker::__dt(void)=0x8012A330
CameraSlide::__ct(const char*)=0x8012A390
CameraSlide::reset(void)=0x8012A410
CameraSlide::calc(void)=0x8012A420
CameraSlide::createTranslator(void)=0x8012A750
CameraSlide::__dt(void)=0x8012A7A0
CameraSphereTrundle::__ct(const char*)=0x8012A800
CameraSphereTrundle::reset(void)=0x8012A890
CameraSphereTrundle::calc(void)=0x8012AA50
CameraSphereTrundle::createTranslator(void)=0x8012ACB0
CameraSphereTrundle::__dt(void)=0x8012AD00
CameraSpiral::__ct(const char*)=0x8012AD60
CameraSpiral::reset(void)=0x8012ADD0
CameraSpiral::calc(void)=0x8012ADE0
CameraSpiral::createTranslator(void)=0x8012B2D0
CameraSpiral::__dt(void)=0x8012B320
CameraSubjective::__ct(const char*)=0x8012B380
CameraSubjective::reset(void)=0x8012B3E0
CameraSubjective::calc(void)=0x8012B560
CameraSubjective::createTranslator(void)=0x8012B8F0
CameraSubjective::__dt(void)=0x8012B950
CameraTalk::__ct(const char*)=0x8012B9B0
CameraTalk::reset(void)=0x8012BA30
CameraTalk::calc(void)=0x8012BA80
CameraTalk::setParam(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x8012C050
CameraTalk::createTranslator(void)=0x8012C0C0
CameraTalk::__dt(void)=0x8012C110
CameraTargetArg::__ct(const LiveActor*)=0x8012C170
CameraTargetArg::setTarget(void) const=0x8012C190
CameraTargetHolder::__ct(void)=0x8012C240
CameraTargetHolder::movement(void)=0x8012C2C0
CameraTargetHolder::get(void)=0x8012C2E0
CameraTargetHolder::set(CameraTargetObj*)=0x8012C2F0
CameraTargetHolder::set(const LiveActor*)=0x8012C300
CameraTargetHolder::set(const MarioActor*)=0x8012C320
CameraTargetHolder::isOnGround(void) const=0x8012C340
CameraTargetHolder::isMoving(void) const=0x8012C3D0
CameraTargetHolder::__dt(void)=0x8012C420
CameraTargetMtx::__ct(const char*)=0x8012C460
CameraTargetObj::__dt(void)=0x8012C510
CameraTargetMtx::movement(void)=0x8012C570
CameraTargetMtx::getPosition(void) const=0x8012C690
CameraTargetMtx::getUpVec(void) const=0x8012C6A0
CameraTargetMtx::getFrontVec(void) const=0x8012C6B0
CameraTargetMtx::getSideVec(void) const=0x8012C6C0
CameraTargetMtx::getLastMove(void) const=0x8012C6D0
CameraTargetMtx::getGroundPos(void) const=0x8012C6E0
CameraTargetMtx::getGravityVector(void) const=0x8012C6F0
CameraTargetMtx::invalidateLastMove(void)=0x8012C700
CameraTargetObj::resetStatus(void)=0x8012C710
CameraTargetObj::isDebugMode(void) const=0x8012C720
CameraTargetObj::setCameraWall(bool)=0x8012C730
CameraTargetObj::disableCameraWall(void)=0x8012C740
CameraTargetObj::enableCameraWall(void)=0x8012C750
CameraTargetObj::getGravityInfo(void) const=0x8012C760
CameraTargetObj::getSpecialMode(void) const=0x8012C770
CameraTargetObj::isBeeMode(void) const=0x8012C780
CameraTargetObj::isLongDrop(void) const=0x8012C790
CameraTargetObj::isTurning(void) const=0x8012C7A0
CameraTargetObj::init(const JMapInfoIter&)=0x8012C7B0
CameraTargetMtx::__dt(void)=0x8012C7C0
CameraTargetObj::__ct(const char*)=0x8012C820
CameraTargetActor::__ct(const char*)=0x8012C870
CameraTargetActor::movement(void)=0x8012C8E0
CameraTargetActor::getPosition(void) const=0x8012C9B0
CameraTargetActor::getUpVec(void) const=0x8012C9C0
CameraTargetActor::getFrontVec(void) const=0x8012C9D0
CameraTargetActor::getSideVec(void) const=0x8012C9E0
CameraTargetActor::getLastMove(void) const=0x8012C9F0
CameraTargetActor::getGroundPos(void) const=0x8012CA00
CameraTargetActor::getGravityVector(void) const=0x8012CA10
CameraTargetActor::getCubeCameraArea(void) const=0x8012CA70
CameraTargetPlayer::__ct(const char*)=0x8012CA80
CameraTargetPlayer::movement(void)=0x8012CAF0
CameraTargetPlayer::getPosition(void) const=0x8012CC80
CameraTargetPlayer::getUpVec(void) const=0x8012CC90
CameraTargetPlayer::getFrontVec(void) const=0x8012CCA0
CameraTargetPlayer::getSideVec(void) const=0x8012CCB0
CameraTargetPlayer::getGroundPos(void) const=0x8012CCC0
CameraTargetPlayer::getGravityVector(void) const=0x8012CCD0
CameraTargetPlayer::getLastMove(void) const=0x8012CCE0
CameraTargetPlayer::isTurning(void) const=0x8012CD30
CameraTargetPlayer::isJumping(void) const=0x8012CD40
CameraTargetPlayer::isLongDrop(void) const=0x8012CD50
CameraTargetPlayer::isFastDrop(void) const=0x8012CD60
CameraTargetPlayer::isFastRise(void) const=0x8012CD70
CameraTargetPlayer::isWaterMode(void) const=0x8012CD80
CameraTargetPlayer::isOnWaterSurface(void) const=0x8012CD90
CameraTargetPlayer::isFooFighterMode(void) const=0x8012CDA0
CameraTargetPlayer::getSpecialMode(void) const=0x8012CE10
CameraTargetPlayer::isCameraStateOn(unsigned long) const=0x8012CE20
CameraTargetPlayer::getCubeCameraArea(void) const=0x8012CE30
CameraTargetPlayer::getGravityInfo(void) const=0x8012CE40
CameraTargetPlayer::isDebugMode(void) const=0x8012CE50
CameraTargetPlayer::getMapBaseMtx(void) const=0x8012CE60
CameraTargetActor::getRadius(void) const=0x8012CE70
CameraTargetActor::__dt(void)=0x8012CE80
CameraTargetPlayer::__dt(void)=0x8012CEE0
short::(nit_\CameraTargetObj_cpp)=0x8012CF40
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::identity33(void)=0x8012CF60
Color8::__ct(unsigned char, unsigned char, unsigned char, unsigned char)=0x8012CF90
CameraTower::__ct(const char*)=0x8012CFB0
CameraTower::reset(void)=0x8012D050
CameraTower::calc(void)=0x8012D1F0
CameraTower::createTranslator(void)=0x8012D3C0
CameraTower::isEnableToRoundLeft(void) const=0x8012D410
CameraTower::isEnableToRoundRight(void) const=0x8012D450
CameraTower::calcIdealPos(void)=0x8012D490
CameraTower::arrangeRoundingPose(void)=0x8012D730
CameraTower::arrangeHorizontalPose(void)=0x8012D890
CameraTower::isUpsideDownByRoll(void) const=0x8012DBC0
CameraTower::arrangeRound(void)=0x8012DC30
CameraTower::isEnableToReset(void) const=0x8012DC90
CameraTower::__dt(void)=0x8012DCA0
short::(nit_\CameraTower_cpp)=0x8012DD00
CameraTowerBase::__ct(const char*)=0x8012DD30
CameraTowerBase::reset(void)=0x8012DDA0
CameraTowerBase::resetBegin(void)=0x8012DE60
CameraTowerBase::resetPreVPan(void)=0x8012DE70
CameraTowerBase::resetPostVPan(void)=0x8012DE80
CameraTowerBase::calc(void)=0x8012DE90
CameraTowerBase::arrangePreVPan(void)=0x8012DF50
CameraTowerBase::arrangePostVPan(void)=0x8012DF60
CameraTowerBase::calcIdealPoseOfTowerBase(void)=0x8012DF70
CameraTowerBase::__dt(void)=0x8012E220
CameraTowerPos::__ct(const char*)=0x8012E280
CameraTowerPos::reset(void)=0x8012E300
CameraTowerPos::calc(void)=0x8012E310
CameraTowerPos::calcIdealPose(bool)=0x8012E350
CameraTowerPos::createTranslator(void)=0x8012E6E0
CameraTowerPos::arrangeHorizontalPose(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>&)=0x8012E730
CameraTowerPos::arrangeWatchPos(JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8012E890
CameraTowerPos::isEnableToReset(void) const=0x8012EAF0
CameraTowerPos::__dt(void)=0x8012EB00
CameraTripodPlanet::__ct(const char*)=0x8012EB60
CameraTripodPlanet::reset(void)=0x8012EBD0
CameraTripodPlanet::calc(void)=0x8012EBE0
CameraTripodPlanet::createTranslator(void)=0x8012EFD0
CameraTripodPlanet::__dt(void)=0x8012F020
CameraTrundle::__ct(const char*)=0x8012F080
CameraTrundle::reset(void)=0x8012F0F0
CameraTrundle::calc(void)=0x8012F100
CameraTrundle::createTranslator(void)=0x8012F3B0
CameraTrundle::__dt(void)=0x8012F400
CameraTwistedPassage::__ct(const char*)=0x8012F460
CameraTwistedPassage::reset(void)=0x8012F4C0
CameraTwistedPassage::calc(void)=0x8012F560
CameraTwistedPassage::setParam(long, long, float, float)=0x8012F7B0
CameraTwistedPassage::createTranslator(void)=0x8012F820
CameraTwistedPassage::initStartPos(void)=0x8012F870
CameraTwistedPassage::calcNearestCoord(const JGeometry::TVec3<float>&) const=0x8012F8F0
CameraTwistedPassage::calcNearestCoordBetweenTwoRailCoord(float, float, const JGeometry::TVec3<float>&) const=0x8012F9C0
CameraTwistedPassage::__dt(void)=0x8012FAA0
JGeometry::TUtil<float>::acos(float)=0x8012FB00
CameraViewInterpolator::__ct(void)=0x8012FBB0
CameraViewInterpolator::updateCameraMtx(A4_fRCQ29JGeometry8TVec3<float>PC15CameraTargetObjf)=0x8012FCD0
CameraViewInterpolator::setInterpolation(unsigned long)=0x8012FE20
CameraViewInterpolator::isInterpolating(void) const=0x8012FE70
CameraViewInterpolator::isInterpolatingNearlyEnd(void) const=0x8012FEA0
CameraViewInterpolator::translateByRepulsion(void)=0x8012FEE0
CameraViewInterpolator::lookAtCenter(void)=0x8012FF80
CameraViewInterpolator::calcCollision(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80130050
CameraViewInterpolator::calcBinder(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801302F0
CameraViewInterpolator::reduceOscillation(void)=0x801304A0
CameraViewInterpolator::updateCalcState(const CameraTargetObj*)=0x80130620
CameraViewInterpolator::interpolateCameraSwitching(A4_fRCQ29JGeometry8TVec3<float>f)=0x80130730
CameraViewInterpolator::checkNearlyEnd(A4_f)=0x80130990
CameraWaterFollow::__ct(const char*)=0x80130D30
CameraWaterFollow::reset(void)=0x80130DC0
CameraWaterFollow::calc(void)=0x80130E50
CameraWaterFollow::createTranslator(void)=0x80131470
CameraWaterFollow::isEnableToReset(void) const=0x801314B0
CameraWaterFollow::__dt(void)=0x801314C0
CameraWaterPlanet::__ct(const char*)=0x80131520
CameraWaterPlanet::reset(void)=0x80131580
CameraWaterPlanet::calc(void)=0x80131710
CameraWaterPlanet::createTranslator(void)=0x80131AD0
CameraWaterPlanet::__dt(void)=0x80131B10
CameraWaterPlanetBoss::__ct(const char*)=0x80131B70
CameraWaterPlanetBoss::reset(void)=0x80131C20
CameraWaterPlanetBoss::calc(void)=0x80131CB0
CameraWaterPlanetBoss::createTranslator(void)=0x80132440
CameraWaterPlanetBoss::isEnableToReset(void) const=0x80132480
CameraWaterPlanetBoss::__dt(void)=0x80132490
CameraWonderPlanet::__ct(const char*)=0x801324F0
CameraWonderPlanet::reset(void)=0x80132550
CameraWonderPlanet::calc(void)=0x80132670
CameraWonderPlanet::createTranslator(void)=0x801329A0
CameraWonderPlanet::updateCameraReset(void)=0x801329E0
CameraWonderPlanet::__dt(void)=0x80132CB0
DotCamReaderInBin::__ct(const void*)=0x80132D10
DotCamReader::__dt(void)=0x80132D80
DotCamReaderInBin::init(const void*)=0x80132DC0
DotCamReaderInBin::__dt(void)=0x80132E50
DotCamReaderInBin::hasMoreChunk(void) const=0x80132ED0
DotCamReaderInBin::nextToChunk(void)=0x80132F90
DotCamReaderInBin::getValueInt(const char*, long*)=0x80132FE0
DotCamReaderInBin::getValueFloat(const char*, float*)=0x80132FF0
DotCamReaderInBin::getValueVec(const char*, JGeometry::TVec3<float>*)=0x80133000
DotCamReaderInBin::getValueString(const char*, const char*)=0x801330F0
DotCamReaderInBin::getVersion(void) const=0x80133160
GameCameraCreator::__ct(CameraParamChunkHolder*)=0x80133170
GameCameraCreator::registerCameraCode(unsigned long)=0x801331D0
GameCameraCreator::termCameraCodeCollection(void)=0x801331F0
GameCameraCreator::scanArea(void)=0x801332A0
GameCameraCreator::scanStartPos(void)=0x80133360
OnlyCamera::__ct(const char*)=0x80133400
OnlyCamera::calcPose(CameraMan*)=0x801334A0
OnlyCamera::calcStartPose(CameraMan*)=0x80133520
OnlyCamera::calcSafePose(CameraMan*)=0x80133770
OnlyCamera::moveToIdealPosition(JGeometry::TVec3<float>*)=0x80133A20
OnlyCamera::__dt(void)=0x80133BC0
CompleteEndingDemoObj::__ct(const char*)=0x80133C20
CompleteEndingDemoObj::init(const JMapInfoIter&)=0x80133C70
CompleteEndingDemoObj::exeAppear(void)=0x80133E80
CompleteEndingDemoObj::kill(void)=0x80133F40
CompleteEndingDemoObj::__dt(void)=0x80133FC0
short::(nit_\CompleteEndingDemoObj_cpp)=0x80134020
NrvCompleteEndingDemoObj::CompleteEndingDemoObjNrvWait::__ct(void)=0x80134050
NrvCompleteEndingDemoObj::CompleteEndingDemoObjNrvAppear::__ct(void)=0x80134060
NrvCompleteEndingDemoObj::CompleteEndingDemoObjNrvAppear::execute(Spine*) const=0x80134070
NrvCompleteEndingDemoObj::CompleteEndingDemoObjNrvWait::execute(Spine*) const=0x80134080
@unnamed@DemoActionKeeper_cpp@::findTalkMessageCtrl(LiveActor*)=0x80134090
@unnamed@DemoActionKeeper_cpp@::setTalkAnimCtrlInterpole(LiveActor*, long)=0x801340E0
DemoActionInfo::__ct(void)=0x80134140
DemoActionInfo::registerCast(LiveActor*)=0x80134220
DemoActionInfo::registerFunctor(const LiveActor*, const MR::FunctorBase&)=0x80134240
DemoActionInfo::registerNerve(const LiveActor*, const Nerve*)=0x801342C0
DemoActionInfo::executeActionFirst(void) const=0x80134300
DemoActionInfo::executeActionLast(void) const=0x80134550
DemoActionKeeper::__ct(const DemoExecutor*)=0x801345F0
DemoActionKeeper::initCast(LiveActor*, const JMapInfoIter&)=0x80134720
DemoActionKeeper::registerFunctor(const LiveActor*, const MR::FunctorBase&, const char*)=0x801347C0
DemoActionKeeper::registerNerve(const LiveActor*, const Nerve*, const char*)=0x80134890
DemoActionKeeper::isRegisteredDemoAction(const LiveActor*, long) const=0x80134D60
DemoCameraFunction::isCameraTargetMario(const DemoCameraInfo*)=0x80134DD0
DemoCameraFunction::setStringNullIfEmpty(const char*)=0x80134E20
DemoCameraFunction::makeAnimCameraName(char*, unsigned long, const DemoCameraInfo*)=0x80134E60
DemoCameraInfo::__ct(void)=0x80134E70
DemoCameraKeeper::__ct(DemoExecutor*, const JMapInfoIter&)=0x80134EB0
DemoCameraKeeper::initCast(LiveActor*, const JMapInfoIter&)=0x801350B0
DemoCastGroup::__ct(const char*)=0x80135550
DemoCastGroup::init(const JMapInfoIter&)=0x801355A0
DemoCastGroup::tryRegisterDemoActor(LiveActor*, const JMapInfoIter&, const JMapIdInfo&)=0x80135650
JMapIdInfo::__eq(const JMapIdInfo&) const=0x801356D0
DemoCastGroup::tryRegisterDemoActor(LiveActor*, const char*, const JMapInfoIter&)=0x80135700
DemoCastGroup::registerDemoActor(LiveActor*, const JMapInfoIter&)=0x80135780
DemoCastGroup::__dt(void)=0x80135790
DemoCastGroupHolder::__ct(void)=0x801357F0
DemoCastGroupHolder::tryRegisterDemoActor(LiveActor*, const JMapInfoIter&, const JMapIdInfo&) const=0x80135840
DemoCastGroupHolder::tryRegisterDemoActor(LiveActor*, const char*, const JMapInfoIter&) const=0x801358E0
DemoCastGroupHolder::getCastGroup(int) const=0x80135980
DemoCastGroupHolder::findCastGroup(const char*) const=0x80135990
DemoCastGroupHolder::__dt(void)=0x80135A10
DemoCastSubGroup::__ct(const char*)=0x80135A70
DemoCastSubGroup::init(const JMapInfoIter&)=0x80135AC0
DemoCastSubGroup::tryRegisterDemoActor(LiveActor*, const JMapInfoIter&, const JMapIdInfo&)=0x80135B00
DemoCastSubGroup::__dt(void)=0x80135B90
DemoCtrlBase::__ct(LiveActor*, const char*)=0x80135BF0
DemoCtrlBase::init(const JMapInfoIter&)=0x80135C10
DemoCtrlBase::tryStart(void)=0x80135C20
DemoCtrlBase::end(void)=0x80135D00
DemoCtrlBase::update(void)=0x80135D80
DemoCtrlBase::isDone(void) const=0x80135E30
DemoCtrlBase::isExistEndFrame(void) const=0x80135E40
DemoDirector::__ct(const char*)=0x80135E80
DemoDirector::movement(void)=0x80135F90
DemoDirector::getCurrentDemoName(void) const=0x80136230
DemoDirector::endDemo(NameObj*, const char*, bool)=0x80136250
DemoDirector::isExistTimeKeepDemo(const char*) const=0x80136330
DemoDirector::registerDemoCast(LiveActor*, const JMapInfoIter&)=0x801363B0
DemoDirector::registerDemoCast(LiveActor*, const char*, const JMapInfoIter&)=0x80136480
DemoDirector::registerDemoSimpleCast(LiveActor*)=0x801364F0
DemoDirector::registerDemoSimpleCast(LayoutActor*)=0x80136500
DemoDirector::registerDemoSimpleCast(NameObj*)=0x80136510
DemoEndStartPosCameraSetter::__ct(const char*)=0x801367A0
DemoEndStartPosCameraSetter::init(const JMapInfoIter&)=0x801367E0
DemoEndStartPosCameraSetter::__dt(void)=0x801369D0
DemoExecutor::__ct(const char*)=0x80136A30
DemoExecutor::init(const JMapInfoIter&)=0x80136AD0
DemoExecutor::registerDemoActor(LiveActor*, const JMapInfoIter&)=0x80136C60
DemoExecutor::movement(void)=0x80136D10
std::for_each<DemoTalkAnimCtrl*,std::binder2nd<std::mem_fun1_t<void,DemoTalkAnimCtrl,const char*>,const char*>>(DemoTalkAnimCtrl*, DemoTalkAnimCtrl*, std::binder2nd<std::mem_fun1_t<void,DemoTalkAnimCtrl,const char*>,const char*>, _Q23std59binder2nd<std::mem_fun1_t<void,DemoTalkAnimCtrl,const char*>,const char*>)=0x80137110
DemoExecutor::startProperDemoSystem(void)=0x80137190
DemoExecutor::startDemoSystemPart(const char*, long)=0x801371C0
DemoExecutor::tryStartProperDemoSystem(void)=0x80137290
DemoExecutor::tryStartDemoSystemPart(const char*, long)=0x801372C0
DemoExecutor::tryStartProperDemoSystemPart(const char*)=0x801373B0
DemoExecutor::pause(void)=0x801373E0
DemoExecutor::resume(void)=0x801373F0
DemoExecutor::addTalkAnimCtrl(DemoTalkAnimCtrl*)=0x801374E0
DemoExecutor::addTalkMessageCtrl(LiveActor*, TalkMessageCtrl*)=0x80137500
DemoExecutor::findTalkMessageCtrl(const LiveActor*) const=0x80137520
MR::Vector<MR::FixedArray<DemoSheetKeeperBase*,2>>::push_back(const DemoSheetKeeperBase*)=0x80137C30
DemoExecutor::__dt(void)=0x80137CF0
DemoExecutorFunction::registerDemoActionFunction(const DemoExecutor*, const LiveActor*, const MR::FunctorBase&, const char*)=0x80137D50
DemoExecutorFunction::registerDemoActionNerve(const DemoExecutor*, const LiveActor*, const Nerve*, const char*)=0x80137D60
DemoExecutorFunction::isExistDemoPart(const DemoExecutor*, const char*)=0x80137D70
DemoExecutorFunction::isExistDemoPartMain(const DemoExecutor*, const char*)=0x80137DD0
DemoExecutorFunction::isExistDemoPartSub(const DemoExecutor*, const char*)=0x80137E50
DemoExecutorFunction::isRegisteredDemoCast(const DemoExecutor*, const LiveActor*)=0x80137ED0
DemoExecutorFunction::tryCreateDemoTalkAnimCtrlForActor(DemoExecutor*, LiveActor*, const char*, const char*)=0x80137FB0
DemoExecutorFunction::tryCreateDemoTalkAnimCtrlForScene(DemoExecutor*, LiveActor*, const JMapInfoIter&, const char*, const char*, long, long)=0x80138030
DemoExecutorFunction::registerDemoTalkMessageCtrl(DemoExecutor*, LiveActor*, TalkMessageCtrl*)=0x801380D0
DemoExecutorFunction::pauseTimeKeepDemo(DemoExecutor*)=0x801380E0
DemoExecutorFunction::resumeTimeKeepDemo(DemoExecutor*)=0x801380F0
DemoExecutorFunction::isPauseTimeKeepDemo(const DemoExecutor*)=0x80138100
DemoFunction::getDemoDirector(void)=0x80138110
DemoFunction::getDemoCastSubGroupHolder(void)=0x80138140
DemoFunction::registerDemoSimpleCastAllFunction(LiveActor*)=0x80138260
DemoFunction::registerDemoSimpleCastAllFunction(LayoutActor*)=0x801382A0
DemoFunction::registerDemoSimpleCastAllFunction(NameObj*)=0x801382E0
DemoFunction::registerDemoActionFunctorFunction(const LiveActor*, const MR::FunctorBase&, const char*)=0x80138320
DemoFunction::registerDemoActionFunctorFunction(const LiveActor*, const MR::FunctorBase&, const char*, const char*)=0x80138370
DemoFunction::registerDemoActionNerveFunction(const LiveActor*, const Nerve*, const char*)=0x801383C0
DemoFunction::tryStartDemoRegistered(LiveActor*, const char*)=0x80138460
DemoFunction::tryStartDemoRegisteredMarioPuppetable(LiveActor*, const char*)=0x801384C0
DemoFunction::registerDemoExecutor(DemoExecutor*)=0x80138520
DemoFunction::findDemoExecutor(const char*)=0x80138560
DemoFunction::findDemoExecutor(const LiveActor*)=0x801385B0
DemoFunction::findDemoExecutorActive(const LiveActor*)=0x80138640
DemoFunction::isDemoCast(const DemoExecutor*, const LiveActor*)=0x801386E0
DemoFunction::isExistDemoPart(const DemoExecutor*, const char*)=0x801386F0
DemoFunction::loadDemoArchive(void)=0x801387D0
DemoFunction::createSheetParser(const DemoExecutor*, const char*, JMapInfo*)=0x80138880
DemoFunction::isDemoPartActiveFunction(const char*)=0x80138A20
DemoFunction::getDemoPartStepFunction(const char*)=0x80138A80
DemoFunction::getDemoPartTotalStepFunction(const char*)=0x80138AD0
DemoFunction::isDemoLastPartLastStep(void)=0x80138BC0
DemoFunction::getCurrentDemoPartNameMain(const char*)=0x80138CF0
DemoFunction::isTargetDemoCast(LiveActor*, const JMapInfoIter&, const char*, long)=0x80138E10
DemoFunction::isRegisteredDemoActionAppear(const LiveActor*)=0x80138E90
DemoFunction::isRegisteredDemoActionNerve(const LiveActor*)=0x80138F10
DemoFunction::isRegisteredDemoCast(const LiveActor*, const char*)=0x80138F90
DemoFunction::pauseTimeKeepDemo(LiveActor*)=0x80139020
DemoFunction::resumeTimeKeepDemo(LiveActor*)=0x80139050
DemoFunction::isPauseTimeKeepDemo(LiveActor*)=0x80139080
DemoFunction::pauseTimeKeepDemo(const char*)=0x801390B0
DemoFunction::tryCreateDemoTalkAnimCtrlForActorDirect(LiveActor*, const char*, const char*, const char*)=0x80139190
MR::Demo::getPadRumble(const char*)=0x801393D0
MR::Demo::isExistCameraShaking(const char*)=0x80139400
MR::Demo::isExistPadRumble(const char*)=0x80139440
DemoPlayerKeeper::__ct(const DemoExecutor*)=0x80139480
DemoPositionController::__ct(const char*, const JMapInfoIter&)=0x80139850
DemoPositionController::control(void, _0)=0x80139910
DemoPositionController::initAnimCamera(const char*)=0x80139920
DemoPositionController::endDemo(const char*)=0x801399A0
DemoSimpleCastHolder::__ct(long, long, long)=0x80139A60
DemoSimpleCastHolder::movementOnAllCasts(void)=0x80139B60
MR::AssignableArray<NameObj*>::__dt(void)=0x80139CE0
DemoSoundKeeper::__ct(DemoExecutor*)=0x80139D70
DemoStartInfo::__ct(void)=0x8013A1E0
DemoStartInfo::__as(const DemoStartInfo&)=0x8013A220
DemoStartRequestHolder::__ct(void)=0x8013A2C0
MR::FixedRingBuffer<const DemoStartInfo*,16>::iterator::__ct(const DemoStartInfo*, const DemoStartInfo*)=0x8013A390
DemoStartRequestHolder::pushRequest(LiveActor*, const char*)=0x8013A3A0
MR::FixedRingBuffer<const DemoStartInfo*,16>::push_back(const DemoStartInfo*)=0x8013A3F0
MR::FixedRingBuffer<const DemoStartInfo*,16>::iterator::__pp(void)=0x8013A450
DemoStartRequestHolder::pushRequest(LayoutActor*, const char*)=0x8013A480
DemoStartRequestHolder::isExistRequest(void) const=0x8013A620
DemoStartRequestHolder::getCurrentInfo(void) const=0x8013A630
DemoStartRequestHolder::registerStartDemoInfo(const DemoStartInfo&)=0x8013A650
DemoStartRequestHolder::find(const LiveActor*, const char*) const=0x8013A690
DemoStartRequestHolder::find(const LayoutActor*, const char*) const=0x8013A720
DemoStartRequestHolder::findEmpty(void) const=0x8013A8D0
DemoStartRequestUtil::startDemoSystem(LiveActor*, const char*, long, DemoStartInfo::DemoType, DemoStartInfo::CinemaFrameType, DemoStartInfo::StarPointerType, DemoStartInfo::DeleteEffectType, const char*)=0x8013A960
DemoStartRequestUtil::startDemoSystem(LayoutActor*, const char*, long, DemoStartInfo::DemoType, DemoStartInfo::CinemaFrameType, DemoStartInfo::StarPointerType, DemoStartInfo::DeleteEffectType, const char*)=0x8013AB10
DemoStartRequestUtil::requestStartDemo(LiveActor*, const char*, const Nerve*, const Nerve*, long, DemoStartInfo::DemoType, DemoStartInfo::CinemaFrameType, DemoStartInfo::StarPointerType, DemoStartInfo::DeleteEffectType)=0x8013AB90
DemoStartRequestUtil::requestStartDemo(LayoutActor*, const char*, const Nerve*, const Nerve*, long, DemoStartInfo::DemoType, DemoStartInfo::CinemaFrameType, DemoStartInfo::StarPointerType, DemoStartInfo::DeleteEffectType)=0x8013ACC0
DemoStartRequestUtil::requestStartTimeKeepDemo(NameObj*, const char*, const char*, long, DemoStartInfo::DemoType, DemoStartInfo::CinemaFrameType, DemoStartInfo::StarPointerType, DemoStartInfo::DeleteEffectType)=0x8013B230
@unnamed@DemoStartRequestUtil_cpp@::setDemoStartInfoCommon(DemoStartInfo*, const char*, const char*, long, DemoStartInfo::DemoType, DemoStartInfo::CinemaFrameType, DemoStartInfo::StarPointerType, DemoStartInfo::DeleteEffectType)=0x8013B4F0
DemoStartRequestUtil::getDemoStarter(const DemoStartInfo&)=0x8013B560
DemoStartRequestUtil::isEmpty(const DemoStartInfo*)=0x8013B680
DemoSubPartKeeper::__ct(const DemoExecutor*)=0x8013B760
DemoSubPartInfo::__ct(void)=0x8013B870
DemoSubPartKeeper::end(void)=0x8013B940
DemoTalkAnimCtrl::__ct(LiveActor*, const char*, const char*)=0x8013BAA0
DemoTalkAnimCtrl::initForActor(const char*)=0x8013BB60
DemoTalkAnimCtrl::initForScene(const char*, const char*, const JMapInfoIter&)=0x8013BC20
DemoTalkAnimCtrl::updateDemo(void)=0x8013BD30
DemoTalkAnimCtrl::setupStartDemoPart(const char*)=0x8013C540
DemoTimeKeeper::__ct(const DemoExecutor*)=0x8013C5F0
DemoTimeKeeper::start(void)=0x8013C770
DemoTimeKeeper::update(void)=0x8013C790
DemoTimeKeeper::end(void)=0x8013C830
DemoTimeKeeper::isCurrentDemoPartLastStep(void) const=0x8013C9E0
DemoTitleAnim::__ct(const char*)=0x8013CF50
DemoTitleAnim::init(const JMapInfoIter&)=0x8013CFB0
DemoTitleAnim::control(void)=0x8013D260
DemoTitleAnim::__dt(void)=0x8013D5C0
short::(nit_\DemoTitleAnim_cpp)=0x8013D620
DemoWipeInfo::__ct(void)=0x8013D6E0
DemoWipeKeeper::__ct(DemoExecutor*)=0x8013D710
DemoWipeKeeper::update(void)=0x8013D870
DemoWipeKeeper::executeType(const DemoWipeInfo*)=0x8013D8F0
DemoWipeKeeper::getName(void) const=0x8013D980
MR::Vector<MR::AssignableArray<DemoWipeInfo>>::push_back(const DemoWipeInfo&)=0x8013D990
GrandStarReturnDemoStarter::__ct(const char*)=0x8013D9E0
GrandStarReturnDemoStarter::init(const JMapInfoIter&)=0x8013DA70
GrandStarReturnDemoStarter::appear(void)=0x8013DBE0
GrandStarReturnDemoStarter::control(void)=0x8013DC60
GrandStarReturnDemoStarter::calcOffsetStarToCore(JGeometry::TVec3<float>*) const=0x8013DD00
GrandStarReturnDemoStarter::emitEffectRush(void)=0x8013DD90
GrandStarReturnDemoStarter::updateRushStarPos(const JGeometry::TVec3<float>&, long)=0x8013DE10
GrandStarReturnDemoStarter::tryStartStageResult(const char*)=0x8013DEA0
GrandStarReturnDemoStarter::exeMove(void)=0x8013DF10
GrandStarReturnDemoStarter::exeFlyWait(void)=0x8013E020
GrandStarReturnDemoStarter::exeRushToCore(void)=0x8013E0F0
GrandStarReturnDemoStarter::exeFadeOut(void)=0x8013E330
GrandStarReturnDemoStarter::exeWaitDemoEnd(void)=0x8013E3B0
GrandStarReturnDemoStarter::__dt(void)=0x8013E430
short::(nit_\GrandStarReturnDemoStarter_cpp)=0x8013E490
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvMove::__ct(void)=0x8013E4F0
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvFlyWait::__ct(void)=0x8013E500
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvRushToCore::__ct(void)=0x8013E510
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvFadeOut::__ct(void)=0x8013E550
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvWaitDemoEnd::__ct(void)=0x8013E560
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvWaitDemoEnd::execute(Spine*) const=0x8013E570
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvFadeOut::execute(Spine*) const=0x8013E580
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvRushToCore::execute(Spine*) const=0x8013E600
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvFlyWait::execute(Spine*) const=0x8013E610
NrvGrandStarReturnDemoStarter::GrandStarReturnDemoStarterNrvMove::execute(Spine*) const=0x8013E620
MarioFaceAfterGrandStarTakeOffDemoObj::__ct(const char*)=0x8013E630
MarioFaceAfterGrandStarTakeOffDemoObj::init(const JMapInfoIter&)=0x8013E680
MarioFaceAfterGrandStarTakeOffDemoObj::exeDemo(void)=0x8013E7F0
MR::FunctorV0M<MarioFaceAfterGrandStarTakeOffDemoObj*,M37MarioFaceAfterGrandStarTakeOffDemoObjFPCvPv_v>::__cl(void) const=0x8013E940
MR::FunctorV0M<MarioFaceAfterGrandStarTakeOffDemoObj*,M37MarioFaceAfterGrandStarTakeOffDemoObjFPCvPv_v>::clone(JKRHeap*) const=0x8013E970
MarioFaceAfterGrandStarTakeOffDemoObj::__dt(void)=0x8013E9E0
short::(nit_\MarioFaceAfterGrandStarTakeOffDemoObj_cpp)=0x8013EA40
NrvMarioFaceAfterGrandStarTakeOffDemoObj::MarioFaceAfterGrandStarTakeOffDemoObjNrvWait::__ct(void)=0x8013EA70
NrvMarioFaceAfterGrandStarTakeOffDemoObj::MarioFaceAfterGrandStarTakeOffDemoObjNrvDemo::__ct(void)=0x8013EA80
NrvMarioFaceAfterGrandStarTakeOffDemoObj::MarioFaceAfterGrandStarTakeOffDemoObjNrvDemo::execute(Spine*) const=0x8013EA90
NrvMarioFaceAfterGrandStarTakeOffDemoObj::MarioFaceAfterGrandStarTakeOffDemoObjNrvWait::execute(Spine*) const=0x8013EAA0
MarioFacePlanetTakeOffDemoObj::__ct(const char*)=0x8013EAB0
MarioFacePlanetTakeOffDemoObj::init(const JMapInfoIter&)=0x8013EB00
MarioFacePlanetTakeOffDemoObj::__dt(void)=0x8013EEA0
short::(nit_\MarioFacePlanetTakeOffDemoObj_cpp)=0x8013EF00
MeetKoopaDemoObj::__ct(const char*)=0x8013EF70
MeetKoopaDemoObj::init(const JMapInfoIter&)=0x8013EFD0
MeetKoopaDemoObj::kill(void)=0x8013F630
KoopaAssaultFallObj::__ct(const char*)=0x8013F6B0
KoopaAssaultFallObj::init(const JMapInfoIter&)=0x8013F710
KoopaAssaultFallObj::appear(void)=0x8013F800
KoopaAssaultFallObj::makeActorDead(void)=0x8013F880
MeetKoopaDemoObj::__dt(void)=0x8013FA80
KoopaAssaultFallObj::__dt(void)=0x8013FAE0
short::(nit_\MeetKoopaDemoObj_cpp)=0x8013FB40
NormalEndingDemoObj::__ct(const char*)=0x8013FEE0
NormalEndingDemoObj::init(const JMapInfoIter&)=0x8013FF60
NormalEndingDemoObj::initAfterPlacement(void)=0x801403F0
NormalEndingDemoObj::kill(void)=0x80140930
DemoAstroPlanet::__ct(const char*, A4_f)=0x80140A20
DemoAstroPlanet::init(const JMapInfoIter&)=0x80140AA0
DemoAstroPlanet::control(void)=0x80140BA0
DemoAstroPlanet::calcAndSetBaseMtx(void)=0x80140C90
JointControlDelegator<DemoAstroPlanet>::__dt(void)=0x80140D30
JointControlDelegator<DemoAstroPlanet>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80140D70
JointControlDelegator<DemoAstroPlanet>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80140DE0
NormalEndingDemoObj::__dt(void)=0x80140E50
DemoAstroPlanet::__dt(void)=0x80140EB0
short::(nit_\NormalEndingDemoObj_cpp)=0x80140F10
OpeningDemoObj::__ct(const char*)=0x80141000
OpeningDemoObj::init(const JMapInfoIter&)=0x80141060
OpeningDemoObj::kill(void)=0x80141760
OpeningDemoObj::__dt(void)=0x80141930
short::(nit_\OpeningDemoObj_cpp)=0x80141990
PrepareKoopaFinalDemoObj::__ct(const char*)=0x80141B40
PrepareKoopaFinalDemoObj::init(const JMapInfoIter&)=0x80141B90
PrepareKoopaFinalDemoObj::initAfterPlacement(void)=0x80141EC0
PrepareKoopaFinalDemoObj::control(void)=0x80141FA0
PrepareKoopaFinalDemoObj::__dt(void)=0x80142100
short::(nit_\PrepareKoopaFinalDemoObj_cpp)=0x80142160
ReturnDemoRailMove::__ct(LiveActor*, LiveActor*, const JMapInfoIter&, bool, JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80142350
ReturnDemoRailMove::posToStart(void)=0x80142440
ReturnDemoRailMove::posToEnd(void)=0x801424A0
ReturnDemoRailMove::start(void)=0x80142500
ReturnDemoRailMove::offPathDraw(void)=0x80142590
ReturnDemoRailMove::update(long, long)=0x801425B0
ReturnDemoRailMove::getDemoFlyBrakeFrame(void) const=0x80142820
ReturnDemoRailMove::setupPathDrawForGraneStarReturnDemo(void)=0x80142840
ReturnDemoRailMove::calcPathPosDir(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, float) const=0x80142880
ScenarioStarter::__ct(const char*)=0x80142950
ScenarioStarter::init(const JMapInfoIter&)=0x80142A40
ScenarioStarter::kill(void)=0x80142C60
ScenarioStarter::getStartPos(JGeometry::TVec3<float>*)=0x80142CC0
ScenarioStarter::exeWaitToStart(void)=0x80142D00
ScenarioStarter::exeCinemaFrameBlank(void)=0x80142D50
ScenarioStarter::exeRailMove(void)=0x80142E20
ScenarioStarter::exeRailMoveCanceled(void)=0x80143210
ScenarioStarter::exeShowWelcomeLayout(void)=0x801432B0
ScenarioStarter::initShootPath(const JMapInfoIter&)=0x80143420
ScenarioStarter::updateBindPosition(void)=0x801434B0
ScenarioStarter::updateBindActorMtx(void)=0x80143570
ScenarioStarter::updateShootMotion(void)=0x801437A0
ScenarioStarter::turnBindHead(const JGeometry::TVec3<float>&, float)=0x801438A0
ScenarioStarter::calcShootMotionTime(void)=0x80143A60
ScenarioStarter::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80143BF0
ScenarioStarter::trySkipTrigger(void) const=0x80143DA0
ScenarioStarter::isStartBgmOnWelcome(void)=0x80143E50
ScenarioStarter::__dt(void)=0x80143F50
short::(nit_\ScenarioStarter_cpp)=0x80143FB0
NrvScenarioStarter::ScenarioStarterWaitScenarioCameraEnd::__ct(void)=0x80144000
NrvScenarioStarter::ScenarioStarterWaitToStart::__ct(void)=0x80144010
NrvScenarioStarter::ScenarioStarterCinemaFrameBlank::__ct(void)=0x80144020
NrvScenarioStarter::ScenarioStarterRailMove::__ct(void)=0x80144030
NrvScenarioStarter::ScenarioStarterRailMoveCanceled::__ct(void)=0x80144040
NrvScenarioStarter::ScenarioStarterShowWelcomeLayout::__ct(void)=0x80144050
NrvScenarioStarter::ScenarioStarterShowWelcomeLayout::execute(Spine*) const=0x80144060
NrvScenarioStarter::ScenarioStarterRailMoveCanceled::execute(Spine*) const=0x80144070
NrvScenarioStarter::ScenarioStarterRailMove::execute(Spine*) const=0x80144080
NrvScenarioStarter::ScenarioStarterCinemaFrameBlank::execute(Spine*) const=0x80144090
NrvScenarioStarter::ScenarioStarterWaitToStart::execute(Spine*) const=0x801440A0
NrvScenarioStarter::ScenarioStarterWaitScenarioCameraEnd::execute(Spine*) const=0x801440B0
StaffRollDemoObj::__ct(const char*)=0x80144710
StaffRollDemoObj::init(const JMapInfoIter&)=0x80144780
StaffRollDemoObj::__dt(void)=0x801450E0
short::(nit_\StaffRollDemoObj_cpp)=0x80145160
StarReturnDemoStarter::__ct(const char*)=0x80145300
StarReturnDemoStarter::init(const JMapInfoIter&)=0x80145390
StarReturnDemoStarter::appear(void)=0x80145520
StarReturnDemoStarter::kill(void)=0x801455A0
StarReturnDemoStarter::control(void)=0x801455F0
StarReturnDemoStarter::createSubModel(const char*, const char*, bool)=0x80145630
StarReturnDemoStarter::tryRegisterDemo(const char*, const JMapInfoIter&)=0x801456D0
StarReturnDemoStarter::tryStartStageResult(void)=0x80145750
StarReturnDemoStarter::exeAppearWait(void)=0x801457D0
StarReturnDemoStarter::exeMove(void)=0x80145880
StarReturnDemoStarter::exeFlyWaitPowerStar(void)=0x80145950
StarReturnDemoStarter::exeFlyWaitGrandStar(void)=0x80145A20
StarReturnDemoStarter::exeFall(void)=0x80145B20
StarReturnDemoStarter::exeLand(void)=0x80145CD0
StarReturnDemoStarter::exeWait(void)=0x80145D80
StarReturnDemoStarter::exeStageResult(void)=0x80145E00
StarReturnDemoStarter::exeFadeOut(void)=0x80145EA0
StarReturnDemoStarter::exeStageResultAfter(void)=0x80145F00
StarReturnDemoStarter::__dt(void)=0x80145F80
short::(nit_\StarReturnDemoStarter_cpp)=0x80145FE0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvAppearWait::__ct(void)=0x80146050
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvMove::__ct(void)=0x80146060
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFlyWaitPowerStar::__ct(void)=0x80146070
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFlyWaitGrandStar::__ct(void)=0x80146080
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFall::__ct(void)=0x80146090
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvLand::__ct(void)=0x801460A0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvWait::__ct(void)=0x801460B0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvStageResult::__ct(void)=0x801460C0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFadeOut::__ct(void)=0x801460D0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvStageResultAfter::__ct(void)=0x801460E0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvStageResultAfter::execute(Spine*) const=0x801460F0
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFadeOut::execute(Spine*) const=0x80146100
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvStageResult::execute(Spine*) const=0x80146110
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvWait::execute(Spine*) const=0x80146120
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvLand::execute(Spine*) const=0x80146130
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFall::execute(Spine*) const=0x80146140
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFlyWaitGrandStar::execute(Spine*) const=0x80146150
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvFlyWaitPowerStar::execute(Spine*) const=0x80146160
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvMove::execute(Spine*) const=0x80146170
NrvStarReturnDemoStarter::StarReturnDemoStarterNrvAppearWait::execute(Spine*) const=0x80146180
StoryBookWarpDemo::__ct(void)=0x80146190
MR::getFrameBufferHeight(void)=0x80146310
StoryBookWarpDemo::init(const JMapInfoIter&)=0x80146320
StoryBookWarpDemo::calcAnim(void)=0x80146FA0
StoryBookWarpDemo::calcAndSetBaseMtx(void)=0x80146FF0
StoryBookWarpDemo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801470F0
StoryBookPlayStaffRollFilter::calcAndSetBaseMtx(void)=0x801479D0
MR::FunctorV0M<StoryBookWarpDemo*,M17StoryBookWarpDemoFPCvPv_v>::__cl(void) const=0x801479E0
MR::FunctorV0M<StoryBookWarpDemo*,M17StoryBookWarpDemoFPCvPv_v>::clone(JKRHeap*) const=0x80147A10
StoryBookPlayStaffRollFilter::__dt(void)=0x80147A80
StoryBookWarpDemo::__dt(void)=0x80147AE0
short::(nit_\StoryBookWarpDemo_cpp)=0x80147B40
TransformFaceTicoBabyDemoObj::__ct(const char*)=0x80147EB0
TransformFaceTicoBabyDemoObj::init(const JMapInfoIter&)=0x80147F00
TransformFaceTicoBabyDemoObj::kill(void)=0x80147FD0
TransformFaceTicoBabyDemoObj::__dt(void)=0x80148010
short::(nit_\TransformFaceTicoBabyDemoObj_cpp)=0x80148070
AutoEffectGroup::__ct(const char*, int)=0x80148160
AutoEffectGroup::add(const JMapInfoIter&)=0x801481C0
MR::Effect::createAutoEffectGroup(const char*)=0x80148240
MR::Effect::addAutoEffectsFromGroup(const AutoEffectGroup*, EffectKeeper*, const LiveActor*)=0x80148310
MR::Effect::addAutoEffectsFromGroup(const AutoEffectGroup*, PaneEffectKeeper*, const LayoutActor*)=0x80148380
MR::Effect::addAutoEffectsFromGroup(const AutoEffectGroup*, MultiSceneEffectKeeper*, const MultiSceneActor*)=0x801483F0
AutoEffectGroupHolder::__ct(void)=0x80148460
AutoEffectGroupHolder::find(const char*) const=0x80148470
std::find_if<const AutoEffectGroup*,MR::eq_ptr_case<AutoEffectGroup*>>(const AutoEffectGroup*, const AutoEffectGroup*, MR::eq_ptr_case<AutoEffectGroup*>, _PCP15AutoEffectGroup)=0x801484D0
AutoEffectGroupHolder::isExist(const char*) const=0x80148540
MR::Effect::createAndAddAutoEffectGroup(AutoEffectGroupHolder*, const char*)=0x801485A0
MR::Effect::registerAutoEffectInfos(AutoEffectGroupHolder*, EffectKeeper*, const LiveActor*, const char*)=0x80148620
MR::Effect::registerAutoEffectInfos(AutoEffectGroupHolder*, PaneEffectKeeper*, const LayoutActor*, const char*)=0x80148670
MR::Effect::registerAutoEffectInfos(AutoEffectGroupHolder*, MultiSceneEffectKeeper*, const MultiSceneActor*, const char*)=0x801486C0
@unnamed@AutoEffectInfo_cpp@::str2Color(const char*)=0x80148710
@unnamed@AutoEffectInfo_cpp@::isValueOnT(const JMapInfoIter&, const char*)=0x80148740
@unnamed@AutoEffectInfo_cpp@::isValueOnR(const JMapInfoIter&, const char*)=0x80148780
@unnamed@AutoEffectInfo_cpp@::isValueOnS(const JMapInfoIter&, const char*)=0x801487C0
@unnamed@AutoEffectInfo_cpp@::getStringValue(const JMapInfoIter&, const char*)=0x80148800
AutoEffectInfo::__ct(void)=0x80148850
AutoEffectInfo::init(const JMapInfoIter&)=0x801488B0
Color8::set(_GXColor)=0x80148C30
AutoEffectInfo::getName(void) const=0x80148C60
CaveStream::__ct(const char*)=0x80148C80
SimpleEffectObj::__dt(void)=0x80148CC0
EffectObjR500F50::__dt(void)=0x80148D20
SimpleEffectObj::isSyncClipping(void) const=0x80148D90
SimpleEffectObj::getClippingCenterOffset(void) const=0x80148DA0
EffectObjR500F50::getFarClipDistance(void) const=0x80148DC0
EffectObjR500F50::getClippingRadius(void) const=0x80148DD0
CaveStream::__dt(void)=0x80148DE0
EffectSystem::__ct(const char*, bool)=0x80148E40
EffectSystem::init(const JMapInfoIter&)=0x80148F00
EffectSystem::entry(ParticleResourceHolder*, unsigned long, unsigned long)=0x80148F10
EffectSystem::createEmitter(unsigned short, unsigned char, unsigned char)=0x80148FD0
EffectSystem::forceDeleteEmitter(ParticleEmitter*) const=0x80149080
EffectSystem::forceDeleteSingleEmitter(SingleEmitter*) const=0x801490F0
EffectSystem::createSingleEmitter(SingleEmitter*, MultiEmitterCallBackBase*, MultiEmitterParticleCallBack*)=0x80149140
MR::getEffectSystem(void)=0x80149200
EffectSystem::__dt(void)=0x80149230
@unnamed@EffectSystemUtil_cpp@::setupMultiEmitter(MultiEmitter*, const AutoEffectInfo*)=0x80149290
MR::Effect::requestMovementOnAllEmitters(void)=0x801493B0
MR::Effect::requestMovementOffAllEmitters(void)=0x801493F0
MR::Effect::requestMovementOffAllLoopEmitters(void)=0x80149430
MR::Effect::checkEffectSceneUpdate(const EffectSystem*)=0x80149460
MR::Effect::movementEffectNormal(const EffectSystem*)=0x80149470
MR::Effect::drawEffect3D(const EffectSystem*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80149480
MR::Effect::drawEffect2D(const EffectSystem*)=0x80149490
MR::Effect::forceDeleteAllEmitters(const EffectSystem*)=0x801494A0
MR::Effect::isExistInResource(unsigned short*, const char*, long)=0x801494B0
MR::Effect::isExistInResource(unsigned short*, const char*)=0x80149510
MR::Effect::isEffect2D(const MultiEmitter*)=0x80149560
MR::Effect::getAutoEffectNum(const char*)=0x801495A0
MR::Effect::getAutoEffectListBinary(void)=0x801495F0
MR::Effect::setupMultiEmitter(EffectKeeper*, const ModelManager*, const AutoEffectInfo*)=0x80149660
MR::Effect::setupMultiEmitterSyncBck(EffectKeeper*, const ModelManager*, const AutoEffectInfo*)=0x80149700
MR::Effect::registerAutoEffectInfoGroup(EffectKeeper*, const LiveActor*, const char*)=0x80149950
MR::Effect::requestMovementOn(EffectKeeper*)=0x801499B0
MR::Effect::requestMovementOff(EffectKeeper*)=0x80149A30
MR::Effect::registerAutoEffectInfoGroup(PaneEffectKeeper*, const LayoutActor*, const char*)=0x80149AB0
MR::Effect::registerAutoEffectInfoGroup(PaneEffectKeeper*, const EffectSystem*, const LayoutActor*, const char*)=0x80149B10
MR::Effect::getEffectAttributeName(long)=0x80149B70
MR::Effect::createAutoEffect(const char*, const char*)=0x80149BE0
MR::Effect::addAutoEffect(EffectKeeper*, const LiveActor*, const AutoEffectInfo*)=0x80149D20
MR::Effect::addAutoEffect(PaneEffectKeeper*, const LayoutActor*, const AutoEffectInfo*)=0x80149E10
MR::Effect::addAutoEffect(MultiSceneEffectKeeper*, const MultiSceneActor*, const AutoEffectInfo*)=0x80149E70
MR::Effect::registerAutoEffectInfoGroup(MultiSceneEffectKeeper*, const EffectSystem*, const MultiSceneActor*, const char*)=0x80149F10
MR::Effect::deleteParticleEmitter(ParticleEmitter*)=0x80149F70
MR::Effect::setLinkSingleEmitter(ParticleEmitter*, SingleEmitter*)=0x80149FB0
MR::Effect::getLinkSingleEmitter(const JPABaseEmitter*)=0x80149FC0
MR::Effect::forceDeleteAllOneTimeEmitter(void)=0x80149FD0
MR::Effect::createParticleEmitter(ParticleEmitter*, JPAEmitterManager*, const JGeometry::TVec3<float>&, unsigned short, unsigned char, unsigned char)=0x8014A000
MultiEmitter::__ct(const char*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8014A070
MultiEmitter::__ct(const char*, A4_fRCQ29JGeometry8TVec3<float>)=0x8014A140
MultiEmitter::__ct(const char*, A4_fPCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x8014A200
MultiEmitter::__ct(const char*)=0x8014A2D0
MultiEmitter::createEmitter(void)=0x8014A390
MultiEmitter::createEmitterWithCallBack(MultiEmitterCallBackBase*)=0x8014A3D0
MultiEmitter::deleteEmitter(void)=0x8014A4B0
std::for_each<MultiEmitter*,std::mem_fun_t<void,MultiEmitter>>(MultiEmitter*, MultiEmitter*, std::mem_fun_t<void,MultiEmitter>, _Q23std27mem_fun_t<void,MultiEmitter>)=0x8014A580
MultiEmitter::forceDeleteEmitter(void)=0x8014A600
MultiEmitter::forceDelete(EffectSystem*)=0x8014A6B0
MultiEmitter::deleteForeverEmitter(void)=0x8014A780
MultiEmitter::playCalcAndDeleteForeverEmitter(void)=0x8014A850
MultiEmitter::isValid(void) const=0x8014A890
MultiEmitter::isExistOneTimeEmitter(void) const=0x8014A900
MultiEmitter::setHostSRT(const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*)=0x8014A970
MultiEmitter::setHostMtx(A4_f)=0x8014A980
MultiEmitter::setOffset(const JGeometry::TVec3<float>&)=0x8014A990
MultiEmitter::setBaseScale(float)=0x8014A9B0
MultiEmitter::setName(const char*)=0x8014A9C0
MultiEmitter::isEqualName(unsigned short) const=0x8014AA00
MultiEmitter::getParticleEmitter(int) const=0x8014AA20
MultiEmitter::create(EffectSystem*)=0x8014AA70
MultiEmitter::scanParticleEmitter(EffectSystem*)=0x8014AB20
MultiEmitter::forceFollowOn(void)=0x8014ABB0
MultiEmitter::forceFollowOff(void)=0x8014ABC0
MultiEmitter::forceScaleOn(void)=0x8014ABD0
MultiEmitter::initSyncBck(XanimePlayer*, const char*, long, float)=0x8014ABE0
MultiEmitter::onDeleteSyncBck(bool, float)=0x8014AC70
MultiEmitter::setContinueBckEnd(bool)=0x8014ACA0
MultiEmitter::onCreateSyncClipping(void)=0x8014ACB0
MultiEmitter::onForceDeleteSyncClipping(void)=0x8014ACC0
MultiEmitter::stopEmitterOnClipped(void)=0x8014ACD0
MultiEmitter::playEmitterOffClipped(void)=0x8014ADC0
MultiEmitter::setDrawOrder(long)=0x8014AEB0
SingleEmitter::setGroupID(unsigned char)=0x8014AF50
MultiEmitter::addChildEmitter(MultiEmitter*)=0x8014AF60
MultiEmitter::setGlobalRotationDegree(const JGeometry::TVec3<float>&, long)=0x8014AF80
JGeometry::TVec3<short>::__ct<short>(short, short, short, _Pv)=0x8014B020
MultiEmitter::allocateEmitter(const char*)=0x8014B030
MultiEmitter::getValidEmitter(long, bool)=0x8014B1F0
MultiEmitter::createOneTimeEmitter(void)=0x8014B240
MultiEmitter::createForeverEmitter(void)=0x8014B2D0
MR::Vector<MR::FixedArray<unsigned short,32>>::push_back(const unsigned short&)=0x8014B360
MultiEmitter::setGlobalRotation(const JGeometry::TVec3<short>&, long)=0x8014B380
ParticleEmitter::setGlobalRotation(const JGeometry::TVec3<short>&)=0x8014B420
MultiEmitter::setGlobalTranslation(const JGeometry::TVec3<float>&, long)=0x8014B440
MultiEmitter::setGlobalScale(const JGeometry::TVec3<float>&, long)=0x8014B4F0
ParticleEmitter::setGlobalScale(const JGeometry::TVec3<float>&)=0x8014B590
MultiEmitter::setGlobalSRTMatrix(A4_Cfl)=0x8014B5E0
ParticleEmitter::setGlobalSRTMatrix(A4_Cf)=0x8014B680
MultiEmitter::setGlobalPrmColor(unsigned char, unsigned char, unsigned char, long)=0x8014B6D0
ParticleEmitter::setGlobalPrmColor(unsigned char, unsigned char, unsigned char)=0x8014B7D0
MultiEmitter::setGlobalEnvColor(unsigned char, unsigned char, unsigned char, long)=0x8014B7F0
ParticleEmitter::setGlobalEnvColor(unsigned char, unsigned char, unsigned char)=0x8014B8F0
MultiEmitter::setLocalScale(const JGeometry::TVec3<float>&, long)=0x8014B910
MultiEmitter::setDirectionalSpeed(float, long)=0x8014B9B0
MultiEmitter::setRate(float, long)=0x8014BA50
MultiEmitter::stopCalcEmitter(long)=0x8014BAF0
MultiEmitter::playCalcEmitter(long)=0x8014BBA0
MultiEmitter::stopDrawParticle(long)=0x8014BC50
MultiEmitter::playDrawParticle(long)=0x8014BD00
MultiEmitter::setParticleCallBackPtr(JPAParticleCallBack*, long)=0x8014BDB0
MultiEmitter::pauseOn(long)=0x8014BE50
MultiEmitter::pauseOff(long)=0x8014BEE0
@unnamed@MultiEmitterCallBack_cpp@::getSyntheticColor(const Color8&, const Color8&)=0x8014BF70
MultiEmitterCallBack::__ct(const MultiEmitter*, const JGeometry::TVec3<float>&)=0x8014BFE0
MultiEmitterCallBackBase::__ct(void)=0x8014C090
MultiEmitterCallBackBase::__dt(void)=0x8014C0A0
MultiEmitterCallBack::__ct(const MultiEmitter*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x8014C100
MultiEmitterCallBack::__ct(const MultiEmitter*, A4_fRCQ29JGeometry8TVec3<float>)=0x8014C1C0
MultiEmitterCallBack::__ct(const MultiEmitter*, A4_fPCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x8014C270
MultiEmitterCallBack::execute(JPABaseEmitter*)=0x8014C330
MultiEmitterCallBack::setHostSRT(const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*)=0x8014C390
MultiEmitterCallBack::setHostMtx(A4_f)=0x8014C3B0
MultiEmitterCallBack::setBaseScale(float)=0x8014C3D0
MultiEmitterCallBack::forceFollowOn(void)=0x8014C400
MultiEmitterCallBack::forceFollowOff(void)=0x8014C410
MultiEmitterCallBack::forceScaleOn(void)=0x8014C420
MultiEmitterCallBack::resetFollowCurrent(void)=0x8014C430
MultiEmitterCallBack::init(JPABaseEmitter*)=0x8014C440
MultiEmitterCallBack::setSRTFromHostMtx(JPABaseEmitter*, A4_fRCQ220MultiEmitterCallBack7FlagSRTb)=0x8014C450
MultiEmitterCallBack::setSRTFromHostSRT(JPABaseEmitter*, const MultiEmitterCallBack::FlagSRT&, bool)=0x8014C570
MultiEmitterCallBack::setScaleFromHostScale(JPABaseEmitter*, const JGeometry::TVec3<float>&, bool, bool)=0x8014C820
JPABaseEmitter::setGlobalScale(const JGeometry::TVec3<float>&)=0x8014C8E0
MultiEmitterCallBack::effectLight(JPABaseEmitter*)=0x8014C930
MultiEmitterCallBack::followSRT(JPABaseEmitter*, bool)=0x8014C960
MultiEmitterCallBack::setColor(JPABaseEmitter*)=0x8014CA20
JPABaseEmitter::setGlobalPrmColor(unsigned char, unsigned char, unsigned char)=0x8014CB20
JPABaseEmitter::setGlobalEnvColor(unsigned char, unsigned char, unsigned char)=0x8014CB30
_GXColor::__as(const _GXColor&)=0x8014CB40
MultiEmitterCallBack::isFollowSRT(MultiEmitterCallBack::FlagSRT*, bool) const=0x8014CB70
JPAEmitterCallBack::drawAfter(JPABaseEmitter*)=0x8014CD40
JPAEmitterCallBack::draw(JPABaseEmitter*)=0x8014CD50
JPAEmitterCallBack::executeAfter(JPABaseEmitter*)=0x8014CD60
JPAEmitterCallBack::execute(JPABaseEmitter*)=0x8014CD70
MultiEmitterCallBackBase::init(JPABaseEmitter*)=0x8014CD80
MultiEmitterCallBack::__dt(void)=0x8014CD90
MultiEmitterParticleCallBack::__ct(void)=0x8014CDF0
JPAParticleCallBack::draw(JPABaseEmitter*, JPABaseParticle*)=0x8014CE00
JPAParticleCallBack::execute(JPABaseEmitter*, JPABaseParticle*)=0x8014CE10
MultiEmitterParticleCallBack::__dt(void)=0x8014CE20
ParticleCalcExecutor::__ct(const EffectSystem*, bool)=0x8014CE80
ParticleCalcExecutor::initMovementAdaptor(void)=0x8014CEE0
MR::Functor<ParticleCalcExecutor>(ParticleCalcExecutor*, M20ParticleCalcExecutorFPCvPv_v_Q22MR67FunctorV0M<ParticleCalcExecutor*,M20ParticleCalcExecutorFPCvPv_v>)=0x8014D0E0
ParticleCalcExecutor::movementNormal(void)=0x8014D120
ParticleCalcExecutor::movementIgnorePause3D(void)=0x8014D220
ParticleCalcExecutor::movementIgnorePause2D(void)=0x8014D280
ParticleCalcExecutor::movementCheckUpdate(void, _0)=0x8014D2E0
ParticleCalcExecutor::requestMovementOnPauseIgnore(void)=0x8014D2F0
ParticleCalcExecutor::requestMovementOffPauseIgnore(void)=0x8014D330
MR::FunctorV0M<ParticleCalcExecutor*,M20ParticleCalcExecutorFPCvPv_v>::__cl(void) const=0x8014D370
MR::FunctorV0M<ParticleCalcExecutor*,M20ParticleCalcExecutorFPCvPv_v>::clone(JKRHeap*) const=0x8014D3A0
@unnamed@ParticleDrawExecutor_cpp@::connectToSceneDrawAdaptor(NameObjAdaptor*, const MR::FunctorBase&, int)=0x8014D410
ParticleDrawExecutor::__ct(const EffectSystem*, bool)=0x8014D490
ParticleDrawExecutor::initDrawAdaptor(void)=0x8014D500
MR::Functor<ParticleDrawExecutor>(const ParticleDrawExecutor*, M20ParticleDrawExecutorFPCvPCv_v_Q22MR69FunctorV0M<const ParticleDrawExecutor*,M20ParticleDrawExecutorFPCvPCv_v>)=0x8014D800
ParticleDrawExecutor::initDraw(void)=0x8014D840
ParticleDrawExecutor::draw3D(void) const=0x8014D8A0
ParticleDrawExecutor::draw2D(void) const=0x8014D8E0
ParticleDrawExecutor::drawIndirect(void) const=0x8014DA60
ParticleDrawExecutor::drawAfterIndirect(void) const=0x8014DB10
ParticleDrawExecutor::drawFor2DModel(void) const=0x8014DB50
ParticleDrawExecutor::drawForBloomEffect(void) const=0x8014DBC0
ParticleDrawExecutor::drawAfterImageEffect(void) const=0x8014DC00
ParticleDrawExecutor::drawForWorldMap(void) const=0x8014DC40
ParticleDrawExecutor::drawWithViewMtx3D(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x8014DC80
ParticleDrawExecutor::drawWithViewMtxAfterIndirect(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x8014DD00
ParticleDrawExecutor::drawWithViewMtxForBloomEffect(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x8014DD70
ParticleDrawExecutor::drawWithViewMtxAfterImageEffect(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x8014DDE0
ParticleDrawExecutor::drawWithViewMtxForWorldMap(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x8014DE50
MR::FunctorV0F::clone(JKRHeap*) const=0x8014DEC0
MR::FunctorV0F::__cl(void) const=0x8014DF10
MR::FunctorV0M<const ParticleDrawExecutor*,M20ParticleDrawExecutorFPCvPCv_v>::__cl(void) const=0x8014DF20
MR::FunctorV0M<const ParticleDrawExecutor*,M20ParticleDrawExecutorFPCvPCv_v>::clone(JKRHeap*) const=0x8014DF50
ParticleEmitter::__ct(void)=0x8014DFC0
ParticleEmitter::invalidate(void)=0x8014DFE0
ParticleEmitter::init(unsigned short)=0x8014DFF0
ParticleEmitter::pauseOn(void)=0x8014E010
ParticleEmitter::pauseOff(void)=0x8014E050
ParticleEmitterHolder::__ct(const EffectSystem*, int)=0x8014E080
ParticleEmitterHolder::update(bool)=0x8014E100
ParticleEmitter::isValid(void) const=0x8014E200
ParticleEmitterHolder::forceDeleteAllOneTimeEmitters(void)=0x8014E210
ParticleEmitter::isContinuousParticle(void) const=0x8014E290
ParticleEmitterHolder::forceDeleteAllEmitters(void)=0x8014E2C0
ParticleEmitterHolder::requestMovementOnAllEmitters(void)=0x8014E320
ParticleEmitterHolder::requestMovementOffAllEmitters(void)=0x8014E3A0
ParticleEmitterHolder::findAvailableParticleEmitter(void)=0x8014E420
ParticleEmitterHolder::requestMovementOffAllLoopEmitters(void)=0x8014E4E0
ParticleResourceHolder::__ct(const char*)=0x8014E560
ParticleResourceHolder::swapTexture(const ResTIMG*, const char*)=0x8014E680
ParticleResourceHolder::getUserIndex(const char*) const=0x8014E690
ParticleResourceHolder::isExistInResource(const char*, unsigned short*) const=0x8014E7C0
ParticleResourceHolder::getAutoEffectListBinary(void) const=0x8014E810
RandomEffectObj::__ct(const char*)=0x8014E820
RandomEffectObj::init(const JMapInfoIter&)=0x8014E880
RandomEffectObj::appear(void)=0x8014E8E0
RandomEffectObj::control(void)=0x8014E920
RandomEffectObj::getRandomTime(void) const=0x8014E9B0
RandomEffectObj::getFarClipDistance(void) const=0x8014EA40
RandomEffectObj::getClippingRadius(void) const=0x8014EA50
RandomEffectObj::__dt(void)=0x8014EA60
@unnamed@SimpleEffectObj_cpp@::findDataElement(const char*)=0x8014EAC0
SimpleEffectObj::__ct(const char*)=0x8014EB40
SimpleEffectObj::init(const JMapInfoIter&)=0x8014EB90
SimpleEffectObj::getClippingRadius(void) const=0x8014EE70
SimpleEffectObj::getFarClipDistance(void) const=0x8014EE80
MR::Functor<SimpleEffectObj>(SimpleEffectObj*, M15SimpleEffectObjFPCvPv_v_Q22MR57FunctorV0M<SimpleEffectObj*,M15SimpleEffectObjFPCvPv_v>)=0x8014EE90
SimpleEffectObj::isStateMove(void) const=0x8014EED0
SimpleEffectObj::startClipped(void)=0x8014EEE0
SimpleEffectObj::endClipped(void)=0x8014EF50
SimpleEffectObj::setStateWait(void)=0x8014EFC0
SimpleEffectObj::setStateMove(void)=0x8014F000
SimpleEffectObj::exeMove(void)=0x8014F010
MR::FunctorV0M<SimpleEffectObj*,M15SimpleEffectObjFPCvPv_v>::__cl(void) const=0x8014F1C0
MR::FunctorV0M<SimpleEffectObj*,M15SimpleEffectObjFPCvPv_v>::clone(JKRHeap*) const=0x8014F1F0
short::(nit_\SimpleEffectObj_cpp)=0x8014F260
NrvSimpleEffectObj::HostTypeWait::__ct(void)=0x8014F290
NrvSimpleEffectObj::HostTypeMove::__ct(void)=0x8014F2A0
NrvSimpleEffectObj::HostTypeMove::execute(Spine*) const=0x8014F2B0
NrvSimpleEffectObj::HostTypeWait::execute(Spine*) const=0x8014F2C0
SingleEmitter::__ct(void)=0x8014F2D0
SingleEmitter::init(unsigned short)=0x8014F2F0
SingleEmitter::deleteEmitter(void)=0x8014F300
SingleEmitter::scanParticleEmitter(EffectSystem*)=0x8014F340
SingleEmitter::isOneTime(void) const=0x8014F3E0
SingleEmitter::isValid(void) const=0x8014F430
SingleEmitter::link(ParticleEmitter*)=0x8014F460
SingleEmitter::unlink(void)=0x8014F480
SpinPullParticleCallBack::__ct(void)=0x8014F8F0
SpinPullParticleCallBack::execute(JPABaseEmitter*, JPABaseParticle*)=0x8014F940
SpinPullParticleCallBack::__dt(void)=0x8014FA00
WaterFortressRain::__ct(const char*)=0x8014FA60
WaterFortressRain::init(const JMapInfoIter&)=0x8014FAB0
WaterFortressRain::control(void)=0x8014FB90
WaterFortressRain::exeRain(void)=0x8014FBE0
WaterFortressRain::exeRainSlow(void)=0x8014FC50
WaterFortressRain::__dt(void)=0x8014FCC0
short::(nit_\WaterFortressRain_cpp)=0x8014FD20
NrvWaterFortressRain::WaterFortressRainNrvRain::__ct(void)=0x8014FD50
NrvWaterFortressRain::WaterFortressRainNrvRainSlow::__ct(void)=0x8014FD60
NrvWaterFortressRain::WaterFortressRainNrvRainSlow::execute(Spine*) const=0x8014FD70
NrvWaterFortressRain::WaterFortressRainNrvRain::execute(Spine*) const=0x8014FD80
WalkerStateBindStarPointer::__ct(LiveActor*, AnimScaleController*)=0x8014FD90
ActorStateBase<LiveActor>::__dt(void)=0x8014FE50
WalkerStateBindStarPointer::appear(void)=0x8014FEB0
WalkerStateBindStarPointer::kill(void)=0x8014FEC0
WalkerStateBindStarPointer::tryStartPointBind(void) const=0x8014FF60
WalkerStateBindStarPointer::exeBind(void)=0x8014FF70
WalkerStateBindStarPointer::__dt(void)=0x80150070
short::(nit_\WalkerStateBindStarPointer_cpp)=0x801500D0
NrvWalkerStateBindStarPointer::WalkerStateBindStarPointerNrvBind::__ct(void)=0x801500E0
NrvWalkerStateBindStarPointer::WalkerStateBindStarPointerNrvBind::execute(Spine*) const=0x801500F0
@unnamed@AnimScaleController_cpp@::AnimScaleDefaultParam::__ct(void)=0x80150100
AnimScaleParam::__ct(void)=0x80150170
AnimScaleController::__ct(AnimScaleParam*)=0x801501D0
AnimScaleController::setParamTight(void)=0x80150260
AnimScaleController::startAnim(void)=0x80150280
AnimScaleController::startDpdHitVibration(void)=0x80150290
AnimScaleController::startHitReaction(void)=0x801502A0
AnimScaleController::startScaleVelocityY(float)=0x801502B0
AnimScaleController::startAndAddScaleVelocityY(float)=0x801502C0
AnimScaleController::startCrush(void)=0x801502E0
AnimScaleController::stopAndReset(void)=0x801502F0
AnimScaleController::stop(void)=0x80150330
AnimScaleController::resetScale(void)=0x80150390
AnimScaleController::exeAnim(void)=0x801503B0
AnimScaleController::exeHitReaction(void)=0x801503F0
AnimScaleController::exeDpdVibration(void)=0x80150460
AnimScaleController::exeCrush(void)=0x801504F0
AnimScaleController::isHitReaction(long) const=0x80150590
AnimScaleController::tryStop(void)=0x80150600
AnimScaleController::update(void)=0x80150670
AnimScaleController::updateScale(float, float)=0x80150680
MR::updateBaseScale(LiveActor*, AnimScaleController*)=0x80150720
AnimScaleController::__dt(void)=0x80150770
short::(nit_\AnimScaleController_cpp)=0x801507D0
NrvAnimScaleController::AnimScaleControllerNrvAnim::__ct(void)=0x80150820
NrvAnimScaleController::AnimScaleControllerNrvStop::__ct(void)=0x80150830
NrvAnimScaleController::AnimScaleControllerNrvDpdVibration::__ct(void)=0x80150840
NrvAnimScaleController::AnimScaleControllerNrvHitReaction::__ct(void)=0x80150850
NrvAnimScaleController::AnimScaleControllerNrvCrush::__ct(void)=0x80150860
NrvAnimScaleController::AnimScaleControllerNrvCrush::execute(Spine*) const=0x80150870
NrvAnimScaleController::AnimScaleControllerNrvHitReaction::execute(Spine*) const=0x80150880
NrvAnimScaleController::AnimScaleControllerNrvDpdVibration::execute(Spine*) const=0x80150890
NrvAnimScaleController::AnimScaleControllerNrvStop::execute(Spine*) const=0x801508A0
NrvAnimScaleController::AnimScaleControllerNrvAnim::execute(Spine*) const=0x801508B0
AnimStampController::__ct(void)=0x801508C0
AnimStampController::init(long, float, float, float, float, float, float)=0x80150940
AnimStampController::startAnim(const JGeometry::TVec3<float>&)=0x801509A0
AnimStampController::exeAnim(void)=0x801509F0
AnimStampController::isAnimEnd(void) const=0x80150B40
AnimStampController::__dt(void)=0x80150B50
short::(nit_\AnimStampController_cpp)=0x80150BB0
NrvAnimStampController::HostNrvAnim::__ct(void)=0x80150BE0
NrvAnimStampController::HostNrvAnimEnd::__ct(void)=0x80150BF0
NrvAnimStampController::HostNrvAnimEnd::execute(Spine*) const=0x80150C00
NrvAnimStampController::HostNrvAnim::execute(Spine*) const=0x80150C10
AttackRock::__ct(const char*)=0x80150C20
AttackRock::init(const JMapInfoIter&)=0x80150CD0
AttackRock::makeActorAppeared(void)=0x80150EE0
AttackRock::makeActorDead(void)=0x80150EF0
AttackRock::control(void)=0x80150F30
AttackRock::calcAndSetBaseMtx(void)=0x80150FA0
AttackRock::attackSensor(HitSensor*, HitSensor*)=0x80150FE0
AttackRock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801511C0
AttackRock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80151260
AttackRock::__dt(void)=0x80151880
short::(nit_\AttackRock_cpp)=0x801518E0
AttackRockFinal::__ct(const char*)=0x80151AA0
AttackRockFinal::init(const JMapInfoIter&)=0x80151B60
AttackRockFinal::makeActorDead(void)=0x80151DE0
AttackRockFinal::control(void)=0x80151E20
AttackRockFinal::calcAndSetBaseMtx(void)=0x80151F20
AttackRockFinal::attackSensor(HitSensor*, HitSensor*)=0x80151F60
AttackRockFinal::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80152010
AttackRockFinal::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801520A0
AttackRockFinal::__dt(void)=0x80152790
short::(nit_\AttackRockFinal_cpp)=0x801527F0
AttackRockTutorial::__ct(const char*)=0x801545D0
AttackRockTutorial::init(const JMapInfoIter&)=0x80154670
AttackRockTutorial::makeActorAppeared(void)=0x80154850
AttackRockTutorial::makeActorDead(void)=0x80154890
AttackRockTutorial::control(void)=0x801548D0
AttackRockTutorial::calcAndSetBaseMtx(void)=0x80154920
AttackRockTutorial::attackSensor(HitSensor*, HitSensor*)=0x80154960
AttackRockTutorial::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80154A00
AttackRockTutorial::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80154AD0
AttackRockTutorial::__dt(void)=0x80155130
short::(nit_\AttackRockTutorial_cpp)=0x80155190
BakuBaku::__ct(const char*)=0x801556B0
BakuBaku::init(const JMapInfoIter&)=0x80155730
BakuBaku::initAfterPlacement(void)=0x80155850
BakuBaku::attackSensor(HitSensor*, HitSensor*)=0x80155860
BakuBaku::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80155930
BakuBaku::isAttackable(void) const=0x80155A00
BakuBaku::control(void)=0x80155A80
BakuBaku::calcAndSetBaseMtx(void)=0x80155AF0
BakuBaku::exeTurn(void)=0x80155B30
BakuBaku::exeMove(void)=0x80155BF0
BakuBaku::exeSuccess(void)=0x80155CA0
BakuBaku::__dt(void)=0x80155FD0
short::(nit_\BakuBaku_cpp)=0x80156030
NrvBakuBaku::BakuBakuNrvMove::__ct(void)=0x80156070
NrvBakuBaku::BakuBakuNrvTurn::__ct(void)=0x80156080
NrvBakuBaku::BakuBakuNrvFreeze::__ct(void)=0x80156090
NrvBakuBaku::BakuBakuNrvAttackSuccess::__ct(void)=0x801560A0
NrvBakuBaku::BakuBakuNrvAttackSuccess::execute(Spine*) const=0x801560B0
NrvBakuBaku::BakuBakuNrvFreeze::execute(Spine*) const=0x801560C0
NrvBakuBaku::BakuBakuNrvTurn::execute(Spine*) const=0x801560D0
NrvBakuBaku::BakuBakuNrvMove::execute(Spine*) const=0x801560E0
Balloonfish::__ct(const char*)=0x801560F0
Balloonfish::init(const JMapInfoIter&)=0x80156160
Balloonfish::makeActorAppeared(void)=0x80156250
Balloonfish::appear(void)=0x80156290
Balloonfish::kill(void)=0x801562F0
Balloonfish::control(void)=0x80156350
Balloonfish::exeWait(void)=0x80156390
Balloonfish::exeDash(void)=0x80156510
Balloonfish::attackSensor(HitSensor*, HitSensor*)=0x80156700
Balloonfish::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801567C0
Balloonfish::calcAndSetBaseMtx(void)=0x80156860
MR::FunctorV0M<Balloonfish*,M11BalloonfishFPCvPv_v>::__cl(void) const=0x80156A90
MR::FunctorV0M<Balloonfish*,M11BalloonfishFPCvPv_v>::clone(JKRHeap*) const=0x80156AC0
Balloonfish::__dt(void)=0x80156B30
short::(nit_\Balloonfish_cpp)=0x80156B90
NrvBalloonfish::HostTypeNrvWait::__ct(void)=0x80156BC0
NrvBalloonfish::HostTypeNrvDash::__ct(void)=0x80156BD0
NrvBalloonfish::HostTypeNrvDash::execute(Spine*) const=0x80156BE0
NrvBalloonfish::HostTypeNrvWait::execute(Spine*) const=0x80156BF0
BasaBasa::__ct(const char*)=0x80156C00
BasaBasa::init(const JMapInfoIter&)=0x80156CB0
BasaBasa::exeWait(void)=0x80156FB0
BasaBasa::exeAirWait(void)=0x80157050
BasaBasa::exeChaseStart(void)=0x80157120
BasaBasa::exeChase(void)=0x80157210
BasaBasa::exeQuickTurnStart(void)=0x80157390
BasaBasa::exeQuickTurn(void)=0x80157400
BasaBasa::exeTrampleDown(void)=0x80157490
BasaBasa::exePunchDown(void)=0x80157560
BasaBasa::exeAttackStart(void)=0x80157600
BasaBasa::exeAttack(void)=0x801576F0
BasaBasa::exeAttackEnd(void)=0x80157890
BasaBasa::exeAttackEndRecover(void)=0x80157940
BasaBasa::exeHitBack(void)=0x80157A00
BasaBasa::exeHitBackEnd(void)=0x80157B20
BasaBasa::exeComeHome(void)=0x80157B90
BasaBasa::exeAttachCelling(void)=0x80157CC0
BasaBasa::exeDPDSwoon(void)=0x80157DD0
BasaBasa::exeStun(void)=0x80157E50
BasaBasa::initAfterPlacement(void)=0x80157EE0
BasaBasa::kill(void)=0x80157F90
BasaBasa::control(void)=0x80158000
BasaBasa::calcAndSetBaseMtx(void)=0x80158080
BasaBasa::attackSensor(HitSensor*, HitSensor*)=0x80158130
BasaBasa::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80158310
BasaBasa::receiveMsgPush(HitSensor*, HitSensor*)=0x80158510
BasaBasa::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801585E0
BasaBasa::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801586D0
BasaBasa::initHangModel(void)=0x80158790
BasaBasa::tryClippingAndResetPos(void)=0x80158820
BasaBasa::trySetNerveDPDSwoon(void)=0x80158930
BasaBasa::tryComeHome(void)=0x80158980
BasaBasa::updateRailType(void)=0x801589F0
BasaBasa::controlVelocity(void)=0x80158A60
BasaBasa::tuneHeight(void)=0x80158C60
BasaBasa::isNearTarget(float) const=0x80158D50
BasaBasa::isNrvEnableStun(void) const=0x80158DC0
BasaBasa::__dt(void)=0x80158E60
short::(nit_\BasaBasa_cpp)=0x80158EC0
NrvBasaBasa::BasaBasaNrvWait::__ct(void)=0x80158F70
NrvBasaBasa::BasaBasaNrvAirWait::__ct(void)=0x80158F80
NrvBasaBasa::BasaBasaNrvChaseStart::__ct(void)=0x80158F90
NrvBasaBasa::BasaBasaNrvChase::__ct(void)=0x80158FA0
NrvBasaBasa::BasaBasaNrvQuickTurnStart::__ct(void)=0x80158FB0
NrvBasaBasa::BasaBasaNrvQuickTurn::__ct(void)=0x80158FC0
NrvBasaBasa::BasaBasaNrvPunchDown::__ct(void)=0x80158FD0
NrvBasaBasa::BasaBasaNrvTrampleDown::__ct(void)=0x80158FE0
NrvBasaBasa::BasaBasaNrvAttackStart::__ct(void)=0x80158FF0
NrvBasaBasa::BasaBasaNrvAttack::__ct(void)=0x80159000
NrvBasaBasa::BasaBasaNrvAttackEnd::__ct(void)=0x80159010
NrvBasaBasa::BasaBasaNrvAttackEndRecover::__ct(void)=0x80159020
NrvBasaBasa::BasaBasaNrvHitBack::__ct(void)=0x80159030
NrvBasaBasa::BasaBasaNrvHitBackEnd::__ct(void)=0x80159040
NrvBasaBasa::BasaBasaNrvComeHome::__ct(void)=0x80159050
NrvBasaBasa::BasaBasaNrvAttachCelling::__ct(void)=0x80159060
NrvBasaBasa::BasaBasaNrvDPDSwoon::__ct(void)=0x80159070
NrvBasaBasa::BasaBasaNrvStun::__ct(void)=0x80159080
NrvBasaBasa::BasaBasaNrvStun::execute(Spine*) const=0x80159090
NrvBasaBasa::BasaBasaNrvDPDSwoon::executeOnEnd(Spine*) const=0x801590A0
NrvBasaBasa::BasaBasaNrvDPDSwoon::execute(Spine*) const=0x801590E0
NrvBasaBasa::BasaBasaNrvAttachCelling::execute(Spine*) const=0x801590F0
NrvBasaBasa::BasaBasaNrvComeHome::execute(Spine*) const=0x80159100
NrvBasaBasa::BasaBasaNrvHitBackEnd::execute(Spine*) const=0x80159110
NrvBasaBasa::BasaBasaNrvHitBack::execute(Spine*) const=0x80159120
NrvBasaBasa::BasaBasaNrvAttackEndRecover::execute(Spine*) const=0x80159130
NrvBasaBasa::BasaBasaNrvAttackEnd::execute(Spine*) const=0x80159140
NrvBasaBasa::BasaBasaNrvAttack::execute(Spine*) const=0x80159150
NrvBasaBasa::BasaBasaNrvAttackStart::execute(Spine*) const=0x80159160
NrvBasaBasa::BasaBasaNrvTrampleDown::execute(Spine*) const=0x80159170
NrvBasaBasa::BasaBasaNrvPunchDown::execute(Spine*) const=0x80159180
NrvBasaBasa::BasaBasaNrvQuickTurn::execute(Spine*) const=0x80159190
NrvBasaBasa::BasaBasaNrvQuickTurnStart::execute(Spine*) const=0x801591A0
NrvBasaBasa::BasaBasaNrvChase::execute(Spine*) const=0x801591B0
NrvBasaBasa::BasaBasaNrvChaseStart::execute(Spine*) const=0x801591C0
NrvBasaBasa::BasaBasaNrvAirWait::execute(Spine*) const=0x801591D0
NrvBasaBasa::BasaBasaNrvWait::execute(Spine*) const=0x801591E0
Battan::__ct(const char*)=0x801591F0
Battan::init(const JMapInfoIter&)=0x801592D0
Battan::makeActorAppeared(void)=0x801596A0
Battan::control(void)=0x80159700
Battan::calcAndSetBaseMtx(void)=0x8015A240
Battan::calcAnim(void)=0x8015A250
Battan::attackSensor(HitSensor*, HitSensor*)=0x8015A8B0
Battan::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8015AAC0
Battan::updateHitSensor(HitSensor*)=0x8015B4B0
Battan::__dt(void)=0x8015B670
short::(nit_\Battan_cpp)=0x8015B6D0
BeeEaterBody::__ct(BeeEater*, const char*, const char*)=0x8015BBF0
BeeEaterBody::init(const JMapInfoIter&)=0x8015BC50
BeeEaterBody::calcAndSetBaseMtx(void)=0x8015BCF0
BeeEater::__ct(const char*)=0x8015BD60
BeeEater::init(const JMapInfoIter&)=0x8015BE10
BeeEater::control(void)=0x8015BF60
BeeEater::calcAndSetBaseMtx(void)=0x8015BFE0
BeeEater::attackSensor(HitSensor*, HitSensor*)=0x8015C560
BeeEater::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8015C5F0
JointControlDelegator<BeeEaterBody>::__dt(void)=0x8015CE30
JointControlDelegator<BeeEaterBody>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8015CE70
JointControlDelegator<BeeEaterBody>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8015CEE0
BeeEater::__dt(void)=0x8015CF50
BeeEaterBody::__dt(void)=0x8015CFB0
short::(nit_\BeeEater_cpp)=0x8015D010
BegomanBaby::__ct(const char*)=0x8015D1B0
BegomanBase::__dt(void)=0x8015D210
BegomanBaby::__ct(NameObj*, const char*)=0x8015D270
BegomanBaby::init(const JMapInfoIter&)=0x8015D2E0
BegomanBaby::appear(void)=0x8015D4F0
BegomanBaby::appearFromLaunch(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8015D530
BegomanBaby::kill(void)=0x8015D5F0
BegomanBaby::killWithGenItem(void)=0x8015D650
BegomanBaby::control(void)=0x8015D710
BegomanBaby::exeSignAttack(void)=0x8015D9C0
BegomanBaby::exePursue(void)=0x8015DA70
BegomanBaby::exeTrample(void)=0x8015DB20
BegomanBaby::exeBlow(void)=0x8015DBF0
BegomanBaby::exeAfterLaunch(void)=0x8015DD00
BegomanBaby::exeAfterLaunchOnGround(void)=0x8015DEA0
BegomanBaby::exeLaunchTurn(void)=0x8015DF30
BegomanBaby::exeInWater(void)=0x8015DFD0
BegomanBaby::attackSensor(HitSensor*, HitSensor*)=0x8015E2F0
BegomanBaby::receiveMsgPush(HitSensor*, HitSensor*)=0x8015E480
BegomanBaby::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8015E500
BegomanBaby::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8015E660
BegomanBaby::receiveMsgTrample(HitSensor*, HitSensor*)=0x8015E800
BegomanBaby::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8015E880
BegomanBaby::onTouchElectric(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8015E890
BegomanBaby::setNerveReturn(void)=0x8015E970
BegomanBaby::getNerveWait(void)=0x8015E9A0
BegomanBaby::calcHeadJoint(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8015E9B0
BegomanBaby::calcAndSetBaseMtx(void)=0x8015EA40
BegomanBaby::getKind(void) const=0x8015EA80
JointControlDelegator<BegomanBaby>::__dt(void)=0x8015EA90
JointControlDelegator<BegomanBaby>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8015EAD0
JointControlDelegator<BegomanBaby>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8015EB40
BegomanBaby::__dt(void)=0x8015EBB0
short::(nit_\BegomanBaby_cpp)=0x8015EC10
NrvBegomanBaby::HostTypeNrvNoCalcWait::__ct(void)=0x8015ECD0
NrvBegomanBaby::HostTypeNrvWait::__ct(void)=0x8015ECE0
NrvBegomanBaby::HostTypeNrvSignAttack::__ct(void)=0x8015ECF0
NrvBegomanBaby::HostTypeNrvPursue::__ct(void)=0x8015ED00
NrvBegomanBaby::HostTypeNrvTurn::__ct(void)=0x8015ED10
NrvBegomanBaby::HostTypeNrvBrake::__ct(void)=0x8015ED20
NrvBegomanBaby::HostTypeNrvStepBack::__ct(void)=0x8015ED30
NrvBegomanBaby::HostTypeNrvReturn::__ct(void)=0x8015ED40
NrvBegomanBaby::HostTypeNrvProvoke::__ct(void)=0x8015ED50
NrvBegomanBaby::HostTypeNrvTrample::__ct(void)=0x8015ED60
NrvBegomanBaby::HostTypeNrvHitReaction::__ct(void)=0x8015ED70
NrvBegomanBaby::HostTypeNrvTired::__ct(void)=0x8015ED80
NrvBegomanBaby::HostTypeNrvBlow::__ct(void)=0x8015ED90
NrvBegomanBaby::HostTypeNrvAfterLaunch::__ct(void)=0x8015EDA0
NrvBegomanBaby::HostTypeNrvAfterLaunchOnGround::__ct(void)=0x8015EDB0
NrvBegomanBaby::HostTypeNrvLaunchFromGuarder::__ct(void)=0x8015EDC0
NrvBegomanBaby::HostTypeNrvLaunchTurn::__ct(void)=0x8015EDD0
NrvBegomanBaby::HostTypeNrvInWater::__ct(void)=0x8015EDE0
NrvBegomanBaby::HostTypeNrvKeepDistance::__ct(void)=0x8015EDF0
NrvBegomanBaby::HostTypeNrvBindStarPointer::__ct(void)=0x8015EE00
NrvBegomanBaby::HostTypeNrvBindStarPointer::execute(Spine*) const=0x8015EE10
NrvBegomanBaby::HostTypeNrvKeepDistance::execute(Spine*) const=0x8015EE20
NrvBegomanBaby::HostTypeNrvInWater::execute(Spine*) const=0x8015EE80
NrvBegomanBaby::HostTypeNrvLaunchTurn::execute(Spine*) const=0x8015EE90
NrvBegomanBaby::HostTypeNrvLaunchFromGuarder::execute(Spine*) const=0x8015EEA0
NrvBegomanBaby::HostTypeNrvAfterLaunchOnGround::execute(Spine*) const=0x8015EEB0
NrvBegomanBaby::HostTypeNrvAfterLaunch::execute(Spine*) const=0x8015EEC0
NrvBegomanBaby::HostTypeNrvBlow::execute(Spine*) const=0x8015EED0
NrvBegomanBaby::HostTypeNrvTired::execute(Spine*) const=0x8015EEE0
NrvBegomanBaby::HostTypeNrvHitReaction::execute(Spine*) const=0x8015EF50
NrvBegomanBaby::HostTypeNrvTrample::execute(Spine*) const=0x8015EFA0
NrvBegomanBaby::HostTypeNrvProvoke::execute(Spine*) const=0x8015EFB0
NrvBegomanBaby::HostTypeNrvReturn::execute(Spine*) const=0x8015F020
NrvBegomanBaby::HostTypeNrvStepBack::execute(Spine*) const=0x8015F070
NrvBegomanBaby::HostTypeNrvBrake::execute(Spine*) const=0x8015F0C0
NrvBegomanBaby::HostTypeNrvTurn::execute(Spine*) const=0x8015F140
NrvBegomanBaby::HostTypeNrvPursue::execute(Spine*) const=0x8015F1D0
NrvBegomanBaby::HostTypeNrvSignAttack::execute(Spine*) const=0x8015F1E0
NrvBegomanBaby::HostTypeNrvWait::execute(Spine*) const=0x8015F1F0
NrvBegomanBaby::HostTypeNrvNoCalcWait::executeOnEnd(Spine*) const=0x8015F260
NrvBegomanBaby::HostTypeNrvNoCalcWait::execute(Spine*) const=0x8015F270
BegomanBase::__ct(const char*)=0x8015F290
BegomanBase::getSoundNormal(void)=0x8015F390
BegomanBase::initCore(const JMapInfoIter&, const char*, bool)=0x8015F3A0
BegomanBase::initEffectAndStarPointerBind(void)=0x8015F590
BegomanBase::initAfterPlacement(void)=0x8015F670
BegomanBase::initShadow(float, const char*)=0x8015F680
BegomanBase::initEffect(long)=0x8015F6E0
BegomanBase::initSensor(long, float, float, const char*)=0x8015F7D0
BegomanBase::initUseSwitchB(const JMapInfoIter&, const MR::FunctorBase&)=0x8015F910
BegomanBase::makeActorDead(void)=0x8015F980
BegomanBase::appear(void)=0x8015F990
BegomanBase::kill(void)=0x8015F9E0
BegomanBase::control(void)=0x8015FA30
BegomanBase::startClipped(void)=0x8015FB50
BegomanBase::exeNoCalcWaitCore(float, const Nerve*)=0x8015FB60
BegomanBase::finishNoCalcWait(void)=0x8015FC70
BegomanBase::exeWaitCore(const MR::ActorMoveParam&, const Nerve*, const Nerve*, const Nerve*)=0x8015FCB0
BegomanBase::exeSignAttackCore(const MR::ActorMoveParam&, const Nerve*)=0x8015FEC0
BegomanBase::exePursueCore(const MR::ActorMoveParam&, const Nerve*, const Nerve*, const BegomanSound&, float)=0x8015FF90
BegomanBase::exeTurnCore(const MR::ActorMoveParam&, const Nerve*, const Nerve*, bool)=0x80160250
BegomanBase::exeBrakeCore(const Nerve*)=0x80160450
BegomanBase::exeStepBackCore(const MR::ActorMoveParam&, const Nerve*)=0x801605C0
BegomanBase::exeProvokeCore(const MR::ActorMoveParam&, const Nerve*)=0x80160640
BegomanBase::exeHitReactionCore(const MR::ActorMoveParam&, const Nerve*)=0x80160700
BegomanBase::exeTiredCore(const MR::ActorMoveParam&, const Nerve*)=0x801607A0
BegomanBase::exeReturnCore(const Nerve*)=0x80160850
BegomanBase::exeKeepDistanceCore(const Nerve*, const Nerve*, const Nerve*, float, float)=0x80160940
BegomanBase::addVelocityEscapeToSide(float)=0x80160AE0
BegomanBase::exeLaunch(void)=0x80160BA0
BegomanBase::exeBindStarPointer(void)=0x80160C30
BegomanBase::tryAndSetStarPointerBind(const Nerve*)=0x80160C80
BegomanBase::isNearInitPos(void) const=0x80160CE0
BegomanBase::trySetReturnNerve(void)=0x80160D20
BegomanBase::incAndCheckTiredCounter(void)=0x80160D90
BegomanBase::launchBegomanCore(LiveActor*, BegomanBase*, long, float, float, float, const JGeometry::TVec3<float>*)=0x80160DC0
BegomanBase::setNerveLaunch(void)=0x801610D0
BegomanBase::launchBegomanBabyLauncher(LiveActor*, BegomanBaby*, long, float, float, float, const JGeometry::TVec3<float>*)=0x801610E0
BegomanBase::updateRotateY(float, float)=0x80161160
BegomanBase::updateTargetVec(void)=0x801611C0
BegomanBase::reboundPlaneWithEffect(const JGeometry::TVec3<float>&, float, float, const char*)=0x80161210
BegomanBase::reboundWallAndGround(JGeometry::TVec3<float>*, bool)=0x801612D0
BegomanBase::isFallNextMove(float, float)=0x80161440
BegomanBase::calcDirectionAwayFromRail(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80161540
BegomanBase::addVelocityOnPushedFromElectricRail(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80161640
BegomanBase::checkTouchElectricRail(bool)=0x801616C0
BegomanBase::onTouchElectric(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80161820
BegomanBase::pushedFromElectricRail(HitSensor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, bool)=0x801618E0
BegomanBase::preventSwingby(float)=0x801619F0
BegomanBase::preventSlopeBlow(float)=0x80161A70
BegomanBase::dampingVerticalAndParallelVelocity(float, float)=0x80161B00
BegomanBase::isInWaterAndSetWaterNerve(const Nerve*, JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80161C10
BegomanBase::calcBlowReaction(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x80161CB0
BegomanBase::calcAnimCore(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80161E10
BegomanBase::calcJointLocator1(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80161ED0
BegomanBase::calcAndSetBaseMtx(void)=0x80161FE0
BegomanBase::requestAttack(void)=0x80162070
BegomanBase::func_801620B0(unsigned long*)=0x801620B0
BegomanAttackPermitter::__ct(const char*)=0x801621C0
BegomanAttackPermitter::init(const JMapInfoIter&)=0x80162220
BegomanAttackPermitter::control(void)=0x80162280
BegomanAttackPermitter::requestAttack(BegomanBase*)=0x80162290
BegomanAttackPermitter::exeWait(void)=0x801623F0
BegomanAttackPermitter::exeReceive(void)=0x80162440
JointControlDelegator<BegomanBase>::__dt(void)=0x801624A0
JointControlDelegator<BegomanBase>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801624E0
JointControlDelegator<BegomanBase>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80162550
BegomanAttackPermitter::__dt(void)=0x801625C0
short::(nit_\BegomanBase_cpp)=0x80162620
NrvBegomanAttackPermitter::HostTypeNrvWait::__ct(void)=0x80162660
NrvBegomanAttackPermitter::HostTypeNrvReceive::__ct(void)=0x80162670
NrvBegomanAttackPermitter::HostTypeNrvPermit::__ct(void)=0x80162680
NrvBegomanAttackPermitter::HostTypeNrvPermit::execute(Spine*) const=0x80162690
NrvBegomanAttackPermitter::HostTypeNrvReceive::execute(Spine*) const=0x801626E0
NrvBegomanAttackPermitter::HostTypeNrvWait::execute(Spine*) const=0x801626F0
JGeometry::TQuat4<float>::rotate(JGeometry::TVec3<float>&) const=0x80162700
BegomanLauncher::__ct(const char*)=0x80162830
BegomanLauncher::init(const JMapInfoIter&)=0x80162890
MR::Functor<BegomanLauncher>(BegomanLauncher*, M15BegomanLauncherFPCvPv_v_Q22MR57FunctorV0M<BegomanLauncher*,M15BegomanLauncherFPCvPv_v>)=0x80162C40
BegomanLauncher::initAfterPlacement(void)=0x80162C80
BegomanLauncher::kill(void)=0x80162C90
BegomanLauncher::onSwitchAppear(void)=0x80162D20
BegomanLauncher::exeWaitAfterSwitchOn(void)=0x80162D80
BegomanLauncher::exeWait(void)=0x80162E20
BegomanLauncher::exeLaunch(void)=0x80162F00
BegomanLauncher::exeAppear(void)=0x80163080
BegomanLauncher::exeDisappear(void)=0x80163130
MR::FunctorV0M<BegomanLauncher*,M15BegomanLauncherFPCvPv_v>::__cl(void) const=0x80163210
MR::FunctorV0M<BegomanLauncher*,M15BegomanLauncherFPCvPv_v>::clone(JKRHeap*) const=0x80163240
BegomanLauncher::__dt(void)=0x801632B0
short::(nit_\BegomanLauncher_cpp)=0x80163310
NrvBegomanLauncher::HostTypeNrvWaitAfterSwitchOn::__ct(void)=0x80163360
NrvBegomanLauncher::HostTypeNrvWait::__ct(void)=0x80163370
NrvBegomanLauncher::HostTypeNrvWaitForLaunch::__ct(void)=0x80163380
NrvBegomanLauncher::HostTypeNrvLaunch::__ct(void)=0x80163390
NrvBegomanLauncher::HostTypeNrvAppear::__ct(void)=0x801633A0
NrvBegomanLauncher::HostTypeNrvDisappear::__ct(void)=0x801633B0
NrvBegomanLauncher::HostTypeNrvDisappear::execute(Spine*) const=0x801633C0
NrvBegomanLauncher::HostTypeNrvAppear::execute(Spine*) const=0x801633D0
NrvBegomanLauncher::HostTypeNrvLaunch::execute(Spine*) const=0x801633E0
NrvBegomanLauncher::HostTypeNrvWaitForLaunch::execute(Spine*) const=0x801633F0
NrvBegomanLauncher::HostTypeNrvWait::execute(Spine*) const=0x80163440
NrvBegomanLauncher::HostTypeNrvWaitAfterSwitchOn::execute(Spine*) const=0x80163450
BegomanSpike::__ct(const char*)=0x80163460
BegomanSpike::makeActorAppeared(void)=0x801634D0
BegomanSpike::makeActorDead(void)=0x80163520
BegomanSpike::init(const JMapInfoIter&)=0x80163570
BegomanSpike::onSwitchB(void)=0x80163800
BegomanSpike::appear(void)=0x80163810
BegomanSpike::control(void)=0x80163880
BegomanSpike::onTouchElectric(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80163B60
BegomanSpike::setNerveReturn(void)=0x80163C80
BegomanSpike::getNerveWait(void)=0x80163CB0
BegomanSpike::setNerveLaunch(void)=0x80163CC0
BegomanSpike::exeSignAttack(void)=0x80163CD0
BegomanSpike::exePursue(void)=0x80163D80
BegomanSpike::tearDownPursue(void)=0x80163E60
BegomanSpike::exeTurn(void)=0x80163ED0
BegomanSpike::exeStepBack(void)=0x80163F90
BegomanSpike::exeTrampleReaction(void)=0x80164000
BegomanSpike::exeBlow(void)=0x801640B0
BegomanSpike::exeElectricDeath(void)=0x801641F0
BegomanSpike::exeBrokenPiece(void)=0x801642D0
BegomanSpike::exeInWater(void)=0x80164380
BegomanSpike::generateItem(void)=0x80164440
BegomanSpike::attackSensor(HitSensor*, HitSensor*)=0x80164640
BegomanSpike::receiveMsgPush(HitSensor*, HitSensor*)=0x801647D0
BegomanSpike::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80164830
BegomanSpike::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80164980
BegomanSpike::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80164C70
BegomanSpike::calcAnim(void)=0x80164C80
BegomanSpike::getKind(void) const=0x80164CC0
MR::FunctorV0M<BegomanSpike*,M12BegomanSpikeFPCvPv_v>::__cl(void) const=0x80164CD0
MR::FunctorV0M<BegomanSpike*,M12BegomanSpikeFPCvPv_v>::clone(JKRHeap*) const=0x80164D00
BegomanSpike::__dt(void)=0x80164D70
short::(nit_\BegomanSpike_cpp)=0x80164DD0
NrvBegomanSpike::HostTypeNrvNoCalcWait::__ct(void)=0x80164E90
NrvBegomanSpike::HostTypeNrvWait::__ct(void)=0x80164EA0
NrvBegomanSpike::HostTypeNrvSignAttack::__ct(void)=0x80164EB0
NrvBegomanSpike::HostTypeNrvPursue::__ct(void)=0x80164EC0
NrvBegomanSpike::HostTypeNrvTurn::__ct(void)=0x80164ED0
NrvBegomanSpike::HostTypeNrvBrake::__ct(void)=0x80164EE0
NrvBegomanSpike::HostTypeNrvStepBack::__ct(void)=0x80164EF0
NrvBegomanSpike::HostTypeNrvReturn::__ct(void)=0x80164F00
NrvBegomanSpike::HostTypeNrvProvoke::__ct(void)=0x80164F10
NrvBegomanSpike::HostTypeNrvTrampleReaction::__ct(void)=0x80164F20
NrvBegomanSpike::HostTypeNrvHitReaction::__ct(void)=0x80164F30
NrvBegomanSpike::HostTypeNrvTired::__ct(void)=0x80164F40
NrvBegomanSpike::HostTypeNrvBlow::__ct(void)=0x80164F50
NrvBegomanSpike::HostTypeNrvElectricDeath::__ct(void)=0x80164F60
NrvBegomanSpike::HostTypeNrvBrokenPiece::__ct(void)=0x80164F70
NrvBegomanSpike::HostTypeNrvInWater::__ct(void)=0x80164F80
NrvBegomanSpike::HostTypeNrvKeepDistance::__ct(void)=0x80164F90
NrvBegomanSpike::HostTypeNrvLaunch::__ct(void)=0x80164FA0
NrvBegomanSpike::HostTypeNrvBindStarPointer::__ct(void)=0x80164FB0
NrvBegomanSpike::HostTypeNrvBindStarPointer::execute(Spine*) const=0x80164FC0
NrvBegomanSpike::HostTypeNrvLaunch::execute(Spine*) const=0x80164FD0
NrvBegomanSpike::HostTypeNrvKeepDistance::execute(Spine*) const=0x80164FE0
NrvBegomanSpike::HostTypeNrvInWater::execute(Spine*) const=0x80165040
NrvBegomanSpike::HostTypeNrvBrokenPiece::execute(Spine*) const=0x80165050
NrvBegomanSpike::HostTypeNrvElectricDeath::execute(Spine*) const=0x80165060
NrvBegomanSpike::HostTypeNrvBlow::execute(Spine*) const=0x80165070
NrvBegomanSpike::HostTypeNrvTired::execute(Spine*) const=0x80165080
NrvBegomanSpike::HostTypeNrvHitReaction::executeOnEnd(Spine*) const=0x801650F0
NrvBegomanSpike::HostTypeNrvHitReaction::execute(Spine*) const=0x80165150
NrvBegomanSpike::HostTypeNrvTrampleReaction::executeOnEnd(Spine*) const=0x801651A0
NrvBegomanSpike::HostTypeNrvTrampleReaction::execute(Spine*) const=0x80165200
NrvBegomanSpike::HostTypeNrvProvoke::executeOnEnd(Spine*) const=0x80165210
NrvBegomanSpike::HostTypeNrvProvoke::execute(Spine*) const=0x80165270
NrvBegomanSpike::HostTypeNrvReturn::execute(Spine*) const=0x801652E0
NrvBegomanSpike::HostTypeNrvStepBack::execute(Spine*) const=0x80165330
NrvBegomanSpike::HostTypeNrvBrake::execute(Spine*) const=0x80165340
NrvBegomanSpike::HostTypeNrvTurn::executeOnEnd(Spine*) const=0x801653C0
NrvBegomanSpike::HostTypeNrvTurn::execute(Spine*) const=0x801653D0
NrvBegomanSpike::HostTypeNrvPursue::executeOnEnd(Spine*) const=0x801653E0
NrvBegomanSpike::HostTypeNrvPursue::execute(Spine*) const=0x801653F0
NrvBegomanSpike::HostTypeNrvSignAttack::executeOnEnd(Spine*) const=0x80165400
NrvBegomanSpike::HostTypeNrvSignAttack::execute(Spine*) const=0x80165460
NrvBegomanSpike::HostTypeNrvWait::executeOnEnd(Spine*) const=0x80165470
NrvBegomanSpike::HostTypeNrvWait::execute(Spine*) const=0x80165480
NrvBegomanSpike::HostTypeNrvNoCalcWait::executeOnEnd(Spine*) const=0x801654F0
NrvBegomanSpike::HostTypeNrvNoCalcWait::execute(Spine*) const=0x80165500
BegomanSpring::__ct(const char*)=0x80165510
BegomanSpring::init(const JMapInfoIter&)=0x801655C0
BegomanSpring::initEventCameras(const JMapInfoIter&)=0x801658C0
BegomanSpring::appear(void)=0x80165950
BegomanSpring::makeActorDead(void)=0x801659C0
BegomanSpring::kill(void)=0x80165A10
BegomanSpring::control(void)=0x80165A70
BegomanSpring::onTouchElectric(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80165E10
BegomanSpring::setNerveReturn(void)=0x80165F20
BegomanSpring::getNerveWait(void)=0x80165F50
BegomanSpring::exeSignAttack(void)=0x80165F60
BegomanSpring::exePursue(void)=0x80166010
BegomanSpring::exeTurn(void)=0x801660D0
BegomanSpring::exeStepBack(void)=0x80166170
BegomanSpring::exeShake(void)=0x801661E0
BegomanSpring::exeTrample(void)=0x801663F0
BegomanSpring::exeHitReaction(void)=0x80166520
BegomanSpring::exeBlow(void)=0x80166580
BegomanSpring::exeElectricDeath(void)=0x801666D0
BegomanSpring::exeHide(void)=0x80166790
BegomanSpring::exeHop(void)=0x80166890
BegomanSpring::exeInWater(void)=0x80166930
BegomanSpring::generateItem(void)=0x801669F0
BegomanSpring::startCamera(void)=0x80166A60
BegomanSpring::updateCamera(void)=0x80166A80
BegomanSpring::endCamera(void)=0x80166B60
BegomanSpring::attackSensor(HitSensor*, HitSensor*)=0x80166BD0
BegomanSpring::receiveMsgPush(HitSensor*, HitSensor*)=0x80166D60
BegomanSpring::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80166D70
BegomanSpring::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80167030
BegomanSpring::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80167390
BegomanSpring::calcAnim(void)=0x801673A0
BegomanSpring::getKind(void) const=0x801673E0
MR::FunctorV0M<BegomanSpring*,M13BegomanSpringFPCvPv_v>::__cl(void) const=0x801673F0
MR::FunctorV0M<BegomanSpring*,M13BegomanSpringFPCvPv_v>::clone(JKRHeap*) const=0x80167420
BegomanSpring::__dt(void)=0x80167490
short::(nit_\BegomanSpring_cpp)=0x801674F0
NrvBegomanSpring::HostTypeNrvNoCalcWait::__ct(void)=0x801675B0
NrvBegomanSpring::HostTypeNrvWait::__ct(void)=0x801675C0
NrvBegomanSpring::HostTypeNrvSignAttack::__ct(void)=0x801675D0
NrvBegomanSpring::HostTypeNrvPursue::__ct(void)=0x801675E0
NrvBegomanSpring::HostTypeNrvTurn::__ct(void)=0x801675F0
NrvBegomanSpring::HostTypeNrvBrake::__ct(void)=0x80167600
NrvBegomanSpring::HostTypeNrvStepBack::__ct(void)=0x80167610
NrvBegomanSpring::HostTypeNrvReturn::__ct(void)=0x80167620
NrvBegomanSpring::HostTypeNrvProvoke::__ct(void)=0x80167630
NrvBegomanSpring::HostTypeNrvShake::__ct(void)=0x80167640
NrvBegomanSpring::HostTypeNrvTrample::__ct(void)=0x80167650
NrvBegomanSpring::HostTypeNrvHitReaction::__ct(void)=0x80167660
NrvBegomanSpring::HostTypeNrvTired::__ct(void)=0x80167670
NrvBegomanSpring::HostTypeNrvBlow::__ct(void)=0x80167680
NrvBegomanSpring::HostTypeNrvElectricDeath::__ct(void)=0x80167690
NrvBegomanSpring::HostTypeNrvHide::__ct(void)=0x801676A0
NrvBegomanSpring::HostTypeNrvHop::__ct(void)=0x801676B0
NrvBegomanSpring::HostTypeNrvInWater::__ct(void)=0x801676C0
NrvBegomanSpring::HostTypeNrvKeepDistance::__ct(void)=0x801676D0
NrvBegomanSpring::HostTypeNrvBindStarPointer::__ct(void)=0x801676E0
NrvBegomanSpring::HostTypeNrvBindStarPointer::execute(Spine*) const=0x801676F0
NrvBegomanSpring::HostTypeNrvKeepDistance::execute(Spine*) const=0x80167750
NrvBegomanSpring::HostTypeNrvInWater::execute(Spine*) const=0x801677B0
NrvBegomanSpring::HostTypeNrvHop::execute(Spine*) const=0x801677C0
NrvBegomanSpring::HostTypeNrvHide::executeOnEnd(Spine*) const=0x801677D0
NrvBegomanSpring::HostTypeNrvHide::execute(Spine*) const=0x801677E0
NrvBegomanSpring::HostTypeNrvElectricDeath::execute(Spine*) const=0x801677F0
NrvBegomanSpring::HostTypeNrvBlow::execute(Spine*) const=0x80167800
NrvBegomanSpring::HostTypeNrvTired::execute(Spine*) const=0x80167810
NrvBegomanSpring::HostTypeNrvHitReaction::execute(Spine*) const=0x80167880
NrvBegomanSpring::HostTypeNrvTrample::execute(Spine*) const=0x80167890
NrvBegomanSpring::HostTypeNrvShake::execute(Spine*) const=0x801678A0
NrvBegomanSpring::HostTypeNrvProvoke::execute(Spine*) const=0x801678B0
NrvBegomanSpring::HostTypeNrvReturn::execute(Spine*) const=0x80167920
NrvBegomanSpring::HostTypeNrvStepBack::execute(Spine*) const=0x80167970
NrvBegomanSpring::HostTypeNrvBrake::execute(Spine*) const=0x80167980
NrvBegomanSpring::HostTypeNrvTurn::execute(Spine*) const=0x80167A00
NrvBegomanSpring::HostTypeNrvPursue::executeOnEnd(Spine*) const=0x80167A10
NrvBegomanSpring::HostTypeNrvPursue::execute(Spine*) const=0x80167A20
NrvBegomanSpring::HostTypeNrvSignAttack::execute(Spine*) const=0x80167A30
NrvBegomanSpring::HostTypeNrvWait::executeOnEnd(Spine*) const=0x80167A40
NrvBegomanSpring::HostTypeNrvWait::execute(Spine*) const=0x80167A50
NrvBegomanSpring::HostTypeNrvNoCalcWait::executeOnEnd(Spine*) const=0x80167AC0
NrvBegomanSpring::HostTypeNrvNoCalcWait::execute(Spine*) const=0x80167AD0
BegomanHead::calcAndSetBaseMtx(void)=0x80167AF0
BegomanSpringHead::__ct(LiveActor*, A4_f)=0x80167B50
BegomanHead::__dt(void)=0x80167BB0
BegomanSpringHead::init(const JMapInfoIter&)=0x80167C10
BegomanSpringHead::isSpringHop(void)=0x80167CB0
BegomanSpringHead::getHopEndBckFrameMax(void)=0x80167CE0
BegomanSpringHead::tryHopStart(void)=0x80167CF0
BegomanSpringHead::tryHopEnd(void)=0x80167D40
BegomanSpringHead::tryHopJump(void)=0x80167DA0
BegomanSpringHead::forceWaitImmediately(void)=0x80167DF0
BegomanSpringHead::exeWait(void)=0x80167E40
BegomanSpringHead::exeHopStart(void)=0x80167EA0
BegomanSpringHead::exeHopWait(void)=0x80167F00
BegomanSpringHead::exeHopEnd(void)=0x80167F60
BegomanSpringHead::exeHopJump(void)=0x80167FD0
BegomanSpringHead::__dt(void)=0x80168030
short::(nit_\BegomanSpringHead_cpp)=0x80168090
NrvBegomanSpringHead::HostTypeNrvWait::__ct(void)=0x801680E0
NrvBegomanSpringHead::HostTypeNrvHopStart::__ct(void)=0x801680F0
NrvBegomanSpringHead::HostTypeNrvHopWait::__ct(void)=0x80168100
NrvBegomanSpringHead::HostTypeNrvHopEnd::__ct(void)=0x80168110
NrvBegomanSpringHead::HostTypeNrvHopJump::__ct(void)=0x80168120
NrvBegomanSpringHead::HostTypeNrvHopJump::execute(Spine*) const=0x80168130
NrvBegomanSpringHead::HostTypeNrvHopEnd::execute(Spine*) const=0x80168140
NrvBegomanSpringHead::HostTypeNrvHopWait::execute(Spine*) const=0x80168150
NrvBegomanSpringHead::HostTypeNrvHopStart::execute(Spine*) const=0x80168160
NrvBegomanSpringHead::HostTypeNrvWait::execute(Spine*) const=0x80168170
Birikyu::__ct(const char*)=0x80168180
Birikyu::init(const JMapInfoIter&)=0x80168220
Birikyu::initAfterPlacement(void)=0x80168320
Birikyu::appear(void)=0x801683E0
Birikyu::control(void)=0x80168420
Birikyu::movement(void)=0x80168430
Birikyu::attackSensor(HitSensor*, HitSensor*)=0x80168470
Birikyu::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80168530
Birikyu::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801685C0
Birikyu::startClipped(void)=0x801686C0
Birikyu::endClipped(void)=0x80168700
Birikyu::initFromJmpArgs(const JMapInfoIter&)=0x80168740
Birikyu::initRail(const JMapInfoIter&)=0x801687B0
Birikyu::tryStopPointing(void)=0x80168800
Birikyu::goMove(void)=0x80168880
Birikyu::endStopPointing(void)=0x801688A0
Birikyu::exeMove(void)=0x80168920
Birikyu::exeMoveCircle(void)=0x801689E0
Birikyu::exeWaitAtEdge(void)=0x80168AD0
Birikyu::exeAttack(void)=0x80168B50
Birikyu::exeStopPointing(void)=0x80168C10
BirikyuWithFace::__ct(const char*)=0x80168CA0
Birikyu::__dt(void)=0x80168CF0
BirikyuWithFace::init(const JMapInfoIter&)=0x80168D50
BirikyuWithFace::initAfterPlacement(void)=0x80168DD0
BirikyuWithFace::calcAndSetBaseMtx(void)=0x80168E20
BirikyuWithFace::__dt(void)=0x80168F60
short::(nit_\Birikyu_cpp)=0x80168FC0
NrvBirikyu::HostTypeMove::__ct(void)=0x80169020
NrvBirikyu::HostTypeMoveCircle::__ct(void)=0x80169030
NrvBirikyu::HostTypeAttack::__ct(void)=0x80169040
NrvBirikyu::HostTypeAttackWait::__ct(void)=0x80169050
NrvBirikyu::HostTypeWaitAtEdge::__ct(void)=0x80169060
NrvBirikyu::HostTypeStopPointing::__ct(void)=0x80169070
NrvBirikyu::HostTypeKill::__ct(void)=0x80169080
NrvBirikyu::HostTypeKill::execute(Spine*) const=0x80169090
NrvBirikyu::HostTypeStopPointing::executeOnEnd(Spine*) const=0x801690F0
NrvBirikyu::HostTypeStopPointing::execute(Spine*) const=0x80169100
NrvBirikyu::HostTypeWaitAtEdge::execute(Spine*) const=0x80169110
NrvBirikyu::HostTypeAttackWait::execute(Spine*) const=0x80169120
NrvBirikyu::HostTypeAttack::execute(Spine*) const=0x80169130
NrvBirikyu::HostTypeMoveCircle::execute(Spine*) const=0x80169140
NrvBirikyu::HostTypeMove::execute(Spine*) const=0x80169150
BombBird::__ct(const char*)=0x80169160
BombBird::init(const JMapInfoIter&)=0x801691E0
BombBird::makeActorDead(void)=0x80169420
BombBird::startClipped(void)=0x80169460
BombBird::control(void)=0x801694C0
BombBird::attackSensor(HitSensor*, HitSensor*)=0x801696A0
BombBird::exeFlyOnRail(void)=0x80169820
BombBird::exeFlyOnRailSearch(void)=0x80169910
BombBird::doFly(void)=0x80169AB0
BombBird::addVelocityToUpFromGround(float)=0x80169B40
BombBird::killAllBomb(void)=0x80169BD0
BombBird::exeFlyWithAttack(void)=0x80169C50
BombBird::exeBlow(void)=0x80169DC0
BombBird::exeEscape(void)=0x80169E90
BombBird::exeDamage(void)=0x80169FB0
BombBird::exeFall(void)=0x8016A080
BombBird::exeSwoonStart(void)=0x8016A120
BombBird::exeSwoon(void)=0x8016A220
BombBird::exeSwoonEnd(void)=0x8016A330
BombBird::exeTrample(void)=0x8016A490
BombBird::exeSinkDown(void)=0x8016A5D0
BombBird::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8016A7A0
BombBird::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8016ABD0
BombBird::calcAndSetBaseMtx(void)=0x8016AD10
BombBird::__dt(void)=0x8016AE30
short::(nit_\BombBird_cpp)=0x8016AE90
NrvBombBird::HostTypeNrvFlyOnRail::__ct(void)=0x8016AF20
NrvBombBird::HostTypeNrvFlyOnRailSearch::__ct(void)=0x8016AF30
NrvBombBird::HostTypeNrvFlyWithAttack::__ct(void)=0x8016AF40
NrvBombBird::HostTypeNrvBlow::__ct(void)=0x8016AF50
NrvBombBird::HostTypeNrvEscape::__ct(void)=0x8016AF60
NrvBombBird::HostTypeNrvDamage::__ct(void)=0x8016AF70
NrvBombBird::HostTypeNrvFall::__ct(void)=0x8016AF80
NrvBombBird::HostTypeNrvSwoonStart::__ct(void)=0x8016AF90
NrvBombBird::HostTypeNrvSwoon::__ct(void)=0x8016AFA0
NrvBombBird::HostTypeNrvSwoonEnd::__ct(void)=0x8016AFB0
NrvBombBird::HostTypeNrvTrample::__ct(void)=0x8016AFC0
NrvBombBird::HostTypeNrvSinkDown::__ct(void)=0x8016AFD0
NrvBombBird::HostTypeNrvSinkDown::execute(Spine*) const=0x8016B020
NrvBombBird::HostTypeNrvTrample::execute(Spine*) const=0x8016B030
NrvBombBird::HostTypeNrvSwoonEnd::execute(Spine*) const=0x8016B040
NrvBombBird::HostTypeNrvSwoon::execute(Spine*) const=0x8016B050
NrvBombBird::HostTypeNrvSwoonStart::execute(Spine*) const=0x8016B060
NrvBombBird::HostTypeNrvFall::execute(Spine*) const=0x8016B070
NrvBombBird::HostTypeNrvDamage::execute(Spine*) const=0x8016B080
NrvBombBird::HostTypeNrvEscape::execute(Spine*) const=0x8016B090
NrvBombBird::HostTypeNrvBlow::execute(Spine*) const=0x8016B0A0
NrvBombBird::HostTypeNrvFlyWithAttack::execute(Spine*) const=0x8016B0B0
NrvBombBird::HostTypeNrvFlyOnRailSearch::execute(Spine*) const=0x8016B0C0
NrvBombBird::HostTypeNrvFlyOnRail::execute(Spine*) const=0x8016B0D0
BombBirdBomb::__ct(const char*)=0x8016B0E0
BombBirdBomb::init(const JMapInfoIter&)=0x8016B150
BombBirdBomb::kill(void)=0x8016B210
BombBirdBomb::control(void)=0x8016B260
BombBirdBomb::calcAndSetBaseMtx(void)=0x8016B2A0
BombBirdBomb::hold(const JGeometry::TVec3<float>&)=0x8016B2E0
BombBirdBomb::start(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8016B340
BombBirdBomb::attackSensor(HitSensor*, HitSensor*)=0x8016B3E0
BombBirdBomb::receiveMsgPush(HitSensor*, HitSensor*)=0x8016B510
BombBirdBomb::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8016B520
BombBirdBomb::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8016B610
BombBirdBomb::exeHold(void)=0x8016B690
BombBirdBomb::exeWait(void)=0x8016B6E0
BombBirdBomb::exeExplosion(void)=0x8016B8A0
BombBirdBomb::exeBindStarPointer(void)=0x8016B9A0
BombBirdBomb::__dt(void)=0x8016B9F0
short::(nit_\BombBirdBomb_cpp)=0x8016BA50
NrvBombBirdBomb::HostTypeNrvHold::__ct(void)=0x8016BA90
NrvBombBirdBomb::HostTypeNrvWait::__ct(void)=0x8016BAA0
NrvBombBirdBomb::HostTypeNrvExplosion::__ct(void)=0x8016BAB0
NrvBombBirdBomb::HostTypeNrvBindStarPointer::__ct(void)=0x8016BAC0
NrvBombBirdBomb::HostTypeNrvBindStarPointer::execute(Spine*) const=0x8016BAD0
NrvBombBirdBomb::HostTypeNrvExplosion::execute(Spine*) const=0x8016BAE0
NrvBombBirdBomb::HostTypeNrvWait::execute(Spine*) const=0x8016BAF0
NrvBombBirdBomb::HostTypeNrvHold::execute(Spine*) const=0x8016BB00
BombHei::__ct(const char*)=0x8016BB10
BombHei::init(const JMapInfoIter&)=0x8016BBE0
BombHei::setGroupClipping(const JMapInfoIter&)=0x8016C030
BombHei::initAfterPlacement(void)=0x8016C040
BombHei::appear(void)=0x8016C050
BombHei::kill(void)=0x8016C0D0
BombHei::startCountdown(void)=0x8016C150
BombHei::endCountdown(void)=0x8016C1A0
BombHei::exeLaunch(void)=0x8016C200
BombHei::exeStarting(void)=0x8016C420
BombHei::exeWait(void)=0x8016C4D0
BombHei::exeWalk(void)=0x8016C600
BombHei::exePursue(void)=0x8016C770
BombHei::exePursueHit(void)=0x8016C8E0
BombHei::exeSpinHit(void)=0x8016C9E0
BombHei::exeTrample(void)=0x8016CB10
BombHei::exePhysics(void)=0x8016CBB0
BombHei::exeStop(void)=0x8016CDD0
BombHei::exeThrown(void)=0x8016CF00
BombHei::exeTaken(void)=0x8016D100
BombHei::exeExplode(void)=0x8016D1E0
BombHei::calcAndSetBaseMtx(void)=0x8016D350
BombHei::calcJoint(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8016D3B0
BombHei::control(void)=0x8016D5B0
BombHei::attackSensor(HitSensor*, HitSensor*)=0x8016D7F0
BombHei::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8016DAC0
BombHei::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8016DCB0
BombHei::receiveMsgPush(HitSensor*, HitSensor*)=0x8016DD90
BombHei::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8016DE50
BombHei::receiveMsgThrow(HitSensor*, HitSensor*)=0x8016E000
BombHei::startBoundSound(void)=0x8016E0D0
JointControlDelegator<BombHei>::__dt(void)=0x8016E130
JointControlDelegator<BombHei>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8016E170
JointControlDelegator<BombHei>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8016E1E0
BombHei::__dt(void)=0x8016E250
short::(nit_\BombHei_cpp)=0x8016E2B0
NrvBombHei::HostTypeNrvLaunch::__ct(void)=0x8016E350
NrvBombHei::HostTypeNrvStarting::__ct(void)=0x8016E360
NrvBombHei::HostTypeNrvWait::__ct(void)=0x8016E370
NrvBombHei::HostTypeNrvWalk::__ct(void)=0x8016E380
NrvBombHei::HostTypeNrvPursue::__ct(void)=0x8016E390
NrvBombHei::HostTypeNrvPursueFast::__ct(void)=0x8016E3A0
NrvBombHei::HostTypeNrvPursueHit::__ct(void)=0x8016E3B0
NrvBombHei::HostTypeNrvSpinHit::__ct(void)=0x8016E3C0
NrvBombHei::HostTypeNrvTrample::__ct(void)=0x8016E3D0
NrvBombHei::HostTypeNrvPhysics::__ct(void)=0x8016E3E0
NrvBombHei::HostTypeNrvStop::__ct(void)=0x8016E3F0
NrvBombHei::HostTypeNrvTaken::__ct(void)=0x8016E400
NrvBombHei::HostTypeNrvThrown::__ct(void)=0x8016E410
NrvBombHei::HostTypeNrvExplode::__ct(void)=0x8016E420
NrvBombHei::HostTypeNrvBindStarPointer::__ct(void)=0x8016E430
NrvBombHei::HostTypeNrvBindStarPointer::execute(Spine*) const=0x8016E440
NrvBombHei::HostTypeNrvExplode::execute(Spine*) const=0x8016E450
NrvBombHei::HostTypeNrvThrown::executeOnEnd(Spine*) const=0x8016E460
NrvBombHei::HostTypeNrvThrown::execute(Spine*) const=0x8016E470
NrvBombHei::HostTypeNrvTaken::executeOnEnd(Spine*) const=0x8016E480
NrvBombHei::HostTypeNrvTaken::execute(Spine*) const=0x8016E490
NrvBombHei::HostTypeNrvStop::execute(Spine*) const=0x8016E4A0
NrvBombHei::HostTypeNrvPhysics::execute(Spine*) const=0x8016E4B0
NrvBombHei::HostTypeNrvTrample::execute(Spine*) const=0x8016E4C0
NrvBombHei::HostTypeNrvSpinHit::executeOnEnd(Spine*) const=0x8016E4D0
NrvBombHei::HostTypeNrvSpinHit::execute(Spine*) const=0x8016E4E0
NrvBombHei::HostTypeNrvPursueHit::execute(Spine*) const=0x8016E4F0
NrvBombHei::HostTypeNrvPursueFast::execute(Spine*) const=0x8016E500
NrvBombHei::HostTypeNrvPursue::execute(Spine*) const=0x8016E510
NrvBombHei::HostTypeNrvWalk::execute(Spine*) const=0x8016E520
NrvBombHei::HostTypeNrvWait::execute(Spine*) const=0x8016E530
NrvBombHei::HostTypeNrvStarting::execute(Spine*) const=0x8016E540
NrvBombHei::HostTypeNrvLaunch::execute(Spine*) const=0x8016E550
BombHeiLauncher::__ct(const char*)=0x8016E560
BombHeiLauncher::init(const JMapInfoIter&)=0x8016E5D0
MR::Functor<BombHeiLauncher>(BombHeiLauncher*, M15BombHeiLauncherFPCvPv_v_Q22MR57FunctorV0M<BombHeiLauncher*,M15BombHeiLauncherFPCvPv_v>)=0x8016E880
BombHeiLauncher::initAfterPlacement(void)=0x8016E8C0
BombHeiLauncher::startCountdown(void)=0x8016E990
BombHeiLauncher::onSwitchA(void)=0x8016E9B0
BombHeiLauncher::offSwitchA(void)=0x8016E9D0
BombHeiLauncher::exeLauncherWait(void)=0x8016EA40
BombHeiLauncher::exeStop(void)=0x8016EB90
BombHeiLauncher::calcAndSetBaseMtx(void)=0x8016EC00
BombHeiLauncher::control(void)=0x8016EC40
MR::FunctorV0M<BombHeiLauncher*,M15BombHeiLauncherFPCvPv_v>::__cl(void) const=0x8016EC60
MR::FunctorV0M<BombHeiLauncher*,M15BombHeiLauncherFPCvPv_v>::clone(JKRHeap*) const=0x8016EC90
BombHeiLauncher::__dt(void)=0x8016ED00
short::(nit_\BombHeiLauncher_cpp)=0x8016ED60
NrvBombHeiLauncher::HostTypeNrvLauncherWait::__ct(void)=0x8016ED90
NrvBombHeiLauncher::HostTypeNrvStop::__ct(void)=0x8016EDA0
NrvBombHeiLauncher::HostTypeNrvStop::execute(Spine*) const=0x8016EDB0
NrvBombHeiLauncher::HostTypeNrvLauncherWait::execute(Spine*) const=0x8016EDC0
BombTeresa::__ct(const char*)=0x8016EDD0
BombTeresa::init(const JMapInfoIter&)=0x8016EEC0
BombTeresa::initAfterPlacement(void)=0x8016F020
BombTeresa::initTongue(void)=0x8016F030
JointControlDelegator<BombTeresa>::__ct(BombTeresa*, M10BombTeresaFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_bM10BombTeresaFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_b)=0x8016F1A0
BombTeresa::makeActorAppeared(void)=0x8016F230
BombTeresa::control(void)=0x8016F2C0
BombTeresa::calcAndSetBaseMtx(void)=0x8016F370
BombTeresa::updateNormalVelocity(void)=0x8016F3C0
BombTeresa::updateDriftReleaseVelocity(void)=0x8016F440
BombTeresa::rootTongueMtxCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8016F4C0
BombTeresa::endTongueMtxCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8016F5D0
BombTeresa::attackSensor(HitSensor*, HitSensor*)=0x8016F730
BombTeresa::receiveMsgPush(HitSensor*, HitSensor*)=0x8016F880
BombTeresa::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8016F950
BombTeresa::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8016FA40
BombTeresa::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8016FB60
BombTeresa::requestDrift(void)=0x8016FBF0
BombTeresa::tryCheseEnd(void)=0x8016FC50
BombTeresa::tryDirectTackle(void)=0x8016FCD0
BombTeresa::tryAbortDrift(void)=0x8016FD50
BombTeresa::tryDriftRelease(void)=0x8016FDC0
BombTeresa::tryDriftReleaseEnd(void)=0x8016FE00
BombTeresa::tryExplosion(void)=0x8016FE60
BombTeresa::tryRevival(void)=0x8016FEF0
BombTeresa::exeAppear(void)=0x8016FF70
BombTeresa::exeShadowAppear(void)=0x80170040
BombTeresa::exeBallAppear(void)=0x80170150
BombTeresa::exeWait(void)=0x80170390
BombTeresa::exeWander(void)=0x80170490
BombTeresa::exeChase(void)=0x801705A0
BombTeresa::exeAttackTongueFailed(void)=0x80170670
BombTeresa::exeDirectTackleSign(void)=0x80170710
BombTeresa::exeDirectTackle(void)=0x801707E0
BombTeresa::exeDrift(void)=0x801708D0
BombTeresa::exeDriftRelease(void)=0x80170C20
BombTeresa::exeExplosion(void)=0x80170D00
BombTeresa::exeShock(void)=0x80170DD0
BombTeresa::exeDisperse(void)=0x80170EA0
BombTeresa::exeReadyRestart(void)=0x80170F60
BombTeresa::isTouchTongue(void) const=0x80171000
BombTeresa::isEnableDrift(void) const=0x80171010
BombTeresa::isEnablePointBind(void) const=0x801710E0
BombTeresa::isEnableDisperse(void) const=0x801711A0
BombTeresa::isEnableHitExplosionToPlayer(void) const=0x801711F0
BombTeresa::isEnableHitExplosionToEnemy(void) const=0x80171240
BombTeresa::isEnableHitExplosion(void) const=0x801712A0
BombTeresa::isEnableStarPieceAttack(void) const=0x80171360
BombTeresa::isEnableShockWave(void) const=0x80171420
BombTeresa::appearNormal(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80171490
BombTeresa::appearShadow(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80171530
BombTeresa::addTeresaSpinPullVelocity(float)=0x80171590
BombTeresa::requestDisperse(void)=0x80171620
JointControlDelegator<BombTeresa>::__dt(void)=0x801716A0
JointControlDelegator<BombTeresa>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801716E0
JointControlDelegator<BombTeresa>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80171750
BombTeresa::__dt(void)=0x801717C0
short::(nit_\BombTeresa_cpp)=0x80171820
NrvBombTeresa::BombTeresaNrvAppear::__ct(void)=0x801718C0
NrvBombTeresa::BombTeresaNrvShadowAppear::__ct(void)=0x801718D0
NrvBombTeresa::BombTeresaNrvBallAppear::__ct(void)=0x801718E0
NrvBombTeresa::BombTeresaNrvWait::__ct(void)=0x801718F0
NrvBombTeresa::BombTeresaNrvWander::__ct(void)=0x80171900
NrvBombTeresa::BombTeresaNrvChase::__ct(void)=0x80171910
NrvBombTeresa::BombTeresaNrvAttackTongueFailed::__ct(void)=0x80171920
NrvBombTeresa::BombTeresaNrvDirectTackleSign::__ct(void)=0x80171930
NrvBombTeresa::BombTeresaNrvDirectTackle::__ct(void)=0x80171940
NrvBombTeresa::BombTeresaNrvDrift::__ct(void)=0x80171950
NrvBombTeresa::BombTeresaNrvDriftRelease::__ct(void)=0x80171960
NrvBombTeresa::BombTeresaNrvBindStarPointer::__ct(void)=0x80171970
NrvBombTeresa::BombTeresaNrvExplosion::__ct(void)=0x80171980
NrvBombTeresa::BombTeresaNrvDisperse::__ct(void)=0x80171990
NrvBombTeresa::BombTeresaNrvShock::__ct(void)=0x801719A0
NrvBombTeresa::BombTeresaNrvReadyRestart::__ct(void)=0x801719B0
NrvBombTeresa::BombTeresaNrvReadyRestart::execute(Spine*) const=0x801719C0
NrvBombTeresa::BombTeresaNrvShock::execute(Spine*) const=0x801719D0
NrvBombTeresa::BombTeresaNrvDisperse::execute(Spine*) const=0x801719E0
NrvBombTeresa::BombTeresaNrvExplosion::execute(Spine*) const=0x801719F0
NrvBombTeresa::BombTeresaNrvBindStarPointer::execute(Spine*) const=0x80171A00
NrvBombTeresa::BombTeresaNrvDriftRelease::execute(Spine*) const=0x80171A10
NrvBombTeresa::BombTeresaNrvDrift::execute(Spine*) const=0x80171A20
NrvBombTeresa::BombTeresaNrvDirectTackle::execute(Spine*) const=0x80171A30
NrvBombTeresa::BombTeresaNrvDirectTackleSign::execute(Spine*) const=0x80171A40
NrvBombTeresa::BombTeresaNrvAttackTongueFailed::execute(Spine*) const=0x80171A50
NrvBombTeresa::BombTeresaNrvChase::execute(Spine*) const=0x80171A60
NrvBombTeresa::BombTeresaNrvWander::execute(Spine*) const=0x80171A70
NrvBombTeresa::BombTeresaNrvWait::execute(Spine*) const=0x80171A80
NrvBombTeresa::BombTeresaNrvBallAppear::execute(Spine*) const=0x80171A90
NrvBombTeresa::BombTeresaNrvShadowAppear::execute(Spine*) const=0x80171AA0
NrvBombTeresa::BombTeresaNrvAppear::execute(Spine*) const=0x80171AB0
BoomerangBros::__ct(const char*)=0x80171AC0
BrosBase::__dt(void)=0x80171B20
BoomerangBros::init(const JMapInfoIter&)=0x80171B80
BoomerangBros::makeActorAppeared(void)=0x80171DF0
BoomerangBros::kill(void)=0x80171E30
BoomerangBros::control(void)=0x80171E70
BoomerangBros::attackSensor(HitSensor*, HitSensor*)=0x80172550
BoomerangBros::receiveMsgPush(HitSensor*, HitSensor*)=0x801726C0
BoomerangBros::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80172740
BoomerangBros::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80172930
BoomerangBros::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80172A90
BoomerangBros::__dt(void)=0x801737A0
short::(nit_\BoomerangBros_cpp)=0x80173800
BoomerangBrosBoomerang::__ct(const char*)=0x80173A70
BrosProjectileBase::__dt(void)=0x80173AC0
BoomerangBrosBoomerang::init(const JMapInfoIter&)=0x80173B20
BoomerangBrosBoomerang::appear(void)=0x80173BD0
BoomerangBrosBoomerang::kill(void)=0x80173C30
BoomerangBrosBoomerang::control(void)=0x80173C80
BoomerangBrosBoomerang::attackSensor(HitSensor*, HitSensor*)=0x80173D20
BoomerangBrosBoomerang::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80173E30
BoomerangBrosBoomerang::__dt(void)=0x80174AA0
short::(nit_\BoomerangBrosBoomerang_cpp)=0x80174B00
Bussun::__ct(const char*)=0x80174CC0
Bussun::init(const JMapInfoIter&)=0x80174D30
Bussun::control(void)=0x80174E20
Bussun::kill(void)=0x80174EB0
Bussun::calcAndSetBaseMtx(void)=0x80174EF0
Bussun::attackSensor(HitSensor*, HitSensor*)=0x80174F40
Bussun::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80175070
Bussun::__dt(void)=0x80175B50
short::(nit_\Bussun_cpp)=0x80175BB0
Buzz::__ct(const char*)=0x80175D60
Buzz::init(const JMapInfoIter&)=0x80175DE0
Buzz::control(void)=0x80175F00
Buzz::calcAndSetBaseMtx(void)=0x80175F80
Buzz::attackSensor(HitSensor*, HitSensor*)=0x80175FD0
Buzz::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80176070
Buzz::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80176160
Buzz::__dt(void)=0x801766F0
short::(nit_\Buzz_cpp)=0x80176750
Cactus::__ct(const char*)=0x80176890
Cactus::init(const JMapInfoIter&)=0x801768D0
Cactus::attackSensor(HitSensor*, HitSensor*)=0x80176930
Cactus::isNerveWait(void) const=0x801769A0
Cactus::__dt(void)=0x801769B0
short::(nit_\Cactus_cpp)=0x80176A10
NrvCactus::CactusNrvWait::__ct(void)=0x80176A20
NrvCactus::CactusNrvWait::execute(Spine*) const=0x80176A30
Chorobon::__ct(const char*)=0x80176A40
Chorobon::init(const JMapInfoIter&)=0x80176AA0
Chorobon::control(void)=0x80176B90
Chorobon::calcAndSetBaseMtx(void)=0x80176BF0
Chorobon::attackSensor(HitSensor*, HitSensor*)=0x80176C30
Chorobon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80176CD0
Chorobon::exeWait(void)=0x80176EF0
Chorobon::exeMove(void)=0x80176F60
Chorobon::exeAttack(void)=0x80177020
Chorobon::exeReaction(void)=0x80177080
Chorobon::exeKill(void)=0x801770E0
Chorobon::__dt(void)=0x80177150
short::(nit_\Chorobon_cpp)=0x801771B0
NrvChorobon::ChorobonNrvWait::__ct(void)=0x80177200
NrvChorobon::ChorobonNrvMove::__ct(void)=0x80177210
NrvChorobon::ChorobonNrvAttack::__ct(void)=0x80177220
NrvChorobon::ChorobonNrvReaction::__ct(void)=0x80177230
NrvChorobon::ChorobonNrvFreeze::__ct(void)=0x80177240
NrvChorobon::ChorobonNrvKill::__ct(void)=0x80177250
NrvChorobon::ChorobonNrvKill::execute(Spine*) const=0x80177260
NrvChorobon::ChorobonNrvFreeze::execute(Spine*) const=0x80177270
NrvChorobon::ChorobonNrvReaction::execute(Spine*) const=0x80177280
NrvChorobon::ChorobonNrvAttack::execute(Spine*) const=0x80177290
NrvChorobon::ChorobonNrvMove::execute(Spine*) const=0x801772A0
NrvChorobon::ChorobonNrvWait::execute(Spine*) const=0x801772B0
CocoNutBall::__ct(const char*)=0x801772C0
CocoNutBall::init(const JMapInfoIter&)=0x80177390
CocoNutBall::appear(void)=0x80177490
CocoNutBall::kill(void)=0x801774F0
CocoNutBall::control(void)=0x801775B0
CocoNutBall::appearAndThrow(const JGeometry::TVec3<float>&, float)=0x801775E0
CocoNutBall::hitBackToPlayer(void)=0x80177800
CocoNutBall::demoBreak(const JGeometry::TVec3<float>&)=0x801778B0
CocoNutBall::calcAndSetBaseMtx(void)=0x80177940
CocoNutBall::attackSensor(HitSensor*, HitSensor*)=0x801779E0
CocoNutBall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80177BB0
CocoNutBall::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80177CD0
CocoNutBall::initSensors(void)=0x80177DC0
CocoNutBall::isBindedAny(void) const=0x80177E60
CocoNutBall::isValidReceivePunch(void) const=0x80177EE0
CocoNutBall::calcHitBackVelocitAndGravity(void)=0x80178000
CocoNutBall::isHitBackRight(void) const=0x80178600
CocoNutBall::isHitBackFront(void) const=0x801786B0
CocoNutBall::calcHitBackDstPos(JGeometry::TVec3<float>*, bool, bool)=0x80178760
CocoNutBall::tryToKill(bool)=0x80178870
CocoNutBall::setVelocityToPlayer(float, float)=0x801789E0
CocoNutBall::freeze(void)=0x80178D10
CocoNutBall::processApproachToPlayer(void)=0x80178D70
CocoNutBall::exeThrow(void)=0x80178E60
CocoNutBall::exeHitBackToHost(void)=0x80178F50
CocoNutBall::exeHitBackToOtaRockTank(void)=0x801790C0
CocoNutBall::exeHitBackToPlayer(void)=0x80179330
CocoNutBall::exeRebound(void)=0x801793C0
CocoNutBall::exeFreezeStart(void)=0x80179810
CocoNutBall::exeFreeze(void)=0x80179910
CocoNutBall::exeFreezeRelease(void)=0x80179B40
short::(nit_\CocoNutBall_cpp)=0x80179BC0
NrvCocoNutBall::CocoNutBallNrvThrow::__ct(void)=0x80179C20
NrvCocoNutBall::CocoNutBallNrvHitBackToHost::__ct(void)=0x80179C30
NrvCocoNutBall::CocoNutBallNrvHitBackToOtaRockTank::__ct(void)=0x80179C40
NrvCocoNutBall::CocoNutBallNrvHitBackToPlayer::__ct(void)=0x80179C50
NrvCocoNutBall::CocoNutBallNrvRebound::__ct(void)=0x80179C60
NrvCocoNutBall::CocoNutBallNrvFreezeStart::__ct(void)=0x80179C70
NrvCocoNutBall::CocoNutBallNrvFreeze::__ct(void)=0x80179C80
NrvCocoNutBall::CocoNutBallNrvFreezeRelease::__ct(void)=0x80179C90
NrvCocoNutBall::CocoNutBallNrvFreezeRelease::execute(Spine*) const=0x80179CA0
NrvCocoNutBall::CocoNutBallNrvFreeze::execute(Spine*) const=0x80179CB0
NrvCocoNutBall::CocoNutBallNrvFreezeStart::execute(Spine*) const=0x80179CC0
NrvCocoNutBall::CocoNutBallNrvRebound::execute(Spine*) const=0x80179CD0
NrvCocoNutBall::CocoNutBallNrvHitBackToPlayer::execute(Spine*) const=0x80179CE0
NrvCocoNutBall::CocoNutBallNrvHitBackToOtaRockTank::execute(Spine*) const=0x80179CF0
NrvCocoNutBall::CocoNutBallNrvHitBackToHost::execute(Spine*) const=0x80179D00
NrvCocoNutBall::CocoNutBallNrvThrow::execute(Spine*) const=0x80179D10
DanceFlower::__ct(const char*)=0x80179D20
DanceFlower::init(const JMapInfoIter&)=0x80179DA0
DanceFlower::initAfterPlacement(void)=0x80179EC0
DanceFlower::kill(void)=0x80179F00
DanceFlower::control(void)=0x80179F40
DanceFlower::calcAndSetBaseMtx(void)=0x80179FE0
DanceFlower::attackSensor(HitSensor*, HitSensor*)=0x8017A020
DanceFlower::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8017A1B0
DanceFlower::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8017A230
DanceFlower::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8017A3C0
DanceFlower::__dt(void)=0x8017B0F0
short::(nit_\DanceFlower_cpp)=0x8017B150
Dossun::__ct(const char*)=0x8017B3C0
Dossun::init(const JMapInfoIter&)=0x8017B450
Dossun::appear(void)=0x8017B5C0
Dossun::control(void)=0x8017B650
Dossun::movement(void)=0x8017B660
Dossun::initMapToolInfo(const JMapInfoIter&)=0x8017B6A0
Dossun::initCollision(const JMapInfoIter&)=0x8017B760
Dossun::initShadow(void)=0x8017B7D0
Dossun::calcParameters(void)=0x8017B850
Dossun::getUpperFrame(void) const=0x8017B9D0
Dossun::getStepUntilRising(void)=0x8017BAA0
Dossun::exeUpper(void)=0x8017BB20
Dossun::exeFallSign(void)=0x8017BBA0
Dossun::exeFalling(void)=0x8017BC60
Dossun::exeOnGround(void)=0x8017BD10
Dossun::exeRising(void)=0x8017BDC0
Dossun::__dt(void)=0x8017BEF0
short::(nit_\Dossun_cpp)=0x8017BF50
NrvDossun::DossunNrvReady::__ct(void)=0x8017BFA0
NrvDossun::DossunNrvUpper::__ct(void)=0x8017BFB0
NrvDossun::DossunNrvFallSign::__ct(void)=0x8017BFC0
NrvDossun::DossunNrvFalling::__ct(void)=0x8017BFD0
NrvDossun::DossunNrvOnGround::__ct(void)=0x8017BFE0
NrvDossun::DossunNrvRising::__ct(void)=0x8017BFF0
NrvDossun::DossunNrvRising::execute(Spine*) const=0x8017C000
NrvDossun::DossunNrvOnGround::execute(Spine*) const=0x8017C010
NrvDossun::DossunNrvFalling::execute(Spine*) const=0x8017C020
NrvDossun::DossunNrvFallSign::execute(Spine*) const=0x8017C030
NrvDossun::DossunNrvUpper::execute(Spine*) const=0x8017C040
NrvDossun::DossunNrvReady::execute(Spine*) const=0x8017C050
DrillBullet::__ct(const char*)=0x8017C0A0
DrillBullet::init(const JMapInfoIter&)=0x8017C110
DrillBullet::exeMove(void)=0x8017C310
DrillBullet::exeDigWallIn(void)=0x8017C390
DrillBullet::exeDigWallOut(void)=0x8017C410
DrillBullet::exeStepDown(void)=0x8017C4A0
DrillBullet::exeReaction(void)=0x8017C510
DrillBullet::exeEaten(void)=0x8017C5C0
DrillBullet::makeActorDead(void)=0x8017C620
DrillBullet::kill(void)=0x8017C680
DrillBullet::control(void)=0x8017C6F0
DrillBullet::calcAndSetBaseMtx(void)=0x8017C740
DrillBullet::attackSensor(HitSensor*, HitSensor*)=0x8017C830
DrillBullet::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8017C950
DrillBullet::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8017CAC0
DrillBullet::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8017CB60
DrillBullet::tryDigWall(void)=0x8017CC10
DrillBullet::tryBindStarPointer(void)=0x8017CCC0
DrillBullet::tryEaten(void)=0x8017CD40
DrillBullet::isTargetable(void) const=0x8017CD90
DrillBullet::__dt(void)=0x8017CE00
short::(nit_\DrillBullet_cpp)=0x8017CE60
NrvDrillBullet::DrillBulletNrvMove::__ct(void)=0x8017CEC0
NrvDrillBullet::DrillBulletNrvDigWallIn::__ct(void)=0x8017CED0
NrvDrillBullet::DrillBulletNrvDigWallOut::__ct(void)=0x8017CEE0
NrvDrillBullet::DrillBulletNrvStepDown::__ct(void)=0x8017CEF0
NrvDrillBullet::DrillBulletNrvSpinReaction::__ct(void)=0x8017CF00
NrvDrillBullet::DrillBulletNrvAttackSuccess::__ct(void)=0x8017CF10
NrvDrillBullet::DrillBulletNrvBindStarPointer::__ct(void)=0x8017CF20
NrvDrillBullet::DrillBulletNrvEaten::__ct(void)=0x8017CF30
NrvDrillBullet::DrillBulletNrvEaten::execute(Spine*) const=0x8017CF40
NrvDrillBullet::DrillBulletNrvBindStarPointer::execute(Spine*) const=0x8017CF50
NrvDrillBullet::DrillBulletNrvAttackSuccess::execute(Spine*) const=0x8017CFB0
NrvDrillBullet::DrillBulletNrvSpinReaction::execute(Spine*) const=0x8017CFC0
NrvDrillBullet::DrillBulletNrvStepDown::execute(Spine*) const=0x8017CFD0
NrvDrillBullet::DrillBulletNrvDigWallOut::execute(Spine*) const=0x8017CFE0
NrvDrillBullet::DrillBulletNrvDigWallIn::execute(Spine*) const=0x8017CFF0
NrvDrillBullet::DrillBulletNrvMove::execute(Spine*) const=0x8017D000
ElectricPressureBullet::__ct(const char*)=0x8017D010
ElectricPressureBullet::init(const JMapInfoIter&)=0x8017D070
ElectricPressureBullet::kill(void)=0x8017D0D0
ElectricPressureBullet::shotElectricBullet(LiveActor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const float&)=0x8017D130
ElectricPressureBullet::exeFly(void)=0x8017D200
ElectricPressureBullet::control(void)=0x8017D4C0
ElectricPressureBullet::attackSensor(HitSensor*, HitSensor*)=0x8017D510
ElectricPressureBullet::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8017D580
ElectricPressureBullet::__dt(void)=0x8017D5E0
short::(nit_\ElectricPressureBullet_cpp)=0x8017D640
NrvElectricPressureBullet::ElectricPressureBulletNrvFly::__ct(void)=0x8017D650
NrvElectricPressureBullet::ElectricPressureBulletNrvFly::execute(Spine*) const=0x8017D660
FireBall::__ct(const char*)=0x8017D670
FireBall::init(const JMapInfoIter&)=0x8017D6E0
FireBall::appear(void)=0x8017D7A0
FireBall::kill(void)=0x8017D7E0
FireBall::appearAndThrow(const JGeometry::TVec3<float>&, float, float)=0x8017D850
FireBall::control(void)=0x8017DA90
FireBall::calcAndSetBaseMtx(void)=0x8017DB00
FireBall::attackSensor(HitSensor*, HitSensor*)=0x8017DBA0
FireBall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8017DC60
FireBall::isBindedAny(void) const=0x8017DD70
FireBall::tryToKill(void)=0x8017DDF0
FireBall::setVelocityToPlayer(float)=0x8017DEA0
FireBall::exeThrow(void)=0x8017DFE0
FireBall::exeReflect(void)=0x8017E0C0
short::(nit_\FireBall_cpp)=0x8017E180
NrvFireBall::FireBallNrvThrow::__ct(void)=0x8017E1C0
NrvFireBall::FireBallNrvFreeze::__ct(void)=0x8017E1D0
NrvFireBall::FireBallNrvReflect::__ct(void)=0x8017E1E0
NrvFireBall::FireBallNrvReflect::execute(Spine*) const=0x8017E1F0
NrvFireBall::FireBallNrvFreeze::execute(Spine*) const=0x8017E200
NrvFireBall::FireBallNrvThrow::execute(Spine*) const=0x8017E250
FireBubble::__ct(const char*)=0x8017F800
FireBubble::init(const JMapInfoIter&)=0x8017F8A0
FireBubble::appear(void)=0x8017FA10
FireBubble::appear(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8017FA70
FireBubble::kill(void)=0x8017FAE0
FireBubble::control(void)=0x8017FB30
FireBubble::calcAndSetBaseMtx(void)=0x8017FB40
FireBubble::attackSensor(HitSensor*, HitSensor*)=0x8017FBF0
FireBubble::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8017FC90
FireBubble::initMapToolInfo(const JMapInfoIter&)=0x8017FD50
FireBubble::updateChaseFrontVec(float)=0x8017FDF0
FireBubble::updateChaseFrontVecAndVelocity(float)=0x8017FF40
FireBubble::calcReflectVelocity(JGeometry::TVec3<float>*) const=0x8017FFA0
FireBubble::tryChaseEnd(void)=0x80180040
FireBubble::killOrWaitToApppear(void)=0x801800A0
FireBubble::exeAppear(void)=0x80180100
FireBubble::exeWait(void)=0x801802B0
FireBubble::exeChase(void)=0x801803A0
FireBubble::exeReflect(void)=0x80180470
FireBubble::exeReflectLand(void)=0x80180560
FireBubble::exeReflectWait(void)=0x801805E0
FireBubble::exeDown(void)=0x80180680
FireBubble::exeWaitToAppear(void)=0x80180760
short::(nit_\FireBubble_cpp)=0x80180820
NrvFireBubble::FireBubbleNrvAppear::__ct(void)=0x80180880
NrvFireBubble::FireBubbleNrvWait::__ct(void)=0x80180890
NrvFireBubble::FireBubbleNrvChase::__ct(void)=0x801808A0
NrvFireBubble::FireBubbleNrvReflect::__ct(void)=0x801808B0
NrvFireBubble::FireBubbleNrvReflectLand::__ct(void)=0x801808C0
NrvFireBubble::FireBubbleNrvReflectWait::__ct(void)=0x801808D0
NrvFireBubble::FireBubbleNrvDown::__ct(void)=0x801808E0
NrvFireBubble::FireBubbleNrvWaitToAppear::__ct(void)=0x801808F0
NrvFireBubble::FireBubbleNrvWaitToAppear::execute(Spine*) const=0x80180900
NrvFireBubble::FireBubbleNrvDown::execute(Spine*) const=0x80180910
NrvFireBubble::FireBubbleNrvReflectWait::execute(Spine*) const=0x80180920
NrvFireBubble::FireBubbleNrvReflectLand::execute(Spine*) const=0x80180930
NrvFireBubble::FireBubbleNrvReflect::execute(Spine*) const=0x80180940
NrvFireBubble::FireBubbleNrvChase::execute(Spine*) const=0x80180950
NrvFireBubble::FireBubbleNrvWait::execute(Spine*) const=0x80180960
NrvFireBubble::FireBubbleNrvAppear::execute(Spine*) const=0x80180970
FlowerMimic::__ct(const char*)=0x80180980
FlowerMimic::init(const JMapInfoIter&)=0x80180A20
FlowerMimic::control(void)=0x80180C10
FlowerMimic::calcAndSetBaseMtx(void)=0x80180D90
FlowerMimic::attackSensor(HitSensor*, HitSensor*)=0x80180E10
FlowerMimic::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80180E70
FlowerMimic::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80180F80
FlowerMimic::__dt(void)=0x801815D0
short::(nit_\FlowerMimic_cpp)=0x80181630
Foomin::__ct(const char*)=0x80181770
Foomin::init(const JMapInfoIter&)=0x801817E0
Foomin::makeActorAppeared(void)=0x801818E0
Foomin::control(void)=0x80181930
Foomin::calcAndSetBaseMtx(void)=0x80181C70
Foomin::__dt(void)=0x80181D00
short::(nit_\Foomin_cpp)=0x80181D60
Garigari::__ct(const char*)=0x80181E20
Garigari::init(const JMapInfoIter&)=0x80181EA0
Garigari::control(void)=0x80182190
Garigari::calcAndSetBaseMtx(void)=0x80182240
Garigari::attackSensor(HitSensor*, HitSensor*)=0x80182250
MR::FunctorV0M<Garigari*,M8GarigariFPCvPv_v>::__cl(void) const=0x80182630
MR::FunctorV0M<Garigari*,M8GarigariFPCvPv_v>::clone(JKRHeap*) const=0x80182660
Garigari::__dt(void)=0x801826D0
short::(nit_\Garigari_cpp)=0x80182730
Gesso::__ct(const char*)=0x80182860
Gesso::init(const JMapInfoIter&)=0x80182900
Gesso::kill(void)=0x80182B30
Gesso::control(void)=0x80182B70
Gesso::calcAndSetBaseMtx(void)=0x80182D00
Gesso::exeComeFromBox(void)=0x80182D60
Gesso::exeWait(void)=0x80182E70
Gesso::exeSearch(void)=0x80182F80
Gesso::exeWalkCharge(void)=0x80183090
Gesso::exeWalk(void)=0x801831C0
Gesso::exeSink(void)=0x80183250
Gesso::exeLostPlayer(void)=0x80183320
Gesso::exeAttack(void)=0x801833F0
Gesso::exePunchDown(void)=0x80183540
Gesso::exeComeBack(void)=0x80183630
Gesso::exeRotate(void)=0x80183780
Gesso::attackSensor(HitSensor*, HitSensor*)=0x80183810
Gesso::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80183920
Gesso::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80183A20
Gesso::receiveMsgPush(HitSensor*, HitSensor*)=0x80183B40
Gesso::selectNextNerve(void)=0x80183BE0
Gesso::clipAndInitPos(void)=0x80183CC0
Gesso::calcWalkMove(long)=0x80183D70
Gesso::calcSinkMove(long)=0x80183FB0
Gesso::calcAndSetVelocity(float, float, float)=0x80184110
Gesso::calcAndSetUpVecTarget(float, float, float)=0x801841B0
Gesso::tryChangeHighSpeedMode(void)=0x80184200
Gesso::tryDPDSwoon(void)=0x80184260
Gesso::__dt(void)=0x80184300
short::(nit_\Gesso_cpp)=0x80184360
NrvGesso::GessoNrvComeFromBox::__ct(void)=0x801843E0
NrvGesso::GessoNrvWait::__ct(void)=0x801843F0
NrvGesso::GessoNrvSearch::__ct(void)=0x80184400
NrvGesso::GessoNrvWalkCharge::__ct(void)=0x80184410
NrvGesso::GessoNrvWalk::__ct(void)=0x80184420
NrvGesso::GessoNrvSink::__ct(void)=0x80184430
NrvGesso::GessoNrvLostPlayer::__ct(void)=0x80184440
NrvGesso::GessoNrvAttack::__ct(void)=0x80184450
NrvGesso::GessoNrvPunchDown::__ct(void)=0x80184460
NrvGesso::GessoNrvComeBack::__ct(void)=0x80184470
NrvGesso::GessoNrvDPDSwoon::__ct(void)=0x80184480
NrvGesso::GessoNrvRotate::__ct(void)=0x80184490
NrvGesso::GessoNrvRotate::execute(Spine*) const=0x801844A0
NrvGesso::GessoNrvDPDSwoon::execute(Spine*) const=0x801844B0
NrvGesso::GessoNrvComeBack::execute(Spine*) const=0x801844C0
NrvGesso::GessoNrvPunchDown::execute(Spine*) const=0x801844D0
NrvGesso::GessoNrvAttack::execute(Spine*) const=0x801844E0
NrvGesso::GessoNrvLostPlayer::execute(Spine*) const=0x801844F0
NrvGesso::GessoNrvSink::execute(Spine*) const=0x80184500
NrvGesso::GessoNrvWalk::execute(Spine*) const=0x80184510
NrvGesso::GessoNrvWalkCharge::execute(Spine*) const=0x80184520
NrvGesso::GessoNrvSearch::execute(Spine*) const=0x80184530
NrvGesso::GessoNrvWait::execute(Spine*) const=0x80184540
NrvGesso::GessoNrvComeFromBox::execute(Spine*) const=0x80184550
GliderShooterBullet::__ct(void)=0x80184560
GliderShooterBullet::init(const JMapInfoIter&)=0x801845D0
GliderShooterBullet::appear(void)=0x80184690
GliderShooterBullet::kill(void)=0x80184710
GliderShooterBullet::exeFly(void)=0x80184760
GliderShooterBullet::exeFreeze(void)=0x80184800
GliderShooterBullet::control(void)=0x80184880
GliderShooterBullet::startClipped(void)=0x801848E0
GliderShooterBullet::calcAndSetBaseMtx(void)=0x80184920
GliderShooterBullet::attackSensor(HitSensor*, HitSensor*)=0x80184930
GliderShooterBullet::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80184990
GliderShooterBulletHolder::__ct(void)=0x80184A10
GliderShooterBulletHolder::init(const JMapInfoIter&)=0x80184A60
GliderShooterBullet::__dt(void)=0x80184AD0
GliderShooterBulletHolder::__dt(void)=0x80184B30
short::(nit_\GliderShooterBullet_cpp)=0x80184B90
NrvGliderShooterBullet::GliderShooterBulletNrvFly::__ct(void)=0x80184BC0
NrvGliderShooterBullet::GliderShooterBulletNrvFreeze::__ct(void)=0x80184BD0
NrvGliderShooterBullet::GliderShooterBulletNrvFreeze::execute(Spine*) const=0x80184BE0
NrvGliderShooterBullet::GliderShooterBulletNrvFly::execute(Spine*) const=0x80184BF0
Grapyon::__ct(const char*)=0x80184C00
Grapyon::init(const JMapInfoIter&)=0x80184C70
Grapyon::initAfterPlacement(void)=0x80184DC0
Grapyon::makeActorAppeared(void)=0x80184DD0
Grapyon::control(void)=0x80184E20
Grapyon::calcAndSetBaseMtx(void)=0x80185800
Grapyon::attackSensor(HitSensor*, HitSensor*)=0x801858E0
Grapyon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80185A30
Grapyon::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80185B90
Grapyon::receiveMsgPush(HitSensor*, HitSensor*)=0x80185C00
Grapyon::__dt(void)=0x801861A0
short::(nit_\Grapyon_cpp)=0x80186200
BrosBase::__ct(const char*)=0x80186430
BrosBase::init(const JMapInfoIter&)=0x801864D0
BrosBase::calcAndSetBaseMtx(void)=0x801869B0
HammerBros::__ct(const char*)=0x80186BC0
HammerBros::init(const JMapInfoIter&)=0x80186C20
HammerBros::makeActorAppeared(void)=0x80186EA0
HammerBros::kill(void)=0x80186EE0
HammerBros::control(void)=0x80186F40
HammerBros::attackSensor(HitSensor*, HitSensor*)=0x80187620
HammerBros::receiveMsgPush(HitSensor*, HitSensor*)=0x80187790
HammerBros::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80187800
HammerBros::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80187A20
HammerBros::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80187AA0
HammerBros::__dt(void)=0x80188660
short::(nit_\HammerBros_cpp)=0x801886C0
HammerBrosHammer::__ct(const char*)=0x80188930
HammerBrosHammer::init(const JMapInfoIter&)=0x80188980
HammerBrosHammer::appear(void)=0x80188A40
HammerBrosHammer::kill(void)=0x80188A90
HammerBrosHammer::control(void)=0x80188AE0
HammerBrosHammer::__dt(void)=0x801896B0
short::(nit_\HammerBrosHammer_cpp)=0x80189710
BrosProjectileBase::__ct(const char*)=0x8018B620
BrosProjectileBase::init(const JMapInfoIter&)=0x8018B690
BrosProjectileBase::appear(void)=0x8018B7B0
BrosProjectileBase::control(void)=0x8018B830
BrosProjectileBase::calcAndSetBaseMtx(void)=0x8018B940
BrosProjectileBase::attackSensor(HitSensor*, HitSensor*)=0x8018BA70
BrosProjectileBase::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8018BBF0
BrosProjectileBase::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8018BC80
HammerHeadPackun::__ct(const char*)=0x8018BE10
HammerHeadPackun::init(const JMapInfoIter&)=0x8018BEA0
HammerHeadPackun::makeActorAppeared(void)=0x8018C090
HammerHeadPackun::kill(void)=0x8018C0D0
HammerHeadPackun::control(void)=0x8018C140
HammerHeadPackun::exeWait(void)=0x8018C150
HammerHeadPackun::exeSearch(void)=0x8018C1E0
HammerHeadPackun::exeAttack(void)=0x8018C260
HammerHeadPackun::exeRest(void)=0x8018C350
HammerHeadPackun::exeRecover(void)=0x8018C3E0
HammerHeadPackun::exeDamage(void)=0x8018C480
HammerHeadPackun::exeRise(void)=0x8018C580
HammerHeadPackun::exeCrow(void)=0x8018C670
HammerHeadPackun::exeSmashKill(void)=0x8018C710
HammerHeadPackun::exeBlowKill(void)=0x8018C7D0
HammerHeadPackun::exeBlowKillRock(void)=0x8018C8A0
HammerHeadPackun::exeNumb(void)=0x8018C970
HammerHeadPackun::calcAndSetBaseMtx(void)=0x8018CA60
HammerHeadPackun::attackSensor(HitSensor*, HitSensor*)=0x8018CB10
HammerHeadPackun::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8018CE20
HammerHeadPackun::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8018D1C0
HammerHeadPackun::initPosture(void)=0x8018D310
HammerHeadPackun::initSensor(void)=0x8018D370
HammerHeadPackun::initShadow(void)=0x8018D4D0
HammerHeadPackun::initLeaf(const JMapInfoIter&)=0x8018D530
HammerHeadPackun::isTargetInRange(void) const=0x8018D6C0
HammerHeadPackun::isInFieldOfView(const JGeometry::TVec3<float>&) const=0x8018D790
HammerHeadPackun::isAttackSensorValid(void) const=0x8018D820
HammerHeadPackun::isChance(void) const=0x8018D9B0
HammerHeadPackun::calcPlayerDir(JGeometry::TVec3<float>*) const=0x8018DAA0
HammerHeadPackun::turnTo(const JGeometry::TVec3<float>&, float)=0x8018DB40
HammerHeadPackun::turnToAttackVec(long)=0x8018DC20
HammerHeadPackun::verticalizeFrontVec(void)=0x8018DCE0
HammerHeadPackun::appearStarPiece(void)=0x8018DD30
HammerHeadPackun::tryShiftNumb(void)=0x8018DD90
HammerHeadPackun::receiveMsgPlayerAttackChance(unsigned long, HitSensor*, HitSensor*)=0x8018DDE0
HammerHeadPackun::__dt(void)=0x8018DEF0
short::(nit_\HammerHeadPackun_cpp)=0x8018DF50
NrvHammerHeadPackun::HammerHeadPackunNrvWait::__ct(void)=0x8018DFE0
NrvHammerHeadPackun::HammerHeadPackunNrvSearch::__ct(void)=0x8018DFF0
NrvHammerHeadPackun::HammerHeadPackunNrvAttack::__ct(void)=0x8018E000
NrvHammerHeadPackun::HammerHeadPackunNrvRest::__ct(void)=0x8018E010
NrvHammerHeadPackun::HammerHeadPackunNrvRecover::__ct(void)=0x8018E020
NrvHammerHeadPackun::HammerHeadPackunNrvDamage::__ct(void)=0x8018E030
NrvHammerHeadPackun::HammerHeadPackunNrvRise::__ct(void)=0x8018E040
NrvHammerHeadPackun::HammerHeadPackunNrvHit::__ct(void)=0x8018E050
NrvHammerHeadPackun::HammerHeadPackunNrvCrow::__ct(void)=0x8018E060
NrvHammerHeadPackun::HammerHeadPackunNrvSmashKill::__ct(void)=0x8018E070
NrvHammerHeadPackun::HammerHeadPackunNrvBlowKill::__ct(void)=0x8018E080
NrvHammerHeadPackun::HammerHeadPackunNrvBlowKillRock::__ct(void)=0x8018E090
NrvHammerHeadPackun::HammerHeadPackunNrvNumb::__ct(void)=0x8018E0A0
NrvHammerHeadPackun::HammerHeadPackunNrvNumb::executeOnEnd(Spine*) const=0x8018E0B0
NrvHammerHeadPackun::HammerHeadPackunNrvNumb::execute(Spine*) const=0x8018E0C0
NrvHammerHeadPackun::HammerHeadPackunNrvBlowKillRock::execute(Spine*) const=0x8018E0D0
NrvHammerHeadPackun::HammerHeadPackunNrvBlowKill::execute(Spine*) const=0x8018E0E0
NrvHammerHeadPackun::HammerHeadPackunNrvSmashKill::execute(Spine*) const=0x8018E0F0
NrvHammerHeadPackun::HammerHeadPackunNrvCrow::execute(Spine*) const=0x8018E100
NrvHammerHeadPackun::HammerHeadPackunNrvHit::execute(Spine*) const=0x8018E110
NrvHammerHeadPackun::HammerHeadPackunNrvRise::execute(Spine*) const=0x8018E160
NrvHammerHeadPackun::HammerHeadPackunNrvDamage::execute(Spine*) const=0x8018E170
NrvHammerHeadPackun::HammerHeadPackunNrvRecover::execute(Spine*) const=0x8018E180
NrvHammerHeadPackun::HammerHeadPackunNrvRest::execute(Spine*) const=0x8018E190
NrvHammerHeadPackun::HammerHeadPackunNrvAttack::execute(Spine*) const=0x8018E1A0
NrvHammerHeadPackun::HammerHeadPackunNrvSearch::execute(Spine*) const=0x8018E1B0
NrvHammerHeadPackun::HammerHeadPackunNrvWait::execute(Spine*) const=0x8018E1C0
HanachanParts::__ct(Hanachan*, long, const char*, const char*)=0x8018E1D0
HanachanParts::init(const JMapInfoIter&)=0x8018E270
HanachanParts::kill(void)=0x8018E350
HanachanParts::getCommonGravity(void) const=0x8018E3D0
HanachanParts::control(void)=0x8018E470
HanachanParts::attackSensor(HitSensor*, HitSensor*)=0x8018E4E0
HanachanParts::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8018E6B0
HanachanParts::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8018EB70
HanachanParts::receiveMsgPush(HitSensor*, HitSensor*)=0x8018EB80
HanachanParts::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8018ECC0
HanachanParts::calcAndSetBaseMtx(void)=0x8018ED10
HanachanParts::exeWalk(void)=0x8018EE40
HanachanParts::exeTrample(void)=0x8018EF80
HanachanParts::exeBecomeAngry(void)=0x8018F160
HanachanParts::exeAngryPursue(void)=0x8018F2A0
HanachanParts::exeAngryEnd(void)=0x8018F3F0
HanachanParts::exeWallHitEnd(void)=0x8018F5A0
HanachanParts::exeOverturn(void)=0x8018F6F0
HanachanParts::exeOverturnBound(void)=0x8018F840
HanachanParts::exeOverturnWait(void)=0x8018F970
HanachanParts::exeRecover(void)=0x8018FA80
HanachanParts::exeHipDropped(void)=0x8018FC60
HanachanParts::exeBlow(void)=0x8018FDD0
HanachanParts::exeStarPointerBind(void)=0x8018FEB0
HanachanParts::isHeadHitWall(void)=0x8018FF10
HanachanParts::changeHeadAngry(void)=0x8018FF90
HanachanParts::changeHeadCalmDown(void)=0x8018FFE0
Hanachan::__ct(const char*)=0x80190030
Hanachan::init(const JMapInfoIter&)=0x801900B0
Hanachan::initAfterPlacement(void)=0x80190470
Hanachan::makeActorAppeared(void)=0x80190480
Hanachan::makeActorDead(void)=0x80190500
Hanachan::kill(void)=0x80190570
Hanachan::startClipped(void)=0x80190650
Hanachan::endClipped(void)=0x801906B0
Hanachan::control(void)=0x80190710
Hanachan::exeWalk(void)=0x80190860
Hanachan::exeTrample(void)=0x801908C0
Hanachan::exeBecomeAngry(void)=0x801909C0
Hanachan::exeAngryPursue(void)=0x80190AD0
Hanachan::exeAngryEnd(void)=0x80190BB0
Hanachan::exeWallHitEnd(void)=0x80190D90
Hanachan::exeOverturn(void)=0x80190F10
Hanachan::exeOverturnWait(void)=0x80191050
Hanachan::exeOverturnBound(void)=0x801910D0
Hanachan::exeRecover(void)=0x801911F0
Hanachan::exeHipDropped(void)=0x80191360
Hanachan::exeBlow(void)=0x80191510
Hanachan::exeStarPointerBind(void)=0x801915A0
Hanachan::calcNearestInfectionId(void)=0x80191650
Hanachan::isOwnSensor(HitSensor*)=0x80191710
Hanachan::setNerveBlow(const JGeometry::TVec3<float>&)=0x80191780
Hanachan::applyPlayerHipDropReaction(void)=0x80191A00
Hanachan::setNerveAllParts(const Nerve*)=0x80191AD0
Hanachan::setDelayAllPartsAtId(long, long, long)=0x80191B40
Hanachan::isStarPointerPointing(void)=0x80191BB0
Hanachan::moveHeadAlongRail(float)=0x80191C20
Hanachan::moveHeadToPlayer(float, float)=0x80191D50
Hanachan::moveBodyAlongHead(void)=0x80191E40
HanachanParts::__dt(void)=0x80192010
Hanachan::__dt(void)=0x80192070
short::(nit_\Hanachan_cpp)=0x801920D0
NrvHanachan::HanachanPartsNrvWalk::__ct(void)=0x801921F0
NrvHanachan::HanachanPartsNrvBecomeAngry::__ct(void)=0x80192200
NrvHanachan::HanachanPartsNrvAngryPursue::__ct(void)=0x80192210
NrvHanachan::HanachanPartsNrvAngryEnd::__ct(void)=0x80192220
NrvHanachan::HanachanPartsNrvWallHitEnd::__ct(void)=0x80192230
NrvHanachan::HanachanPartsNrvTrample::__ct(void)=0x80192240
NrvHanachan::HanachanPartsNrvOverturn::__ct(void)=0x80192250
NrvHanachan::HanachanPartsNrvOverturnBound::__ct(void)=0x80192260
NrvHanachan::HanachanPartsNrvOverturnWait::__ct(void)=0x80192270
NrvHanachan::HanachanPartsNrvRecover::__ct(void)=0x80192280
NrvHanachan::HanachanPartsNrvHipDropped::__ct(void)=0x80192290
NrvHanachan::HanachanPartsNrvOverturnHipDropped::__ct(void)=0x801922A0
NrvHanachan::HanachanPartsNrvBlow::__ct(void)=0x801922B0
NrvHanachan::HanachanPartsNrvStarPointerBind::__ct(void)=0x801922C0
NrvHanachan::HanachanNrvHanachanWalk::__ct(void)=0x801922E0
NrvHanachan::HanachanNrvHanachanBecomeAngry::__ct(void)=0x801922F0
NrvHanachan::HanachanNrvHanachanAngryPursue::__ct(void)=0x80192300
NrvHanachan::HanachanNrvHanachanAngryEnd::__ct(void)=0x80192310
NrvHanachan::HanachanNrvHanachanWallHitEnd::__ct(void)=0x80192320
NrvHanachan::HanachanNrvHanachanTrample::__ct(void)=0x80192330
NrvHanachan::HanachanNrvHanachanOverturn::__ct(void)=0x80192340
NrvHanachan::HanachanNrvHanachanOverturnBound::__ct(void)=0x80192350
NrvHanachan::HanachanNrvHanachanOverturnWait::__ct(void)=0x80192360
NrvHanachan::HanachanNrvHanachanRecover::__ct(void)=0x80192370
NrvHanachan::HanachanNrvHanachanHipDropped::__ct(void)=0x80192380
NrvHanachan::HanachanNrvHanachanOverturnHipDropped::__ct(void)=0x80192390
NrvHanachan::HanachanNrvHanachanBlow::__ct(void)=0x801923A0
NrvHanachan::HanachanNrvHanachanStarPointerBind::__ct(void)=0x801923B0
NrvHanachan::HanachanNrvHanachanStarPointerBindEnd::__ct(void)=0x801923C0
NrvHanachan::HanachanNrvHanachanStarPointerBindOverturn::__ct(void)=0x801923D0
NrvHanachan::HanachanNrvHanachanStarPointerBindEndOverturn::__ct(void)=0x801923E0
NrvHanachan::HanachanNrvHanachanStarPointerBindEndOverturn::execute(Spine*) const=0x801923F0
NrvHanachan::HanachanNrvHanachanStarPointerBindOverturn::executeOnEnd(Spine*) const=0x80192400
NrvHanachan::HanachanNrvHanachanStarPointerBindOverturn::execute(Spine*) const=0x80192410
NrvHanachan::HanachanNrvHanachanStarPointerBindEnd::execute(Spine*) const=0x80192420
NrvHanachan::HanachanNrvHanachanStarPointerBind::executeOnEnd(Spine*) const=0x80192430
NrvHanachan::HanachanNrvHanachanStarPointerBind::execute(Spine*) const=0x80192440
NrvHanachan::HanachanNrvHanachanBlow::execute(Spine*) const=0x80192450
NrvHanachan::HanachanNrvHanachanOverturnHipDropped::execute(Spine*) const=0x80192460
NrvHanachan::HanachanNrvHanachanHipDropped::execute(Spine*) const=0x80192470
NrvHanachan::HanachanNrvHanachanRecover::execute(Spine*) const=0x80192480
NrvHanachan::HanachanNrvHanachanOverturnWait::execute(Spine*) const=0x80192490
NrvHanachan::HanachanNrvHanachanOverturnBound::execute(Spine*) const=0x801924A0
NrvHanachan::HanachanNrvHanachanOverturn::execute(Spine*) const=0x801924B0
NrvHanachan::HanachanNrvHanachanTrample::execute(Spine*) const=0x801924C0
NrvHanachan::HanachanNrvHanachanWallHitEnd::execute(Spine*) const=0x801924D0
NrvHanachan::HanachanNrvHanachanAngryEnd::execute(Spine*) const=0x801924E0
NrvHanachan::HanachanNrvHanachanAngryPursue::execute(Spine*) const=0x801924F0
NrvHanachan::HanachanNrvHanachanBecomeAngry::execute(Spine*) const=0x80192500
NrvHanachan::HanachanNrvHanachanWalk::execute(Spine*) const=0x80192510
NrvHanachan::HanachanPartsNrvStarPointerBind::executeOnEnd(Spine*) const=0x80192530
NrvHanachan::HanachanPartsNrvStarPointerBind::execute(Spine*) const=0x80192580
NrvHanachan::HanachanPartsNrvBlow::execute(Spine*) const=0x80192590
NrvHanachan::HanachanPartsNrvOverturnHipDropped::execute(Spine*) const=0x801925A0
NrvHanachan::HanachanPartsNrvHipDropped::execute(Spine*) const=0x801925B0
NrvHanachan::HanachanPartsNrvRecover::executeOnEnd(Spine*) const=0x801925C0
NrvHanachan::HanachanPartsNrvRecover::execute(Spine*) const=0x801925D0
NrvHanachan::HanachanPartsNrvOverturnWait::execute(Spine*) const=0x801925E0
NrvHanachan::HanachanPartsNrvOverturnBound::execute(Spine*) const=0x801925F0
NrvHanachan::HanachanPartsNrvOverturn::execute(Spine*) const=0x80192600
NrvHanachan::HanachanPartsNrvTrample::execute(Spine*) const=0x80192610
NrvHanachan::HanachanPartsNrvWallHitEnd::execute(Spine*) const=0x80192620
NrvHanachan::HanachanPartsNrvAngryEnd::execute(Spine*) const=0x80192630
NrvHanachan::HanachanPartsNrvAngryPursue::executeOnEnd(Spine*) const=0x80192640
NrvHanachan::HanachanPartsNrvAngryPursue::execute(Spine*) const=0x80192650
NrvHanachan::HanachanPartsNrvBecomeAngry::executeOnEnd(Spine*) const=0x80192660
NrvHanachan::HanachanPartsNrvBecomeAngry::execute(Spine*) const=0x80192670
NrvHanachan::HanachanPartsNrvWalk::execute(Spine*) const=0x80192680
HanachanBig::__ct(const char*)=0x80192690
HanachanBig::init(const JMapInfoIter&)=0x801926F0
HanachanBig::makeActorAppeared(void)=0x801929C0
HanachanBig::makeActorDead(void)=0x80192A50
HanachanBig::startClipped(void)=0x80192AC0
HanachanBig::endClipped(void)=0x80192B30
HanachanBig::control(void)=0x80192BA0
HanachanBig::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80192C00
HanachanBigParts::__ct(HanachanBig*, const char*, char*)=0x80193170
HanachanBigParts::init(const JMapInfoIter&)=0x801931F0
HanachanBigParts::attackSensor(HitSensor*, HitSensor*)=0x801932E0
HanachanBigParts::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80193400
HanachanBigParts::control(void)=0x80193500
HanachanBigParts::calcAndSetBaseMtx(void)=0x80193510
JGeometry::TVec3<float>::mul(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80193580
HanachanBig::__dt(void)=0x80193790
HanachanBigParts::__dt(void)=0x801937F0
short::(nit_\HanachanBig_cpp)=0x80193850
HanachanRunawayParts::__ct(HanachanRunaway*, const char*, char*)=0x80193910
HanachanRunawayParts::init(const JMapInfoIter&)=0x80193980
HanachanRunawayParts::calcAndSetBaseMtx(void)=0x801939F0
HanachanRunawayParts::attackSensor(HitSensor*, HitSensor*)=0x80193A30
HanachanRunawayParts::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80193A50
HanachanRunaway::__ct(TubeSlider*)=0x80193A70
HanachanRunaway::init(const JMapInfoIter&)=0x80193B10
HanachanRunaway::initAfterPlacement(void)=0x80193DD0
HanachanRunaway::startClipped(void)=0x80193EB0
HanachanRunaway::endClipped(void)=0x80193F30
HanachanRunaway::control(void)=0x80193FB0
HanachanRunaway::exeWhistle(void)=0x801941D0
HanachanRunaway::exeBindStarPointer(void)=0x801942B0
HanachanRunaway::calcAndSetBaseMtx(void)=0x80194430
HanachanRunaway::attackSensor(HitSensor*, HitSensor*)=0x80194490
HanachanRunaway::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801944F0
HanachanRunaway::isStarPointerPointing(void)=0x80194880
HanachanRunawayParts::__dt(void)=0x80194910
HanachanRunaway::__dt(void)=0x80194970
short::(nit_\HanachanRunaway_cpp)=0x801949D0
NrvHanachanRunaway::HanachanRunawayNrvWait::__ct(void)=0x80194A10
NrvHanachanRunaway::HanachanRunawayNrvWhistle::__ct(void)=0x80194A20
NrvHanachanRunaway::HanachanRunawayNrvBindStarPointer::__ct(void)=0x80194A30
NrvHanachanRunaway::HanachanRunawayNrvBindStarPointer::execute(Spine*) const=0x80194A40
NrvHanachanRunaway::HanachanRunawayNrvWhistle::execute(Spine*) const=0x80194A50
NrvHanachanRunaway::HanachanRunawayNrvWait::execute(Spine*) const=0x80194A60
@unnamed@HomingKiller_cpp@::isSensorType(const HitSensor*, const unsigned long*, unsigned long)=0x80194AC0
HomingKiller::__ct(const char*)=0x80194B00
HomingKiller::init(const JMapInfoIter&)=0x80194C30
HomingKiller::appear(void)=0x801951D0
HomingKiller::appear(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80195290
HomingKiller::control(void)=0x801953E0
HomingKiller::calcAndSetBaseMtx(void)=0x801956D0
HomingKiller::attackSensor(HitSensor*, HitSensor*)=0x80195840
HomingKiller::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80195AD0
HomingKiller::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80195D30
HomingKiller::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80195E30
HomingKiller::initMapToolInfo(const JMapInfoIter&)=0x80195F90
HomingKiller::calcInitPosture(void)=0x801960E0
HomingKiller::updateVelocity(void)=0x801961B0
HomingKiller::updateRotateZ(const JGeometry::TVec3<float>&)=0x80196250
HomingKiller::processMove(void)=0x801963B0
HomingKiller::processChase(void)=0x80196550
HomingKiller::isChaseStart(void) const=0x80196730
HomingKiller::tryChaseStart(void)=0x80196800
HomingKiller::tryFreeze(const Nerve*)=0x801968B0
HomingKiller::tryBindedBreak(void)=0x80196940
HomingKiller::tryToExplosion(HitSensor*, HitSensor*)=0x80196AC0
HomingKiller::sendMsgExplosionToNearActor(void)=0x80196BA0
HomingKiller::isUpdateChaseFrontVec(const JGeometry::TVec3<float>&) const=0x80196C40
HomingKiller::calcFrontVecToTarget(JGeometry::TVec3<float>*) const=0x80196CF0
HomingKiller::isValidShowModel(void) const=0x80196D80
HomingKiller::isWaterBreak(void) const=0x80196E00
HomingKiller::updateBaseMtxNoRotateZ(void)=0x80196E80
HomingKiller::startMoveLevelSound(bool)=0x80196EF0
HomingKiller::setBckRate(float, bool)=0x80196FF0
HomingKiller::isChasing(void) const=0x80197060
HomingKiller::exeAppear(void)=0x80197300
HomingKiller::exeMoveStart(void)=0x80197690
HomingKiller::exeMove(void)=0x80197710
HomingKiller::exeChaseStart(void)=0x80197790
HomingKiller::exeChase(void)=0x80197870
HomingKiller::exeFreeze(void)=0x801978E0
HomingKiller::exeBreak(void)=0x80197A20
HomingKiller::exeGoToTarget(void)=0x80197C60
HomingKiller::__dt(void)=0x801980E0
short::(nit_\HomingKiller_cpp)=0x80198140
NrvHomingKiller::HomingKillerNrvAppear::__ct(void)=0x801981C0
NrvHomingKiller::HomingKillerNrvMoveStart::__ct(void)=0x801981D0
NrvHomingKiller::HomingKillerNrvMove::__ct(void)=0x801981E0
NrvHomingKiller::HomingKillerNrvChaseStart::__ct(void)=0x801981F0
NrvHomingKiller::HomingKillerNrvChase::__ct(void)=0x80198200
NrvHomingKiller::HomingKillerNrvFreeze::__ct(void)=0x80198210
NrvHomingKiller::HomingKillerNrvBreak::__ct(void)=0x80198220
NrvHomingKiller::HomingKillerNrvGoToTarget::__ct(void)=0x80198230
NrvHomingKiller::HomingKillerNrvGoToTarget::execute(Spine*) const=0x801982D0
NrvHomingKiller::HomingKillerNrvBreak::execute(Spine*) const=0x801982E0
NrvHomingKiller::HomingKillerNrvFreeze::execute(Spine*) const=0x801982F0
NrvHomingKiller::HomingKillerNrvChase::execute(Spine*) const=0x80198300
NrvHomingKiller::HomingKillerNrvChaseStart::execute(Spine*) const=0x80198310
NrvHomingKiller::HomingKillerNrvMove::execute(Spine*) const=0x80198320
NrvHomingKiller::HomingKillerNrvMoveStart::execute(Spine*) const=0x80198330
NrvHomingKiller::HomingKillerNrvAppear::execute(Spine*) const=0x80198340
HomingKillerLauncher::__ct(const char*)=0x80198350
HomingKillerLauncher::init(const JMapInfoIter&)=0x801983B0
HomingKiller::__defctor(void)=0x801984E0
HomingKillerLauncher::appear(void)=0x801984F0
HomingKillerLauncher::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80198530
HomingKillerLauncher::exeAppearKiller(void)=0x801985C0
HomingKillerLauncher::exeDeadKiller(void)=0x80198660
HomingKillerLauncher::__dt(void)=0x801986C0
short::(nit_\HomingKillerLauncher_cpp)=0x80198720
NrvHomingKillerLauncher::HomingKillerLauncherNrvAppearKiller::__ct(void)=0x80198750
NrvHomingKillerLauncher::HomingKillerLauncherNrvDeadKiller::__ct(void)=0x80198760
NrvHomingKillerLauncher::HomingKillerLauncherNrvDeadKiller::execute(Spine*) const=0x80198770
NrvHomingKillerLauncher::HomingKillerLauncherNrvAppearKiller::execute(Spine*) const=0x80198780
Jellyfish::__ct(const char*)=0x80198790
Jellyfish::init(const JMapInfoIter&)=0x80198810
Jellyfish::kill(void)=0x80198A90
Jellyfish::control(void)=0x80198AE0
Jellyfish::calcAndSetBaseMtx(void)=0x80198C40
Jellyfish::exeWait(void)=0x80198CA0
Jellyfish::exeFind(void)=0x80198D30
Jellyfish::exeThreat(void)=0x80198DD0
Jellyfish::exeDeath(void)=0x80198E60
Jellyfish::exeAttack(void)=0x80198F50
Jellyfish::exeRailGoal(void)=0x80199000
Jellyfish::attackSensor(HitSensor*, HitSensor*)=0x80199090
Jellyfish::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801991A0
Jellyfish::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80199270
Jellyfish::threatTurn(void)=0x80199310
Jellyfish::faceToMario(void)=0x801993B0
Jellyfish::selectNerveAfterWait(void)=0x80199580
Jellyfish::selectNerveThreat(void)=0x80199670
Jellyfish::tryDPDSwoon(void)=0x801997E0
Jellyfish::isNerveTypeMoving(void) const=0x80199870
Jellyfish::__dt(void)=0x801998D0
short::(nit_\Jellyfish_cpp)=0x80199930
NrvJellyfish::JellyfishNrvWait::__ct(void)=0x801999C0
NrvJellyfish::JellyfishNrvWaitWithRightTurn::__ct(void)=0x801999D0
NrvJellyfish::JellyfishNrvWaitWithLeftTurn::__ct(void)=0x801999E0
NrvJellyfish::JellyfishNrvFind::__ct(void)=0x801999F0
NrvJellyfish::JellyfishNrvThreat::__ct(void)=0x80199A00
NrvJellyfish::JellyfishNrvThreatWithRightTurn::__ct(void)=0x80199A10
NrvJellyfish::JellyfishNrvThreatWithLeftTurn::__ct(void)=0x80199A20
NrvJellyfish::JellyfishNrvDeath::__ct(void)=0x80199A30
NrvJellyfish::JellyfishNrvAttack::__ct(void)=0x80199A40
NrvJellyfish::JellyfishNrvRailGoal::__ct(void)=0x80199A50
NrvJellyfish::JellyfishNrvDPDSwoon::__ct(void)=0x80199A60
NrvJellyfish::JellyfishNrvDPDSwoon::execute(Spine*) const=0x80199A70
NrvJellyfish::JellyfishNrvRailGoal::execute(Spine*) const=0x80199A80
NrvJellyfish::JellyfishNrvAttack::execute(Spine*) const=0x80199A90
NrvJellyfish::JellyfishNrvDeath::execute(Spine*) const=0x80199AA0
NrvJellyfish::JellyfishNrvThreatWithLeftTurn::execute(Spine*) const=0x80199AB0
NrvJellyfish::JellyfishNrvThreatWithRightTurn::execute(Spine*) const=0x80199AC0
NrvJellyfish::JellyfishNrvThreat::execute(Spine*) const=0x80199AD0
NrvJellyfish::JellyfishNrvFind::execute(Spine*) const=0x80199AE0
NrvJellyfish::JellyfishNrvWaitWithLeftTurn::execute(Spine*) const=0x80199AF0
NrvJellyfish::JellyfishNrvWaitWithRightTurn::execute(Spine*) const=0x80199B30
NrvJellyfish::JellyfishNrvWait::execute(Spine*) const=0x80199B70
JellyfishElectric::__ct(const char*)=0x80199B80
JellyfishElectric::init(const JMapInfoIter&)=0x80199C10
JellyfishElectric::kill(void)=0x80199EA0
JellyfishElectric::control(void)=0x80199EF0
JellyfishElectric::calcAndSetBaseMtx(void)=0x8019A080
JellyfishElectric::exeWait(void)=0x8019A0E0
JellyfishElectric::exeDamage(void)=0x8019A1B0
JellyfishElectric::exeDeath(void)=0x8019A260
JellyfishElectric::exeAttack(void)=0x8019A330
JellyfishElectric::exeRailGoal(void)=0x8019A3B0
JellyfishElectric::exeDPDSwoon(void)=0x8019A440
JellyfishElectric::attackSensor(HitSensor*, HitSensor*)=0x8019A4A0
JellyfishElectric::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8019A550
JellyfishElectric::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8019A640
JellyfishElectric::waitTurn(void)=0x8019A6A0
JellyfishElectric::knockOut(void)=0x8019A760
JellyfishElectric::tryToAttackElectric(HitSensor*, HitSensor*)=0x8019A790
JellyfishElectric::tryDPDSwoon(void)=0x8019A820
JellyfishElectric::selectNerveAfterWait(void)=0x8019A8E0
JellyfishElectric::__dt(void)=0x8019A990
short::(nit_\JellyfishElectric_cpp)=0x8019A9F0
NrvJellyfishElectric::JellyfishElectricNrvWait::__ct(void)=0x8019AA70
NrvJellyfishElectric::JellyfishElectricNrvWaitWithRightTurn::__ct(void)=0x8019AA80
NrvJellyfishElectric::JellyfishElectricNrvWaitWithLeftTurn::__ct(void)=0x8019AA90
NrvJellyfishElectric::JellyfishElectricNrvDamage::__ct(void)=0x8019AAA0
NrvJellyfishElectric::JellyfishElectricNrvDeath::__ct(void)=0x8019AAB0
NrvJellyfishElectric::JellyfishElectricNrvAttack::__ct(void)=0x8019AAC0
NrvJellyfishElectric::JellyfishElectricNrvRailGoal::__ct(void)=0x8019AAD0
NrvJellyfishElectric::JellyfishElectricNrvDPDSwoon::__ct(void)=0x8019AAE0
NrvJellyfishElectric::JellyfishElectricNrvDPDSwoon::execute(Spine*) const=0x8019AAF0
NrvJellyfishElectric::JellyfishElectricNrvRailGoal::execute(Spine*) const=0x8019AB00
NrvJellyfishElectric::JellyfishElectricNrvAttack::execute(Spine*) const=0x8019AB10
NrvJellyfishElectric::JellyfishElectricNrvDeath::execute(Spine*) const=0x8019AB20
NrvJellyfishElectric::JellyfishElectricNrvDamage::execute(Spine*) const=0x8019AB30
NrvJellyfishElectric::JellyfishElectricNrvWaitWithLeftTurn::execute(Spine*) const=0x8019AB40
NrvJellyfishElectric::JellyfishElectricNrvWaitWithRightTurn::execute(Spine*) const=0x8019AB80
NrvJellyfishElectric::JellyfishElectricNrvWait::execute(Spine*) const=0x8019ABC0
Jugem::__ct(const char*)=0x8019B020
Jugem::init(const JMapInfoIter&)=0x8019B100
Jugem::makeActorAppeared(void)=0x8019B580
Jugem::control(void)=0x8019B5F0
Jugem::calcAndSetBaseMtx(void)=0x8019CCE0
Jugem::attackSensor(HitSensor*, HitSensor*)=0x8019CD50
Jugem::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8019CE60
Jugem::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8019D050
JugemCloud::__ct(Jugem*, const char*)=0x8019EDC0
JugemCloud::makeActorAppeared(void)=0x8019EE30
JugemCloud::appear(void)=0x8019EE70
JugemCloud::kill(void)=0x8019EEE0
JugemCloud::control(void)=0x8019EEF0
JugemCloud::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8019EFF0
JointControlDelegator<Jugem>::__dt(void)=0x8019F010
JointControlDelegator<Jugem>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8019F050
JointControlDelegator<Jugem>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8019F0C0
Jugem::__dt(void)=0x8019F130
JugemCloud::__dt(void)=0x8019F190
short::(nit_\Jugem_cpp)=0x8019F1F0
JumpBeamer::__ct(const char*)=0x8019F650
JumpEmitter::__dt(void)=0x8019F6A0
JumpBeamer::control(void)=0x8019F700
JumpBeamer::calcAndSetBaseMtx(void)=0x8019F850
JumpBeamer::init(const JMapInfoIter&)=0x8019F8A0
JumpBeamer::attackSensor(HitSensor*, HitSensor*)=0x8019FC90
JumpBeamer::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8019FCE0
JumpBeamer::syncSwitchOffB(void)=0x8019FE00
JumpBeamer::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8019FE70
JumpBeamer::exeHide(void)=0x8019FEE0
JumpBeamer::exeUp(void)=0x8019FFD0
JumpBeamer::exeWait(void)=0x801A00C0
JumpBeamer::exeDown(void)=0x801A0170
JumpBeamer::exeHopStart(void)=0x801A0260
JumpBeamer::exeHopWait(void)=0x801A0340
JumpBeamer::exeHopJump(void)=0x801A03E0
JumpBeamer::exeHopEnd(void)=0x801A0460
JumpBeamer::exePreOpen(void)=0x801A0530
JumpBeamer::exeOpen(void)=0x801A05D0
JumpBeamer::exeClose(void)=0x801A0700
JumpBeamer::exeInter(void)=0x801A0770
JumpBeamer::isStarPointerBindable(void) const=0x801A08E0
MR::FunctorV0M<JumpBeamer*,M10JumpBeamerFPCvPv_v>::__cl(void) const=0x801A0990
MR::FunctorV0M<JumpBeamer*,M10JumpBeamerFPCvPv_v>::clone(JKRHeap*) const=0x801A09C0
JumpBeamer::__dt(void)=0x801A0A30
short::(nit_\JumpBeamer_cpp)=0x801A0A90
NrvJumpBeamer::JumpBeamerNrvHide::__ct(void)=0x801A0B20
NrvJumpBeamer::JumpBeamerNrvUp::__ct(void)=0x801A0B30
NrvJumpBeamer::JumpBeamerNrvWait::__ct(void)=0x801A0B40
NrvJumpBeamer::JumpBeamerNrvDown::__ct(void)=0x801A0B50
NrvJumpBeamer::JumpBeamerNrvHopStart::__ct(void)=0x801A0B60
NrvJumpBeamer::JumpBeamerNrvHopWait::__ct(void)=0x801A0B70
NrvJumpBeamer::JumpBeamerNrvHopJump::__ct(void)=0x801A0B80
NrvJumpBeamer::JumpBeamerNrvHopEnd::__ct(void)=0x801A0B90
NrvJumpBeamer::JumpBeamerNrvPreOpen::__ct(void)=0x801A0BA0
NrvJumpBeamer::JumpBeamerNrvOpen::__ct(void)=0x801A0BB0
NrvJumpBeamer::JumpBeamerNrvClose::__ct(void)=0x801A0BC0
NrvJumpBeamer::JumpBeamerNrvInter::__ct(void)=0x801A0BD0
NrvJumpBeamer::JumpBeamerNrvInter::execute(Spine*) const=0x801A0C60
NrvJumpBeamer::JumpBeamerNrvClose::execute(Spine*) const=0x801A0C70
NrvJumpBeamer::JumpBeamerNrvOpen::execute(Spine*) const=0x801A0C80
NrvJumpBeamer::JumpBeamerNrvPreOpen::execute(Spine*) const=0x801A0C90
NrvJumpBeamer::JumpBeamerNrvHopEnd::execute(Spine*) const=0x801A0CA0
NrvJumpBeamer::JumpBeamerNrvHopJump::execute(Spine*) const=0x801A0CB0
NrvJumpBeamer::JumpBeamerNrvHopWait::execute(Spine*) const=0x801A0CC0
NrvJumpBeamer::JumpBeamerNrvHopStart::execute(Spine*) const=0x801A0CD0
NrvJumpBeamer::JumpBeamerNrvDown::execute(Spine*) const=0x801A0CE0
NrvJumpBeamer::JumpBeamerNrvWait::execute(Spine*) const=0x801A0CF0
NrvJumpBeamer::JumpBeamerNrvUp::execute(Spine*) const=0x801A0D00
NrvJumpBeamer::JumpBeamerNrvHide::execute(Spine*) const=0x801A0D10
JumpEmitter::__ct(const char*)=0x801A0D20
JumpEmitter::kill(void)=0x801A0D90
JumpEmitter::control(void)=0x801A0DD0
JumpEmitter::movement(void)=0x801A0DE0
JumpEmitter::init(const JMapInfoIter&)=0x801A0E20
JumpEmitter::startEventCamera(void)=0x801A0ED0
JumpEmitter::updateEventCamera(void)=0x801A0F30
JumpEmitter::endEventCamera(void)=0x801A0FF0
JumpEmitter::updateRotate(void)=0x801A1020
MR::enableGroupAttack(LiveActor*, float, float)=0x801A11B0
JumpSpider::__ct(const char*)=0x801A12B0
JumpSpider::init(const JMapInfoIter&)=0x801A1330
JumpSpider::initAfterPlacement(void)=0x801A1490
JumpSpider::kill(void)=0x801A15A0
JumpSpider::startClipped(void)=0x801A1600
JumpSpider::endClipped(void)=0x801A1640
JumpSpider::control(void)=0x801A1680
JumpSpider::exeWait(void)=0x801A1700
JumpSpider::exePreJump(void)=0x801A1780
JumpSpider::exeJump(void)=0x801A1810
JumpSpider::exeJumpEnd(void)=0x801A1940
JumpSpider::exeHitToPlayer(void)=0x801A19C0
JumpSpider::exeStampFall(void)=0x801A1AA0
JumpSpider::exeStampDeath(void)=0x801A1B30
JumpSpider::exeHitBlow(void)=0x801A1BE0
JumpSpider::exeDpdPointed(void)=0x801A1C90
JumpSpider::exeNoPowerStart(void)=0x801A1D20
JumpSpider::exeNoPowerLand(void)=0x801A1E40
JumpSpider::exeNoPowerWait(void)=0x801A1ED0
JumpSpider::exeNoPowerEnd(void)=0x801A1F70
JumpSpider::attackSensor(HitSensor*, HitSensor*)=0x801A2000
JumpSpider::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801A2200
JumpSpider::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A23C0
JumpSpider::calcAndSetBaseMtx(void)=0x801A2570
JumpSpider::isEatable(void) const=0x801A25D0
JumpSpider::isStarPointerBindable(void) const=0x801A2650
JumpSpider::__dt(void)=0x801A2710
short::(nit_\JumpSpider_cpp)=0x801A2770
NrvJumpSpider::HostTypeNrvWait::__ct(void)=0x801A2810
NrvJumpSpider::HostTypeNrvPreJump::__ct(void)=0x801A2820
NrvJumpSpider::HostTypeNrvJump::__ct(void)=0x801A2830
NrvJumpSpider::HostTypeNrvJumpEnd::__ct(void)=0x801A2840
NrvJumpSpider::HostTypeNrvHitToPlayer::__ct(void)=0x801A2850
NrvJumpSpider::HostTypeNrvStampFall::__ct(void)=0x801A2860
NrvJumpSpider::HostTypeNrvStampDeath::__ct(void)=0x801A2870
NrvJumpSpider::HostTypeNrvHitBlow::__ct(void)=0x801A2880
NrvJumpSpider::HostTypeNrvDpdPointed::__ct(void)=0x801A2890
NrvJumpSpider::HostTypeNrvDpdPointedEnd::__ct(void)=0x801A28A0
NrvJumpSpider::HostTypeNrvStarPieceHit::__ct(void)=0x801A28B0
NrvJumpSpider::HostTypeNrvDpdPointedLand::__ct(void)=0x801A28C0
NrvJumpSpider::HostTypeNrvStarPieceHitLand::__ct(void)=0x801A28D0
NrvJumpSpider::HostTypeNrvStarPieceHitWait::__ct(void)=0x801A28E0
NrvJumpSpider::HostTypeNrvNoPowerEnd::__ct(void)=0x801A28F0
NrvJumpSpider::HostTypeNrvEaten::__ct(void)=0x801A2900
NrvJumpSpider::HostTypeNrvEaten::execute(Spine*) const=0x801A2910
NrvJumpSpider::HostTypeNrvNoPowerEnd::execute(Spine*) const=0x801A2920
NrvJumpSpider::HostTypeNrvStarPieceHitWait::execute(Spine*) const=0x801A2930
NrvJumpSpider::HostTypeNrvStarPieceHitLand::execute(Spine*) const=0x801A2940
NrvJumpSpider::HostTypeNrvDpdPointedLand::execute(Spine*) const=0x801A2950
NrvJumpSpider::HostTypeNrvStarPieceHit::execute(Spine*) const=0x801A2960
NrvJumpSpider::HostTypeNrvDpdPointedEnd::execute(Spine*) const=0x801A2970
NrvJumpSpider::HostTypeNrvDpdPointed::executeOnEnd(Spine*) const=0x801A2980
NrvJumpSpider::HostTypeNrvDpdPointed::execute(Spine*) const=0x801A29C0
NrvJumpSpider::HostTypeNrvHitBlow::executeOnEnd(Spine*) const=0x801A29D0
NrvJumpSpider::HostTypeNrvHitBlow::execute(Spine*) const=0x801A29E0
NrvJumpSpider::HostTypeNrvStampDeath::executeOnEnd(Spine*) const=0x801A29F0
NrvJumpSpider::HostTypeNrvStampDeath::execute(Spine*) const=0x801A2A00
NrvJumpSpider::HostTypeNrvStampFall::executeOnEnd(Spine*) const=0x801A2A10
NrvJumpSpider::HostTypeNrvStampFall::execute(Spine*) const=0x801A2A20
NrvJumpSpider::HostTypeNrvHitToPlayer::execute(Spine*) const=0x801A2A30
NrvJumpSpider::HostTypeNrvJumpEnd::execute(Spine*) const=0x801A2A40
NrvJumpSpider::HostTypeNrvJump::execute(Spine*) const=0x801A2A50
NrvJumpSpider::HostTypeNrvPreJump::execute(Spine*) const=0x801A2A60
NrvJumpSpider::HostTypeNrvWait::execute(Spine*) const=0x801A2A70
Kabokuri::__ct(const char*)=0x801A2A80
Kabokuri::init(const JMapInfoIter&)=0x801A2B20
Kabokuri::initAfterPlacement(void)=0x801A2D80
Kabokuri::control(void)=0x801A2DE0
Kabokuri::calcAndSetBaseMtx(void)=0x801A2E70
Kabokuri::updatePose(void)=0x801A2EB0
Kabokuri::addVelocityBase(void)=0x801A2FD0
Kabokuri::addVelocityToRailPoint(float)=0x801A3060
Kabokuri::attackSensor(HitSensor*, HitSensor*)=0x801A31A0
Kabokuri::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801A32B0
Kabokuri::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A3380
Kabokuri::requestTrampled(void)=0x801A3440
Kabokuri::requestStarPieceHitted(void)=0x801A3490
Kabokuri::requestHipDropped(void)=0x801A34F0
Kabokuri::requestHitAttacked(HitSensor*, HitSensor*)=0x801A3550
Kabokuri::requestEaten(void)=0x801A35E0
Kabokuri::tryPointBind(void)=0x801A36F0
Kabokuri::tryYoshiEat(void)=0x801A3750
Kabokuri::exeWait(void)=0x801A37A0
Kabokuri::exeWalk(void)=0x801A3820
Kabokuri::exeDropFire(void)=0x801A38E0
Kabokuri::exeAttacksuccess(void)=0x801A3960
Kabokuri::exeTrampled(void)=0x801A39D0
Kabokuri::exeStarPieceHitted(void)=0x801A3A60
Kabokuri::exeHipDropped(void)=0x801A3AD0
Kabokuri::exeHitAttacked(void)=0x801A3B60
Kabokuri::exeBreak(void)=0x801A3C70
Kabokuri::exeEaten(void)=0x801A3D60
Kabokuri::isEnableAttack(void) const=0x801A3DD0
Kabokuri::isEnablePointBind(void) const=0x801A3E40
Kabokuri::isEnableTrampled(void) const=0x801A3EC0
Kabokuri::isEnablePush(void) const=0x801A3F80
Kabokuri::isEatable(void) const=0x801A3FE0
Kabokuri::__dt(void)=0x801A4060
short::(nit_\Kabokuri_cpp)=0x801A40C0
NrvKabokuri::KabokuriNrvWait::__ct(void)=0x801A4140
NrvKabokuri::KabokuriNrvWalk::__ct(void)=0x801A4150
NrvKabokuri::KabokuriNrvDropFire::__ct(void)=0x801A4160
NrvKabokuri::KabokuriNrvAttacksuccess::__ct(void)=0x801A4170
NrvKabokuri::KabokuriNrvTrampled::__ct(void)=0x801A4180
NrvKabokuri::KabokuriNrvStarPieceHitted::__ct(void)=0x801A4190
NrvKabokuri::KabokuriNrvBindStarPointer::__ct(void)=0x801A41A0
NrvKabokuri::KabokuriNrvHitAttacked::__ct(void)=0x801A41B0
NrvKabokuri::KabokuriNrvHipDropped::__ct(void)=0x801A41C0
NrvKabokuri::KabokuriNrvBreak::__ct(void)=0x801A41D0
NrvKabokuri::KabokuriNrvEaten::__ct(void)=0x801A41E0
NrvKabokuri::KabokuriNrvEaten::execute(Spine*) const=0x801A41F0
NrvKabokuri::KabokuriNrvBreak::execute(Spine*) const=0x801A4200
NrvKabokuri::KabokuriNrvHipDropped::execute(Spine*) const=0x801A4210
NrvKabokuri::KabokuriNrvHitAttacked::execute(Spine*) const=0x801A4220
NrvKabokuri::KabokuriNrvBindStarPointer::execute(Spine*) const=0x801A4230
NrvKabokuri::KabokuriNrvStarPieceHitted::execute(Spine*) const=0x801A4240
NrvKabokuri::KabokuriNrvTrampled::execute(Spine*) const=0x801A4250
NrvKabokuri::KabokuriNrvAttacksuccess::execute(Spine*) const=0x801A4260
NrvKabokuri::KabokuriNrvDropFire::execute(Spine*) const=0x801A4270
NrvKabokuri::KabokuriNrvWalk::execute(Spine*) const=0x801A4280
NrvKabokuri::KabokuriNrvWait::execute(Spine*) const=0x801A4290
KabokuriFire::__ct(const char*)=0x801A42A0
KabokuriFire::init(const JMapInfoIter&)=0x801A42F0
KabokuriFire::start(const JGeometry::TVec3<float>&, bool)=0x801A43D0
KabokuriFire::control(void)=0x801A4480
KabokuriFire::attackSensor(HitSensor*, HitSensor*)=0x801A4490
KabokuriFire::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A44C0
KabokuriFire::exeWait(void)=0x801A4540
KabokuriFire::getBaseMtx(void)=0x801A45D0
KabokuriFire::__dt(void)=0x801A45E0
short::(nit_\KabokuriFire_cpp)=0x801A4640
NrvKabokuriFire::KabokuriFireNrvWait::__ct(void)=0x801A4650
NrvKabokuriFire::KabokuriFireNrvWait::execute(Spine*) const=0x801A4660
KabokuriFireHolder::__ct(void)=0x801A4670
DeriveActorGroup<KabokuriFire>::__dt(void)=0x801A4710
KabokuriFireHolderFunc::createHolder(void)=0x801A4770
KabokuriFireHolderFunc::getDeadMember(void)=0x801A4780
KabokuriFireHolderFunc::generateFire(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x801A47D0
KabokuriFireHolder::__dt(void)=0x801A4850
Kameck::__ct(const char*)=0x801A48B0
Kameck::init(const JMapInfoIter&)=0x801A4990
Kameck::initJMapParam(const JMapInfoIter&)=0x801A4B50
Kameck::makeActorDead(void)=0x801A4D40
Kameck::appear(void)=0x801A4D80
Kameck::kill(void)=0x801A4DC0
Kameck::control(void)=0x801A4E00
Kameck::startClipped(void)=0x801A4E70
Kameck::calcAndSetBaseMtx(void)=0x801A4EB0
Kameck::attackSensor(HitSensor*, HitSensor*)=0x801A4EF0
Kameck::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801A4F90
Kameck::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801A50D0
Kameck::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A5130
SmallKameckBeamEventListener::hitBeam(long)=0x801A6650
Kameck::__dt(void)=0x801A6750
short::(nit_\Kameck_cpp)=0x801A67B0
KameckBeam::init(const JMapInfoIter&)=0x801A6BE0
KameckBeam::control(void)=0x801A6F20
KameckBeam::kill(void)=0x801A6F30
KameckBeam::calcAnim(void)=0x801A6F70
KameckBeam::attackSensor(HitSensor*, HitSensor*)=0x801A6FA0
KameckBeamEventListener::hitBeam(long)=0x801A7050
KameckBeam::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A7060
MR::setKameckBeamCollisionFilter(LiveActor*)=0x801A7A60
KameckBeam::__dt(void)=0x801A7AB0
short::(nit_\KameckBeam_cpp)=0x801A7B10
KameckBeamEventListener::__ct(void)=0x801A7BD0
KameckFireBall::__ct(const char*)=0x801A83A0
KameckFireBall::init(const JMapInfoIter&)=0x801A8410
KameckFireBall::kill(void)=0x801A8560
KameckFireBall::makeActorAppeared(void)=0x801A85C0
KameckFireBall::makeActorDead(void)=0x801A8600
KameckFireBall::control(void)=0x801A8610
KameckFireBall::calcAndSetBaseMtx(void)=0x801A8670
KameckFireBall::attackSensor(HitSensor*, HitSensor*)=0x801A86B0
KameckFireBall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801A8750
KameckFireBall::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A87E0
KameckFireBall::appearDirection(const JGeometry::TVec3<float>&)=0x801A8840
KameckFireBall::exeWait(void)=0x801A8930
KameckFireBall::exeSweep(void)=0x801A8A90
KameckFireBall::__dt(void)=0x801A8B00
short::(nit_\KameckFireBall_cpp)=0x801A8B60
NrvBossKameckBeamFire::KameckFireBallNrvWait::__ct(void)=0x801A8BB0
NrvBossKameckBeamFire::KameckFireBallNrvSweep::__ct(void)=0x801A8BC0
NrvBossKameckBeamFire::KameckFireBallNrvSweep::execute(Spine*) const=0x801A8BD0
NrvBossKameckBeamFire::KameckFireBallNrvWait::execute(Spine*) const=0x801A8BE0
KameckTurtle::__ct(const char*)=0x801A8C20
KameckTurtle::init(const JMapInfoIter&)=0x801A8CB0
KameckTurtle::initJetTurtle(void)=0x801A8E00
KameckTurtle::makeActorAppeared(void)=0x801A8E60
KameckTurtle::makeActorDead(void)=0x801A8ED0
KameckTurtle::control(void)=0x801A8F10
KameckTurtle::calcAndSetBaseMtx(void)=0x801A8F30
KameckTurtle::attackSensor(HitSensor*, HitSensor*)=0x801A8F70
KameckTurtle::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801A9050
KameckTurtle::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801A90B0
KameckTurtle::appearDirection(const JGeometry::TVec3<float>&)=0x801A9120
KameckTurtle::exeRun(void)=0x801A9240
KameckTurtle::exeWait(void)=0x801A9480
KameckTurtle::isEnableAttack(void) const=0x801A9530
KameckTurtle::appearJetTurtle(bool)=0x801A9580
KameckTurtle::__dt(void)=0x801A9620
short::(nit_\KameckTurtle_cpp)=0x801A9680
NrvKameckTurtle::KameckTurtleNrvRun::__ct(void)=0x801A96B0
NrvKameckTurtle::KameckTurtleNrvWait::__ct(void)=0x801A96C0
NrvKameckTurtle::KameckTurtleNrvWait::execute(Spine*) const=0x801A96D0
NrvKameckTurtle::KameckTurtleNrvRun::execute(Spine*) const=0x801A96E0
Kanina::__ct(const char*)=0x801A9730
Kanina::init(const JMapInfoIter&)=0x801A97F0
Kanina::initAfterPlacement(void)=0x801A9A10
Kanina::kill(void)=0x801A9A20
Kanina::makeActorDead(void)=0x801A9A80
Kanina::appearItemTrample(void)=0x801A9A90
Kanina::attackSensor(HitSensor*, HitSensor*)=0x801A9AF0
Kanina::tryAttack(HitSensor*, HitSensor*)=0x801A9C20
Kanina::tryPushEach(HitSensor*, HitSensor*)=0x801A9D70
Kanina::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801A9F90
Kanina::receiveMsgPush(HitSensor*, HitSensor*)=0x801AA1E0
Kanina::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801AA2C0
Kanina::receiveTrample(HitSensor*, HitSensor*)=0x801AA440
Kanina::doDamageFireBall(HitSensor*, HitSensor*)=0x801AA6D0
Kanina::startRun(void)=0x801AA790
Kanina::startRunAwayLevelSound(void)=0x801AA9F0
Kanina::receiveHipDrop(HitSensor*, HitSensor*)=0x801AAA80
Kanina::receiveInvincibleAttack(HitSensor*, HitSensor*)=0x801AAAF0
Kanina::calcAndSetBaseMtx(void)=0x801AAB60
Kanina::control(void)=0x801AAC40
Kanina::initForType(const JMapInfoIter&, Kanina::KaninaType)=0x801AADC0
Kanina::isPlayerBackward(float) const=0x801AAE00
Kanina::isStatePossibleToAttack(void) const=0x801AAE80
Kanina::isStateBlink(void) const=0x801AAF50
Kanina::tryFindPlayer(void)=0x801AB2B0
Kanina::tryHitWall(void)=0x801AB330
Kanina::tryTurn(void)=0x801AB570
Kanina::tryPointing(void)=0x801AB5E0
Kanina::exeAppear(void)=0x801AB6E0
Kanina::exeWait(void)=0x801AB7A0
Kanina::exeWalk(void)=0x801AB880
Kanina::exeRunAway(void)=0x801AB9F0
Kanina::exeRunAwayReboundDirection(void)=0x801ABAF0
Kanina::exeRunAwayBreak(void)=0x801ABC40
Kanina::exeAttack(void)=0x801ABD00
Kanina::exeVauntAttackSuccess(void)=0x801ABD90
Kanina::exeHitWall(void)=0x801ABE20
Kanina::exeReboundEach(void)=0x801ABF30
Kanina::exeGuard(void)=0x801ABFD0
Kanina::exeGuardEnd(void)=0x801AC080
Kanina::exeDamageFireBall(void)=0x801AC0E0
Kanina::exeDig(void)=0x801AC190
Kanina::exeWaitUnderGround(void)=0x801AC240
Kanina::exeFindPlayer(void)=0x801AC2F0
Kanina::exeTurn(void)=0x801AC3A0
Kanina::exeTurnEnd(void)=0x801AC430
Kanina::exePointing(void)=0x801AC4B0
Kanina::__dt(void)=0x801AC550
short::(nit_\Kanina_cpp)=0x801AC5B0
NrvKanina::HostTypeAppear::__ct(void)=0x801AC690
NrvKanina::HostTypeWait::__ct(void)=0x801AC6A0
NrvKanina::HostTypeAttack::__ct(void)=0x801AC6B0
NrvKanina::HostTypeVauntAttackSuccess::__ct(void)=0x801AC6C0
NrvKanina::HostTypeGuard::__ct(void)=0x801AC6D0
NrvKanina::HostTypeGuardEnd::__ct(void)=0x801AC6F0
NrvKanina::HostTypeDamageFireBall::__ct(void)=0x801AC700
NrvKanina::HostTypeDig::__ct(void)=0x801AC710
NrvKanina::HostTypeWaitUnderGround::__ct(void)=0x801AC720
NrvKanina::HostTypeFindPlayer::__ct(void)=0x801AC730
NrvKanina::HostTypeRunAwayBreak::__ct(void)=0x801AC740
NrvKanina::HostTypeReboundEach::__ct(void)=0x801AC750
NrvKanina::HostTypeTurn::__ct(void)=0x801AC760
NrvKanina::HostTypeTurnEnd::__ct(void)=0x801AC770
NrvKanina::HostTypePointing::__ct(void)=0x801AC780
NrvKanina::HostTypePointingEnd::__ct(void)=0x801AC790
NrvKanina::HostTypeWalk::__ct(void)=0x801AC7A0
NrvKanina::HostTypeRunAway::__ct(void)=0x801AC7B0
NrvKanina::HostTypeRunAwayReboundDirection::__ct(void)=0x801AC7C0
NrvKanina::HostTypeHitWall::__ct(void)=0x801AC7D0
NrvKanina::HostTypeHitWall::execute(Spine*) const=0x801AC880
NrvKanina::HostTypeRunAwayReboundDirection::execute(Spine*) const=0x801AC890
NrvKanina::HostTypeRunAway::execute(Spine*) const=0x801AC8A0
NrvKanina::HostTypeWalk::execute(Spine*) const=0x801AC8B0
NrvKanina::HostTypePointingEnd::execute(Spine*) const=0x801AC8C0
NrvKanina::HostTypePointing::executeOnEnd(Spine*) const=0x801AC8D0
NrvKanina::HostTypePointing::execute(Spine*) const=0x801AC8E0
NrvKanina::HostTypeTurnEnd::execute(Spine*) const=0x801AC8F0
NrvKanina::HostTypeTurn::execute(Spine*) const=0x801AC900
NrvKanina::HostTypeReboundEach::execute(Spine*) const=0x801AC910
NrvKanina::HostTypeRunAwayBreak::execute(Spine*) const=0x801AC920
NrvKanina::HostTypeFindPlayer::execute(Spine*) const=0x801AC930
NrvKanina::HostTypeWaitUnderGround::execute(Spine*) const=0x801AC940
NrvKanina::HostTypeDig::execute(Spine*) const=0x801AC950
NrvKanina::HostTypeDamageFireBall::execute(Spine*) const=0x801AC960
NrvKanina::HostTypeGuardEnd::execute(Spine*) const=0x801AC970
NrvKanina::HostTypeGuard::execute(Spine*) const=0x801AC990
NrvKanina::HostTypeVauntAttackSuccess::execute(Spine*) const=0x801AC9A0
NrvKanina::HostTypeAttack::execute(Spine*) const=0x801AC9B0
NrvKanina::HostTypeWait::execute(Spine*) const=0x801AC9C0
NrvKanina::HostTypeAppear::execute(Spine*) const=0x801AC9D0
@unnamed@Kanina_cpp@::getRunAwayBreakTimeRandom(void)=0x801ACC00
Karikari::__ct(const char*)=0x801ADF70
Karikari::init(const JMapInfoIter&)=0x801ADFF0
Karikari::applyEnvironmentInfluenceToVelocity(void)=0x801AE0E0
Karikari::killedInFrozenState(void)=0x801AE220
Karikari::control(void)=0x801AE2F0
Karikari::exeFall(void)=0x801AE380
Karikari::exeLand(void)=0x801AE470
Karikari::exeNoCalcWait(void)=0x801AE630
Karikari::exeWait(void)=0x801AE6D0
Karikari::exePrePursue(void)=0x801AE800
Karikari::exePursue(void)=0x801AE9A0
Karikari::exeWatchFor(void)=0x801AEBF0
Karikari::exePreCling(void)=0x801AEDA0
Karikari::exeCling(void)=0x801AEF30
Karikari::exeRelease(void)=0x801AF020
Karikari::exeSpinAttacked(void)=0x801AF0F0
Karikari::exeDPDAttacked(void)=0x801AF200
Karikari::exeFrozen(void)=0x801AF330
Karikari::exeFrozenRecover(void)=0x801AF440
Karikari::exeBlowOut(void)=0x801AF590
Karikari::exeInTornado(void)=0x801AF780
Karikari::exePress(void)=0x801AF880
Karikari::tryBlowOut(const JGeometry::TVec3<float>&, bool)=0x801AF910
Karikari::tryElectricKill(void)=0x801AFA70
Karikari::tryHipDropRelease(void)=0x801AFB10
Karikari::makeActorDead(void)=0x801AFBD0
Karikari::kill(void)=0x801AFC10
Karikari::attackSensor(HitSensor*, HitSensor*)=0x801AFC70
Karikari::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801AFE00
Karikari::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801AFEC0
Karikari::receiveMsgPush(HitSensor*, HitSensor*)=0x801AFFE0
Karikari::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801B0110
Karikari::tryTurnToDirection(const JGeometry::TVec3<float>&, float)=0x801B0370
Karikari::calcAndSetBaseMtx(void)=0x801B0550
Karikari::tryStarPointerBind(void)=0x801B05C0
Karikari::__dt(void)=0x801B0610
short::(nit_\Karikari_cpp)=0x801B0670
NrvKarikari::HostTypeNrvFall::__ct(void)=0x801B0720
NrvKarikari::HostTypeNrvLand::__ct(void)=0x801B0730
NrvKarikari::HostTypeNrvNoCalcWait::__ct(void)=0x801B0740
NrvKarikari::HostTypeNrvWait::__ct(void)=0x801B0750
NrvKarikari::HostTypeNrvPrePursue::__ct(void)=0x801B0760
NrvKarikari::HostTypeNrvPursue::__ct(void)=0x801B0770
NrvKarikari::HostTypeNrvWatchFor::__ct(void)=0x801B0780
NrvKarikari::HostTypeNrvPreCling::__ct(void)=0x801B0790
NrvKarikari::HostTypeNrvCling::__ct(void)=0x801B07A0
NrvKarikari::HostTypeNrvRelease::__ct(void)=0x801B07B0
NrvKarikari::HostTypeNrvSpinAttacked::__ct(void)=0x801B07C0
NrvKarikari::HostTypeNrvDPDAttacked::__ct(void)=0x801B07D0
NrvKarikari::HostTypeNrvFrozen::__ct(void)=0x801B07E0
NrvKarikari::HostTypeNrvFrozenRecover::__ct(void)=0x801B07F0
NrvKarikari::HostTypeNrvBlowOut::__ct(void)=0x801B0800
NrvKarikari::HostTypeNrvBlowOutStarPiece::__ct(void)=0x801B0810
NrvKarikari::HostTypeNrvInTornado::__ct(void)=0x801B0820
NrvKarikari::HostTypeNrvPress::__ct(void)=0x801B0830
NrvKarikari::HostTypeNrvPress::execute(Spine*) const=0x801B0840
NrvKarikari::HostTypeNrvInTornado::execute(Spine*) const=0x801B0850
NrvKarikari::HostTypeNrvBlowOutStarPiece::execute(Spine*) const=0x801B0860
NrvKarikari::HostTypeNrvBlowOut::execute(Spine*) const=0x801B0870
NrvKarikari::HostTypeNrvFrozenRecover::execute(Spine*) const=0x801B0880
NrvKarikari::HostTypeNrvFrozen::execute(Spine*) const=0x801B0890
NrvKarikari::HostTypeNrvDPDAttacked::execute(Spine*) const=0x801B08A0
NrvKarikari::HostTypeNrvSpinAttacked::execute(Spine*) const=0x801B08B0
NrvKarikari::HostTypeNrvRelease::execute(Spine*) const=0x801B08C0
NrvKarikari::HostTypeNrvCling::execute(Spine*) const=0x801B08D0
NrvKarikari::HostTypeNrvPreCling::execute(Spine*) const=0x801B08E0
NrvKarikari::HostTypeNrvWatchFor::execute(Spine*) const=0x801B08F0
NrvKarikari::HostTypeNrvPursue::execute(Spine*) const=0x801B0900
NrvKarikari::HostTypeNrvPrePursue::execute(Spine*) const=0x801B0910
NrvKarikari::HostTypeNrvWait::execute(Spine*) const=0x801B0920
NrvKarikari::HostTypeNrvNoCalcWait::execute(Spine*) const=0x801B0930
NrvKarikari::HostTypeNrvLand::execute(Spine*) const=0x801B0940
NrvKarikari::HostTypeNrvFall::execute(Spine*) const=0x801B0950
KarikariDirector::__ct(const char*)=0x801B0960
KarikariDirector::isMaxNumCling(void) const=0x801B0AA0
KarikariDirector::removeAllClingingKarikari(void)=0x801B0AC0
KarikariDirector::blowOutAllClingingKarikari(const JGeometry::TVec3<float>&)=0x801B0B20
KarikariDirector::electricKillAllClingingKarikari(void)=0x801B0B90
KarikariDirector::movement(void)=0x801B0BF0
KarikariDirector::requestRelease(Karikari*, JGeometry::TVec2<float>, float)=0x801B0D00
KarikariDirector::registCling(Karikari*)=0x801B0D60
KarikariDirector::unregistCling(Karikari*)=0x801B0DB0
MR::getKarikariClingNum(void)=0x801B0E00
MR::getClingNumMax(void)=0x801B0E50
MR::removeAllClingingKarikari(void)=0x801B0EA0
KarikariDirector::__dt(void)=0x801B0EE0
Karon::__ct(const char*)=0x801B0F40
Karon::init(const JMapInfoIter&)=0x801B0FB0
Karon::initAfterPlacement(void)=0x801B1140
Karon::kill(void)=0x801B1150
Karon::exeFixWait(void)=0x801B11B0
Karon::exeWait(void)=0x801B1260
Karon::exeWalk(void)=0x801B1440
Karon::exeTurn(void)=0x801B1540
Karon::exeWalkOnRail(void)=0x801B1730
Karon::exeSearch(void)=0x801B1860
Karon::exePursue(void)=0x801B1950
Karon::exeBroken(void)=0x801B1AF0
Karon::exeStepBroken(void)=0x801B1CD0
Karon::exeRecover(void)=0x801B1EA0
Karon::exeHitReaction(void)=0x801B1F90
Karon::exeDeath(void)=0x801B2130
Karon::exeSinkDown(void)=0x801B2200
Karon::exeLavaDown(void)=0x801B2300
Karon::exeBindStarPointer(void)=0x801B2400
Karon::control(void)=0x801B2440
Karon::isFallNextMove(bool)=0x801B2750
Karon::attackSensor(HitSensor*, HitSensor*)=0x801B2900
Karon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801B2B80
Karon::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801B2DB0
Karon::receiveMsgPush(HitSensor*, HitSensor*)=0x801B2E10
Karon::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801B2ED0
Karon::calcAndSetBaseMtx(void)=0x801B3020
Karon::__dt(void)=0x801B3060
short::(nit_\Karon_cpp)=0x801B30C0
NrvKaron::HostTypeNrvFixWait::__ct(void)=0x801B3180
NrvKaron::HostTypeNrvWait::__ct(void)=0x801B3190
NrvKaron::HostTypeNrvStarPieceHitWait::__ct(void)=0x801B31A0
NrvKaron::HostTypeNrvWalk::__ct(void)=0x801B31B0
NrvKaron::HostTypeNrvTurn::__ct(void)=0x801B31C0
NrvKaron::HostTypeNrvWalkOnRail::__ct(void)=0x801B31E0
NrvKaron::HostTypeNrvSearch::__ct(void)=0x801B31F0
NrvKaron::HostTypeNrvPursue::__ct(void)=0x801B3200
NrvKaron::HostTypeNrvBroken::__ct(void)=0x801B3220
NrvKaron::HostTypeNrvStepBroken::__ct(void)=0x801B3230
NrvKaron::HostTypeNrvRecover::__ct(void)=0x801B3240
NrvKaron::HostTypeNrvHitReaction::__ct(void)=0x801B3250
NrvKaron::HostTypeNrvStarPieceHit::__ct(void)=0x801B3260
NrvKaron::HostTypeNrvDeath::__ct(void)=0x801B3270
NrvKaron::HostTypeNrvSinkDown::__ct(void)=0x801B3280
NrvKaron::HostTypeNrvLavaDown::__ct(void)=0x801B3290
NrvKaron::HostTypeNrvBindStarPointer::__ct(void)=0x801B32B0
NrvKaron::HostTypeNrvBindStarPointer::execute(Spine*) const=0x801B32C0
NrvKaron::HostTypeNrvLavaDown::execute(Spine*) const=0x801B32E0
NrvKaron::HostTypeNrvSinkDown::execute(Spine*) const=0x801B32F0
NrvKaron::HostTypeNrvDeath::execute(Spine*) const=0x801B3300
NrvKaron::HostTypeNrvStarPieceHit::execute(Spine*) const=0x801B3310
NrvKaron::HostTypeNrvHitReaction::execute(Spine*) const=0x801B3320
NrvKaron::HostTypeNrvRecover::execute(Spine*) const=0x801B3330
NrvKaron::HostTypeNrvStepBroken::execute(Spine*) const=0x801B3340
NrvKaron::HostTypeNrvBroken::execute(Spine*) const=0x801B3350
NrvKaron::HostTypeNrvPursue::executeOnEnd(Spine*) const=0x801B3380
NrvKaron::HostTypeNrvPursue::execute(Spine*) const=0x801B3390
NrvKaron::HostTypeNrvSearch::execute(Spine*) const=0x801B33A0
NrvKaron::HostTypeNrvWalkOnRail::execute(Spine*) const=0x801B33B0
NrvKaron::HostTypeNrvTurn::execute(Spine*) const=0x801B33D0
NrvKaron::HostTypeNrvWalk::execute(Spine*) const=0x801B33E0
NrvKaron::HostTypeNrvStarPieceHitWait::execute(Spine*) const=0x801B33F0
NrvKaron::HostTypeNrvWait::execute(Spine*) const=0x801B3400
NrvKaron::HostTypeNrvFixWait::execute(Spine*) const=0x801B3410
KickStone::__ct(const char*)=0x801B3530
KickStone::init(const JMapInfoIter&)=0x801B35C0
KickStone::initAfterPlacement(void)=0x801B37A0
KickStone::control(void)=0x801B37C0
KickStone::calcAndSetBaseMtx(void)=0x801B3800
KickStone::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801B3BD0
KickStone::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801B3CB0
KickStone::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801B3D40
KickStone::__dt(void)=0x801B3E20
short::(nit_\KickStone_cpp)=0x801B3E80
Kiraira::__ct(const char*)=0x801B3F70
Kiraira::init(const JMapInfoIter&)=0x801B4000
Kiraira::control(void)=0x801B4190
Kiraira::calcAndSetBaseMtx(void)=0x801B4220
Kiraira::exeWait(void)=0x801B4280
Kiraira::exeFaceToMario(void)=0x801B4310
Kiraira::exeFaceToMarioAndStare(void)=0x801B43D0
Kiraira::exeBeExploded(void)=0x801B4480
Kiraira::exeDead(void)=0x801B44E0
Kiraira::exeRecoverSign(void)=0x801B45E0
Kiraira::exeRecover(void)=0x801B4690
Kiraira::attackSensor(HitSensor*, HitSensor*)=0x801B47E0
Kiraira::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801B49C0
Kiraira::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801B4B10
Kiraira::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801B4BD0
Kiraira::openEyes(void)=0x801B4C90
Kiraira::closeEyes(void)=0x801B4D10
Kiraira::drift(void)=0x801B4D70
Kiraira::driftOnRail(void)=0x801B4EF0
Kiraira::explode(void)=0x801B4F60
Kiraira::__dt(void)=0x801B5010
short::(nit_\Kiraira_cpp)=0x801B5070
NrvKiraira::KirairaNrvWait::__ct(void)=0x801B50E0
NrvKiraira::KirairaNrvFaceToMario::__ct(void)=0x801B50F0
NrvKiraira::KirairaNrvFaceToMarioAndStare::__ct(void)=0x801B5100
NrvKiraira::KirairaNrvExplode::__ct(void)=0x801B5110
NrvKiraira::KirairaNrvBeExploded::__ct(void)=0x801B5120
NrvKiraira::KirairaNrvDead::__ct(void)=0x801B5130
NrvKiraira::KirairaNrvRecoverSign::__ct(void)=0x801B5140
NrvKiraira::KirairaNrvRecover::__ct(void)=0x801B5150
NrvKiraira::KirairaNrvBindStarPointer::__ct(void)=0x801B5160
NrvKiraira::KirairaNrvBindStarPointer::execute(Spine*) const=0x801B5170
NrvKiraira::KirairaNrvRecover::execute(Spine*) const=0x801B5180
NrvKiraira::KirairaNrvRecoverSign::execute(Spine*) const=0x801B5190
NrvKiraira::KirairaNrvDead::execute(Spine*) const=0x801B51A0
NrvKiraira::KirairaNrvBeExploded::execute(Spine*) const=0x801B51B0
NrvKiraira::KirairaNrvExplode::execute(Spine*) const=0x801B51C0
NrvKiraira::KirairaNrvFaceToMarioAndStare::execute(Spine*) const=0x801B5200
NrvKiraira::KirairaNrvFaceToMario::execute(Spine*) const=0x801B5210
NrvKiraira::KirairaNrvWait::execute(Spine*) const=0x801B5220
KirairaChain::__ct(const LiveActor*)=0x801B5230
KirairaChain::init(const JMapInfoIter&)=0x801B54C0
KirairaChain::initPoints(void)=0x801B5580
KirairaChain::control(void)=0x801B5730
KirairaChain::updatePoints(void)=0x801B5840
KirairaChain::restrictPointFromTop(long, long, const JGeometry::TVec3<float>&, float)=0x801B5C90
KirairaChain::restrictPointFromBottom(long, long, const JGeometry::TVec3<float>&, float)=0x801B5D80
KirairaChain::restrictPointFromTopAndCalcAxis(long, long, const JGeometry::TVec3<float>&, float)=0x801B5E70
KirairaChain::restrictPointFromBottomAndCalcAxis(long, long, const JGeometry::TVec3<float>&, float)=0x801B5F50
KirairaChain::draw(void) const=0x801B6030
KirairaChain::__dt(void)=0x801B6130
KoteBug::__ct(const char*)=0x801B6190
KoteBug::init(const JMapInfoIter&)=0x801B6230
KoteBug::appear(void)=0x801B6470
KoteBug::kill(void)=0x801B64B0
KoteBug::control(void)=0x801B64F0
KoteBug::exeNoCalcWait(void)=0x801B6710
KoteBug::exeWait(void)=0x801B6790
KoteBug::exeSearch(void)=0x801B6880
KoteBug::exeEscapeSearch(void)=0x801B6940
KoteBug::exePreEscape(void)=0x801B6A20
KoteBug::exeFlyStart(void)=0x801B6AD0
KoteBug::exeFlyPursue(void)=0x801B6B90
KoteBug::exeFlyPursueLast(void)=0x801B6D70
KoteBug::exeOverturnFall(void)=0x801B6EF0
KoteBug::exeOverturn(void)=0x801B6FE0
KoteBug::exePreRecover(void)=0x801B70A0
KoteBug::exeRecover(void)=0x801B7140
KoteBug::exeHitToPlayer(void)=0x801B7230
KoteBug::exeBlow(void)=0x801B7310
KoteBug::exeStampDeath(void)=0x801B73E0
KoteBug::exeBindStarPointer(void)=0x801B74B0
KoteBug::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801B7520
KoteBug::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801B7900
KoteBug::setOverturnFall(HitSensor*, HitSensor*)=0x801B7DD0
KoteBug::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801B7EA0
KoteBug::attackSensor(HitSensor*, HitSensor*)=0x801B7FE0
KoteBug::receiveMsgPush(HitSensor*, HitSensor*)=0x801B8170
KoteBug::calcAndSetBaseMtx(void)=0x801B8240
KoteBug::calcJoint(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801B82F0
JointControlDelegator<KoteBug>::__dt(void)=0x801B83D0
JointControlDelegator<KoteBug>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801B8410
JointControlDelegator<KoteBug>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801B8480
KoteBug::__dt(void)=0x801B84F0
short::(nit_\KoteBug_cpp)=0x801B8550
NrvKoteBug::HostTypeNrvNoCalcWait::__ct(void)=0x801B8610
NrvKoteBug::HostTypeNrvWait::__ct(void)=0x801B8620
NrvKoteBug::HostTypeNrvSearch::__ct(void)=0x801B8640
NrvKoteBug::HostTypeNrvEscapeSearch::__ct(void)=0x801B8650
NrvKoteBug::HostTypeNrvPreEscape::__ct(void)=0x801B8660
NrvKoteBug::HostTypeNrvFlyStart::__ct(void)=0x801B8670
NrvKoteBug::HostTypeNrvFlyPursue::__ct(void)=0x801B8680
NrvKoteBug::HostTypeNrvFlyEscape::__ct(void)=0x801B8690
NrvKoteBug::HostTypeNrvFlyPursueLast::__ct(void)=0x801B86A0
NrvKoteBug::HostTypeNrvOverturnFall::__ct(void)=0x801B86B0
NrvKoteBug::HostTypeNrvOverturn::__ct(void)=0x801B86C0
NrvKoteBug::HostTypeNrvPreRecover::__ct(void)=0x801B86D0
NrvKoteBug::HostTypeNrvRecover::__ct(void)=0x801B86E0
NrvKoteBug::HostTypeNrvHitToPlayer::__ct(void)=0x801B86F0
NrvKoteBug::HostTypeNrvBlow::__ct(void)=0x801B8700
NrvKoteBug::HostTypeNrvStampDeath::__ct(void)=0x801B8710
NrvKoteBug::HostTypeNrvBindStarPointer::__ct(void)=0x801B8720
NrvKoteBug::HostTypeNrvBindStarPointer::execute(Spine*) const=0x801B8750
NrvKoteBug::HostTypeNrvStampDeath::execute(Spine*) const=0x801B8760
NrvKoteBug::HostTypeNrvBlow::execute(Spine*) const=0x801B8770
NrvKoteBug::HostTypeNrvHitToPlayer::execute(Spine*) const=0x801B8780
NrvKoteBug::HostTypeNrvRecover::execute(Spine*) const=0x801B8790
NrvKoteBug::HostTypeNrvPreRecover::execute(Spine*) const=0x801B87A0
NrvKoteBug::HostTypeNrvOverturn::execute(Spine*) const=0x801B87B0
NrvKoteBug::HostTypeNrvOverturnFall::execute(Spine*) const=0x801B87C0
NrvKoteBug::HostTypeNrvFlyPursueLast::execute(Spine*) const=0x801B87D0
NrvKoteBug::HostTypeNrvFlyEscape::execute(Spine*) const=0x801B87E0
NrvKoteBug::HostTypeNrvFlyPursue::execute(Spine*) const=0x801B87F0
NrvKoteBug::HostTypeNrvFlyStart::execute(Spine*) const=0x801B8800
NrvKoteBug::HostTypeNrvPreEscape::execute(Spine*) const=0x801B8810
NrvKoteBug::HostTypeNrvEscapeSearch::execute(Spine*) const=0x801B8820
NrvKoteBug::HostTypeNrvSearch::execute(Spine*) const=0x801B8830
NrvKoteBug::HostTypeNrvWait::executeOnEnd(Spine*) const=0x801B8850
NrvKoteBug::HostTypeNrvWait::execute(Spine*) const=0x801B8860
NrvKoteBug::HostTypeNrvNoCalcWait::executeOnEnd(Spine*) const=0x801B8870
NrvKoteBug::HostTypeNrvNoCalcWait::execute(Spine*) const=0x801B88C0
@unnamed@Kuribo_cpp@::KuriboParam::__ct(void)=0x801B88D0
Kuribo::__ct(const char*)=0x801B8990
Kuribo::init(const JMapInfoIter&)=0x801B8A40
Kuribo::initAfterPlacement(void)=0x801B8BF0
Kuribo::initState(void)=0x801B8C30
Kuribo::initAppearState(const JMapInfoIter&)=0x801B8D70
Kuribo::makeActorAppeared(void)=0x801B8E30
Kuribo::makeActorDead(void)=0x801B8E70
Kuribo::kill(void)=0x801B8E80
Kuribo::control(void)=0x801B8F10
Kuribo::calcAndSetBaseMtx(void)=0x801B9040
Kuribo::attackSensor(HitSensor*, HitSensor*)=0x801B9080
Kuribo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801B91A0
Kuribo::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801B9320
Kuribo::receiveMsgPush(HitSensor*, HitSensor*)=0x801B93F0
Kuribo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801B94D0
Kuribo::requestDead(void)=0x801B9610
Kuribo::requestFlatDown(HitSensor*, HitSensor*)=0x801B96C0
Kuribo::requestHipDropDown(HitSensor*, HitSensor*)=0x801B9770
Kuribo::requestPressDown(void)=0x801B9810
Kuribo::requestStagger(HitSensor*, HitSensor*)=0x801B9900
Kuribo::requestBlowDown(HitSensor*, HitSensor*)=0x801B9980
Kuribo::requestAttackSuccess(void)=0x801B9A20
Kuribo::onNoGravitySupport(void)=0x801B9A80
Kuribo::setUp(const JGeometry::TVec3<float>&, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&)=0x801B9A90
Kuribo::appearBlowed(const JGeometry::TVec3<float>&, const JGeometry::TQuat4<float>&, const JGeometry::TVec3<float>&)=0x801B9B60
Kuribo::tryNonActive(void)=0x801B9D80
Kuribo::tryActive(void)=0x801B9DF0
Kuribo::tryEndBlow(void)=0x801B9E40
Kuribo::tryEndBlowLand(void)=0x801B9EC0
Kuribo::tryFind(void)=0x801B9F10
Kuribo::tryPointBind(void)=0x801B9F60
Kuribo::tryDead(void)=0x801B9FD0
Kuribo::exeWander(void)=0x801BA0A0
Kuribo::exeFindPlayer(void)=0x801BA0F0
Kuribo::exeChase(void)=0x801BA160
Kuribo::exeStagger(void)=0x801BA1E0
Kuribo::exeBindStarPointer(void)=0x801BA2B0
Kuribo::exeNonActive(void)=0x801BA320
Kuribo::exeAppearFromBox(void)=0x801BA3A0
Kuribo::exeBlow(void)=0x801BA4A0
Kuribo::exeAttackSuccess(void)=0x801BA4F0
Kuribo::exeHipDropDown(void)=0x801BA570
Kuribo::exeFlatDown(void)=0x801BA630
Kuribo::exePressDown(void)=0x801BA6F0
Kuribo::exeBlowDown(void)=0x801BA7B0
Kuribo::calcPassiveMovement(void)=0x801BA880
Kuribo::isEnableKick(void) const=0x801BA910
Kuribo::isUpsideDown(void) const=0x801BA980
Kuribo::isEnableDead(void) const=0x801BA9F0
Kuribo::isEnablePointBind(void) const=0x801BAAE0
Kuribo::isEnableAttack(void) const=0x801BAB80
Kuribo::isEnableStamp(void) const=0x801BABF0
Kuribo::isEnablePushMove(void) const=0x801BAEA0
Kuribo::__dt(void)=0x801BB030
short::(nit_\Kuribo_cpp)=0x801BB090
NrvKuribo::KuriboNrvNonActive::__ct(void)=0x801BB140
NrvKuribo::KuriboNrvAppearFromBox::__ct(void)=0x801BB150
NrvKuribo::KuriboNrvBlow::__ct(void)=0x801BB170
NrvKuribo::KuriboNrvBlowLand::__ct(void)=0x801BB180
NrvKuribo::KuriboNrvWander::__ct(void)=0x801BB190
NrvKuribo::KuriboNrvFindPlayer::__ct(void)=0x801BB1A0
NrvKuribo::KuriboNrvChase::__ct(void)=0x801BB1B0
NrvKuribo::KuriboNrvAttackSuccess::__ct(void)=0x801BB1C0
NrvKuribo::KuriboNrvBindStarPointer::__ct(void)=0x801BB1D0
NrvKuribo::KuriboNrvStagger::__ct(void)=0x801BB1E0
NrvKuribo::KuriboNrvFlatDown::__ct(void)=0x801BB1F0
NrvKuribo::KuriboNrvHipDropDown::__ct(void)=0x801BB200
NrvKuribo::KuriboNrvPressDown::__ct(void)=0x801BB210
NrvKuribo::KuriboNrvBlowDown::__ct(void)=0x801BB220
NrvKuribo::KuriboNrvBlowDown::execute(Spine*) const=0x801BB270
NrvKuribo::KuriboNrvPressDown::execute(Spine*) const=0x801BB280
NrvKuribo::KuriboNrvHipDropDown::execute(Spine*) const=0x801BB290
NrvKuribo::KuriboNrvFlatDown::execute(Spine*) const=0x801BB2A0
NrvKuribo::KuriboNrvStagger::execute(Spine*) const=0x801BB2B0
NrvKuribo::KuriboNrvBindStarPointer::execute(Spine*) const=0x801BB2C0
NrvKuribo::KuriboNrvAttackSuccess::execute(Spine*) const=0x801BB2D0
NrvKuribo::KuriboNrvChase::execute(Spine*) const=0x801BB2E0
NrvKuribo::KuriboNrvFindPlayer::execute(Spine*) const=0x801BB2F0
NrvKuribo::KuriboNrvWander::execute(Spine*) const=0x801BB300
NrvKuribo::KuriboNrvBlowLand::execute(Spine*) const=0x801BB310
NrvKuribo::KuriboNrvBlow::execute(Spine*) const=0x801BB350
NrvKuribo::KuriboNrvAppearFromBox::execute(Spine*) const=0x801BB370
NrvKuribo::KuriboNrvNonActive::executeOnEnd(Spine*) const=0x801BB380
NrvKuribo::KuriboNrvNonActive::execute(Spine*) const=0x801BB3D0
@unnamed@KuriboChief_cpp@::KuriboChiefParam::__ct(void)=0x801BB3E0
KuriboChief::__ct(const char*)=0x801BB520
KuriboChief::init(const JMapInfoIter&)=0x801BB5B0
KuriboChief::initAfterPlacement(void)=0x801BB690
KuriboChief::initState(void)=0x801BB6A0
KuriboChief::initKeySwitch(const JMapInfoIter&)=0x801BB7E0
KuriboChief::makeActorAppeared(void)=0x801BB850
KuriboChief::kill(void)=0x801BB890
KuriboChief::control(void)=0x801BB920
KuriboChief::calcAndSetBaseMtx(void)=0x801BB990
KuriboChief::attackSensor(HitSensor*, HitSensor*)=0x801BB9D0
KuriboChief::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801BBAC0
KuriboChief::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801BBC20
KuriboChief::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801BBCD0
KuriboChief::requestStagger(HitSensor*, HitSensor*)=0x801BBDB0
KuriboChief::requestBlowDown(HitSensor*, HitSensor*)=0x801BBE30
KuriboChief::tryFind(void)=0x801BC090
KuriboChief::tryPointBind(void)=0x801BC0E0
KuriboChief::exeWander(void)=0x801BC1D0
KuriboChief::exeFindPlayer(void)=0x801BC220
KuriboChief::exeChase(void)=0x801BC2C0
KuriboChief::exeStagger(void)=0x801BC310
KuriboChief::exeTrample(void)=0x801BC470
KuriboChief::exeAttackSuccess(void)=0x801BC4E0
KuriboChief::exeBindStarPointer(void)=0x801BC570
KuriboChief::exeBlowDown(void)=0x801BC5E0
KuriboChief::exeBlowDownLand(void)=0x801BC6E0
KuriboChief::isEnableAttack(void) const=0x801BC780
KuriboChief::isEnableKick(void) const=0x801BC7F0
KuriboChief::isDown(void) const=0x801BC860
KuriboChief::__dt(void)=0x801BC970
short::(nit_\KuriboChief_cpp)=0x801BC9D0
NrvKuriboChief::KuriboChiefNrvWander::__ct(void)=0x801BCA50
NrvKuriboChief::KuriboChiefNrvFindPlayer::__ct(void)=0x801BCA60
NrvKuriboChief::KuriboChiefNrvChase::__ct(void)=0x801BCA70
NrvKuriboChief::KuriboChiefNrvAttackSuccess::__ct(void)=0x801BCA80
NrvKuriboChief::KuriboChiefNrvStagger::__ct(void)=0x801BCA90
NrvKuriboChief::KuriboChiefNrvTrample::__ct(void)=0x801BCAA0
NrvKuriboChief::KuriboChiefNrvBindStarPointer::__ct(void)=0x801BCAB0
NrvKuriboChief::KuriboChiefNrvBlowDown::__ct(void)=0x801BCAC0
NrvKuriboChief::KuriboChiefNrvBlowDownLand::__ct(void)=0x801BCAD0
NrvKuriboChief::KuriboChiefNrvBlowDownLand::execute(Spine*) const=0x801BCB00
NrvKuriboChief::KuriboChiefNrvBlowDown::execute(Spine*) const=0x801BCB10
NrvKuriboChief::KuriboChiefNrvBindStarPointer::execute(Spine*) const=0x801BCB20
NrvKuriboChief::KuriboChiefNrvTrample::execute(Spine*) const=0x801BCB30
NrvKuriboChief::KuriboChiefNrvStagger::execute(Spine*) const=0x801BCB40
NrvKuriboChief::KuriboChiefNrvAttackSuccess::execute(Spine*) const=0x801BCB50
NrvKuriboChief::KuriboChiefNrvChase::execute(Spine*) const=0x801BCB60
NrvKuriboChief::KuriboChiefNrvFindPlayer::execute(Spine*) const=0x801BCB70
NrvKuriboChief::KuriboChiefNrvWander::execute(Spine*) const=0x801BCB80
@unnamed@KuriboMini_cpp@::KuriboMiniParam::__ct(void)=0x801BCB90
KuriboMini::__ct(const char*)=0x801BCC50
KuriboMini::init(const JMapInfoIter&)=0x801BCCE0
KuriboMini::initAfterPlacement(void)=0x801BCF20
KuriboMini::makeActorAppeared(void)=0x801BCF30
KuriboMini::makeActorDead(void)=0x801BCF40
KuriboMini::kill(void)=0x801BCF90
KuriboMini::control(void)=0x801BCFF0
KuriboMini::calcAndSetBaseMtx(void)=0x801BD070
KuriboMini::attackSensor(HitSensor*, HitSensor*)=0x801BD0B0
KuriboMini::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801BD1D0
KuriboMini::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801BD320
KuriboMini::receiveMsgPush(HitSensor*, HitSensor*)=0x801BD400
KuriboMini::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801BD4F0
KuriboMini::requestHipDropDown(HitSensor*, HitSensor*)=0x801BD660
KuriboMini::requestFlatDown(HitSensor*, HitSensor*)=0x801BD6F0
KuriboMini::requestPressDown(void)=0x801BD750
KuriboMini::requestBlowDown(HitSensor*, HitSensor*)=0x801BD7B0
KuriboMini::requestStagger(HitSensor*, HitSensor*)=0x801BD850
KuriboMini::requestAttackSuccess(void)=0x801BD8F0
KuriboMini::tryFind(void)=0x801BD960
KuriboMini::tryPointBind(void)=0x801BD9B0
KuriboMini::tryDeadMap(void)=0x801BDA10
KuriboMini::exeWander(void)=0x801BDC10
KuriboMini::exeFindPlayer(void)=0x801BDC80
KuriboMini::exeChase(void)=0x801BDD20
KuriboMini::exeBindStarPointer(void)=0x801BDDC0
KuriboMini::exeStagger(void)=0x801BDE40
KuriboMini::exeAttackSuccess(void)=0x801BDF40
KuriboMini::exeHipDropDown(void)=0x801BDFF0
KuriboMini::exeFlatDown(void)=0x801BE0C0
KuriboMini::exePressDown(void)=0x801BE190
KuriboMini::exeBlowDown(void)=0x801BE260
KuriboMini::exeTrampoline(void)=0x801BE320
KuriboMini::calcPassiveMovement(void)=0x801BE3C0
KuriboMini::isEnableAttack(void) const=0x801BE450
KuriboMini::isEnableKick(void) const=0x801BE4C0
KuriboMini::isDown(void) const=0x801BE520
MR::FunctorV0M<KuriboMini*,M10KuriboMiniFPCvPv_v>::__cl(void) const=0x801BE610
MR::FunctorV0M<KuriboMini*,M10KuriboMiniFPCvPv_v>::clone(JKRHeap*) const=0x801BE640
KuriboMini::__dt(void)=0x801BE6B0
short::(nit_\KuriboMini_cpp)=0x801BE710
NrvKuriboMini::KuriboMiniNrvWander::__ct(void)=0x801BE7A0
NrvKuriboMini::KuriboMiniNrvFindPlayer::__ct(void)=0x801BE7B0
NrvKuriboMini::KuriboMiniNrvChase::__ct(void)=0x801BE7C0
NrvKuriboMini::KuriboMiniNrvStagger::__ct(void)=0x801BE7D0
NrvKuriboMini::KuriboMiniNrvBindStarPointer::__ct(void)=0x801BE7E0
NrvKuriboMini::KuriboMiniNrvAttackSuccess::__ct(void)=0x801BE7F0
NrvKuriboMini::KuriboMiniNrvHipDropDown::__ct(void)=0x801BE800
NrvKuriboMini::KuriboMiniNrvPressDown::__ct(void)=0x801BE810
NrvKuriboMini::KuriboMiniNrvFlatDown::__ct(void)=0x801BE820
NrvKuriboMini::KuriboMiniNrvBlowDown::__ct(void)=0x801BE830
NrvKuriboMini::KuriboMiniNrvTrampoline::__ct(void)=0x801BE850
NrvKuriboMini::KuriboMiniNrvTrampoline::execute(Spine*) const=0x801BE860
NrvKuriboMini::KuriboMiniNrvBlowDown::execute(Spine*) const=0x801BE880
NrvKuriboMini::KuriboMiniNrvFlatDown::execute(Spine*) const=0x801BE890
NrvKuriboMini::KuriboMiniNrvPressDown::execute(Spine*) const=0x801BE8A0
NrvKuriboMini::KuriboMiniNrvHipDropDown::execute(Spine*) const=0x801BE8B0
NrvKuriboMini::KuriboMiniNrvAttackSuccess::execute(Spine*) const=0x801BE8C0
NrvKuriboMini::KuriboMiniNrvBindStarPointer::execute(Spine*) const=0x801BE8D0
NrvKuriboMini::KuriboMiniNrvStagger::execute(Spine*) const=0x801BE8E0
NrvKuriboMini::KuriboMiniNrvChase::execute(Spine*) const=0x801BE8F0
NrvKuriboMini::KuriboMiniNrvFindPlayer::execute(Spine*) const=0x801BE900
NrvKuriboMini::KuriboMiniNrvWander::execute(Spine*) const=0x801BE910
LavaBubble::__ct(const char*)=0x801BE920
LavaBubble::init(const JMapInfoIter&)=0x801BE9F0
LavaBubble::calcAndSetBaseMtx(void)=0x801BEB30
LavaBubble::attackSensor(HitSensor*, HitSensor*)=0x801BEBA0
LavaBubble::control(void)=0x801BEC00
LavaBubble::startClipped(void)=0x801BED80
LavaBubble::exeWait(void)=0x801BEDE0
LavaBubble::exeLaunch(void)=0x801BEE60
LavaBubble::__dt(void)=0x801BF3B0
short::(nit_\LavaBubble_cpp)=0x801BF410
NrvLavaBubble::LavaBubbleNrvWait::__ct(void)=0x801BF440
NrvLavaBubble::LavaBubbleNrvLaunch::__ct(void)=0x801BF450
NrvLavaBubble::LavaBubbleNrvLaunch::execute(Spine*) const=0x801BF460
NrvLavaBubble::LavaBubbleNrvWait::execute(Spine*) const=0x801BF470
MameMuimui::__ct(const char*)=0x801BF480
MameMuimui::setTypeGreen(void)=0x801BF510
MameMuimui::setTypeYellow(void)=0x801BF530
MameMuimui::setTypeSpike(void)=0x801BF550
MameMuimui::init(const JMapInfoIter&)=0x801BF7F0
MameMuimui::appear(void)=0x801BF920
MameMuimui::kill(void)=0x801BF980
MameMuimui::control(void)=0x801BF990
MameMuimui::calcAndSetBaseMtx(void)=0x801BF9F0
MameMuimui::attackSensor(HitSensor*, HitSensor*)=0x801BFA40
MameMuimui::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801BFB10
MameMuimui::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801BFB70
MameMuimui::receiveMsgPush(HitSensor*, HitSensor*)=0x801BFC70
MameMuimui::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801BFC80
MameMuimui::__dt(void)=0x801C0390
short::(nit_\MameMuimui_cpp)=0x801C03F0
MameMuimuiScorer::__ct(const char*)=0x801C0680
MameMuimuiScorer::init(const JMapInfoIter&)=0x801C0720
MameMuimuiGroup::__ct(const char*)=0x801C0B90
MameMuimuiScorer::control(void)=0x801C0F10
MameMuimuiScorer::__dt(void)=0x801C1790
MameMuimuiGroup::__dt(void)=0x801C17F0
short::(nit_\MameMuimuiScorer_cpp)=0x801C1850
MechanicKoopaMini::__ct(const char*)=0x801C19D0
MechanicKoopaMini::onAppearSwitchOn(void)=0x801C1A30
MechanicKoopaMini::init(const JMapInfoIter&)=0x801C1A50
MechanicKoopaMini::initAfterPlacement(void)=0x801C1C70
MechanicKoopaMini::makeActorAppeared(void)=0x801C1C80
MechanicKoopaMini::kill(void)=0x801C1C90
MechanicKoopaMini::exeWait(void)=0x801C1D20
MechanicKoopaMini::exeWalkOnRail(void)=0x801C1DC0
MechanicKoopaMini::exeTurn(void)=0x801C1EF0
MechanicKoopaMini::exeJumpStart(void)=0x801C1FE0
MechanicKoopaMini::exeJumpEnd(void)=0x801C20F0
MechanicKoopaMini::exeFind(void)=0x801C21B0
MechanicKoopaMini::exePursue(void)=0x801C2290
MechanicKoopaMini::exePreFireAttack(void)=0x801C2420
MechanicKoopaMini::exeFireAttack(void)=0x801C2530
MechanicKoopaMini::exeFireAttackEnd(void)=0x801C2630
MechanicKoopaMini::exeAttackHit(void)=0x801C26F0
MechanicKoopaMini::exeSpinHit(void)=0x801C27C0
MechanicKoopaMini::exeTrample(void)=0x801C28D0
MechanicKoopaMini::exeHipDropped(void)=0x801C29C0
MechanicKoopaMini::exeWaterBreak(void)=0x801C2A60
MechanicKoopaMini::exeBindStarPointer(void)=0x801C2B00
MechanicKoopaMini::exePreFireAttackAfterBind(void)=0x801C2B60
MechanicKoopaMini::control(void)=0x801C2C30
MechanicKoopaMini::attackSensor(HitSensor*, HitSensor*)=0x801C2DF0
MechanicKoopaMini::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801C2F60
MechanicKoopaMini::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801C3240
MechanicKoopaMini::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801C32A0
MechanicKoopaMini::receiveMsgPush(HitSensor*, HitSensor*)=0x801C3300
MechanicKoopaMini::updateHitSensor(HitSensor*)=0x801C3370
MechanicKoopaMini::calcAndSetBaseMtx(void)=0x801C3620
MR::FunctorV0M<MechanicKoopaMini*,M17MechanicKoopaMiniFPCvPv_v>::__cl(void) const=0x801C3660
MR::FunctorV0M<MechanicKoopaMini*,M17MechanicKoopaMiniFPCvPv_v>::clone(JKRHeap*) const=0x801C3690
MechanicKoopaMini::__dt(void)=0x801C3700
short::(nit_\MechanicKoopaMini_cpp)=0x801C3760
NrvMechanicKoopaMini::HostTypeNrvWait::__ct(void)=0x801C3820
NrvMechanicKoopaMini::HostTypeNrvWalkOnRail::__ct(void)=0x801C3830
NrvMechanicKoopaMini::HostTypeNrvTurn::__ct(void)=0x801C3840
NrvMechanicKoopaMini::HostTypeNrvJumpStart::__ct(void)=0x801C3850
NrvMechanicKoopaMini::HostTypeNrvJumpEnd::__ct(void)=0x801C3860
NrvMechanicKoopaMini::HostTypeNrvFind::__ct(void)=0x801C3870
NrvMechanicKoopaMini::HostTypeNrvPursue::__ct(void)=0x801C3880
NrvMechanicKoopaMini::HostTypeNrvPreFireAttack::__ct(void)=0x801C3890
NrvMechanicKoopaMini::HostTypeNrvFireAttack::__ct(void)=0x801C38A0
NrvMechanicKoopaMini::HostTypeNrvFireAttackEnd::__ct(void)=0x801C38B0
NrvMechanicKoopaMini::HostTypeNrvAttackHit::__ct(void)=0x801C38C0
NrvMechanicKoopaMini::HostTypeNrvSpinHit::__ct(void)=0x801C38D0
NrvMechanicKoopaMini::HostTypeNrvTrample::__ct(void)=0x801C38E0
NrvMechanicKoopaMini::HostTypeNrvHipDropped::__ct(void)=0x801C38F0
NrvMechanicKoopaMini::HostTypeWaterBreak::__ct(void)=0x801C3900
NrvMechanicKoopaMini::HostTypeNrvBindStarPointer::__ct(void)=0x801C3910
NrvMechanicKoopaMini::HostTypeNrvPreFireAttackAfterBind::__ct(void)=0x801C3920
NrvMechanicKoopaMini::HostTypeNrvPreFireAttackAfterBind::execute(Spine*) const=0x801C3930
NrvMechanicKoopaMini::HostTypeNrvBindStarPointer::execute(Spine*) const=0x801C3940
NrvMechanicKoopaMini::HostTypeWaterBreak::execute(Spine*) const=0x801C3950
NrvMechanicKoopaMini::HostTypeNrvHipDropped::execute(Spine*) const=0x801C3960
NrvMechanicKoopaMini::HostTypeNrvTrample::execute(Spine*) const=0x801C3970
NrvMechanicKoopaMini::HostTypeNrvSpinHit::execute(Spine*) const=0x801C3980
NrvMechanicKoopaMini::HostTypeNrvAttackHit::execute(Spine*) const=0x801C3990
NrvMechanicKoopaMini::HostTypeNrvFireAttackEnd::execute(Spine*) const=0x801C39A0
NrvMechanicKoopaMini::HostTypeNrvFireAttack::executeOnEnd(Spine*) const=0x801C39B0
NrvMechanicKoopaMini::HostTypeNrvFireAttack::execute(Spine*) const=0x801C39C0
NrvMechanicKoopaMini::HostTypeNrvPreFireAttack::execute(Spine*) const=0x801C39D0
NrvMechanicKoopaMini::HostTypeNrvPursue::execute(Spine*) const=0x801C39E0
NrvMechanicKoopaMini::HostTypeNrvFind::execute(Spine*) const=0x801C39F0
NrvMechanicKoopaMini::HostTypeNrvJumpEnd::execute(Spine*) const=0x801C3A00
NrvMechanicKoopaMini::HostTypeNrvJumpStart::execute(Spine*) const=0x801C3A10
NrvMechanicKoopaMini::HostTypeNrvTurn::execute(Spine*) const=0x801C3A20
NrvMechanicKoopaMini::HostTypeNrvWalkOnRail::execute(Spine*) const=0x801C3A30
NrvMechanicKoopaMini::HostTypeNrvWait::execute(Spine*) const=0x801C3A40
Menbo::__ct(const char*)=0x801C3A50
Menbo::init(const JMapInfoIter&)=0x801C3B40
Menbo::initAfterPlacement(void)=0x801C3CF0
Menbo::makeActorAppeared(void)=0x801C3E30
Menbo::kill(void)=0x801C3F10
Menbo::control(void)=0x801C3F60
Menbo::startClipped(void)=0x801C3FE0
Menbo::exeWait(void)=0x801C4020
Menbo::exeMove(void)=0x801C4100
Menbo::exeTurn(void)=0x801C42A0
Menbo::exeFind(void)=0x801C44F0
Menbo::exeAttack(void)=0x801C45A0
Menbo::exeSwoonStart(void)=0x801C47F0
Menbo::exeSwoon(void)=0x801C48A0
Menbo::exeSwoonEnd(void)=0x801C4950
Menbo::exeFreeze(void)=0x801C4A00
Menbo::exePressDown(void)=0x801C4B20
Menbo::exeBlownDown(void)=0x801C4BA0
Menbo::exeBreak(void)=0x801C4CA0
Menbo::calcAndSetBaseMtx(void)=0x801C4D80
Menbo::attackSensor(HitSensor*, HitSensor*)=0x801C4DF0
Menbo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801C4FD0
Menbo::receiveMsgPush(HitSensor*, HitSensor*)=0x801C5150
Menbo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801C5250
Menbo::__dt(void)=0x801C6030
short::(nit_\Menbo_cpp)=0x801C6090
NrvMenbo::MenboNrvWait::__ct(void)=0x801C6130
NrvMenbo::MenboNrvMove::__ct(void)=0x801C6140
NrvMenbo::MenboNrvTurn::__ct(void)=0x801C6150
NrvMenbo::MenboNrvFind::__ct(void)=0x801C6170
NrvMenbo::MenboNrvAttack::__ct(void)=0x801C6180
NrvMenbo::MenboNrvSwoonStart::__ct(void)=0x801C61A0
NrvMenbo::MenboNrvSwoon::__ct(void)=0x801C61B0
NrvMenbo::MenboNrvSwoonEnd::__ct(void)=0x801C61C0
NrvMenbo::MenboNrvFreeze::__ct(void)=0x801C61D0
NrvMenbo::MenboNrvPressDown::__ct(void)=0x801C61E0
NrvMenbo::MenboNrvBlowDown::__ct(void)=0x801C61F0
NrvMenbo::MenboNrvBreak::__ct(void)=0x801C6200
NrvMenbo::MenboNrvBreak::execute(Spine*) const=0x801C6250
NrvMenbo::MenboNrvBlowDown::execute(Spine*) const=0x801C6260
NrvMenbo::MenboNrvPressDown::execute(Spine*) const=0x801C6270
NrvMenbo::MenboNrvFreeze::execute(Spine*) const=0x801C6280
NrvMenbo::MenboNrvSwoonEnd::execute(Spine*) const=0x801C6290
NrvMenbo::MenboNrvSwoon::execute(Spine*) const=0x801C62A0
NrvMenbo::MenboNrvSwoonStart::execute(Spine*) const=0x801C62B0
NrvMenbo::MenboNrvAttack::execute(Spine*) const=0x801C62D0
NrvMenbo::MenboNrvFind::execute(Spine*) const=0x801C62E0
NrvMenbo::MenboNrvTurn::execute(Spine*) const=0x801C6300
NrvMenbo::MenboNrvMove::execute(Spine*) const=0x801C6310
NrvMenbo::MenboNrvWait::execute(Spine*) const=0x801C6320
Meramera::initElementType(const JMapInfoIter&)=0x801C6330
Meramera::__ct(const char*)=0x801C63B0
Meramera::init(const JMapInfoIter&)=0x801C6520
Meramera::initAfterPlacement(void)=0x801C6670
Meramera::initEffect(void)=0x801C6680
Meramera::initAppearState(const JMapInfoIter&)=0x801C6750
Meramera::makeActorAppeared(void)=0x801C67D0
Meramera::kill(void)=0x801C67E0
Meramera::endClipped(void)=0x801C6870
Meramera::control(void)=0x801C68B0
Meramera::calcAndSetBaseMtx(void)=0x801C6950
Meramera::attackSensor(HitSensor*, HitSensor*)=0x801C6990
Meramera::receiveMsgPush(HitSensor*, HitSensor*)=0x801C6A40
Meramera::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801C6B10
Meramera::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801C6D30
Meramera::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801C6DD0
Meramera::requestDamage(HitSensor*, HitSensor*)=0x801C6EA0
Meramera::requestFire(HitSensor*, HitSensor*)=0x801C6F90
Meramera::requestForceRunaway(void)=0x801C7040
Meramera::requestDownForce(HitSensor*, HitSensor*)=0x801C70A0
Meramera::requestDown(HitSensor*, HitSensor*)=0x801C7160
Meramera::requestAttack(HitSensor*, HitSensor*)=0x801C7230
Meramera::requestFlatDown(HitSensor*, HitSensor*)=0x801C72F0
Meramera::sendMsgElementAttack(HitSensor*, HitSensor*)=0x801C73E0
Meramera::tryWalk(void)=0x801C74C0
Meramera::tryWalkEnd(void)=0x801C7580
Meramera::tryChase(void)=0x801C75F0
Meramera::tryEndChase(void)=0x801C7640
Meramera::tryStartDiving(void)=0x801C76C0
Meramera::tryForceSink(void)=0x801C7720
Meramera::tryRecovery(void)=0x801C77A0
Meramera::tryPointBind(void)=0x801C7850
Meramera::exeWait(void)=0x801C79B0
Meramera::exeWalk(void)=0x801C7A60
Meramera::isEnableAttack(void) const=0x801C8BD0
Meramera::isPushMoved(void) const=0x801C8C70
Meramera::isEnableFireball(void) const=0x801C8D20
Meramera::isEnableChase(void) const=0x801C8E10
Meramera::addToTargetMovingAccel(const JGeometry::TVec3<float>&, float, float)=0x801C8E80
Meramera::addMovingAccel(const JGeometry::TVec3<float>&, float, float)=0x801C8EF0
Meramera::addRunawayJumpPower(void)=0x801C8FF0
Meramera::addOverWallAccel(const JGeometry::TVec3<float>&)=0x801C9190
Meramera::updatePose(void)=0x801C9240
Meramera::updateExtinguishMtx(void)=0x801C9320
Meramera::checkDirectDivingPoint(void)=0x801C9470
Meramera::checkDivingPoint(float, float)=0x801C94E0
Meramera::checkDivingPointMore(float)=0x801C9610
Meramera::isHitRecover(void) const=0x801C96C0
Meramera::findDivingPoint(JGeometry::TVec3<float>, const JGeometry::TVec3<float>&)=0x801C9740
Meramera::resetAppear(void)=0x801C9880
Meramera::turnFireDirectionToSpin(float)=0x801C9970
Meramera::startWaitLevelSound(void)=0x801C9A00
Meramera::startChaseLevelSound(void)=0x801C9A40
Meramera::__dt(void)=0x801C9A80
short::(nit_\Meramera_cpp)=0x801C9AE0
Metbo::__ct(const char*)=0x801C9EE0
Metbo::init(const JMapInfoIter&)=0x801C9F60
Metbo::makeActorAppeared(void)=0x801CA110
Metbo::kill(void)=0x801CA150
Metbo::exeNonActive(void)=0x801CA190
Metbo::exeWait(void)=0x801CA250
Metbo::exeWalkAround(void)=0x801CA310
Metbo::exeSearch(void)=0x801CA490
Metbo::exeChaseStart(void)=0x801CA520
Metbo::exeChase(void)=0x801CA5C0
Metbo::exeGuard(void)=0x801CA6F0
Metbo::exeTrampleDown(void)=0x801CA770
Metbo::exeBlowDown(void)=0x801CA820
Metbo::exeAttack(void)=0x801CA8A0
Metbo::exeRest(void)=0x801CA920
Metbo::exeSwoonStart(void)=0x801CA9A0
Metbo::exeSwoonLand(void)=0x801CAA50
Metbo::exeSwoonSpin(void)=0x801CAAE0
Metbo::exeSwoonWait(void)=0x801CAB70
Metbo::exeRecover(void)=0x801CAC10
Metbo::initAfterPlacement(void)=0x801CACA0
Metbo::calcAndSetBaseMtx(void)=0x801CACB0
Metbo::control(void)=0x801CAD30
Metbo::attackSensor(HitSensor*, HitSensor*)=0x801CAEE0
Metbo::receiveMsgPush(HitSensor*, HitSensor*)=0x801CB010
Metbo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801CB100
Metbo::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801CB4E0
Metbo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801CB5E0
Metbo::moveOrFall(const MR::ActorMoveParam&, const JGeometry::TVec3<float>*)=0x801CB770
Metbo::startSwoon(bool)=0x801CB830
Metbo::tryNonActive(void)=0x801CB970
Metbo::trySearch(void)=0x801CB9E0
Metbo::tryDPDSwoon(void)=0x801CBAF0
Metbo::isNrvNormal(void) const=0x801CBC60
Metbo::isEatable(void) const=0x801CBDA0
Metbo::__dt(void)=0x801CBF10
short::(nit_\Metbo_cpp)=0x801CBF70
NrvMetbo::MetboNrvNonActive::__ct(void)=0x801CC030
NrvMetbo::MetboNrvWait::__ct(void)=0x801CC040
NrvMetbo::MetboNrvWalkAround::__ct(void)=0x801CC050
NrvMetbo::MetboNrvSearch::__ct(void)=0x801CC060
NrvMetbo::MetboNrvChaseStart::__ct(void)=0x801CC070
NrvMetbo::MetboNrvChase::__ct(void)=0x801CC080
NrvMetbo::MetboNrvGuard::__ct(void)=0x801CC090
NrvMetbo::MetboNrvTrampleDown::__ct(void)=0x801CC0A0
NrvMetbo::MetboNrvBlowDown::__ct(void)=0x801CC0B0
NrvMetbo::MetboNrvAttack::__ct(void)=0x801CC0C0
NrvMetbo::MetboNrvRest::__ct(void)=0x801CC0D0
NrvMetbo::MetboNrvSwoonStart::__ct(void)=0x801CC0E0
NrvMetbo::MetboNrvSwoonLand::__ct(void)=0x801CC0F0
NrvMetbo::MetboNrvSwoonSpin::__ct(void)=0x801CC100
NrvMetbo::MetboNrvSwoonWait::__ct(void)=0x801CC110
NrvMetbo::MetboNrvRecover::__ct(void)=0x801CC120
NrvMetbo::MetboNrvDPDSwoon::__ct(void)=0x801CC130
NrvMetbo::MetboNrvEaten::__ct(void)=0x801CC150
NrvMetbo::MetboNrvEaten::execute(Spine*) const=0x801CC180
NrvMetbo::MetboNrvDPDSwoon::execute(Spine*) const=0x801CC1A0
NrvMetbo::MetboNrvRecover::execute(Spine*) const=0x801CC1B0
NrvMetbo::MetboNrvSwoonWait::execute(Spine*) const=0x801CC1C0
NrvMetbo::MetboNrvSwoonSpin::execute(Spine*) const=0x801CC1D0
NrvMetbo::MetboNrvSwoonLand::execute(Spine*) const=0x801CC1E0
NrvMetbo::MetboNrvSwoonStart::execute(Spine*) const=0x801CC1F0
NrvMetbo::MetboNrvRest::execute(Spine*) const=0x801CC200
NrvMetbo::MetboNrvAttack::execute(Spine*) const=0x801CC210
NrvMetbo::MetboNrvBlowDown::execute(Spine*) const=0x801CC220
NrvMetbo::MetboNrvTrampleDown::execute(Spine*) const=0x801CC230
NrvMetbo::MetboNrvGuard::execute(Spine*) const=0x801CC240
NrvMetbo::MetboNrvChase::executeOnEnd(Spine*) const=0x801CC250
NrvMetbo::MetboNrvChase::execute(Spine*) const=0x801CC260
NrvMetbo::MetboNrvChaseStart::execute(Spine*) const=0x801CC270
NrvMetbo::MetboNrvSearch::execute(Spine*) const=0x801CC280
NrvMetbo::MetboNrvWalkAround::execute(Spine*) const=0x801CC290
NrvMetbo::MetboNrvWait::execute(Spine*) const=0x801CC2A0
NrvMetbo::MetboNrvNonActive::executeOnEnd(Spine*) const=0x801CC2B0
NrvMetbo::MetboNrvNonActive::execute(Spine*) const=0x801CC310
Mogucchi::__ct(const char*)=0x801CC320
Mogucchi::init(const JMapInfoIter&)=0x801CC3B0
Mogucchi::initAfterPlacement(void)=0x801CC540
Mogucchi::makeActorAppeared(void)=0x801CC5A0
Mogucchi::makeActorDead(void)=0x801CC610
Mogucchi::kill(void)=0x801CC660
Mogucchi::control(void)=0x801CC6E0
Mogucchi::exeStroll(void)=0x801CC740
Mogucchi::exeAppearDown(void)=0x801CC860
Mogucchi::exeDown(void)=0x801CC970
Mogucchi::exeDive(void)=0x801CCA30
Mogucchi::exeScatter(void)=0x801CCAD0
Mogucchi::exeDie(void)=0x801CCD00
Mogucchi::attackSensor(HitSensor*, HitSensor*)=0x801CCDC0
Mogucchi::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801CCEE0
Mogucchi::initSensor(void)=0x801CCF70
Mogucchi::createMogucchiHill(void)=0x801CD040
Mogucchi::createHole(void)=0x801CD0F0
Mogucchi::updatePosition(void)=0x801CD160
Mogucchi::makeEulerRotation(void)=0x801CD200
Mogucchi::updateReferenceMtx(void)=0x801CD290
Mogucchi::checkHipDrop(void) const=0x801CD430
Mogucchi::calcAttackDir(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&) const=0x801CD490
Mogucchi::calcScatterVec(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801CD590
Mogucchi::receiveAttackBySpinSensor(unsigned long, HitSensor*, HitSensor*)=0x801CD600
Mogucchi::receiveAttackByBodySensor(unsigned long, HitSensor*, HitSensor*)=0x801CD780
Mogucchi::updateStrollSpeed(void)=0x801CDA00
Mogucchi::reflectStarPointer2P(void)=0x801CDA30
Mogucchi::__dt(void)=0x801CDAF0
short::(nit_\Mogucchi_cpp)=0x801CDB50
NrvMogucchi::MogucchiNrvStroll::__ct(void)=0x801CDBA0
NrvMogucchi::MogucchiNrvAppearDown::__ct(void)=0x801CDBB0
NrvMogucchi::MogucchiNrvDown::__ct(void)=0x801CDBC0
NrvMogucchi::MogucchiNrvDive::__ct(void)=0x801CDBD0
NrvMogucchi::MogucchiNrvScatter::__ct(void)=0x801CDBE0
NrvMogucchi::MogucchiNrvDie::__ct(void)=0x801CDBF0
NrvMogucchi::MogucchiNrvDie::execute(Spine*) const=0x801CDC00
NrvMogucchi::MogucchiNrvScatter::execute(Spine*) const=0x801CDC10
NrvMogucchi::MogucchiNrvDive::execute(Spine*) const=0x801CDC20
NrvMogucchi::MogucchiNrvDown::executeOnEnd(Spine*) const=0x801CDC30
NrvMogucchi::MogucchiNrvDown::execute(Spine*) const=0x801CDC40
NrvMogucchi::MogucchiNrvAppearDown::execute(Spine*) const=0x801CDC50
NrvMogucchi::MogucchiNrvStroll::executeOnEnd(Spine*) const=0x801CDC60
NrvMogucchi::MogucchiNrvStroll::execute(Spine*) const=0x801CDC70
MogucchiShooter::__ct(const char*)=0x801CDC80
MogucchiShooter::init(const JMapInfoIter&)=0x801CDD20
MR::Functor<MogucchiShooter>(MogucchiShooter*, M15MogucchiShooterFPCvPv_v_Q22MR57FunctorV0M<MogucchiShooter*,M15MogucchiShooterFPCvPv_v>)=0x801CE140
MogucchiShooter::control(void)=0x801CE180
MogucchiShooter::endClipped(void)=0x801CF290
MogucchiShooter::calcAndSetBaseMtx(void)=0x801CF300
MogucchiShooter::attackSensor(HitSensor*, HitSensor*)=0x801CF340
MogucchiShooter::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801CF390
MogucchiShooter::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801CF420
MogucchiSpike::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801CF480
MogucchiSpike::attackSensor(HitSensor*, HitSensor*)=0x801CF4E0
MogucchiSpike::calcAndSetBaseMtx(void)=0x801CF5A0
MogucchiSpike::control(void)=0x801CF5E0
JointControlDelegator<MogucchiShooter>::__dt(void)=0x801CF5F0
JointControlDelegator<MogucchiShooter>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801CF630
JointControlDelegator<MogucchiShooter>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801CF6A0
MR::FunctorV0M<MogucchiShooter*,M15MogucchiShooterFPCvPv_v>::__cl(void) const=0x801CF710
MR::FunctorV0M<MogucchiShooter*,M15MogucchiShooterFPCvPv_v>::clone(JKRHeap*) const=0x801CF740
MogucchiShooter::__dt(void)=0x801CF7B0
MogucchiSpike::__dt(void)=0x801CF810
short::(nit_\MogucchiShooter_cpp)=0x801CF870
MogucchiHillPiece::__ct(const char*)=0x801CFA80
MogucchiHillPiece::init(const JMapInfoIter&)=0x801CFAE0
MogucchiHillPiece::control(void)=0x801CFBE0
MogucchiHillPiece::appear(void)=0x801CFC90
MogucchiHillPiece::initWithModelName(const char*, const char*, const char*, bool)=0x801CFCE0
MogucchiHillPiece::exeAppear(void)=0x801CFD00
MogucchiHillPiece::exeWait(void)=0x801CFD90
MogucchiHillPiece::exeCrumble(void)=0x801CFDF0
MogucchiHillPiece::crumble(void)=0x801CFE70
MogucchiHillPiece::destroy(void)=0x801CFF00
MogucchiHillPiece::setSize(float)=0x801CFF60
MogucchiHillPiece::calcAndSetBaseMtx(void)=0x801CFFC0
MogucchiHillPiece::attackSensor(HitSensor*, HitSensor*)=0x801CFFD0
MogucchiHill::notifyAppearAttackToPlayer(HitSensor*, HitSensor*)=0x801D0130
MogucchiHillPiece::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801D0140
MogucchiHillPiece::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801D0380
MogucchiHillPiece::isTargetGoingAway(HitSensor*, HitSensor*) const=0x801D0470
MogucchiHill::__ct(LiveActor*, long, const char*)=0x801D04F0
MogucchiHill::init(const JMapInfoIter&)=0x801D05C0
MogucchiHill::start(void)=0x801D0620
MogucchiHill::end(void)=0x801D0690
MogucchiHill::killPieces(MogucchiHillPiece*)=0x801D06C0
MogucchiHill::pauseOff(void)=0x801D0750
MogucchiHill::killAllPieces(void)=0x801D07B0
MogucchiHill::setAppearNum(long)=0x801D0820
MogucchiHill::exeMove(void)=0x801D0830
MogucchiHill::createPieces(void)=0x801D08C0
MogucchiHillPiece::__defctor(void)=0x801D0A10
MogucchiHillPiece::__dt(void)=0x801D0A20
MogucchiHill::appearPiece(void)=0x801D0A80
MogucchiHill::killPieceOverAppear(void)=0x801D0BF0
MogucchiHill::killPieceIfAlive(void)=0x801D0C20
MogucchiHill::getDistanceFromReserveMtx(void) const=0x801D0C80
MogucchiHill::reserveCurrentMtx(void)=0x801D0CD0
short::(nit_\MogucchiHill_cpp)=0x801D0D20
NrvMogucchiHillPiece::MogucchiHillPieceNrvAppear::__ct(void)=0x801D0D70
NrvMogucchiHillPiece::MogucchiHillPieceNrvWait::__ct(void)=0x801D0D80
NrvMogucchiHillPiece::MogucchiHillPieceNrvCrumble::__ct(void)=0x801D0D90
NrvMogucchiHill::MogucchiHillNrvMove::__ct(void)=0x801D0DA0
NrvMogucchiHill::MogucchiHillNrvWait::__ct(void)=0x801D0DB0
NrvMogucchiHill::MogucchiHillNrvWait::execute(Spine*) const=0x801D0DC0
NrvMogucchiHill::MogucchiHillNrvMove::execute(Spine*) const=0x801D0DD0
NrvMogucchiHillPiece::MogucchiHillPieceNrvCrumble::execute(Spine*) const=0x801D0DE0
NrvMogucchiHillPiece::MogucchiHillPieceNrvWait::execute(Spine*) const=0x801D0DF0
NrvMogucchiHillPiece::MogucchiHillPieceNrvAppear::execute(Spine*) const=0x801D0E00
Nigero::__ct(const char*)=0x801D0E10
Nigero::init(const JMapInfoIter&)=0x801D0EF0
Nigero::control(void)=0x801D1010
Nigero::calcAndSetBaseMtx(void)=0x801D1090
Nigero::attackSensor(HitSensor*, HitSensor*)=0x801D10D0
Nigero::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801D1170
Nigero::receiveMsgPush(HitSensor*, HitSensor*)=0x801D12D0
Nigero::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801D1360
Nigero::__dt(void)=0x801D2CE0
short::(nit_\Nigero_cpp)=0x801D2D40
@unnamed@NokonokoLand_cpp@::startBckBtp(LiveActor*, const char*, const char*)=0x801D3020
NokonokoLand::__ct(const char*)=0x801D3090
NokonokoLand::init(const JMapInfoIter&)=0x801D3170
NokonokoLand::initAfterPlacement(void)=0x801D3510
NokonokoLand::appear(void)=0x801D3560
NokonokoLand::kill(void)=0x801D3570
NokonokoLand::control(void)=0x801D35B0
NokonokoLand::calcAndSetBaseMtx(void)=0x801D3610
NokonokoLand::attackSensor(HitSensor*, HitSensor*)=0x801D3690
NokonokoLand::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801D3890
NokonokoLand::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801D3A70
NokonokoLand::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801D3C90
NokonokoLand::initJetTurtle(void)=0x801D3E60
NokonokoLand::isEnableAttack(void) const=0x801D3ED0
NokonokoLand::isStateWalk(void) const=0x801D3FB0
NokonokoLand::isLookDirRailDirection(void) const=0x801D4060
NokonokoLand::tryAttack(HitSensor*, HitSensor*)=0x801D4140
NokonokoLand::tryJetTurtleTouch(void)=0x801D4220
NokonokoLand::tryRattle(void)=0x801D4330
NokonokoLand::tryBindStarPointer(void)=0x801D43B0
NokonokoLand::receiveTrample(HitSensor*, HitSensor*)=0x801D4440
NokonokoLand::receivePunch(HitSensor*, HitSensor*)=0x801D4580
NokonokoLand::receiveHipDrop(HitSensor*, HitSensor*)=0x801D4680
NokonokoLand::receiveTurtleAttack(HitSensor*, HitSensor*)=0x801D47F0
NokonokoLand::receiveStorm(HitSensor*, HitSensor*)=0x801D49A0
NokonokoLand::receiveStarPieceAttack(HitSensor*, HitSensor*)=0x801D4AD0
NokonokoLand::exeAppearStart(void)=0x801D4B40
NokonokoLand::tearAppearStart(void)=0x801D4C80
NokonokoLand::exeAppear(void)=0x801D4D00
NokonokoLand::exeFlyAway(void)=0x801D4D60
NokonokoLand::exeDead(void)=0x801D4F30
NokonokoLand::exeWalk(void)=0x801D4FF0
NokonokoLand::exeLookAround(void)=0x801D5120
NokonokoLand::exeTurnStart(void)=0x801D5190
NokonokoLand::exeTurnLoop(void)=0x801D5210
NokonokoLand::exeTurnEnd(void)=0x801D5340
NokonokoLand::exeAttack(void)=0x801D53C0
NokonokoLand::exeRattle(void)=0x801D5460
NokonokoLand::exeBindStarPointer(void)=0x801D5510
NokonokoLand::exeShellStartTrample(void)=0x801D5590
NokonokoLand::exeShellStartPunch(void)=0x801D56A0
NokonokoLand::exeShellWait(void)=0x801D5810
NokonokoLand::exeShellEnd(void)=0x801D5880
NokonokoLand::exeBecomeJetTurtle(void)=0x801D5980
MR::FunctorV0M<NokonokoLand*,M12NokonokoLandFPCvPv_v>::__cl(void) const=0x801D5C70
MR::FunctorV0M<NokonokoLand*,M12NokonokoLandFPCvPv_v>::clone(JKRHeap*) const=0x801D5CA0
NokonokoLand::__dt(void)=0x801D5D10
short::(nit_\NokonokoLand_cpp)=0x801D5D70
NrvNokonokoLand::HostTypeAppearReady::__ct(void)=0x801D5E60
NrvNokonokoLand::HostTypeAppearStart::__ct(void)=0x801D5E70
NrvNokonokoLand::HostTypeAppear::__ct(void)=0x801D5E80
NrvNokonokoLand::HostTypeDead::__ct(void)=0x801D5E90
NrvNokonokoLand::HostTypeFlyAway::__ct(void)=0x801D5EA0
NrvNokonokoLand::HostTypeWalk::__ct(void)=0x801D5EB0
NrvNokonokoLand::HostTypeLookAround::__ct(void)=0x801D5EC0
NrvNokonokoLand::HostTypeTurnStart::__ct(void)=0x801D5ED0
NrvNokonokoLand::HostTypeTurn::__ct(void)=0x801D5EE0
NrvNokonokoLand::HostTypeTurnEnd::__ct(void)=0x801D5EF0
NrvNokonokoLand::HostTypeAttack::__ct(void)=0x801D5F00
NrvNokonokoLand::HostTypeAttackTurn::__ct(void)=0x801D5F10
NrvNokonokoLand::HostTypeRattle::__ct(void)=0x801D5F20
NrvNokonokoLand::HostTypeRattleTurn::__ct(void)=0x801D5F30
NrvNokonokoLand::HostTypeBindStarPointer::__ct(void)=0x801D5F40
NrvNokonokoLand::HostTypeBindStarPointerTurn::__ct(void)=0x801D5F50
NrvNokonokoLand::HostTypeShellStart::__ct(void)=0x801D5F60
NrvNokonokoLand::HostTypeShellWait::__ct(void)=0x801D5F80
NrvNokonokoLand::HostTypeShellEnd::__ct(void)=0x801D5F90
NrvNokonokoLand::HostTypeShellStartPunch::__ct(void)=0x801D5FA0
NrvNokonokoLand::HostTypeBecomeJetTurtle::__ct(void)=0x801D5FB0
NrvNokonokoLand::HostTypeBecomeJetTurtle::execute(Spine*) const=0x801D6040
NrvNokonokoLand::HostTypeShellStartPunch::execute(Spine*) const=0x801D6050
NrvNokonokoLand::HostTypeShellEnd::execute(Spine*) const=0x801D6060
NrvNokonokoLand::HostTypeShellWait::execute(Spine*) const=0x801D6070
NrvNokonokoLand::HostTypeShellStart::execute(Spine*) const=0x801D6090
NrvNokonokoLand::HostTypeBindStarPointerTurn::execute(Spine*) const=0x801D60A0
NrvNokonokoLand::HostTypeBindStarPointer::execute(Spine*) const=0x801D60B0
NrvNokonokoLand::HostTypeRattleTurn::execute(Spine*) const=0x801D60C0
NrvNokonokoLand::HostTypeRattle::execute(Spine*) const=0x801D60D0
NrvNokonokoLand::HostTypeAttackTurn::execute(Spine*) const=0x801D60E0
NrvNokonokoLand::HostTypeAttack::execute(Spine*) const=0x801D60F0
NrvNokonokoLand::HostTypeTurnEnd::execute(Spine*) const=0x801D6100
NrvNokonokoLand::HostTypeTurn::execute(Spine*) const=0x801D6110
NrvNokonokoLand::HostTypeTurnStart::execute(Spine*) const=0x801D6120
NrvNokonokoLand::HostTypeLookAround::execute(Spine*) const=0x801D6130
NrvNokonokoLand::HostTypeWalk::execute(Spine*) const=0x801D6140
NrvNokonokoLand::HostTypeFlyAway::execute(Spine*) const=0x801D6150
NrvNokonokoLand::HostTypeDead::execute(Spine*) const=0x801D6160
NrvNokonokoLand::HostTypeAppear::execute(Spine*) const=0x801D6170
NrvNokonokoLand::HostTypeAppearStart::executeOnEnd(Spine*) const=0x801D6180
NrvNokonokoLand::HostTypeAppearStart::execute(Spine*) const=0x801D6190
NrvNokonokoLand::HostTypeAppearReady::execute(Spine*) const=0x801D61A0
@unnamed@NokonokoLandBig_cpp@::startBckBtp(LiveActor*, const char*, const char*)=0x801D61F0
NokonokoLandBig::__ct(const char*)=0x801D6260
NokonokoLandBig::init(const JMapInfoIter&)=0x801D6310
NokonokoLandBig::appear(void)=0x801D64D0
NokonokoLandBig::kill(void)=0x801D64E0
NokonokoLandBig::control(void)=0x801D6530
NokonokoLandBig::calcAndSetBaseMtx(void)=0x801D6590
NokonokoLandBig::attackSensor(HitSensor*, HitSensor*)=0x801D6610
NokonokoLandBig::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801D6770
NokonokoLandBig::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801D6920
NokonokoLandBig::receiveMsgPush(HitSensor*, HitSensor*)=0x801D69D0
MR::FunctorV0M<NokonokoLandBig*,M15NokonokoLandBigFPCvPv_v>::__cl(void) const=0x801D7460
MR::FunctorV0M<NokonokoLandBig*,M15NokonokoLandBigFPCvPv_v>::clone(JKRHeap*) const=0x801D7490
NokonokoLandBig::__dt(void)=0x801D7500
short::(nit_\NokonokoLandBig_cpp)=0x801D7560
Nyoropon::__ct(const char*)=0x801D7750
Nyoropon::init(const JMapInfoIter&)=0x801D7910
Nyoropon::makeActorAppeared(void)=0x801D7BB0
Nyoropon::attackSensor(HitSensor*, HitSensor*)=0x801D7C30
Nyoropon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801D7D30
Nyoropon::control(void)=0x801D7F80
Nyoropon::calcAndSetBaseMtx(void)=0x801D8C10
JointControlDelegator<Nyoropon>::__dt(void)=0x801DA420
JointControlDelegator<Nyoropon>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801DA460
JointControlDelegator<Nyoropon>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801DA4D0
Nyoropon::__dt(void)=0x801DA540
short::(nit_\Nyoropon_cpp)=0x801DA5A0
Onimasu::__ct(const char*)=0x801DA7B0
Onimasu::init(const JMapInfoIter&)=0x801DA890
Onimasu::control(void)=0x801DAAA0
Onimasu::movement(void)=0x801DAAB0
Onimasu::initAfterPlacement(void)=0x801DAAF0
Onimasu::calcTargetPose(void)=0x801DAC00
Onimasu::updatePose(void)=0x801DB000
Onimasu::calcAndSetBaseMtx(void)=0x801DB100
Onimasu::land(void)=0x801DB1F0
Onimasu::calcTurnDirection(float*) const=0x801DB290
Onimasu::updateStompVelocity(void)=0x801DB330
Onimasu::calcGravityDir(JGeometry::TVec3<float>*) const=0x801DB420
Onimasu::getGravityScalar(void) const=0x801DB470
Onimasu::getTimeToNextPoint(void) const=0x801DB4B0
Onimasu::emitEffectLand(void)=0x801DB4F0
Onimasu::exeWaitForSwitchOn(void)=0x801DB660
Onimasu::exeWait(void)=0x801DB6E0
Onimasu::exeMove(void)=0x801DB760
Onimasu::startMoveInner(void)=0x801DB8A0
Onimasu::updatePoseInner(void)=0x801DB8B0
Onimasu::exeStamp(void)=0x801DB8C0
OnimasuFunction::getPolygonOnRailPoint(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const LiveActor*, int)=0x801DB9D0
Onimasu::__dt(void)=0x801DBAE0
short::(nit_\Onimasu_cpp)=0x801DBB40
NrvOnimasu::HostTypeWaitForSwitchOn::__ct(void)=0x801DBB90
NrvOnimasu::HostTypeWait::__ct(void)=0x801DBBA0
NrvOnimasu::HostTypeWaitForStamp::__ct(void)=0x801DBBB0
NrvOnimasu::HostTypeJump::__ct(void)=0x801DBBC0
NrvOnimasu::HostTypeStamp::__ct(void)=0x801DBBD0
NrvOnimasu::HostTypeStamp::execute(Spine*) const=0x801DBBE0
NrvOnimasu::HostTypeJump::execute(Spine*) const=0x801DBBF0
NrvOnimasu::HostTypeWaitForStamp::execute(Spine*) const=0x801DBC00
NrvOnimasu::HostTypeWait::execute(Spine*) const=0x801DBC10
NrvOnimasu::HostTypeWaitForSwitchOn::execute(Spine*) const=0x801DBC20
OnimasuJump::__ct(const char*)=0x801DBC30
OnimasuJump::calcJumpVelocity(void)=0x801DBC80
OnimasuJump::getLastPointNo(void) const=0x801DBE40
OnimasuJump::getLastPointNormal(void) const=0x801DBE80
OnimasuJump::getNextPointNormal(void) const=0x801DBED0
OnimasuJump::initFromRailPoint(void)=0x801DBEF0
OnimasuJump::incrementNextPoint(void)=0x801DBF60
OnimasuJump::collectRailPointInfo(void)=0x801DBFB0
OnimasuJump::startMoveInner(void)=0x801DC040
OnimasuJump::updatePoseInner(void)=0x801DC050
OnimasuJump::getNextPointNo(void) const=0x801DC0A0
MR::AssignableArray<JGeometry::TVec3<float>>::__dt(void)=0x801DC0B0
OnimasuJump::__dt(void)=0x801DC120
OtaRock::__ct(const char*)=0x801DC190
OtaRock::init(const JMapInfoIter&)=0x801DC210
OtaRock::kill(void)=0x801DC330
OtaRock::control(void)=0x801DC3A0
OtaRock::calcAndSetBaseMtx(void)=0x801DC3B0
OtaRock::attackSensor(HitSensor*, HitSensor*)=0x801DC410
OtaRock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801DC4A0
OtaRock::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801DC520
OtaRock::initModel(void)=0x801DC5E0
OtaRock::initSensor(void)=0x801DC760
OtaRock::updateBaseMtx(void)=0x801DC7F0
OtaRock::getDisappearedCocoNut(void)=0x801DC8A0
OtaRock::getDisappearedFireBall(void)=0x801DC910
OtaRock::getDisappearedCocoNutNum(void) const=0x801DC980
OtaRock::getDisappearedFireBallNum(void) const=0x801DC9F0
OtaRock::throwCocoNut(void)=0x801DCA60
OtaRock::throwFireBall(void)=0x801DCB00
OtaRock::tryToHide(void)=0x801DCB60
OtaRock::exeWait(void)=0x801DCC70
OtaRock::exeThrowCocoNut(void)=0x801DCD90
OtaRock::exeThrowFireBall(void)=0x801DCE30
OtaRock::exeDown(void)=0x801DCEF0
OtaRock::exeHide(void)=0x801DD070
OtaRock::exeHideWait(void)=0x801DD0F0
OtaRock::exeShow(void)=0x801DD190
OtaRock::__dt(void)=0x801DD270
short::(nit_\OtaRock_cpp)=0x801DD2D0
NrvOtaRock::OtaRockNrvWait::__ct(void)=0x801DD330
NrvOtaRock::OtaRockNrvThrowCocoNut::__ct(void)=0x801DD340
NrvOtaRock::OtaRockNrvThrowFireBall::__ct(void)=0x801DD350
NrvOtaRock::OtaRockNrvDown::__ct(void)=0x801DD360
NrvOtaRock::OtaRockNrvHide::__ct(void)=0x801DD370
NrvOtaRock::OtaRockNrvHideWait::__ct(void)=0x801DD380
NrvOtaRock::OtaRockNrvShow::__ct(void)=0x801DD390
NrvOtaRock::OtaRockNrvShow::execute(Spine*) const=0x801DD3C0
NrvOtaRock::OtaRockNrvHideWait::execute(Spine*) const=0x801DD3D0
NrvOtaRock::OtaRockNrvHide::execute(Spine*) const=0x801DD3E0
NrvOtaRock::OtaRockNrvDown::execute(Spine*) const=0x801DD3F0
NrvOtaRock::OtaRockNrvThrowFireBall::execute(Spine*) const=0x801DD400
NrvOtaRock::OtaRockNrvThrowCocoNut::execute(Spine*) const=0x801DD410
NrvOtaRock::OtaRockNrvWait::execute(Spine*) const=0x801DD420
OtaRockChief::__ct(OtaRockTank*, const char*)=0x801DD430
OtaRockChief::init(const JMapInfoIter&)=0x801DD490
OtaRockChief::control(void)=0x801DD510
OtaRockChief::calcAndSetBaseMtx(void)=0x801DD520
OtaRockChief::startHitReaction(void)=0x801DD560
OtaRockChief::__dt(void)=0x801DD570
short::(nit_\OtaRockChief_cpp)=0x801DD5D0
NrvOtaRockChief::OtaRockChiefNrvWait::__ct(void)=0x801DD5E0
NrvOtaRockChief::OtaRockChiefNrvWait::execute(Spine*) const=0x801DD5F0
OtaRockTank::__ct(const char*)=0x801DD600
OtaRockTank::init(const JMapInfoIter&)=0x801DD700
OtaRockTank::appear(void)=0x801DDE60
OtaRockTank::control(void)=0x801DDE70
OtaRockTank::kill(void)=0x801DDF30
OtaRockTank::calcAndSetBaseMtx(void)=0x801DDFA0
OtaRockTank::attackSensor(HitSensor*, HitSensor*)=0x801DF950
OtaRockTank::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801DFA50
OtaRockTank::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801DFAD0
JointControlDelegator<OtaRockTank>::__dt(void)=0x801E1670
JointControlDelegator<OtaRockTank>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801E16B0
JointControlDelegator<OtaRockTank>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801E1720
OtaRockTank::__dt(void)=0x801E1790
short::(nit_\OtaRockTank_cpp)=0x801E17F0
PackunFlowerBig::__ct(const char*)=0x801E1D20
PackunFlowerBig::init(const JMapInfoIter&)=0x801E1D70
PackunFlowerBig::exeHidden(void)=0x801E1E30
PackunFlowerBig::exeAppear(void)=0x801E1E90
PackunFlowerBig::exeWait(void)=0x801E1F00
PackunFlowerBig::exeHide(void)=0x801E1F70
PackunFlowerBig::exeSpinReaction(void)=0x801E1FD0
PackunFlowerBig::exeFreeze(void)=0x801E2040
PackunFlowerBig::calcAndSetBaseMtx(void)=0x801E20A0
PackunFlowerBig::control(void)=0x801E20E0
PackunFlowerBig::attackSensor(HitSensor*, HitSensor*)=0x801E2130
PackunFlowerBig::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801E2240
PackunFlowerBig::tryStarPointerBind(void)=0x801E2390
PackunFlowerBig::__dt(void)=0x801E2460
short::(nit_\PackunFlowerBig_cpp)=0x801E24C0
NrvPackunFlowerBig::PackunFlowerBigNrvHidden::__ct(void)=0x801E2520
NrvPackunFlowerBig::PackunFlowerBigNrvAppear::__ct(void)=0x801E2530
NrvPackunFlowerBig::PackunFlowerBigNrvWait::__ct(void)=0x801E2540
NrvPackunFlowerBig::PackunFlowerBigNrvHide::__ct(void)=0x801E2550
NrvPackunFlowerBig::PackunFlowerBigNrvSpinReaction::__ct(void)=0x801E2560
NrvPackunFlowerBig::PackunFlowerBigNrvFreeze::__ct(void)=0x801E2570
NrvPackunFlowerBig::PackunFlowerBigNrvFreezeEnd::__ct(void)=0x801E2580
NrvPackunFlowerBig::PackunFlowerBigNrvFreezeEnd::execute(Spine*) const=0x801E2590
NrvPackunFlowerBig::PackunFlowerBigNrvFreeze::execute(Spine*) const=0x801E25A0
NrvPackunFlowerBig::PackunFlowerBigNrvSpinReaction::execute(Spine*) const=0x801E25B0
NrvPackunFlowerBig::PackunFlowerBigNrvHide::execute(Spine*) const=0x801E25C0
NrvPackunFlowerBig::PackunFlowerBigNrvWait::execute(Spine*) const=0x801E25D0
NrvPackunFlowerBig::PackunFlowerBigNrvAppear::execute(Spine*) const=0x801E25E0
NrvPackunFlowerBig::PackunFlowerBigNrvHidden::execute(Spine*) const=0x801E25F0
PackunPetit::__ct(const char*)=0x801E2600
PackunPetit::init(const JMapInfoIter&)=0x801E2680
PackunPetit::initAfterPlacement(void)=0x801E27D0
PackunPetit::exeNonActive(void)=0x801E27E0
PackunPetit::exeWait(void)=0x801E2860
PackunPetit::exeFind(void)=0x801E28E0
PackunPetit::exeThreat(void)=0x801E2940
PackunPetit::exeTurn(void)=0x801E2A50
PackunPetit::exeAttackStart(void)=0x801E2B40
PackunPetit::exeHitWaitForAttack(void)=0x801E2BB0
PackunPetit::exeHit(void)=0x801E2C30
PackunPetit::exeTrampleDown(void)=0x801E2CA0
PackunPetit::exePunchDown(void)=0x801E2D60
PackunPetit::exeSwoonStart(void)=0x801E2EF0
PackunPetit::exeSwoon(void)=0x801E2F50
PackunPetit::exeSwoonToThreat(void)=0x801E2FD0
PackunPetit::makeActorDead(void)=0x801E3340
PackunPetit::kill(void)=0x801E3390
PackunPetit::calcAndSetBaseMtx(void)=0x801E3430
PackunPetit::control(void)=0x801E3470
PackunPetit::attackSensor(HitSensor*, HitSensor*)=0x801E3580
PackunPetit::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801E3780
PackunPetit::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801E39A0
PackunPetit::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801E3A70
PackunPetit::initBlowModel(void)=0x801E3D90
PackunPetit::punchDown(HitSensor*, HitSensor*)=0x801E3E10
PackunPetit::selectNrvWait(void)=0x801E3EF0
PackunPetit::tryNonActive(void)=0x801E3F70
PackunPetit::tryTurn(void)=0x801E3FC0
PackunPetit::tryDPDSwoon(void)=0x801E4070
PackunPetit::__dt(void)=0x801E4490
short::(nit_\PackunPetit_cpp)=0x801E44F0
NrvPackunPetit::PackunPetitNrvNonActive::__ct(void)=0x801E45C0
NrvPackunPetit::PackunPetitNrvWait::__ct(void)=0x801E45D0
NrvPackunPetit::PackunPetitNrvFind::__ct(void)=0x801E45E0
NrvPackunPetit::PackunPetitNrvThreat::__ct(void)=0x801E45F0
NrvPackunPetit::PackunPetitNrvLeftTurn::__ct(void)=0x801E4600
NrvPackunPetit::PackunPetitNrvRightTurn::__ct(void)=0x801E4610
NrvPackunPetit::PackunPetitNrvAttackStart::__ct(void)=0x801E4620
NrvPackunPetit::PackunPetitNrvAttack::__ct(void)=0x801E4630
NrvPackunPetit::PackunPetitNrvAttackBack::__ct(void)=0x801E4640
NrvPackunPetit::PackunPetitNrvHitWaitForAttack::__ct(void)=0x801E4650
NrvPackunPetit::PackunPetitNrvHit::__ct(void)=0x801E4660
NrvPackunPetit::PackunPetitNrvTrampleDown::__ct(void)=0x801E4670
NrvPackunPetit::PackunPetitNrvPunchDown::__ct(void)=0x801E4680
NrvPackunPetit::PackunPetitNrvSwoonStart::__ct(void)=0x801E4690
NrvPackunPetit::PackunPetitNrvSwoon::__ct(void)=0x801E46A0
NrvPackunPetit::PackunPetitNrvSwoonToThreat::__ct(void)=0x801E46B0
NrvPackunPetit::PackunPetitNrvDPDSwoon::__ct(void)=0x801E46C0
NrvPackunPetit::PackunPetitNrvDPDSwoon::execute(Spine*) const=0x801E4750
NrvPackunPetit::PackunPetitNrvSwoonToThreat::execute(Spine*) const=0x801E4790
NrvPackunPetit::PackunPetitNrvSwoon::execute(Spine*) const=0x801E47A0
NrvPackunPetit::PackunPetitNrvSwoonStart::execute(Spine*) const=0x801E47B0
NrvPackunPetit::PackunPetitNrvPunchDown::execute(Spine*) const=0x801E47C0
NrvPackunPetit::PackunPetitNrvTrampleDown::execute(Spine*) const=0x801E47D0
NrvPackunPetit::PackunPetitNrvHit::execute(Spine*) const=0x801E47E0
NrvPackunPetit::PackunPetitNrvHitWaitForAttack::execute(Spine*) const=0x801E47F0
NrvPackunPetit::PackunPetitNrvAttackBack::execute(Spine*) const=0x801E4800
NrvPackunPetit::PackunPetitNrvAttack::execute(Spine*) const=0x801E4850
NrvPackunPetit::PackunPetitNrvAttackStart::execute(Spine*) const=0x801E48A0
NrvPackunPetit::PackunPetitNrvRightTurn::execute(Spine*) const=0x801E48B0
NrvPackunPetit::PackunPetitNrvLeftTurn::execute(Spine*) const=0x801E48C0
NrvPackunPetit::PackunPetitNrvThreat::execute(Spine*) const=0x801E48D0
NrvPackunPetit::PackunPetitNrvFind::execute(Spine*) const=0x801E48E0
NrvPackunPetit::PackunPetitNrvWait::execute(Spine*) const=0x801E48F0
NrvPackunPetit::PackunPetitNrvNonActive::executeOnEnd(Spine*) const=0x801E4900
NrvPackunPetit::PackunPetitNrvNonActive::execute(Spine*) const=0x801E4950
PatakuriWing::__ct(const char*)=0x801E4960
Patakuri::__ct(const char*)=0x801E4A70
Patakuri::init(const JMapInfoIter&)=0x801E4AE0
Patakuri::control(void)=0x801E4C90
Patakuri::calcAndSetBaseMtx(void)=0x801E4D40
Patakuri::attackSensor(HitSensor*, HitSensor*)=0x801E4D80
Patakuri::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801E5030
Patakuri::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801E5150
Patakuri::__dt(void)=0x801E5920
PatakuriWing::__dt(void)=0x801E5980
short::(nit_\PatakuriWing_cpp)=0x801E59E0
PatakuriBigWing::__ct(const char*)=0x801E5C60
PatakuriBigWing::calcAndSetBaseMtx(void)=0x801E5D20
PatakuriBig::__ct(const char*)=0x801E5D60
PatakuriBig::init(const JMapInfoIter&)=0x801E5DB0
PatakuriBig::makeActorAppeared(void)=0x801E6090
PatakuriBig::control(void)=0x801E60F0
PatakuriBig::calcAndSetBaseMtx(void)=0x801E6140
PatakuriBig::attackSensor(HitSensor*, HitSensor*)=0x801E6180
PatakuriBig::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801E63D0
PatakuriBig::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801E6500
PatakuriBigWing::__dt(void)=0x801E6A60
PatakuriBig::__dt(void)=0x801E6AC0
short::(nit_\PatakuriBig_cpp)=0x801E6B20
Pattan::__ct(const char*)=0x801E6D20
Pattan::init(const JMapInfoIter&)=0x801E6D90
Pattan::makeActorAppeared(void)=0x801E6EA0
Pattan::control(void)=0x801E6F60
Pattan::calcAndSetBaseMtx(void)=0x801E7820
Pattan::attackSensor(HitSensor*, HitSensor*)=0x801E7830
Pattan::receiveMsgPush(HitSensor*, HitSensor*)=0x801E78F0
Pattan::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801E7960
Pattan::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801E7A20
Pattan::__dt(void)=0x801E7DB0
short::(nit_\Pattan_cpp)=0x801E7E10
Petari::__ct(const char*)=0x801E8080
Petari::init(const JMapInfoIter&)=0x801E8120
Petari::initAfterPlacement(void)=0x801E8310
Petari::makeActorAppeared(void)=0x801E8320
Petari::kill(void)=0x801E8370
Petari::calcAnim(void)=0x801E83F0
Petari::exeWait(void)=0x801E8460
Petari::exeApproach(void)=0x801E85E0
Petari::exeEscape(void)=0x801E8700
Petari::exeSwoonStart(void)=0x801E8840
Petari::exeSwoon(void)=0x801E8920
Petari::exeSwoonEnd(void)=0x801E89F0
Petari::exeLand(void)=0x801E8B10
Petari::exeSmash(void)=0x801E8BC0
Petari::exeSpinOut(void)=0x801E8C70
Petari::exeFreeze(void)=0x801E8DB0
Petari::exeSwoonFreeze(void)=0x801E8E80
Petari::control(void)=0x801E8F60
Petari::calcAndSetBaseMtx(void)=0x801E90B0
Petari::attackSensor(HitSensor*, HitSensor*)=0x801E90C0
Petari::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801E9130
Petari::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801E91D0
Petari::receiveMsgPush(HitSensor*, HitSensor*)=0x801E9280
Petari::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801E9340
Petari::initFootPrint(const JMapInfoIter&)=0x801E94F0
Petari::initFrontVec(void)=0x801E95B0
Petari::initStarPiece(const JMapInfoIter&)=0x801E9600
Petari::tryShiftJumpOut(void)=0x801E9650
Petari::tryShiftApproach(void)=0x801E96C0
Petari::tryApproachEnd(void)=0x801E9720
Petari::tryShiftEscape(void)=0x801E9780
Petari::tryEscapeEnd(void)=0x801E97E0
Petari::receivePlayerAttackAtBody(unsigned long, HitSensor*, HitSensor*)=0x801E9840
Petari::receivePlayerAttackAtSpin(unsigned long, HitSensor*, HitSensor*)=0x801E9B50
Petari::isSolidBody(void) const=0x801E9C10
Petari::isEatable(void) const=0x801E9CE0
Petari::moveTowardTargetDirection(float, float, float)=0x801E9D50
Petari::updateFootPrint(void)=0x801E9DF0
Petari::calcSpinOutVelocity(float)=0x801E9E90
Petari::calcApproachDirection(void)=0x801E9F90
Petari::calcEscapeDirection(void)=0x801EA010
Petari::avoidPlayer(void)=0x801EA0A0
MR::clamp01(float*)=0x801EA200
Petari::avoidWall(void)=0x801EA230
Petari::calcCenter(void)=0x801EA410
Petari::meander(void)=0x801EA480
Petari::calcBoost(float, float, float) const=0x801EA530
Petari::appearStarPieceGradually(void)=0x801EA5C0
Petari::appearStarPieceAll(void)=0x801EA650
Petari::tryFreeze(void)=0x801EA6B0
Petari::trySwoonFreeze(void)=0x801EA700
Petari::calcMouthPos(JGeometry::TVec3<float>*) const=0x801EA750
Petari::tryEmitFirstFootPrintEffect(void)=0x801EA7B0
Petari::__dt(void)=0x801EA800
short::(nit_\Petari_cpp)=0x801EA860
NrvPetari::PetariNrvLurk::__ct(void)=0x801EA900
NrvPetari::PetariNrvJumpOut::__ct(void)=0x801EA910
NrvPetari::PetariNrvWait::__ct(void)=0x801EA920
NrvPetari::PetariNrvApproach::__ct(void)=0x801EA930
NrvPetari::PetariNrvEscape::__ct(void)=0x801EA940
NrvPetari::PetariNrvSwoonStart::__ct(void)=0x801EA950
NrvPetari::PetariNrvSwoon::__ct(void)=0x801EA960
NrvPetari::PetariNrvSwoonEnd::__ct(void)=0x801EA970
NrvPetari::PetariNrvLand::__ct(void)=0x801EA980
NrvPetari::PetariNrvSmash::__ct(void)=0x801EA990
NrvPetari::PetariNrvSpinOut::__ct(void)=0x801EA9A0
NrvPetari::PetariNrvKickOut::__ct(void)=0x801EA9B0
NrvPetari::PetariNrvEaten::__ct(void)=0x801EA9C0
NrvPetari::PetariNrvFreeze::__ct(void)=0x801EA9D0
NrvPetari::PetariNrvSwoonFreeze::__ct(void)=0x801EA9E0
NrvPetari::PetariNrvSwoonFreeze::executeOnEnd(Spine*) const=0x801EA9F0
NrvPetari::PetariNrvSwoonFreeze::execute(Spine*) const=0x801EAA40
NrvPetari::PetariNrvFreeze::executeOnEnd(Spine*) const=0x801EAA50
NrvPetari::PetariNrvFreeze::execute(Spine*) const=0x801EAA90
NrvPetari::PetariNrvEaten::execute(Spine*) const=0x801EAAA0
NrvPetari::PetariNrvKickOut::execute(Spine*) const=0x801EAAB0
NrvPetari::PetariNrvSpinOut::execute(Spine*) const=0x801EAAC0
NrvPetari::PetariNrvSmash::execute(Spine*) const=0x801EAAD0
NrvPetari::PetariNrvLand::execute(Spine*) const=0x801EAAE0
NrvPetari::PetariNrvSwoonEnd::execute(Spine*) const=0x801EAAF0
NrvPetari::PetariNrvSwoon::execute(Spine*) const=0x801EAB00
NrvPetari::PetariNrvSwoonStart::execute(Spine*) const=0x801EAB10
NrvPetari::PetariNrvEscape::executeOnEnd(Spine*) const=0x801EAB20
NrvPetari::PetariNrvEscape::execute(Spine*) const=0x801EAB30
NrvPetari::PetariNrvApproach::executeOnEnd(Spine*) const=0x801EAB40
NrvPetari::PetariNrvApproach::execute(Spine*) const=0x801EAB50
NrvPetari::PetariNrvWait::executeOnEnd(Spine*) const=0x801EAB60
NrvPetari::PetariNrvWait::execute(Spine*) const=0x801EAB70
NrvPetari::PetariNrvJumpOut::execute(Spine*) const=0x801EAB80
NrvPetari::PetariNrvLurk::execute(Spine*) const=0x801EAB90
Peto::__ct(const char*)=0x801EABE0
Peto::init(const JMapInfoIter&)=0x801EACB0
Peto::control(void)=0x801EAE30
Peto::movement(void)=0x801EAF40
Peto::calcAndSetBaseMtx(void)=0x801EAF80
Peto::attackSensor(HitSensor*, HitSensor*)=0x801EAFC0
Peto::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801EB100
Peto::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801EB260
Peto::receiveMsgPush(HitSensor*, HitSensor*)=0x801EB300
Peto::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801EB3C0
Peto::__dt(void)=0x801EC820
short::(nit_\Peto_cpp)=0x801EC880
Popo::__ct(const char*)=0x801ECB60
Popo::init(const JMapInfoIter&)=0x801ECBD0
Popo::initAfterPlacement(void)=0x801ECC70
Popo::appear(void)=0x801ECD80
Popo::kill(void)=0x801ECD90
Popo::control(void)=0x801EE170
Popo::calcAndSetBaseMtx(void)=0x801EE1E0
Popo::attackSensor(HitSensor*, HitSensor*)=0x801EE2C0
Popo::receiveMsgPush(HitSensor*, HitSensor*)=0x801EE3A0
Popo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801EE420
Popo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801EE650
Popo::__dt(void)=0x801EF490
short::(nit_\Popo_cpp)=0x801EF4F0
PopoStickingManager::__ct(const char*)=0x801EF8E0
PopoStickingManager::init(const JMapInfoIter&)=0x801EF930
PopoStickingManager::initAfterPlacement(void)=0x801EF950
PopoStickingManager::calcAnim(void)=0x801EF9F0
PopoStickingManager::__dt(void)=0x801EFB80
PukupukuStateLanding::__ct(Pukupuku*)=0x801EFBE0
ActorStateBase<Pukupuku>::__dt(void)=0x801EFCB0
PukupukuStateLanding::exeLandingMoveLand(void)=0x801EFD10
PukupukuStateLanding::exeLandingJumpFromWater(void)=0x801EFE30
PukupukuStateLanding::exeLandingJumpFromLand(void)=0x801EFF80
PukupukuStateLanding::updatePoseByJumpPath(float)=0x801F0090
PukupukuStateLanding::setNerveAfterJumpAccordingToNextPoint(void)=0x801F0140
PukupukuStateLanding::setupJumping(float, float)=0x801F01A0
PukupukuStateLanding::updateJumping(void)=0x801F02D0
PukupukuStateLanding::emitWaterColumIfNeed(bool, bool)=0x801F0330
PukupukuStateLanding::emitGroundHitEffect(void)=0x801F0450
Pukupuku::__ct(const char*)=0x801F0520
Pukupuku::init(const JMapInfoIter&)=0x801F05B0
Pukupuku::kill(void)=0x801F06E0
Pukupuku::updatePoseByRailIgnoreUpScale(void)=0x801F07B0
Pukupuku::rotatePoseByLocalZ(void)=0x801F0830
Pukupuku::calcGroundHitMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*) const=0x801F08B0
Pukupuku::isReadyToJumpFromLand(void) const=0x801F0960
Pukupuku::exeWait(void)=0x801F09C0
Pukupuku::exeMoveWater(void)=0x801F0AA0
Pukupuku::exeMoveWaterAfterJump(void)=0x801F0BB0
Pukupuku::exeLanding(void)=0x801F0C40
Pukupuku::exeTrampled(void)=0x801F0CB0
Pukupuku::exeBlownOff(void)=0x801F0DD0
Pukupuku::exeBindStarPointer(void)=0x801F0F10
Pukupuku::updatePoseByRail(void)=0x801F0FF0
Pukupuku::updateMoveWaterAfterJump(void)=0x801F10C0
Pukupuku::tryBindStarPointer(void)=0x801F1120
Pukupuku::exeMoveWaterCommon(void)=0x801F1210
Pukupuku::getBlownOffSpeedRate(void) const=0x801F12B0
Pukupuku::isEatable(void) const=0x801F1310
Pukupuku::control(void)=0x801F14B0
Pukupuku::attackSensor(HitSensor*, HitSensor*)=0x801F1580
Pukupuku::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801F1720
Pukupuku::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801F1870
Pukupuku::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801F1940
Pukupuku::calcAndSetBaseMtx(void)=0x801F1A30
PukupukuStateLanding::__dt(void)=0x801F1AA0
Pukupuku::__dt(void)=0x801F1B00
short::(nit_\Pukupuku_cpp)=0x801F1B60
NrvPukupukuStateLanding::PukupukuStateLandingNrvLandingMoveLand::__ct(void)=0x801F1BE0
NrvPukupukuStateLanding::PukupukuStateLandingNrvLandingJumpFromWater::__ct(void)=0x801F1BF0
NrvPukupukuStateLanding::PukupukuStateLandingNrvLandingJumpFromLand::__ct(void)=0x801F1C00
NrvPukupuku::PukupukuNrvWait::__ct(void)=0x801F1C10
NrvPukupuku::PukupukuNrvMoveWater::__ct(void)=0x801F1C20
NrvPukupuku::PukupukuNrvMoveWaterAfterJump::__ct(void)=0x801F1C30
NrvPukupuku::PukupukuNrvMoveWaterAfterJumpAfterPointing::__ct(void)=0x801F1C40
NrvPukupuku::PukupukuNrvLanding::__ct(void)=0x801F1C50
NrvPukupuku::PukupukuNrvTrampled::__ct(void)=0x801F1C60
NrvPukupuku::PukupukuNrvBlownOff::__ct(void)=0x801F1C70
NrvPukupuku::PukupukuNrvEaten::__ct(void)=0x801F1C80
NrvPukupuku::PukupukuNrvBindStarPointer::__ct(void)=0x801F1C90
NrvPukupuku::PukupukuNrvBindStarPointer::execute(Spine*) const=0x801F1CA0
NrvPukupuku::PukupukuNrvEaten::execute(Spine*) const=0x801F1CB0
NrvPukupuku::PukupukuNrvBlownOff::execute(Spine*) const=0x801F1CC0
NrvPukupuku::PukupukuNrvTrampled::execute(Spine*) const=0x801F1CD0
NrvPukupuku::PukupukuNrvLanding::execute(Spine*) const=0x801F1CE0
NrvPukupuku::PukupukuNrvMoveWaterAfterJumpAfterPointing::execute(Spine*) const=0x801F1CF0
NrvPukupuku::PukupukuNrvMoveWaterAfterJump::execute(Spine*) const=0x801F1D00
NrvPukupuku::PukupukuNrvMoveWater::execute(Spine*) const=0x801F1D10
NrvPukupuku::PukupukuNrvWait::execute(Spine*) const=0x801F1D20
NrvPukupukuStateLanding::PukupukuStateLandingNrvLandingJumpFromLand::execute(Spine*) const=0x801F1D30
NrvPukupukuStateLanding::PukupukuStateLandingNrvLandingJumpFromWater::execute(Spine*) const=0x801F1D40
NrvPukupukuStateLanding::PukupukuStateLandingNrvLandingMoveLand::execute(Spine*) const=0x801F1D50
PukupukuWaterSurface::__ct(const char*)=0x801F1D60
PukupukuWaterSurface::init(const JMapInfoIter&)=0x801F1DF0
PukupukuWaterSurface::calcAndSetBaseMtx(void)=0x801F1FC0
PukupukuWaterSurface::kill(void)=0x801F20A0
PukupukuWaterSurface::control(void)=0x801F20E0
PukupukuWaterSurface::attackSensor(HitSensor*, HitSensor*)=0x801F2860
PukupukuWaterSurface::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801F2A60
PukupukuWaterSurface::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x801F2C10
PukupukuWaterSurface::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801F2CE0
PukupukuWaterSurface::__dt(void)=0x801F33F0
short::(nit_\PukupukuWaterSurface_cpp)=0x801F3450
Pyudon::__ct(const char*)=0x801F35B0
Pyudon::init(const JMapInfoIter&)=0x801F3660
Pyudon::makeActorAppeared(void)=0x801F37A0
Pyudon::kill(void)=0x801F37F0
Pyudon::control(void)=0x801F46F0
Pyudon::calcAndSetBaseMtx(void)=0x801F4740
Pyudon::attackSensor(HitSensor*, HitSensor*)=0x801F47A0
Pyudon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801F4930
Pyudon::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801F4A70
Pyudon::receiveMsgPush(HitSensor*, HitSensor*)=0x801F4B90
Pyudon::__dt(void)=0x801F5AF0
short::(nit_\Pyudon_cpp)=0x801F5B50
RingBeamShadowDrawer::__ct(const LiveActor*)=0x801F5E90
RingBeamShadowDrawer::loadModelDrawMtx(void) const=0x801F5EF0
RingBeamShadowDrawer::drawShape(void) const=0x801F5F50
RingBeamShadowDrawer::isDraw(void) const=0x801F64B0
RingBeam::__ct(const char*, LiveActor*, bool, bool, bool, bool, const char*)=0x801F64C0
RingBeam::setSpeed(float)=0x801F6580
RingBeam::setLife(long)=0x801F6590
RingBeam::setColor(float)=0x801F65A0
RingBeam::init(const JMapInfoIter&)=0x801F65B0
RingBeam::initWithParamScale(const JMapInfoIter&, const ActorStateParamScale*)=0x801F67F0
RingBeam::movement(void)=0x801F6840
RingBeam::control(void)=0x801F6880
RingBeam::appear(void)=0x801F6890
RingBeam::kill(void)=0x801F68F0
RingBeam::makeActorDead(void)=0x801F6940
RingBeam::startBrk(const char*)=0x801F6A30
RingBeam::initPos(const LiveActor*)=0x801F6D10
RingBeam::attackSensor(HitSensor*, HitSensor*)=0x801F6E20
RingBeam::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801F6F70
RingBeam::exeSpread(void)=0x801F6F80
RingBeam::__dt(void)=0x801F7460
RingBeamShadowDrawer::__dt(void)=0x801F74C0
short::(nit_\RingBeam_cpp)=0x801F7520
NrvRingBeam::RingBeamNrvSpread::__ct(void)=0x801F7530
NrvRingBeam::RingBeamNrvSpread::execute(Spine*) const=0x801F7540
RingBeamer::__ct(const char*)=0x801F7550
RingBeamer::init(const JMapInfoIter&)=0x801F75A0
RingBeamer::control(void)=0x801F77F0
RingBeamer::isNerveTypeActive(void)=0x801F7850
RingBeamer::syncSwitchOffB(void)=0x801F78C0
RingBeamer::exeWait(void)=0x801F7930
RingBeamer::exeAttack(void)=0x801F79B0
RingBeamer::exeInter(void)=0x801F7B50
RingBeamer::attackSensor(HitSensor*, HitSensor*)=0x801F7BD0
RingBeamer::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801F7C40
RingBeamer::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801F7CD0
MR::FunctorV0M<RingBeamer*,M10RingBeamerFPCvPv_v>::__cl(void) const=0x801F7D20
MR::FunctorV0M<RingBeamer*,M10RingBeamerFPCvPv_v>::clone(JKRHeap*) const=0x801F7D50
RingBeamer::__dt(void)=0x801F7DC0
short::(nit_\RingBeamer_cpp)=0x801F7E20
NrvRingBeamer::RingBeamerNrvWait::__ct(void)=0x801F7E60
NrvRingBeamer::RingBeamerNrvAttack::__ct(void)=0x801F7E70
NrvRingBeamer::RingBeamerNrvInter::__ct(void)=0x801F7E80
NrvRingBeamer::RingBeamerNrvFreeze::__ct(void)=0x801F7E90
NrvRingBeamer::RingBeamerNrvFreeze::execute(Spine*) const=0x801F7EA0
NrvRingBeamer::RingBeamerNrvInter::execute(Spine*) const=0x801F7F00
NrvRingBeamer::RingBeamerNrvAttack::execute(Spine*) const=0x801F7F10
NrvRingBeamer::RingBeamerNrvWait::execute(Spine*) const=0x801F7F20
SamboHead::__ct(const char*)=0x801F7F30
SamboHead::init(const JMapInfoIter&)=0x801F7FB0
SamboHead::appear(void)=0x801F8170
SamboHead::kill(void)=0x801F81B0
SamboHead::control(void)=0x801F8220
SamboHead::exeWaitUnderGround(void)=0x801F82F0
SamboHead::exeHide(void)=0x801F83E0
SamboHead::exeAppear(void)=0x801F8480
SamboHead::exeWait(void)=0x801F8530
SamboHead::exePrePursue(void)=0x801F8660
SamboHead::exePursue(void)=0x801F8720
SamboHead::exePursueEnd(void)=0x801F8830
SamboHead::exeHitToPlayer(void)=0x801F88C0
SamboHead::exeStarPieceHit(void)=0x801F8980
SamboHead::exeStampFall(void)=0x801F8A10
SamboHead::exeStampDeath(void)=0x801F8A90
SamboHead::exeHitBlow(void)=0x801F8B20
SamboHead::exeBuryDeath(void)=0x801F8BD0
SamboHead::exeBindStarPointer(void)=0x801F8C50
SamboHead::exeBindStarPointerEnd(void)=0x801F8CA0
SamboHead::attackSensor(HitSensor*, HitSensor*)=0x801F8D10
SamboHead::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801F8F60
SamboHead::receiveMsgPush(HitSensor*, HitSensor*)=0x801F9120
SamboHead::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801F9210
SamboHead::calcAndSetBaseMtx(void)=0x801F94B0
SamboHead::isNerveTypeDead(void) const=0x801F9510
SamboHead::isStarPointerBindable(void) const=0x801F9590
SamboHead::__dt(void)=0x801F9650
short::(nit_\SamboHead_cpp)=0x801F96B0
NrvSamboHead::HostTypeNrvWaitUnderGround::__ct(void)=0x801F9750
NrvSamboHead::HostTypeNrvHide::__ct(void)=0x801F9760
NrvSamboHead::HostTypeNrvAppear::__ct(void)=0x801F9770
NrvSamboHead::HostTypeNrvAppearImmediately::__ct(void)=0x801F9780
NrvSamboHead::HostTypeNrvWait::__ct(void)=0x801F9790
NrvSamboHead::HostTypeNrvPrePursue::__ct(void)=0x801F97A0
NrvSamboHead::HostTypeNrvPursue::__ct(void)=0x801F97B0
NrvSamboHead::HostTypeNrvPursueEnd::__ct(void)=0x801F97C0
NrvSamboHead::HostTypeNrvHitToPlayer::__ct(void)=0x801F97D0
NrvSamboHead::HostTypeNrvStarPieceHit::__ct(void)=0x801F97E0
NrvSamboHead::HostTypeNrvStampFall::__ct(void)=0x801F97F0
NrvSamboHead::HostTypeNrvStampDeath::__ct(void)=0x801F9800
NrvSamboHead::HostTypeNrvHitBlow::__ct(void)=0x801F9810
NrvSamboHead::HostTypeNrvBuryDeath::__ct(void)=0x801F9820
NrvSamboHead::HostTypeNrvBindStarPointer::__ct(void)=0x801F9830
NrvSamboHead::HostTypeNrvBindStarPointerEnd::__ct(void)=0x801F9840
NrvSamboHead::HostTypeNrvBindStarPointerEnd::execute(Spine*) const=0x801F9850
NrvSamboHead::HostTypeNrvBindStarPointer::execute(Spine*) const=0x801F9860
NrvSamboHead::HostTypeNrvBuryDeath::execute(Spine*) const=0x801F9870
NrvSamboHead::HostTypeNrvHitBlow::executeOnEnd(Spine*) const=0x801F9880
NrvSamboHead::HostTypeNrvHitBlow::execute(Spine*) const=0x801F9890
NrvSamboHead::HostTypeNrvStampDeath::executeOnEnd(Spine*) const=0x801F98A0
NrvSamboHead::HostTypeNrvStampDeath::execute(Spine*) const=0x801F98B0
NrvSamboHead::HostTypeNrvStampFall::executeOnEnd(Spine*) const=0x801F98C0
NrvSamboHead::HostTypeNrvStampFall::execute(Spine*) const=0x801F98D0
NrvSamboHead::HostTypeNrvStarPieceHit::execute(Spine*) const=0x801F98E0
NrvSamboHead::HostTypeNrvHitToPlayer::execute(Spine*) const=0x801F98F0
NrvSamboHead::HostTypeNrvPursueEnd::execute(Spine*) const=0x801F9900
NrvSamboHead::HostTypeNrvPursue::execute(Spine*) const=0x801F9910
NrvSamboHead::HostTypeNrvPrePursue::execute(Spine*) const=0x801F9920
NrvSamboHead::HostTypeNrvWait::execute(Spine*) const=0x801F9930
NrvSamboHead::HostTypeNrvAppearImmediately::execute(Spine*) const=0x801F9940
NrvSamboHead::HostTypeNrvAppear::execute(Spine*) const=0x801F9950
NrvSamboHead::HostTypeNrvHide::execute(Spine*) const=0x801F9960
NrvSamboHead::HostTypeNrvWaitUnderGround::execute(Spine*) const=0x801F9970
SearchBeamer::__ct(const char*)=0x801F9980
SearchBeamer::init(const JMapInfoIter&)=0x801F9A30
MR::createJointController<SearchBeamer>(SearchBeamer*, const char*, M12SearchBeamerFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_b_P15JointController)=0x801F9DE0
SearchBeamer::exeNonActive(void)=0x801F9EC0
SearchBeamer::exeCloseWaitFar(void)=0x801F9F30
SearchBeamer::exeCloseSearch(void)=0x801F9FF0
SearchBeamer::exeCloseWaitNear(void)=0x801FA050
SearchBeamer::exeOpenMouth(void)=0x801FA110
SearchBeamer::exeBeamPrepare(void)=0x801FA1A0
SearchBeamer::exeBeamStart(void)=0x801FA210
SearchBeamer::exeBeamAim(void)=0x801FA340
SearchBeamer::exeCloseMouth(void)=0x801FA4A0
SearchBeamer::exeStopStart(void)=0x801FA5A0
SearchBeamer::exeStop(void)=0x801FA650
SearchBeamer::exeRecover(void)=0x801FA6D0
SearchBeamer::exeDPDSwoon(void)=0x801FA740
SearchBeamer::calcAndSetBaseMtx(void)=0x801FA7C0
SearchBeamer::control(void)=0x801FA830
SearchBeamer::attackSensor(HitSensor*, HitSensor*)=0x801FA890
SearchBeamer::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801FA930
SearchBeamer::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801FAA30
SearchBeamer::updateHitSensor(HitSensor*)=0x801FAB70
SearchBeamer::calcJointPropeller(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801FAC10
SearchBeamer::calcJointBeamStart(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801FAC40
SearchBeamer::calcJointBeamEnd(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801FAC70
SearchBeamer::updatePropeller(void)=0x801FACA0
SearchBeamer::updateBeamEffect(bool)=0x801FAD80
SearchBeamer::updateBeamShadow(void)=0x801FAE20
SearchBeamer::initBeamPos(void)=0x801FAED0
SearchBeamer::reformDirection(bool)=0x801FAF30
SearchBeamer::bowToPlayer(void)=0x801FB000
SearchBeamer::checkBeamDistiny(JGeometry::TVec3<float>*, JGeometry::TVec3<float>) const=0x801FB110
SearchBeamer::isPlayerInTerritory(void) const=0x801FB1A0
SearchBeamer::tryNonActive(void)=0x801FB230
SearchBeamer::tryStopStart(void)=0x801FB280
SearchBeamer::tryDPDSwoon(void)=0x801FB340
SearchBeamer::isEatable(void) const=0x801FB410
JointControlDelegator<SearchBeamer>::__dt(void)=0x801FB440
JointControlDelegator<SearchBeamer>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801FB480
JointControlDelegator<SearchBeamer>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x801FB4F0
SearchBeamer::__dt(void)=0x801FB560
short::(nit_\SearchBeamer_cpp)=0x801FB5C0
NrvSearchBeamer::SearchBeamerNrvNonActive::__ct(void)=0x801FB660
NrvSearchBeamer::SearchBeamerNrvCloseWaitFar::__ct(void)=0x801FB670
NrvSearchBeamer::SearchBeamerNrvCloseSearch::__ct(void)=0x801FB680
NrvSearchBeamer::SearchBeamerNrvCloseWaitNear::__ct(void)=0x801FB690
NrvSearchBeamer::SearchBeamerNrvOpenMouth::__ct(void)=0x801FB6A0
NrvSearchBeamer::SearchBeamerNrvBeamPrepare::__ct(void)=0x801FB6B0
NrvSearchBeamer::SearchBeamerNrvBeamStart::__ct(void)=0x801FB6C0
NrvSearchBeamer::SearchBeamerNrvBeamAim::__ct(void)=0x801FB6D0
NrvSearchBeamer::SearchBeamerNrvCloseMouth::__ct(void)=0x801FB6E0
NrvSearchBeamer::SearchBeamerNrvStopStart::__ct(void)=0x801FB6F0
NrvSearchBeamer::SearchBeamerNrvStop::__ct(void)=0x801FB700
NrvSearchBeamer::SearchBeamerNrvStopForPlayerOff::__ct(void)=0x801FB710
NrvSearchBeamer::SearchBeamerNrvRecover::__ct(void)=0x801FB720
NrvSearchBeamer::SearchBeamerNrvDPDSwoon::__ct(void)=0x801FB730
NrvSearchBeamer::SearchBeamerNrvEaten::__ct(void)=0x801FB740
NrvSearchBeamer::SearchBeamerNrvEaten::execute(Spine*) const=0x801FB750
NrvSearchBeamer::SearchBeamerNrvDPDSwoon::execute(Spine*) const=0x801FB760
NrvSearchBeamer::SearchBeamerNrvRecover::execute(Spine*) const=0x801FB770
NrvSearchBeamer::SearchBeamerNrvStopForPlayerOff::execute(Spine*) const=0x801FB780
NrvSearchBeamer::SearchBeamerNrvStop::execute(Spine*) const=0x801FB7E0
NrvSearchBeamer::SearchBeamerNrvStopStart::execute(Spine*) const=0x801FB7F0
NrvSearchBeamer::SearchBeamerNrvCloseMouth::execute(Spine*) const=0x801FB800
NrvSearchBeamer::SearchBeamerNrvBeamAim::execute(Spine*) const=0x801FB810
NrvSearchBeamer::SearchBeamerNrvBeamStart::execute(Spine*) const=0x801FB820
NrvSearchBeamer::SearchBeamerNrvBeamPrepare::execute(Spine*) const=0x801FB830
NrvSearchBeamer::SearchBeamerNrvOpenMouth::execute(Spine*) const=0x801FB840
NrvSearchBeamer::SearchBeamerNrvCloseWaitNear::execute(Spine*) const=0x801FB850
NrvSearchBeamer::SearchBeamerNrvCloseSearch::execute(Spine*) const=0x801FB860
NrvSearchBeamer::SearchBeamerNrvCloseWaitFar::execute(Spine*) const=0x801FB870
NrvSearchBeamer::SearchBeamerNrvNonActive::executeOnEnd(Spine*) const=0x801FB880
NrvSearchBeamer::SearchBeamerNrvNonActive::execute(Spine*) const=0x801FB8D0
Snakehead::__ct(const char*)=0x801FB8E0
Snakehead::init(const JMapInfoIter&)=0x801FB980
Snakehead::initAfterPlacement(void)=0x801FBEB0
Snakehead::kill(void)=0x801FBF90
Snakehead::control(void)=0x801FC090
Snakehead::calcAndSetBaseMtx(void)=0x801FC1A0
Snakehead::exeWaylay(void)=0x801FC220
Snakehead::exeWait(void)=0x801FC320
Snakehead::exeMoveForward(void)=0x801FC3D0
Snakehead::exeRest(void)=0x801FC4B0
Snakehead::exeMoveBack(void)=0x801FC510
Snakehead::exeTurtleDown(void)=0x801FC5C0
Snakehead::attackSensor(HitSensor*, HitSensor*)=0x801FC6C0
Snakehead::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801FC900
Snakehead::choiceAndStartBck(const char*)=0x801FC9B0
Snakehead::tryDPDSwoon(void)=0x801FCB40
Snakehead::isNearPlayerFromRail(void) const=0x801FCC00
Snakehead::__dt(void)=0x801FCC60
short::(nit_\Snakehead_cpp)=0x801FCCC0
NrvSnakehead::SnakeheadNrvWaylay::__ct(void)=0x801FCD20
NrvSnakehead::SnakeheadNrvWait::__ct(void)=0x801FCD30
NrvSnakehead::SnakeheadNrvMoveForward::__ct(void)=0x801FCD40
NrvSnakehead::SnakeheadNrvRest::__ct(void)=0x801FCD50
NrvSnakehead::SnakeheadNrvMoveBack::__ct(void)=0x801FCD60
NrvSnakehead::SnakeheadNrvTurtleDown::__ct(void)=0x801FCD70
NrvSnakehead::SnakeheadNrvDPDSwoon::__ct(void)=0x801FCD80
NrvSnakehead::SnakeheadNrvDPDSwoon::execute(Spine*) const=0x801FCD90
NrvSnakehead::SnakeheadNrvTurtleDown::execute(Spine*) const=0x801FCDA0
NrvSnakehead::SnakeheadNrvMoveBack::execute(Spine*) const=0x801FCDB0
NrvSnakehead::SnakeheadNrvRest::execute(Spine*) const=0x801FCDC0
NrvSnakehead::SnakeheadNrvMoveForward::execute(Spine*) const=0x801FCDD0
NrvSnakehead::SnakeheadNrvWait::execute(Spine*) const=0x801FCDE0
NrvSnakehead::SnakeheadNrvWaylay::execute(Spine*) const=0x801FCDF0
SpinHitController::__ct(const LiveActor*)=0x801FCE00
SpinHitController::__ct(const LiveActor*, long, long, float, float, float)=0x801FCE50
SpinHitController::setParameter(const LiveActor*, long, long, float, float, float)=0x801FCE80
SpinHitController::start(LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801FCEA0
SpinHitController::startWithoutStopScene(LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x801FCF70
SpinHitController::execute(LiveActor*)=0x801FCFB0
StinkBugBase::__ct(const char*)=0x801FD0C0
StinkBugBase::init(const JMapInfoIter&)=0x801FD140
StinkBugBase::setDashVelocity(float)=0x801FD230
StinkBugBase::tryTurnSearch(float)=0x801FD2B0
StinkBugBase::tryTurnDashSign(float)=0x801FD350
StinkBugBase::fixInitPos(void)=0x801FD3C0
StinkBugBase::isPlayerInTerritory(float, float, float, float) const=0x801FD3E0
StinkBugBase::isHitHorn(HitSensor*, HitSensor*, float) const=0x801FD5E0
StinkBugBase::__dt(void)=0x801FD6D0
@unnamed@StinkBugParent_cpp@::getParam(bool)=0x801FD730
StinkBugParent::__ct(const char*)=0x801FD750
StinkBugParent::init(const JMapInfoIter&)=0x801FD7B0
StinkBugParent::exeWait(void)=0x801FDA00
StinkBugParent::exeSearch(void)=0x801FDAB0
StinkBugParent::exeDashSign(void)=0x801FDB70
StinkBugParent::exeDash(void)=0x801FDC20
StinkBugParent::exeDashEnd(void)=0x801FDCE0
StinkBugParent::exeBack(void)=0x801FDD50
StinkBugParent::exeHipDropDown(void)=0x801FDE40
StinkBugParent::exeAttack(void)=0x801FDF10
StinkBugParent::exeSpinReaction(void)=0x801FDF80
StinkBugParent::exePanic(void)=0x801FE010
StinkBugParent::exeRecover(void)=0x801FE100
StinkBugParent::exeFreeze(void)=0x801FE170
StinkBugParent::exeShakeStart(void)=0x801FE220
StinkBugParent::exeDemoChildDown(void)=0x801FE290
StinkBugParent::exeDemoAnger(void)=0x801FE3C0
StinkBugParent::appear(void)=0x801FE560
StinkBugParent::kill(void)=0x801FE5A0
StinkBugParent::control(void)=0x801FE600
StinkBugParent::calcAndSetBaseMtx(void)=0x801FE6E0
StinkBugParent::attackSensor(HitSensor*, HitSensor*)=0x801FE740
StinkBugParent::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x801FE8D0
StinkBugParent::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x801FEAA0
StinkBugParent::jumpBackPlayerFromChild(void) const=0x801FEC00
StinkBugParent::isShakeChance(void) const=0x801FECA0
StinkBugParent::isHitChild(void) const=0x801FEE90
StinkBugParent::isNrvEnableStarPieceAttack(void) const=0x801FEF40
StinkBugParent::__dt(void)=0x801FEFE0
short::(nit_\StinkBugParent_cpp)=0x801FF040
NrvStinkBugParent::StinkBugParentNrvAppearFall::__ct(void)=0x801FF100
NrvStinkBugParent::StinkBugParentNrvWait::__ct(void)=0x801FF110
NrvStinkBugParent::StinkBugParentNrvSearch::__ct(void)=0x801FF120
NrvStinkBugParent::StinkBugParentNrvDashSign::__ct(void)=0x801FF130
NrvStinkBugParent::StinkBugParentNrvDashSignEnd::__ct(void)=0x801FF140
NrvStinkBugParent::StinkBugParentNrvDash::__ct(void)=0x801FF150
NrvStinkBugParent::StinkBugParentNrvDashEnd::__ct(void)=0x801FF160
NrvStinkBugParent::StinkBugParentNrvBack::__ct(void)=0x801FF170
NrvStinkBugParent::StinkBugParentNrvHipDropDown::__ct(void)=0x801FF180
NrvStinkBugParent::StinkBugParentNrvAttack::__ct(void)=0x801FF190
NrvStinkBugParent::StinkBugParentNrvSpinReaction::__ct(void)=0x801FF1A0
NrvStinkBugParent::StinkBugParentNrvPanic::__ct(void)=0x801FF1B0
NrvStinkBugParent::StinkBugParentNrvShakeStart::__ct(void)=0x801FF1C0
NrvStinkBugParent::StinkBugParentNrvShake::__ct(void)=0x801FF1D0
NrvStinkBugParent::StinkBugParentNrvRecover::__ct(void)=0x801FF1E0
NrvStinkBugParent::StinkBugParentNrvFreeze::__ct(void)=0x801FF1F0
NrvStinkBugParent::StinkBugParentNrvDemoPrepare::__ct(void)=0x801FF200
NrvStinkBugParent::StinkBugParentNrvDemoChildDown::__ct(void)=0x801FF210
NrvStinkBugParent::StinkBugParentNrvDemoAnger::__ct(void)=0x801FF220
NrvStinkBugParent::StinkBugParentNrvDemoAnger::execute(Spine*) const=0x801FF230
NrvStinkBugParent::StinkBugParentNrvDemoChildDown::execute(Spine*) const=0x801FF240
NrvStinkBugParent::StinkBugParentNrvDemoPrepare::execute(Spine*) const=0x801FF250
NrvStinkBugParent::StinkBugParentNrvFreeze::execute(Spine*) const=0x801FF2A0
NrvStinkBugParent::StinkBugParentNrvRecover::execute(Spine*) const=0x801FF2B0
NrvStinkBugParent::StinkBugParentNrvShake::execute(Spine*) const=0x801FF2C0
NrvStinkBugParent::StinkBugParentNrvShakeStart::execute(Spine*) const=0x801FF310
NrvStinkBugParent::StinkBugParentNrvPanic::execute(Spine*) const=0x801FF320
NrvStinkBugParent::StinkBugParentNrvSpinReaction::execute(Spine*) const=0x801FF330
NrvStinkBugParent::StinkBugParentNrvAttack::execute(Spine*) const=0x801FF340
NrvStinkBugParent::StinkBugParentNrvHipDropDown::execute(Spine*) const=0x801FF350
NrvStinkBugParent::StinkBugParentNrvBack::execute(Spine*) const=0x801FF360
NrvStinkBugParent::StinkBugParentNrvDashEnd::execute(Spine*) const=0x801FF370
NrvStinkBugParent::StinkBugParentNrvDash::execute(Spine*) const=0x801FF380
NrvStinkBugParent::StinkBugParentNrvDashSignEnd::execute(Spine*) const=0x801FF390
NrvStinkBugParent::StinkBugParentNrvDashSign::execute(Spine*) const=0x801FF3E0
NrvStinkBugParent::StinkBugParentNrvSearch::execute(Spine*) const=0x801FF3F0
NrvStinkBugParent::StinkBugParentNrvWait::execute(Spine*) const=0x801FF400
NrvStinkBugParent::StinkBugParentNrvAppearFall::execute(Spine*) const=0x801FF410
StinkBugSmall::__ct(const char*)=0x801FF460
StinkBugSmall::init(const JMapInfoIter&)=0x801FF4B0
StinkBugSmall::exeWait(void)=0x801FF710
StinkBugSmall::exeSearch(void)=0x801FF7D0
StinkBugSmall::exeDashSign(void)=0x801FF870
StinkBugSmall::exeDash(void)=0x801FF920
StinkBugSmall::exeDashEnd(void)=0x801FFA00
StinkBugSmall::exeBack(void)=0x801FFA70
StinkBugSmall::exeHipDropDown(void)=0x801FFB60
StinkBugSmall::exeAttack(void)=0x801FFC50
StinkBugSmall::exeSpinReaction(void)=0x801FFCC0
StinkBugSmall::exeShakeStart(void)=0x801FFD50
StinkBugSmall::exePanic(void)=0x801FFDC0
StinkBugSmall::exeRecover(void)=0x801FFEA0
StinkBugSmall::exeDPDSwoon(void)=0x801FFF10
StinkBugSmall::exeForceFall(void)=0x801FFF90
StinkBugSmall::kill(void)=0x80200000
StinkBugSmall::initAfterPlacement(void)=0x80200090
StinkBugSmall::control(void)=0x80200140
StinkBugSmall::calcAndSetBaseMtx(void)=0x802002E0
StinkBugSmall::attackSensor(HitSensor*, HitSensor*)=0x80200360
StinkBugSmall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802004B0
StinkBugSmall::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80200680
StinkBugSmall::tryDPDSwoon(void)=0x80200800
StinkBugSmall::tryForceFall(void)=0x80200890
StinkBugSmall::isShakeChance(void) const=0x80200940
StinkBugSmall::isNrvEnableStarPieceAttack(void) const=0x802009C0
StinkBugSmall::__dt(void)=0x80200A60
short::(nit_\StinkBugSmall_cpp)=0x80200AC0
NrvStinkBugSmall::StinkBugSmallNrvWait::__ct(void)=0x80200B60
NrvStinkBugSmall::StinkBugSmallNrvSearch::__ct(void)=0x80200B70
NrvStinkBugSmall::StinkBugSmallNrvDashSign::__ct(void)=0x80200B80
NrvStinkBugSmall::StinkBugSmallNrvDashSignEnd::__ct(void)=0x80200B90
NrvStinkBugSmall::StinkBugSmallNrvDash::__ct(void)=0x80200BA0
NrvStinkBugSmall::StinkBugSmallNrvDashEnd::__ct(void)=0x80200BB0
NrvStinkBugSmall::StinkBugSmallNrvBack::__ct(void)=0x80200BC0
NrvStinkBugSmall::StinkBugSmallNrvHipDropDown::__ct(void)=0x80200BD0
NrvStinkBugSmall::StinkBugSmallNrvAttack::__ct(void)=0x80200BE0
NrvStinkBugSmall::StinkBugSmallNrvSpinReaction::__ct(void)=0x80200BF0
NrvStinkBugSmall::StinkBugSmallNrvShakeStart::__ct(void)=0x80200C00
NrvStinkBugSmall::StinkBugSmallNrvShake::__ct(void)=0x80200C10
NrvStinkBugSmall::StinkBugSmallNrvPanic::__ct(void)=0x80200C20
NrvStinkBugSmall::StinkBugSmallNrvRecover::__ct(void)=0x80200C30
NrvStinkBugSmall::StinkBugSmallNrvDPDSwoon::__ct(void)=0x80200C40
NrvStinkBugSmall::StinkBugSmallNrvForceFall::__ct(void)=0x80200C50
NrvStinkBugSmall::StinkBugSmallNrvForceFall::execute(Spine*) const=0x80200C60
NrvStinkBugSmall::StinkBugSmallNrvDPDSwoon::execute(Spine*) const=0x80200C70
NrvStinkBugSmall::StinkBugSmallNrvRecover::execute(Spine*) const=0x80200C80
NrvStinkBugSmall::StinkBugSmallNrvPanic::execute(Spine*) const=0x80200C90
NrvStinkBugSmall::StinkBugSmallNrvShake::execute(Spine*) const=0x80200CA0
NrvStinkBugSmall::StinkBugSmallNrvShakeStart::execute(Spine*) const=0x80200CF0
NrvStinkBugSmall::StinkBugSmallNrvSpinReaction::execute(Spine*) const=0x80200D00
NrvStinkBugSmall::StinkBugSmallNrvAttack::execute(Spine*) const=0x80200D10
NrvStinkBugSmall::StinkBugSmallNrvHipDropDown::execute(Spine*) const=0x80200D20
NrvStinkBugSmall::StinkBugSmallNrvBack::execute(Spine*) const=0x80200D30
NrvStinkBugSmall::StinkBugSmallNrvDashEnd::execute(Spine*) const=0x80200D40
NrvStinkBugSmall::StinkBugSmallNrvDash::execute(Spine*) const=0x80200D50
NrvStinkBugSmall::StinkBugSmallNrvDashSignEnd::execute(Spine*) const=0x80200D60
NrvStinkBugSmall::StinkBugSmallNrvDashSign::execute(Spine*) const=0x80200DB0
NrvStinkBugSmall::StinkBugSmallNrvSearch::execute(Spine*) const=0x80200DC0
NrvStinkBugSmall::StinkBugSmallNrvWait::execute(Spine*) const=0x80200DD0
StringSpider::__ct(const char*)=0x80200DE0
StringSpider::init(const JMapInfoIter&)=0x80200E80
StringSpider::initAfterPlacement(void)=0x802010D0
StringSpider::kill(void)=0x802011B0
StringSpider::makeActorDead(void)=0x80201210
StringSpider::startClipped(void)=0x80201250
StringSpider::endClipped(void)=0x802012A0
StringSpider::doSwingAction(float, bool)=0x802012F0
StringSpider::reactStringForce(void)=0x802014A0
StringSpider::isOverStringLength(JGeometry::TVec3<float>*, float*)=0x80201560
StringSpider::control(void)=0x802015F0
StringSpider::calcToRootVector(void)=0x80201720
StringSpider::calcPosture(float, bool)=0x80201770
StringSpider::exeWait(void)=0x80201900
StringSpider::exeDownStart(void)=0x802019B0
StringSpider::exeDownEnd(void)=0x80201A30
StringSpider::exeDown(void)=0x80201AB0
StringSpider::exeUp(void)=0x80201BA0
StringSpider::exeSearch(void)=0x80201C60
StringSpider::exeAttack(void)=0x80201D50
StringSpider::exeHit(void)=0x80201DE0
StringSpider::exeSpinned(void)=0x80201F50
StringSpider::exeBlow(void)=0x80202010
StringSpider::extendString(void)=0x802020B0
StringSpider::shortenString(float)=0x80202100
StringSpider::calcAndSetBaseMtx(void)=0x80202150
StringSpider::calcAnim(void)=0x802021D0
StringSpider::attackSensor(HitSensor*, HitSensor*)=0x80202210
StringSpider::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802023F0
StringSpider::receiveMsgPush(HitSensor*, HitSensor*)=0x80202540
StringSpider::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80202670
StringSpider::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802028C0
StringSpider::startSwingLevelSound(void)=0x80202A60
StringSpider::isEatable(float) const=0x80202BB0
StringSpider::isDamaging(float) const=0x80202C60
StringSpiderString::__ct(const char*)=0x80202E90
StringSpiderString::calcAndSetBaseMtx(void)=0x80202F30
StringSpider::__dt(void)=0x802030F0
StringSpiderString::__dt(void)=0x80203150
short::(nit_\StringSpider_cpp)=0x802031B0
NrvStringSpider::HostTypeNrvWait::__ct(void)=0x80203230
NrvStringSpider::HostTypeNrvDownStart::__ct(void)=0x80203240
NrvStringSpider::HostTypeNrvDownEnd::__ct(void)=0x80203250
NrvStringSpider::HostTypeNrvDown::__ct(void)=0x80203260
NrvStringSpider::HostTypeNrvUp::__ct(void)=0x80203270
NrvStringSpider::HostTypeNrvSearch::__ct(void)=0x80203280
NrvStringSpider::HostTypeNrvAttack::__ct(void)=0x80203290
NrvStringSpider::HostTypeNrvHit::__ct(void)=0x802032A0
NrvStringSpider::HostTypeNrvSpinned::__ct(void)=0x802032B0
NrvStringSpider::HostTypeNrvBlow::__ct(void)=0x802032C0
NrvStringSpider::HostTypeNrvEaten::__ct(void)=0x802032D0
NrvStringSpider::HostTypeNrvDpdGripped::__ct(void)=0x802032E0
NrvStringSpider::HostTypeNrvDpdGripped::executeOnEnd(Spine*) const=0x802032F0
NrvStringSpider::HostTypeNrvEaten::execute(Spine*) const=0x80203300
NrvStringSpider::HostTypeNrvBlow::execute(Spine*) const=0x80203310
NrvStringSpider::HostTypeNrvSpinned::execute(Spine*) const=0x80203320
NrvStringSpider::HostTypeNrvHit::execute(Spine*) const=0x80203330
NrvStringSpider::HostTypeNrvAttack::execute(Spine*) const=0x80203340
NrvStringSpider::HostTypeNrvSearch::execute(Spine*) const=0x80203350
NrvStringSpider::HostTypeNrvUp::execute(Spine*) const=0x80203360
NrvStringSpider::HostTypeNrvDown::execute(Spine*) const=0x80203370
NrvStringSpider::HostTypeNrvDownEnd::execute(Spine*) const=0x80203380
NrvStringSpider::HostTypeNrvDownStart::execute(Spine*) const=0x80203390
NrvStringSpider::HostTypeNrvWait::executeOnEnd(Spine*) const=0x802033A0
NrvStringSpider::HostTypeNrvWait::execute(Spine*) const=0x802033B0
SupportTicoStop::__ct(LiveActor*, AnimScaleParam*)=0x802033C0
SupportTicoStop::__dt(void)=0x80203740
short::(nit_\SupportTicoStop_cpp)=0x802037A0
Takobo::__ct(const char*)=0x802038F0
Takobo::init(const JMapInfoIter&)=0x802039A0
Takobo::initAfterPlacement(void)=0x80203D00
Takobo::makeActorAppeared(void)=0x80203DB0
Takobo::kill(void)=0x80203DF0
Takobo::control(void)=0x80203E30
Takobo::exeHitPunch(void)=0x80204430
Takobo::exePress(void)=0x802044C0
Takobo::exeHitReaction(void)=0x80204550
Takobo::exeStunEnd(void)=0x80204680
Takobo::attackSensor(HitSensor*, HitSensor*)=0x80204C80
Takobo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80204E80
Takobo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80204FB0
Takobo::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802050B0
Takobo::calcAndSetBaseMtx(void)=0x80205180
Takobo::__dt(void)=0x802052A0
short::(nit_\Takobo_cpp)=0x80205300
TakoboInk::__ct(const char*)=0x80205550
TakoboInk::init(const JMapInfoIter&)=0x80205590
TakoboInk::kill(void)=0x80205600
TakoboInk::control(void)=0x80205650
TakoboInk::start(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x80205660
TakoboInk::attackSensor(HitSensor*, HitSensor*)=0x802056F0
TakoboInk::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802057A0
TakoboInk::exeWait(void)=0x80205830
TakoboInk::__dt(void)=0x80205900
short::(nit_\TakoboInk_cpp)=0x80205960
NrvTakoboInk::TakoboInkNrvWait::__ct(void)=0x80205970
NrvTakoboInk::TakoboInkNrvWait::execute(Spine*) const=0x80205980
TakoboInkHolder::__ct(void)=0x80205990
TakoboInkHolder::spurtTakoboInk(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80205A90
TakoboInkHolder::__dt(void)=0x80205B10
TakoHei::__ct(const char*)=0x80205B70
TakoHei::init(const JMapInfoIter&)=0x80205C60
TakoHei::initAfterPlacement(void)=0x80205D90
TakoHei::kill(void)=0x80205DE0
TakoHei::control(void)=0x80205E50
TakoHei::calcAndSetBaseMtx(void)=0x80205F40
TakoHei::attackSensor(HitSensor*, HitSensor*)=0x80205F80
TakoHei::receiveMsgPush(HitSensor*, HitSensor*)=0x802060F0
TakoHei::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80206220
TakoHei::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80206380
TakoHei::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80206420
TakoHei::requestPressDown(void)=0x80206570
TakoHei::requestHipDropDown(void)=0x802065D0
TakoHei::requestFlatDown(void)=0x80206630
TakoHei::requestSwoon(void)=0x80206690
TakoHei::requestPunch(HitSensor*, HitSensor*)=0x802066E0
TakoHei::requestAttackSuccess(HitSensor*, HitSensor*)=0x80206780
TakoHei::tryActive(void)=0x80206810
TakoHei::tryNonActive(void)=0x80206860
TakoHei::tryWalk(void)=0x802068E0
TakoHei::tryWalkEnd(void)=0x80206930
TakoHei::tryFindTurn(void)=0x80206A10
TakoHei::tryFind(void)=0x80206A60
TakoHei::tryPursue(void)=0x80206AB0
TakoHei::tryPursueEnd(void)=0x80206B00
TakoHei::tryAttack(void)=0x80206B80
TakoHei::tryCoolDownEnd(void)=0x80206C00
TakoHei::tryAttackSuccessEnd(void)=0x80206C70
TakoHei::tryPointBind(void)=0x80206CC0
TakoHei::tryRecover(void)=0x80206D10
TakoHei::tryRecoverEnd(void)=0x80206D60
TakoHei::tryPressed(void)=0x80206DB0
TakoHei::exeNonActive(void)=0x80206E10
TakoHei::exeWait(void)=0x80206ED0
TakoHei::exeWalk(void)=0x80206FC0
TakoHei::exeFindTurn(void)=0x802070E0
TakoHei::exeFind(void)=0x802071B0
TakoHei::exePursue(void)=0x80207240
TakoHei::exeCoolDown(void)=0x802073A0
TakoHei::exeAttackSign(void)=0x80207450
TakoHei::exeAttack(void)=0x80207570
TakoHei::exeAttackSuccess(void)=0x802076B0
TakoHei::exeSwoon(void)=0x80207730
TakoHei::exeRecover(void)=0x80207820
TakoHei::exePressDown(void)=0x802078B0
TakoHei::exeHipDropDown(void)=0x80207960
TakoHei::exeFlatDown(void)=0x80207A10
TakoHei::exePunchDown(void)=0x80207AC0
TakoHei::updatePose(void)=0x80207BC0
TakoHei::updateNormalVelocity(void)=0x80207C40
TakoHei::decideNextTargetPos(void)=0x80207CC0
TakoHei::canAttack(void) const=0x80207D30
TakoHei::isPushMovable(void) const=0x80207DE0
TakoHei::isEnableKick(void) const=0x80207EA0
TakoHei::isDown(void) const=0x80207EB0
TakoHei::isFallNextMove(void) const=0x80207F30
TakoHei::isInSightMario(void) const=0x80207FB0
TakoHei::__dt(void)=0x80208090
short::(nit_\TakoHei_cpp)=0x802080F0
NrvTakoHei::TakoHeiNrvNonActive::__ct(void)=0x802081C0
NrvTakoHei::TakoHeiNrvWait::__ct(void)=0x802081D0
NrvTakoHei::TakoHeiNrvWalk::__ct(void)=0x802081E0
NrvTakoHei::TakoHeiNrvFindTurn::__ct(void)=0x802081F0
NrvTakoHei::TakoHeiNrvFind::__ct(void)=0x80208200
NrvTakoHei::TakoHeiNrvPursue::__ct(void)=0x80208210
NrvTakoHei::TakoHeiNrvCoolDown::__ct(void)=0x80208220
NrvTakoHei::TakoHeiNrvAttackSign::__ct(void)=0x80208230
NrvTakoHei::TakoHeiNrvAttack::__ct(void)=0x80208240
NrvTakoHei::TakoHeiNrvAttackSuccess::__ct(void)=0x80208250
NrvTakoHei::TakoHeiNrvBindStarPointer::__ct(void)=0x80208260
NrvTakoHei::TakoHeiNrvSwoon::__ct(void)=0x80208270
NrvTakoHei::TakoHeiNrvRecover::__ct(void)=0x80208280
NrvTakoHei::TakoHeiNrvPressDown::__ct(void)=0x80208290
NrvTakoHei::TakoHeiNrvHipDropDown::__ct(void)=0x802082A0
NrvTakoHei::TakoHeiNrvFlatDown::__ct(void)=0x802082B0
NrvTakoHei::TakoHeiNrvPunchDown::__ct(void)=0x802082C0
NrvTakoHei::TakoHeiNrvDown::__ct(void)=0x802082D0
NrvTakoHei::TakoHeiNrvDown::execute(Spine*) const=0x802082E0
NrvTakoHei::TakoHeiNrvPunchDown::execute(Spine*) const=0x802082F0
NrvTakoHei::TakoHeiNrvFlatDown::execute(Spine*) const=0x80208300
NrvTakoHei::TakoHeiNrvHipDropDown::execute(Spine*) const=0x80208310
NrvTakoHei::TakoHeiNrvPressDown::execute(Spine*) const=0x80208320
NrvTakoHei::TakoHeiNrvRecover::execute(Spine*) const=0x80208330
NrvTakoHei::TakoHeiNrvSwoon::execute(Spine*) const=0x80208340
NrvTakoHei::TakoHeiNrvBindStarPointer::execute(Spine*) const=0x80208350
NrvTakoHei::TakoHeiNrvAttackSuccess::execute(Spine*) const=0x80208360
NrvTakoHei::TakoHeiNrvAttack::execute(Spine*) const=0x80208370
NrvTakoHei::TakoHeiNrvAttackSign::execute(Spine*) const=0x80208380
NrvTakoHei::TakoHeiNrvCoolDown::execute(Spine*) const=0x80208390
NrvTakoHei::TakoHeiNrvPursue::execute(Spine*) const=0x802083A0
NrvTakoHei::TakoHeiNrvFind::execute(Spine*) const=0x802083B0
NrvTakoHei::TakoHeiNrvFindTurn::execute(Spine*) const=0x802083C0
NrvTakoHei::TakoHeiNrvWalk::execute(Spine*) const=0x802083D0
NrvTakoHei::TakoHeiNrvWait::execute(Spine*) const=0x802083E0
NrvTakoHei::TakoHeiNrvNonActive::execute(Spine*) const=0x802083F0
TakoHeiInk::__ct(const char*)=0x80208400
TakoHeiInk::init(const JMapInfoIter&)=0x80208440
TakoHeiInk::kill(void)=0x802084B0
TakoHeiInk::control(void)=0x80208500
TakoHeiInk::start(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x80208510
TakoHeiInk::attackSensor(HitSensor*, HitSensor*)=0x802085A0
TakoHeiInk::exeWait(void)=0x80208610
TakoHeiInk::__dt(void)=0x802086E0
short::(nit_\TakoHeiInk_cpp)=0x80208740
NrvTakoHeiInk::TakoHeiInkNrvWait::__ct(void)=0x80208750
NrvTakoHeiInk::TakoHeiInkNrvWait::execute(Spine*) const=0x80208760
TakoHeiInkHolder::__ct(void)=0x80208770
DeriveActorGroup<TakoHeiInk>::__dt(void)=0x80208810
MR::createTakoHeiInkHolder(void)=0x80208870
MR::spurtTakoHeiInk(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80208880
TakoHeiInkHolder::__dt(void)=0x80208910
TakoSho::__ct(const char*)=0x80208A20
TakoSho::init(const JMapInfoIter&)=0x80208AD0
TakoSho::initAfterPlacement(void)=0x80208DD0
TakoSho::kill(void)=0x80208E70
TakoSho::control(void)=0x80208EB0
TakoSho::attackSensor(HitSensor*, HitSensor*)=0x80209E00
TakoSho::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8020A020
TakoSho::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8020A150
TakoSho::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8020A250
TakoSho::calcAndSetBaseMtx(void)=0x8020A320
TakoSho::__dt(void)=0x8020A440
short::(nit_\TakoSho_cpp)=0x8020A4A0
Terebo::__ct(const char*)=0x8020A6F0
Terebo::init(const JMapInfoIter&)=0x8020A780
Terebo::makeActorAppeared(void)=0x8020A930
Terebo::control(void)=0x8020A9F0
Terebo::calcAndSetBaseMtx(void)=0x8020AF40
Terebo::attackSensor(HitSensor*, HitSensor*)=0x8020AF90
Terebo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8020B080
Terebo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8020B160
TereboGroup::__ct(const char*)=0x8020B8E0
TereboGroup::init(const JMapInfoIter&)=0x8020B920
Terebo::__dt(void)=0x8020BB40
TereboGroup::__dt(void)=0x8020BBA0
short::(nit_\Terebo_cpp)=0x8020BC00
Teresa::__ct(const char*)=0x8020BD90
Teresa::init(const JMapInfoIter&)=0x8020BEB0
Teresa::initDummyModel(const JMapInfoIter&)=0x8020C0C0
Teresa::initFromJMapParam(const JMapInfoIter&)=0x8020C1C0
Teresa::makeActorAppeared(void)=0x8020C250
Teresa::appear(void)=0x8020C290
Teresa::kill(void)=0x8020C340
Teresa::control(void)=0x8020C3D0
Teresa::calcAndSetBaseMtx(void)=0x8020C4D0
Teresa::attackSensor(HitSensor*, HitSensor*)=0x8020C540
Teresa::receiveMsgPush(HitSensor*, HitSensor*)=0x8020C5F0
Teresa::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8020C6B0
Teresa::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8020C770
Teresa::filterBind(const Triangle*)=0x8020C820
Teresa::requestAttack(HitSensor*, HitSensor*)=0x8020C8C0
Teresa::requestDrift(void)=0x8020C970
Teresa::requestLoveHit(HitSensor*, HitSensor*)=0x8020C9C0
Teresa::requestSearchLightDead(void)=0x8020CA40
Teresa::setStartNerve(void)=0x8020CA90
Teresa::tryAppearFromWallEnd(void)=0x8020CB10
Teresa::tryAppearFromGroundEnd(void)=0x8020CB60
Teresa::tryRailTurn(void)=0x8020CBB0
Teresa::tryRailTurnEnd(void)=0x8020CC10
Teresa::tryWalk(void)=0x8020CC60
Teresa::tryWalkEnd(void)=0x8020CD30
Teresa::tryChase(void)=0x8020CDA0
Teresa::tryCheseEnd(void)=0x8020CE50
Teresa::tryFreeze(void)=0x8020CEC0
Teresa::tryShay(void)=0x8020CF10
Teresa::tryShayEnd(void)=0x8020CFB0
Teresa::tryLoveFind(void)=0x8020D070
Teresa::tryLoveEnd(void)=0x8020D0D0
Teresa::tryLoveFindEnd(void)=0x8020D130
Teresa::tryLoveChaseEnd(void)=0x8020D180
Teresa::tryLoveHitEnd(void)=0x8020D1D0
Teresa::tryAggressiveEnd(void)=0x8020D220
Teresa::tryAttackSuccessEnd(void)=0x8020D270
Teresa::tryDriftEnd(void)=0x8020D2C0
Teresa::tryHideWater(void)=0x8020D310
Teresa::tryHideWall(void)=0x8020D3F0
Teresa::tryHideWallEnd(void)=0x8020D4B0
Teresa::tryAscension(void)=0x8020D520
Teresa::endAppear(void)=0x8020D590
Teresa::exeAppearFromWall(void)=0x8020D5F0
Teresa::exeAppearFromGround(void)=0x8020D760
Teresa::exeWait(void)=0x8020D8D0
Teresa::exeWalk(void)=0x8020D9A0
Teresa::exeRailWalk(void)=0x8020DA70
Teresa::exeRailTurn(void)=0x8020DB90
Teresa::exeLoveFind(void)=0x8020DC60
Teresa::exeLoveChase(void)=0x8020DD60
Teresa::exeLoveHit(void)=0x8020DE40
Teresa::exeLoveEnd(void)=0x8020DF10
Teresa::exeChase(void)=0x8020DFA0
Teresa::exeShay(void)=0x8020E0B0
Teresa::exeAggressive(void)=0x8020E180
Teresa::exeAttackSuccess(void)=0x8020E230
Teresa::exeDrift(void)=0x8020E300
Teresa::exeHideWall(void)=0x8020E410
Teresa::exeHideWater(void)=0x8020E470
Teresa::exeAscension(void)=0x8020E510
Teresa::exeStop(void)=0x8020E5B0
Teresa::updateNormalVelocity(void)=0x8020E690
Teresa::addDriftVelocity(void)=0x8020E710
Teresa::updateDriftAnimScale(void)=0x8020E790
Teresa::updateDriftTransparency(void)=0x8020E850
Teresa::updateNormalTransparency(void)=0x8020E8E0
Teresa::setTransparency(float)=0x8020E970
Teresa::canAttack(void) const=0x8020EA10
Teresa::canDrift(void) const=0x8020EAD0
Teresa::canSearchLightDead(void) const=0x8020EB40
Teresa::isEnableStarPieceStop(void) const=0x8020EBF0
Teresa::isCheckWater(void) const=0x8020ECC0
Teresa::isEatable(void) const=0x8020ED70
Teresa::isFreeze(void) const=0x8020EE40
Teresa::isShay(void) const=0x8020EE50
TriangleFilterDelegator<Teresa>::isInvalidTriangle(const Triangle*) const=0x8020EEC0
Teresa::__dt(void)=0x8020EEF0
short::(nit_\Teresa_cpp)=0x8020EF50
NrvTeresa::TeresaNrvAppearFromWall::__ct(void)=0x8020F030
NrvTeresa::TeresaNrvAppearFromGround::__ct(void)=0x8020F040
NrvTeresa::TeresaNrvWait::__ct(void)=0x8020F050
NrvTeresa::TeresaNrvWalk::__ct(void)=0x8020F060
NrvTeresa::TeresaNrvRailWalk::__ct(void)=0x8020F070
NrvTeresa::TeresaNrvRailTurn::__ct(void)=0x8020F080
NrvTeresa::TeresaNrvLoveFind::__ct(void)=0x8020F090
NrvTeresa::TeresaNrvLoveChase::__ct(void)=0x8020F0A0
NrvTeresa::TeresaNrvLoveHit::__ct(void)=0x8020F0B0
NrvTeresa::TeresaNrvLoveEnd::__ct(void)=0x8020F0C0
NrvTeresa::TeresaNrvChase::__ct(void)=0x8020F0D0
NrvTeresa::TeresaNrvShay::__ct(void)=0x8020F0E0
NrvTeresa::TeresaNrvAggressive::__ct(void)=0x8020F0F0
NrvTeresa::TeresaNrvAttackSuccess::__ct(void)=0x8020F100
NrvTeresa::TeresaNrvDrift::__ct(void)=0x8020F110
NrvTeresa::TeresaNrvHideWall::__ct(void)=0x8020F120
NrvTeresa::TeresaNrvHideWater::__ct(void)=0x8020F130
NrvTeresa::TeresaNrvAscension::__ct(void)=0x8020F140
NrvTeresa::TeresaNrvStop::__ct(void)=0x8020F150
NrvTeresa::TeresaNrvEaten::__ct(void)=0x8020F160
NrvTeresa::TeresaNrvFreeze::__ct(void)=0x8020F170
NrvTeresa::TeresaNrvFreeze::execute(Spine*) const=0x8020F180
NrvTeresa::TeresaNrvEaten::execute(Spine*) const=0x8020F1C0
NrvTeresa::TeresaNrvStop::execute(Spine*) const=0x8020F1D0
NrvTeresa::TeresaNrvAscension::execute(Spine*) const=0x8020F1E0
NrvTeresa::TeresaNrvHideWater::execute(Spine*) const=0x8020F1F0
NrvTeresa::TeresaNrvHideWall::execute(Spine*) const=0x8020F200
NrvTeresa::TeresaNrvDrift::executeOnEnd(Spine*) const=0x8020F210
NrvTeresa::TeresaNrvDrift::execute(Spine*) const=0x8020F270
NrvTeresa::TeresaNrvAttackSuccess::execute(Spine*) const=0x8020F280
NrvTeresa::TeresaNrvAggressive::execute(Spine*) const=0x8020F290
NrvTeresa::TeresaNrvShay::execute(Spine*) const=0x8020F2A0
NrvTeresa::TeresaNrvChase::execute(Spine*) const=0x8020F2B0
NrvTeresa::TeresaNrvLoveEnd::execute(Spine*) const=0x8020F2C0
NrvTeresa::TeresaNrvLoveHit::execute(Spine*) const=0x8020F2D0
NrvTeresa::TeresaNrvLoveChase::execute(Spine*) const=0x8020F2E0
NrvTeresa::TeresaNrvLoveFind::execute(Spine*) const=0x8020F2F0
NrvTeresa::TeresaNrvRailTurn::execute(Spine*) const=0x8020F300
NrvTeresa::TeresaNrvRailWalk::execute(Spine*) const=0x8020F310
NrvTeresa::TeresaNrvWalk::execute(Spine*) const=0x8020F320
NrvTeresa::TeresaNrvWait::execute(Spine*) const=0x8020F330
NrvTeresa::TeresaNrvAppearFromGround::executeOnEnd(Spine*) const=0x8020F340
NrvTeresa::TeresaNrvAppearFromGround::execute(Spine*) const=0x8020F350
NrvTeresa::TeresaNrvAppearFromWall::executeOnEnd(Spine*) const=0x8020F360
NrvTeresa::TeresaNrvAppearFromWall::execute(Spine*) const=0x8020F370
TeresaAtomic::__ct(const char*)=0x8020F380
TeresaAtomic::init(const JMapInfoIter&)=0x8020F400
TeresaAtomic::makeActorAppeared(void)=0x8020F630
TeresaAtomic::makeActorDead(void)=0x8020F6A0
TeresaAtomic::appear(void)=0x8020F710
TeresaAtomic::kill(void)=0x8020F750
TeresaAtomic::attackSensor(HitSensor*, HitSensor*)=0x8020F790
TeresaAtomic::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8020F830
TeresaAtomic::control(void)=0x8020F8B0
TeresaAtomic::calcAndSetBaseMtx(void)=0x8020F930
TeresaAtomic::isEnableAttack(void) const=0x8020F9D0
TeresaAtomic::isEnablePush(void) const=0x8020FA40
TeresaAtomic::isEnableStarPieceAttack(void) const=0x8020FAB0
TeresaAtomic::tryDisappear(void)=0x8020FBE0
TeresaAtomic::tryDead(void)=0x8020FC60
TeresaAtomic::exeAppear(void)=0x8020FCD0
TeresaAtomic::exeWait(void)=0x8020FD80
TeresaAtomic::exeChase(void)=0x8020FE60
TeresaAtomic::exeShay(void)=0x8020FFA0
TeresaAtomic::exeAggressive(void)=0x802100A0
TeresaAtomic::exeLaugh(void)=0x80210160
TeresaAtomic::exeDead(void)=0x80210210
TeresaAtomic::exeDisappear(void)=0x80210290
TeresaAtomic::__dt(void)=0x802103E0
short::(nit_\TeresaAtomic_cpp)=0x80210440
NrvTeresaAtomic::TeresaAtomicNrvAppear::__ct(void)=0x802104B0
NrvTeresaAtomic::TeresaAtomicNrvWait::__ct(void)=0x802104C0
NrvTeresaAtomic::TeresaAtomicNrvChase::__ct(void)=0x802104D0
NrvTeresaAtomic::TeresaAtomicNrvShay::__ct(void)=0x802104E0
NrvTeresaAtomic::TeresaAtomicNrvAggressive::__ct(void)=0x802104F0
NrvTeresaAtomic::TeresaAtomicNrvLaugh::__ct(void)=0x80210500
NrvTeresaAtomic::TeresaAtomicNrvDead::__ct(void)=0x80210510
NrvTeresaAtomic::TeresaAtomicNrvDisappear::__ct(void)=0x80210520
NrvTeresaAtomic::TeresaAtomicNrvDeadPowerStarGet::__ct(void)=0x80210530
NrvTeresaAtomic::TeresaAtomicNrvDeadPowerStarGet::execute(Spine*) const=0x80210540
NrvTeresaAtomic::TeresaAtomicNrvDisappear::execute(Spine*) const=0x802105A0
NrvTeresaAtomic::TeresaAtomicNrvDead::execute(Spine*) const=0x802105B0
NrvTeresaAtomic::TeresaAtomicNrvLaugh::execute(Spine*) const=0x802105C0
NrvTeresaAtomic::TeresaAtomicNrvAggressive::execute(Spine*) const=0x802105D0
NrvTeresaAtomic::TeresaAtomicNrvShay::execute(Spine*) const=0x802105E0
NrvTeresaAtomic::TeresaAtomicNrvChase::execute(Spine*) const=0x802105F0
NrvTeresaAtomic::TeresaAtomicNrvWait::execute(Spine*) const=0x80210600
NrvTeresaAtomic::TeresaAtomicNrvAppear::execute(Spine*) const=0x80210610
TeresaWater::__ct(const char*)=0x80210620
TeresaWater::init(const JMapInfoIter&)=0x802106A0
TeresaWater::exeMove(void)=0x802107E0
TeresaWater::exeHit(void)=0x802109F0
TeresaWater::exeStun(void)=0x80210A80
TeresaWater::kill(void)=0x80210AE0
TeresaWater::control(void)=0x80210B70
TeresaWater::calcAndSetBaseMtx(void)=0x80210BE0
TeresaWater::attackSensor(HitSensor*, HitSensor*)=0x80210C60
TeresaWater::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80210D00
TeresaWater::tryDPDSwoon(void)=0x80210DC0
TeresaWater::__dt(void)=0x80210E50
short::(nit_\TeresaWater_cpp)=0x80210EB0
NrvTeresaWater::TeresaWaterNrvMove::__ct(void)=0x80210EF0
NrvTeresaWater::TeresaWaterNrvHit::__ct(void)=0x80210F00
NrvTeresaWater::TeresaWaterNrvStun::__ct(void)=0x80210F10
NrvTeresaWater::TeresaWaterNrvDPDSwoon::__ct(void)=0x80210F20
NrvTeresaWater::TeresaWaterNrvDPDSwoon::execute(Spine*) const=0x80210F30
NrvTeresaWater::TeresaWaterNrvStun::execute(Spine*) const=0x80210F40
NrvTeresaWater::TeresaWaterNrvHit::execute(Spine*) const=0x80210F50
NrvTeresaWater::TeresaWaterNrvMove::execute(Spine*) const=0x80210F60
TerritoryMover::__ct(float)=0x80210F70
TerritoryMover::decideNextTargetPos(const LiveActor*)=0x80210F80
TerritoryMover::isReachedTarget(const LiveActor*, float)=0x80211050
Togezo::__ct(const char*)=0x80211100
Togezo::init(const JMapInfoIter&)=0x80211190
Togezo::initAfterPlacement(void)=0x80211320
Togezo::makeActorAppeared(void)=0x80211330
Togezo::makeActorDead(void)=0x80211370
Togezo::kill(void)=0x802113E0
Togezo::calcAndSetBaseMtx(void)=0x80212880
Togezo::control(void)=0x80212910
Togezo::attackSensor(HitSensor*, HitSensor*)=0x80212AB0
Togezo::receiveMsgPush(HitSensor*, HitSensor*)=0x80212CE0
Togezo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80212DE0
Togezo::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80212FF0
Togezo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80213190
Togezo::__dt(void)=0x80213DF0
short::(nit_\Togezo_cpp)=0x80213E50
TogezoMgr::__dt(void)=0x802145B0
Tongari::__ct(const char*)=0x80214730
Tongari::init(const JMapInfoIter&)=0x802147C0
Tongari::initAfterPlacement(void)=0x80214990
Tongari::control(void)=0x80214A00
Tongari::calcAndSetBaseMtx(void)=0x80214AB0
Tongari::attackSensor(HitSensor*, HitSensor*)=0x80214B60
Tongari::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80214C20
Tongari::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80214C30
Tongari::exeWait(void)=0x80214CF0
Tongari::exeTurn(void)=0x80214E50
Tongari::exeGuard(void)=0x80214FF0
Tongari::exeFreeze(void)=0x80215070
Tongari::__dt(void)=0x802151A0
short::(nit_\Tongari_cpp)=0x80215200
NrvTongari::TongariNrvWait::__ct(void)=0x80215240
NrvTongari::TongariNrvTurn::__ct(void)=0x80215250
NrvTongari::TongariNrvGuard::__ct(void)=0x80215260
NrvTongari::TongariNrvFreeze::__ct(void)=0x80215270
NrvTongari::TongariNrvFreeze::execute(Spine*) const=0x80215280
NrvTongari::TongariNrvGuard::execute(Spine*) const=0x80215290
NrvTongari::TongariNrvTurn::execute(Spine*) const=0x802152A0
NrvTongari::TongariNrvWait::execute(Spine*) const=0x802152B0
Unbaba::__ct(const char*)=0x802152C0
Unbaba::init(const JMapInfoIter&)=0x80215370
Unbaba::makeActorAppeared(void)=0x80215480
Unbaba::makeActorDead(void)=0x80215550
Unbaba::control(void)=0x80215A10
Unbaba::calcAndSetBaseMtx(void)=0x80215BF0
Unbaba::attackSensor(HitSensor*, HitSensor*)=0x80215C80
Unbaba::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80215D40
Unbaba::__dt(void)=0x80216020
short::(nit_\Unbaba_cpp)=0x80216080
UnbabaSlim::__ct(const char*)=0x802162E0
UnbabaSlim::init(const JMapInfoIter&)=0x80216340
UnbabaSlim::control(void)=0x80216410
UnbabaSlim::calcAndSetBaseMtx(void)=0x80216550
UnbabaSlim::makeActorAppeared(void)=0x80216560
UnbabaSlim::makeActorDead(void)=0x802165C0
UnbabaSlim::exeWait(void)=0x80216610
UnbabaSlim::exeEatStart(void)=0x80216680
UnbabaSlim::exeEat(void)=0x802166E0
UnbabaSlim::exeEatEnd(void)=0x80216810
UnbabaSlim::attackSensor(HitSensor*, HitSensor*)=0x80216870
UnbabaSlim::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802168E0
MapPartsRotator::getRotateMtx(void) const=0x80216990
UnbabaSlim::initRotator(const JMapInfoIter&)=0x80216A90
UnbabaSlim::startRotator(void)=0x80216B00
UnbabaSlim::endRotator(void)=0x80216B20
UnbabaSlim::__dt(void)=0x80216B40
short::(nit_\UnbabaSlim_cpp)=0x80216BA0
NrvUnbabaSlim::UnbabaSlimNrvWait::__ct(void)=0x80216C40
NrvUnbabaSlim::UnbabaSlimNrvEatStart::__ct(void)=0x80216C50
NrvUnbabaSlim::UnbabaSlimNrvEat::__ct(void)=0x80216C60
NrvUnbabaSlim::UnbabaSlimNrvEatEnd::__ct(void)=0x80216C70
NrvUnbabaSlim::UnbabaSlimNrvEatEnd::execute(Spine*) const=0x80216C80
NrvUnbabaSlim::UnbabaSlimNrvEat::execute(Spine*) const=0x80216C90
NrvUnbabaSlim::UnbabaSlimNrvEatStart::execute(Spine*) const=0x80216CA0
NrvUnbabaSlim::UnbabaSlimNrvWait::execute(Spine*) const=0x80216CB0
Unizo::__ct(const char*)=0x80216CC0
Unizo::initType(const JMapInfoIter&)=0x80216D70
Unizo::init(const JMapInfoIter&)=0x80216E10
Unizo::initAfterPlacement(void)=0x802171E0
Unizo::control(void)=0x802171F0
Unizo::appear(void)=0x802172A0
Unizo::makeActorAppeared(void)=0x802172F0
Unizo::kill(void)=0x802174A0
Unizo::makeActorDead(void)=0x80217500
Unizo::startClipped(void)=0x80217560
Unizo::calcAndSetBaseMtx(void)=0x802175A0
Unizo::exeWait(void)=0x802177D0
Unizo::exeJump(void)=0x80217880
Unizo::exeChase(void)=0x80217930
Unizo::exeAttack(void)=0x802179B0
Unizo::exeCollideEnemy(void)=0x80217A40
Unizo::exeBreak(void)=0x80217B00
Unizo::exeFireDown(void)=0x80217B70
Unizo::exeJumpDown(void)=0x80217C90
Unizo::attackSensor(HitSensor*, HitSensor*)=0x80217DA0
Unizo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80217E90
Unizo::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80217FB0
Unizo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802180B0
Unizo::updateRotate(void)=0x80218100
Unizo::updateVelocity(void)=0x80218150
Unizo::udpateInfluence(void)=0x80218380
Unizo::udpateBlink(void)=0x80218690
Unizo::updateSurfaceEffect(void)=0x802186F0
Unizo::deleteEffect(void)=0x80218840
Unizo::doJump(void)=0x80218870
Unizo::doAttack(HitSensor*)=0x80218950
Unizo::doJumpDown(void)=0x80218A20
Unizo::doFireDown(unsigned long, const JGeometry::TVec3<float>&)=0x80218AE0
Unizo::doBreak(unsigned long, HitSensor*)=0x80218BF0
Unizo::doSpin(void)=0x80218D30
Unizo::isBreakGround(void)=0x80218E40
Unizo::isBreakNow(void) const=0x80218EC0
Unizo::tryPointBind(void)=0x80218F30
Unizo::isEnablePointBind(void) const=0x80218F90
Unizo::appearBreakModel(void)=0x80219040
Unizo::startWallHitSound(void)=0x80219200
Unizo::startNeedleSound(void)=0x802192E0
Unizo::getBaseMtx(void) const=0x80219370
Unizo::__dt(void)=0x80219380
short::(nit_\Unizo_cpp)=0x802193E0
NrvUnizo::UnizoNrvWait::__ct(void)=0x80219450
NrvUnizo::UnizoNrvJump::__ct(void)=0x80219460
NrvUnizo::UnizoNrvChase::__ct(void)=0x80219470
NrvUnizo::UnizoNrvAttack::__ct(void)=0x80219480
NrvUnizo::UnizoNrvCollidePlayer::__ct(void)=0x80219490
NrvUnizo::UnizoNrvCollideEnemy::__ct(void)=0x802194A0
NrvUnizo::UnizoNrvBreak::__ct(void)=0x802194B0
NrvUnizo::UnizoNrvFireDown::__ct(void)=0x802194C0
NrvUnizo::UnizoNrvJumpDown::__ct(void)=0x802194D0
NrvUnizo::UnizoNrvPointing::__ct(void)=0x802194E0
NrvUnizo::UnizoNrvPointing::execute(Spine*) const=0x802194F0
NrvUnizo::UnizoNrvJumpDown::execute(Spine*) const=0x80219500
NrvUnizo::UnizoNrvFireDown::execute(Spine*) const=0x80219510
NrvUnizo::UnizoNrvBreak::execute(Spine*) const=0x80219520
NrvUnizo::UnizoNrvCollideEnemy::execute(Spine*) const=0x80219530
NrvUnizo::UnizoNrvCollidePlayer::execute(Spine*) const=0x80219540
NrvUnizo::UnizoNrvAttack::execute(Spine*) const=0x80219590
NrvUnizo::UnizoNrvChase::execute(Spine*) const=0x802195A0
NrvUnizo::UnizoNrvJump::execute(Spine*) const=0x802195B0
NrvUnizo::UnizoNrvWait::execute(Spine*) const=0x802195C0
WalkerStateChaseParam::__ct(void)=0x802195D0
WalkerStateChase::__ct(LiveActor*, JGeometry::TVec3<float>*, WalkerStateParam*, WalkerStateChaseParam*)=0x80219600
WalkerStateChase::appear(void)=0x802196A0
WalkerStateChase::exeStart(void)=0x802196B0
WalkerStateChase::exeEnd(void)=0x802197D0
WalkerStateChase::isRunning(void) const=0x80219850
WalkerStateChase::__dt(void)=0x802198B0
short::(nit_\WalkerStateChase_cpp)=0x80219910
NrvWalkerStateChase::WalkerStateChaseNrvStart::__ct(void)=0x80219950
NrvWalkerStateChase::WalkerStateChaseNrvEnd::__ct(void)=0x80219960
NrvWalkerStateChase::WalkerStateChaseNrvEnd::execute(Spine*) const=0x80219970
NrvWalkerStateChase::WalkerStateChaseNrvStart::execute(Spine*) const=0x80219980
WalkerStateFindPlayerParam::__ct(void)=0x80219990
WalkerStateFindPlayer::__ct(LiveActor*, JGeometry::TVec3<float>*, WalkerStateParam*, WalkerStateFindPlayerParam*)=0x802199B0
WalkerStateFindPlayer::appear(void)=0x80219A50
WalkerStateFindPlayer::exeFind(void)=0x80219A60
WalkerStateFindPlayer::exeFindJumpStart(void)=0x80219B00
WalkerStateFindPlayer::exeFindJump(void)=0x80219B70
WalkerStateFindPlayer::exeFindJumpEnd(void)=0x80219C00
WalkerStateFindPlayer::isInSightPlayer(void) const=0x80219C80
WalkerStateFindPlayer::isFindJumpBegin(void) const=0x80219CA0
WalkerStateFindPlayer::isLandStart(void) const=0x80219D00
WalkerStateFindPlayer::__dt(void)=0x80219D60
short::(nit_\WalkerStateFindPlayer_cpp)=0x80219DC0
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFind::__ct(void)=0x80219E10
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFindJumpStart::__ct(void)=0x80219E20
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFindJump::__ct(void)=0x80219E30
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFindJumpEnd::__ct(void)=0x80219E40
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFindJumpEnd::execute(Spine*) const=0x80219E50
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFindJump::execute(Spine*) const=0x80219E60
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFindJumpStart::execute(Spine*) const=0x80219E70
NrvWalkerStateFindPlayer::WalkerStateFindPlayerNrvFind::execute(Spine*) const=0x80219E80
WalkerStateFunction::isInSightPlayer(const LiveActor*, const JGeometry::TVec3<float>&, const WalkerStateParam*)=0x80219F10
WalkerStateFunction::calcPassiveMovement(LiveActor*, const WalkerStateParam*)=0x80219F20
WalkerStateParam::__ct(void)=0x80219FA0
WalkerStateStaggerParam::__ct(void)=0x80219FE0
WalkerStateStagger::__ct(LiveActor*, JGeometry::TVec3<float>*, WalkerStateParam*, WalkerStateStaggerParam*)=0x8021A040
WalkerStateStagger::appear(void)=0x8021A100
WalkerStateStagger::kill(void)=0x8021A160
WalkerStateStagger::setPunchDirection(HitSensor*, HitSensor*)=0x8021A170
WalkerStateStagger::exeStagger(void)=0x8021A210
WalkerStateStagger::exeStaggerEnd(void)=0x8021A440
WalkerStateStagger::reboundWall(void)=0x8021A4C0
WalkerStateStagger::isEnableKick(void) const=0x8021A580
WalkerStateStagger::isUpsideDown(void) const=0x8021A5F0
WalkerStateStagger::isStaggerStart(void) const=0x8021A660
WalkerStateStagger::isSwooning(long) const=0x8021A6C0
WalkerStateStagger::isSpinning(long, long) const=0x8021A730
WalkerStateStagger::isRecoverStart(void) const=0x8021A7B0
WalkerStateStagger::__dt(void)=0x8021A810
short::(nit_\WalkerStateStagger_cpp)=0x8021A870
NrvWalkerStateStagger::WalkerStateStaggerNrvStagger::__ct(void)=0x8021A8B0
NrvWalkerStateStagger::WalkerStateStaggerNrvStaggerEnd::__ct(void)=0x8021A8C0
NrvWalkerStateStagger::WalkerStateStaggerNrvStaggerEnd::execute(Spine*) const=0x8021A8D0
NrvWalkerStateStagger::WalkerStateStaggerNrvStagger::execute(Spine*) const=0x8021A8E0
WalkerStateWanderParam::__ct(void)=0x8021A8F0
WalkerStateWander::__ct(LiveActor*, JGeometry::TVec3<float>*, WalkerStateParam*, WalkerStateWanderParam*)=0x8021A920
TerritoryMover::setCenter(const JGeometry::TVec3<float>&)=0x8021A9F0
WalkerStateWander::appear(void)=0x8021AA10
WalkerStateWander::setWanderCenter(const JGeometry::TVec3<float>&)=0x8021AA20
WalkerStateWander::exeWait(void)=0x8021AA30
WalkerStateWander::exeWalk(void)=0x8021AAB0
WalkerStateWander::__dt(void)=0x8021ABD0
short::(nit_\WalkerStateWander_cpp)=0x8021AC30
NrvWalkerStateWander::WalkerStateWanderNrvWait::__ct(void)=0x8021AC70
NrvWalkerStateWander::WalkerStateWanderNrvWalk::__ct(void)=0x8021AC80
NrvWalkerStateWander::WalkerStateWanderNrvWalk::execute(Spine*) const=0x8021AC90
NrvWalkerStateWander::WalkerStateWanderNrvWait::execute(Spine*) const=0x8021ACA0
Wanwan::__ct(float, const char*)=0x8021ACB0
Wanwan::init(const JMapInfoIter&)=0x8021ADF0
Wanwan::appear(void)=0x8021B0F0
Wanwan::kill(void)=0x8021B270
Wanwan::getType(const JMapInfoIter&)=0x8021B310
Wanwan::getAppearStarPieceNum(Rock::Type)=0x8021B380
Wanwan::control(void)=0x8021B3A0
Wanwan::calcAndSetBaseMtx(void)=0x8021B630
Wanwan::attackSensor(HitSensor*, HitSensor*)=0x8021B810
Wanwan::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8021BA00
Wanwan::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8021BAC0
Wanwan::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8021BBD0
Wanwan::initMapToolInfo(const JMapInfoIter&)=0x8021BC80
Wanwan::initModel(void)=0x8021BD80
Wanwan::initSensor(void)=0x8021BE90
Wanwan::initEffect(void)=0x8021BF20
Wanwan::isBreakByWall(void) const=0x8021BFD0
Wanwan::move(float)=0x8021C050
Wanwan::calcBaseMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*) const=0x8021C120
Wanwan::isInClippingRange(void) const=0x8021C1F0
Wanwan::startSoundWanwanVoice(void)=0x8021C2A0
Wanwan::startRollLevelSound(bool)=0x8021C350
Wanwan::tryFreeze(const Nerve*)=0x8021C480
Wanwan::setBtkForEnvironmentMap(LiveActor*, const char*)=0x8021C510
Wanwan::rumblePadAndCamera(void)=0x8021C5B0
Wanwan::setNerveBreak(bool)=0x8021C620
Wanwan::updateRotateX(float)=0x8021C690
Wanwan::appearStarPiece(void)=0x8021C6F0
Wanwan::moveOnRail(float, float, bool)=0x8021C760
Wanwan::isForceInvalidBindSection(void) const=0x8021C840
Wanwan::tryBreakReachedGoal(void)=0x8021C8C0
Wanwan::tryRequestAppearPowerStar(void)=0x8021C930
Wanwan::requestAppearPowerStar(void)=0x8021C990
Wanwan::tryOnSwitchDead(void)=0x8021C9D0
Wanwan::exeAppearSign(void)=0x8021CA20
Wanwan::exeAppear(void)=0x8021CAB0
Wanwan::exeAppearMoveInvalidBind(void)=0x8021CD40
Wanwan::exeMove(void)=0x8021CE30
Wanwan::exeMoveInvalidBind(void)=0x8021CFF0
Wanwan::exeMoveLava(void)=0x8021D090
Wanwan::exeMoveToGoal(void)=0x8021D2F0
Wanwan::exeGoalIn(void)=0x8021D420
Wanwan::exeBreak(void)=0x8021D4A0
Wanwan::exeFreeze(void)=0x8021D7A0
Wanwan::__dt(void)=0x8021D910
short::(nit_\Wanwan_cpp)=0x8021D970
NrvWanwan::WanwanNrvAppearSign::__ct(void)=0x8021D9E0
NrvWanwan::WanwanNrvAppear::__ct(void)=0x8021D9F0
NrvWanwan::WanwanNrvAppearMoveInvalidBind::__ct(void)=0x8021DA00
NrvWanwan::WanwanNrvMove::__ct(void)=0x8021DA10
NrvWanwan::WanwanNrvMoveInvalidBind::__ct(void)=0x8021DA20
NrvWanwan::WanwanNrvMoveLava::__ct(void)=0x8021DA30
NrvWanwan::WanwanNrvMoveToGoal::__ct(void)=0x8021DA40
NrvWanwan::WanwanNrvGoalIn::__ct(void)=0x8021DA50
NrvWanwan::WanwanNrvBreak::__ct(void)=0x8021DA60
NrvWanwan::WanwanNrvFreeze::__ct(void)=0x8021DA70
NrvWanwan::WanwanNrvFreeze::execute(Spine*) const=0x8021DA80
NrvWanwan::WanwanNrvBreak::execute(Spine*) const=0x8021DA90
NrvWanwan::WanwanNrvGoalIn::execute(Spine*) const=0x8021DAA0
NrvWanwan::WanwanNrvMoveToGoal::execute(Spine*) const=0x8021DAB0
NrvWanwan::WanwanNrvMoveLava::execute(Spine*) const=0x8021DAC0
NrvWanwan::WanwanNrvMoveInvalidBind::execute(Spine*) const=0x8021DAD0
NrvWanwan::WanwanNrvMove::execute(Spine*) const=0x8021DAE0
NrvWanwan::WanwanNrvAppearMoveInvalidBind::execute(Spine*) const=0x8021DAF0
NrvWanwan::WanwanNrvAppear::execute(Spine*) const=0x8021DB00
NrvWanwan::WanwanNrvAppearSign::execute(Spine*) const=0x8021DB10
WanwanCreator::__ct(const char*)=0x8021DB20
WanwanCreator::init(const JMapInfoIter&)=0x8021DB90
Wanwan::__defctor(void)=0x8021DDA0
WanwanCreator::appear(void)=0x8021DDB0
WanwanCreator::kill(void)=0x8021DE10
WanwanCreator::invalidate(void)=0x8021DEA0
WanwanCreator::initMapToolInfo(const JMapInfoIter&)=0x8021DEF0
WanwanCreator::create(void)=0x8021DF70
WanwanCreator::exeActive(void)=0x8021DFF0
WanwanCreator::exeDeactive(void)=0x8021E0B0
MR::FunctorV0M<WanwanCreator*,M13WanwanCreatorFPCvPv_v>::__cl(void) const=0x8021E150
MR::FunctorV0M<WanwanCreator*,M13WanwanCreatorFPCvPv_v>::clone(JKRHeap*) const=0x8021E180
WanwanCreator::__dt(void)=0x8021E1F0
short::(nit_\WanwanCreator_cpp)=0x8021E250
NrvWanwanCreator::WanwanCreatorNrvActive::__ct(void)=0x8021E280
NrvWanwanCreator::WanwanCreatorNrvDeactive::__ct(void)=0x8021E290
NrvWanwanCreator::WanwanCreatorNrvDeactive::execute(Spine*) const=0x8021E2A0
NrvWanwanCreator::WanwanCreatorNrvActive::execute(Spine*) const=0x8021E2B0
WanwanSearch::__ct(const char*)=0x8021E2C0
WanwanSearch::init(const JMapInfoIter&)=0x8021E390
WanwanSearch::kill(void)=0x8021E4C0
WanwanSearch::control(void)=0x8021E510
WanwanSearch::calcAndSetBaseMtx(void)=0x8021E5B0
WanwanSearch::attackSensor(HitSensor*, HitSensor*)=0x8021E5C0
WanwanSearch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8021E6B0
WanwanSearch::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8021E740
WanwanSearch::receiveMsgPush(HitSensor*, HitSensor*)=0x8021E870
WanwanSearch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8021E930
WanwanSearch::exeWait(void)=0x8021EAF0
WanwanSearch::exeMove(void)=0x8021EB70
WanwanSearch::exeGoal(void)=0x8021EDD0
WanwanSearch::exeBreak(void)=0x8021EEA0
WanwanSearch::__dt(void)=0x8021EF30
short::(nit_\WanwanSearch_cpp)=0x8021EF90
NrvWanwanSearch::WanwanSearchNrvWait::__ct(void)=0x8021EFE0
NrvWanwanSearch::WanwanSearchNrvMove::__ct(void)=0x8021EFF0
NrvWanwanSearch::WanwanSearchNrvGoal::__ct(void)=0x8021F000
NrvWanwanSearch::WanwanSearchNrvBreak::__ct(void)=0x8021F010
NrvWanwanSearch::WanwanSearchNrvFreeze::__ct(void)=0x8021F020
NrvWanwanSearch::WanwanSearchNrvFreeze::execute(Spine*) const=0x8021F030
NrvWanwanSearch::WanwanSearchNrvBreak::execute(Spine*) const=0x8021F040
NrvWanwanSearch::WanwanSearchNrvGoal::execute(Spine*) const=0x8021F050
NrvWanwanSearch::WanwanSearchNrvMove::execute(Spine*) const=0x8021F060
NrvWanwanSearch::WanwanSearchNrvWait::execute(Spine*) const=0x8021F070
ActionSoundSystem::__ct(const char*)=0x802208F0
ActionSoundSystem::__dt(void)=0x80220B20
AudBgmConductor::__ct(void)=0x80220CA0
AudBgmConductor::init(const JMapInfoIter&)=0x80220D10
AudBgmConductor::movement(void)=0x80220D80
AudBgmConductor::setStateBit(unsigned long)=0x80221280
AudBgmConductor::movementPinchEventBgm(void)=0x80221290
AudBgmConductor::__dt(void)=0x802213E0
AudCameraWatcher::__ct(void)=0x80221440
AudCameraWatcher::init(const JMapInfoIter&)=0x802214A0
AudCameraWatcher::movement(void)=0x802214C0
AudCameraWatcher::playAtmosphereSE(void)=0x802216F0
AudCameraWatcher::__dt(void)=0x80221780
AudEffectDirector::__ct(void)=0x802217E0
AudEffectDirector::init(const JMapInfoIter&)=0x80221840
AudEffectDirector::movement(void)=0x80221890
AudEffectDirector::setEffectType(long, long)=0x802218E0
AudEffectDirector::setAudioEffectParam(long)=0x80221930
AudEffectDirector::__dt(void)=0x802219A0
AudTalkSoundData::getSoundIDFromTalkSoundNo(unsigned char)=0x80221A00
JAISoundID::__ct(unsigned long)=0x80221A30
short::(nit_\AudTalkSoundData_cpp)=0x80221A40
AudTamakoroBgmCtrl::__ct(void)=0x80222390
AudTamakoroBgmCtrl::init(const char*)=0x802223D0
AudTamakoroBgmCtrl::control(float, bool, long)=0x802224E0
AudTamakoroBgmCtrl::modifyTempo(JAISoundHandle*, float)=0x802226B0
BarrelGravity::__ct(void)=0x80222AD0
BarrelGravity::setLocalPosition(const JGeometry::TVec3<float>&)=0x80222B60
BarrelGravity::setUpDirection(const JGeometry::TVec3<float>&)=0x80222B70
BarrelGravity::setRadius(float)=0x80222B80
BarrelGravity::setUnusedArg0(float)=0x80222B90
BarrelGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80222BB0
BarrelGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80222C90
ConeGravity::__ct(void)=0x80222E70
ConeGravity::setLocalMatrix(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80222EE0
ConeGravity::setEnableBottom(bool)=0x80222F20
ConeGravity::setTopCutRate(float)=0x80222F30
ConeGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80222F60
ConeGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80222FC0
CubeGravity::__ct(void)=0x802234E0
CubeGravity::setCube(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80223550
CubeGravity::calcGravityArea(const JGeometry::TVec3<float>&) const=0x80223580
CubeGravity::calcFaceGravity(const JGeometry::TVec3<float>&, long, JGeometry::TVec3<float>*, float*) const=0x80223760
CubeGravity::calcEdgeGravity(const JGeometry::TVec3<float>&, long, JGeometry::TVec3<float>*, float*) const=0x802238D0
JGeometry::TVec3<float>::normalize(const JGeometry::TVec3<float>&)=0x80223CB0
CubeGravity::calcCornerGravity(const JGeometry::TVec3<float>&, long, JGeometry::TVec3<float>*, float*) const=0x80223D20
CubeGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80224010
CubeGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80224120
DiskGravity::__ct(void)=0x802241A0
DiskGravity::setLocalPosition(const JGeometry::TVec3<float>&)=0x80224290
DiskGravity::setLocalDirection(const JGeometry::TVec3<float>&)=0x802242A0
DiskGravity::setSideDirection(const JGeometry::TVec3<float>&)=0x802242E0
DiskGravity::setRadius(float)=0x80224320
DiskGravity::setValidDegee(float)=0x80224330
DiskGravity::setBothSide(bool)=0x80224340
DiskGravity::setEnableEdgeGravity(bool)=0x80224350
DiskGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80224360
DiskGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80224590
DiskGravity::updateLocalParam(void)=0x80224620
DiskTorusGravity::__ct(void)=0x80224810
DiskTorusGravity::setPosition(const JGeometry::TVec3<float>&)=0x802248C0
DiskTorusGravity::setDirection(const JGeometry::TVec3<float>&)=0x802248D0
DiskTorusGravity::setRadius(float)=0x802248E0
DiskTorusGravity::setDiskRadius(float)=0x802248F0
DiskTorusGravity::setEdgeType(long)=0x80224910
DiskTorusGravity::setBothSide(bool)=0x80224920
DiskTorusGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80224930
DiskTorusGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80224A10
GlobalGravityObj::__ct(const char*)=0x80224CB0
GlobalGravityObj::init(const JMapInfoIter&)=0x80224D00
GlobalGravityObj::makeActorAppeared(void)=0x80224DC0
GlobalGravityObj::makeActorDead(void)=0x80224E10
GlobalGravityObj::updateSwitch(void)=0x80224E60
GlobalGravityObj::movement(void)=0x80224F20
GlobalGravityObj::getGravity(void)=0x80224F30
MR::createGlobalBarrelGravityObj(const char*)=0x80224F50
MR::createGlobalCubeGravityObj(const char*)=0x80224FE0
MR::createGlobalConeGravityObj(const char*)=0x80225070
MR::createGlobalDiskGravityObj(const char*)=0x80225100
MR::createGlobalDiskTorusGravityObj(const char*)=0x80225190
MR::createGlobalPlaneGravityObj(const char*)=0x80225220
MR::createGlobalPlaneInBoxGravityObj(const char*)=0x802252B0
MR::createGlobalPlaneInCylinderGravityObj(const char*)=0x80225340
MR::createGlobalPointGravityObj(const char*)=0x802253D0
MR::createGlobalSegmentGravityObj(const char*)=0x80225460
MR::createGlobalWireGravityObj(const char*)=0x802254F0
MR::createZeroGravitySphereObj(const char*)=0x80225580
MR::createZeroGravityBoxObj(const char*)=0x80225610
MR::createZeroGravityCylinderObj(const char*)=0x802256A0
GlobalGravityObj::__dt(void)=0x80225730
GravityFollower::__ct(GlobalGravityObj*, const JMapInfoIter&)=0x80225790
GravityFollower::setGravityFollowHost(const NameObj*)=0x802257F0
GravityFollower::update(void)=0x80225800
MR::addBaseMatrixFollowerGravity(GlobalGravityObj*, const JMapInfoIter&)=0x802258B0
GravityCreator::__ct(void)=0x80225920
GravityCreator::createFromJMap(const JMapInfoIter&)=0x80225930
GravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80225A90
GravityCreator::settingFromJMapArgs(long, long, long)=0x80225AA0
GravityCreator::settingFromJMapOtherParam(const JMapInfoIter&)=0x80225AB0
BarrelGravityCreator::createInstance(void)=0x80225AC0
BarrelGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80225B00
BarrelGravityCreator::settingFromJMapArgs(long, long, long)=0x80225B80
BarrelGravityCreator::getGravity(void)=0x80225C00
CubeGravityCreator::createInstance(void)=0x80225C10
CubeGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80225C50
CubeGravityCreator::settingFromJMapArgs(long, long, long)=0x80225D10
CubeGravityCreator::getGravity(void)=0x80225D80
DiskGravityCreator::createInstance(void)=0x80225D90
DiskGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80225DD0
DiskGravityCreator::settingFromJMapArgs(long, long, long)=0x80225E70
DiskGravityCreator::getGravity(void)=0x80225F10
DiskTorusGravityCreator::createInstance(void)=0x80225F20
DiskTorusGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80225F60
DiskTorusGravityCreator::settingFromJMapArgs(long, long, long)=0x80225FE0
DiskTorusGravityCreator::getGravity(void)=0x802260B0
ConeGravityCreator::createInstance(void)=0x802260C0
ConeGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80226100
ConeGravityCreator::settingFromJMapArgs(long, long, long)=0x80226170
ConeGravityCreator::getGravity(void)=0x802261F0
PlaneGravityCreator::createInstance(void)=0x80226200
PlaneGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80226240
PlaneGravityCreator::getGravity(void)=0x802262A0
PlaneInBoxGravityCreator::createInstance(void)=0x802262B0
PlaneInBoxGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80226300
PlaneInBoxGravityCreator::getGravity(void)=0x802263C0
PlaneInBoxGravityCreator::settingFromJMapArgs(long, long, long)=0x802263D0
PlaneInCylinderGravityCreator::createInstance(void)=0x80226490
PlaneInCylinderGravityCreator::getGravity(void)=0x802264E0
PlaneInCylinderGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802264F0
PlaneInCylinderGravityCreator::settingFromJMapArgs(long, long, long)=0x80226570
PlaneZeroGravityCreator::createInstance(void)=0x802265C0
PlaneZeroInBoxGravityCreator::createInstance(void)=0x802265F0
PlaneZeroInCylinderGravityCreator::createInstance(void)=0x80226620
PointGravityCreator::createInstance(void)=0x80226650
PointGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80226690
PointGravityCreator::getGravity(void)=0x802266C0
SegmentGravityCreator::createInstance(void)=0x802266D0
SegmentGravityCreator::settingFromSRT(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80226710
SegmentGravityCreator::settingFromJMapArgs(long, long, long)=0x802267B0
SegmentGravityCreator::getGravity(void)=0x802268F0
WireGravityCreator::createInstance(void)=0x80226900
WireGravityCreator::settingFromJMapOtherParam(const JMapInfoIter&)=0x80226940
WireGravityCreator::getGravity(void)=0x80226A40
GravityInfo::__ct(void)=0x80226A50
GravityInfo::init(void)=0x80226A80
ParallelGravity::__ct(void)=0x80226AB0
ParallelGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80226B80
ParallelGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80226BF0
ParallelGravity::setPlane(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80226D20
ParallelGravity::setRangeBox(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80226D90
ParallelGravity::setRangeCylinder(float, float)=0x80226DC0
ParallelGravity::setRangeType(ParallelGravity::RANGE_TYPE)=0x80226DD0
ParallelGravity::setBaseDistance(float)=0x80226DE0
ParallelGravity::setDistanceCalcType(ParallelGravity::DISTANCE_CALC_TYPE)=0x80226E00
ParallelGravity::isInSphereRange(const JGeometry::TVec3<float>&, float*) const=0x80226E10
ParallelGravity::isInBoxRange(const JGeometry::TVec3<float>&, float*) const=0x80226EA0
ParallelGravity::isInCylinderRange(const JGeometry::TVec3<float>&, float*) const=0x80227070
ParallelGravity::isInRange(const JGeometry::TVec3<float>&, float*) const=0x80227140
PlanetGravity::__ct(void)=0x80227180
PlanetGravity::setPriority(long)=0x802271E0
PlanetGravity::calcGravity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x802271F0
PlanetGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80227330
PlanetGravity::isInRangeSquare(float) const=0x80227340
PlanetGravity::isInRangeDistance(float) const=0x80227380
PlanetGravity::calcGravityFromMassPosition(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&) const=0x802273B0
PlanetGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80227470
PlanetGravity::updateIdentityMtx(void)=0x80227480
PlanetGravityManager::__ct(const char*)=0x802274D0
PlanetGravityManager::init(const JMapInfoIter&)=0x80227520
PlanetGravityManager::calcTotalGravityVector(JGeometry::TVec3<float>*, GravityInfo*, const JGeometry::TVec3<float>&, unsigned long, unsigned long, const NameObj*) const=0x80227530
PlanetGravityManager::registerGravity(PlanetGravity*)=0x80227710
PlanetGravityManager::__dt(void)=0x80227780
PointGravity::__ct(void)=0x802277E0
PointGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80227850
PointGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80227970
SegmentGravity::__ct(void)=0x80227990
SegmentGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80227AA0
SegmentGravity::updateMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80227CB0
SegmentGravity::setGravityPoint(unsigned long, const JGeometry::TVec3<float>&)=0x80227DB0
SegmentGravity::setSideVector(const JGeometry::TVec3<float>&)=0x80227E00
SegmentGravity::setValidSideDegree(float)=0x80227E40
SegmentGravity::setEdgeValid(unsigned long, bool)=0x80227E50
SegmentGravity::updateLocalParam(void)=0x80227E70
WireGravity::__ct(void)=0x80228090
WireGravity::setPointListSize(unsigned long)=0x802280E0
WireGravity::addPoint(const JGeometry::TVec3<float>&)=0x80228150
WireGravity::calcOwnGravityVector(JGeometry::TVec3<float>*, float*, const JGeometry::TVec3<float>&) const=0x80228170
@unnamed@ActorAnimKeeper_cpp@::getAnimName(const ActorAnimKeeperInfo*, const ActorAnimDataInfo&)=0x80228480
ActorAnimKeeper::start(const char*)=0x802284A0
@unnamed@ActorAnimKeeper_cpp@::getCsvDataAnimData(ActorAnimDataInfo*, const char*, JMapInfo*, long)=0x80228A30
ActorAnimKeeper::findAnimInfo(const char*) const=0x80228CA0
ActorCameraInfo::__ct(const JMapInfoIter&)=0x8022AB70
ActorCameraInfo::__ct(long, long)=0x8022ABF0
ActorJointCtrl::setIKEndPosition(const char*, const JGeometry::TVec3<float>&, float)=0x8022BD90
ActorJointCtrl::setIKEndDirection(const char*, const JGeometry::TVec3<float>&, float)=0x8022BDA0
ActorJointCtrl::startUpdate(void)=0x8022BE00
ActorJointCtrl::endUpdate(void)=0x8022BE70
ActorLightCtrl::__ct(const LiveActor*)=0x8022BF50
ActorLightCtrl::init(int, bool)=0x8022BFC0
ActorLightInfo::__as(const ActorLightInfo&)=0x8022C040
ActorLightCtrl::update(bool)=0x8022C0B0
ActorLightCtrl::loadLight(void) const=0x8022C110
ActorLightCtrl::reset(void)=0x8022C160
ActorLightCtrl::copy(const ActorLightCtrl*)=0x8022C200
ActorLightCtrl::isSameLight(const ActorLightCtrl*) const=0x8022C280
ActorLightCtrl::getActorLight(void) const=0x8022C2B0
ActorLightCtrl::tryFindNewAreaLight(bool)=0x8022C2D0
ActorLightCtrl::updateLightBlend(void)=0x8022C3B0
ActorLightCtrl::resetCurrentLightInfo(void)=0x8022C4A0
ActorLightCtrl::getTargetActorLight(const AreaLightInfo*) const=0x8022C510
ActorStateBaseInterface::update(void)=0x8022CEE0
ActorStateKeeper::__ct(int)=0x8022CF40
ActorStateKeeper::addState(ActorStateBaseInterface*, const Nerve*, const char*)=0x8022CFD0
ActorStateKeeper::updateCurrentState(void)=0x8022D000
ActorStateKeeper::startState(const Nerve*)=0x8022D030
ActorStateKeeper::endState(const Nerve*)=0x8022D0A0
ActorStateKeeper::findStateInfo(const Nerve*)=0x8022D100
ActorStateParamScale::__ct(LiveActor*)=0x8022D140
ActorStateParamScale::init(const JMapInfoIter&)=0x8022D190
ActorStateParamScale::init(const ActorStateParamScale*)=0x8022D1F0
ActorStateParamScale::getSpeed(void)=0x8022D240
ActorStateParamScale::getNerveStepRate(void)=0x8022D260
ActorStateParamScale::isStep(long)=0x8022D270
ActorStateParamScale::isFirstStep(void)=0x8022D2E0
ActorStateParamScale::isGreaterStep(long)=0x8022D2F0
ActorStateParamScale::isGreaterEqualStep(long)=0x8022D330
ActorStateParamScale::isIntervalStep(long, long)=0x8022D370
ActorStateParamScale::update(void)=0x8022D4B0
ActorStateParamScale::resetHostVelocity(void)=0x8022D6C0
ActorStateParamScale::calcHostVelocity(void)=0x8022D6E0
ActorStateParamScale::calcHostVelocity(const JGeometry::TVec3<float>&)=0x8022D720
ActorStateParamScale::calcHostVelocity(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8022D7B0
ActorStateParamScale::isNeedForReset(const Nerve*, long)=0x8022D7E0
AllLiveActorGroup::__ct(void)=0x8022D870
AllLiveActorGroup::initActorSystemInfo(const JMapInfoIter&)=0x8022D8C0
MR::getAllLiveActorGroup(void)=0x8022D950
MR::startInitLiveActorSystemInfo(void)=0x8022D980
MR::initLiveActorSystemInfo(const JMapInfoIter&)=0x8022D9B0
MR::endInitLiveActorSystemInfo(void)=0x8022D9F0
AllLiveActorGroup::__dt(void)=0x8022DA20
AnimationRandomPlayer::__ct(const LiveActor*, const char*, const char*, long, float)=0x8022DA80
AnimationRandomPlayer::updateStartStep(void)=0x8022DB10
AnimationRandomPlayer::exeWait(void)=0x8022DB80
AnimationRandomPlayer::exePlay(void)=0x8022DBF0
AnimationRandomPlayer::__dt(void)=0x8022DC70
short::(nit_\AnimationRandomPlayer_cpp)=0x8022DCD0
NrvAnimationRandomPlayer::HostTypeWait::__ct(void)=0x8022DD00
NrvAnimationRandomPlayer::HostTypePlay::__ct(void)=0x8022DD10
NrvAnimationRandomPlayer::HostTypePlay::execute(Spine*) const=0x8022DD20
NrvAnimationRandomPlayer::HostTypeWait::execute(Spine*) const=0x8022DD30
Binder::__ct(A4_fPCQ29JGeometry8TVec3_f_PCQ29JGeometry8TVec3_f_ffUl)=0x8022DD40
Binder::setTriangleFilter(TriangleFilterBase*)=0x8022DE40
Binder::setCollisionPartsFilter(CollisionPartsFilterBase*)=0x8022DE50
Binder::clear(void)=0x8022DE60
Binder::getPlane(int) const=0x8022DE80
Binder::copyPlaneArrayAndSortingSensor(HitInfo*, unsigned long)=0x8022DE90
std::sort<HitInfo*,bool(const HitInfo*, const HitInfo*)>(HitInfo*, HitInfo*, bool(const HitInfo*, const HitInfo*), _v)=0x8022DFC0
std::sort<HitInfo*,bool(const HitInfo*, const HitInfo*)>(HitInfo*, HitInfo*, bool(const HitInfo*, const HitInfo*), _v)=0x8022E2B0
std::swap<HitInfo*>(HitInfo*, HitInfo*, _v)=0x8022E5A0
std::__sort132<bool(const HitInfo*, const HitInfo*),HitInfo*>(HitInfo*, HitInfo*, HitInfo*, bool(const HitInfo*, const HitInfo*), _v)=0x8022E5C0
std::__selection_sort<bool(const HitInfo*, const HitInfo*),HitInfo*>(HitInfo*, HitInfo*, bool(const HitInfo*, const HitInfo*), _v)=0x8022E6B0
Binder::compSensor(const HitInfo*, const HitInfo*)=0x8022E760
Binder::bind(const JGeometry::TVec3<float>&)=0x8022E780
Binder::moveAlongHittedPlanes(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, HitInfo*, unsigned long, bool*)=0x8022EBC0
Binder::findBindedPos(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, bool*, HitInfo*, unsigned long, bool, bool)=0x8022ECD0
Binder::moveWithCollisionParts(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8022EE60
Binder::storeCurrentHitInfo(HitInfo*, unsigned long, bool)=0x8022EF00
HitInfo::__as(const HitInfo&)=0x8022EFF0
Binder::obtainMomentFixReaction(HitInfo*, unsigned long, JGeometry::TVec3<float>*, unsigned long)=0x8022F0D0
Binder::storeContactPlane(HitInfo*, unsigned long)=0x8022F2B0
BreakModel::__ct(LiveActor*, const char*, const char*, A4_fPCc)=0x8022F3B0
BreakModel::init(const JMapInfoIter&)=0x8022F450
BreakModel::appear(void)=0x8022F4A0
BreakModel::exeBreak(void)=0x8022F510
BreakModel::calcAndSetBaseMtx(void)=0x8022F580
BreakModel::__dt(void)=0x8022F5E0
short::(nit_\BreakModel_cpp)=0x8022F640
NrvBreakModel::BreakModelNrvWait::__ct(void)=0x8022F670
NrvBreakModel::BreakModelNrvBreak::__ct(void)=0x8022F680
NrvBreakModel::BreakModelNrvBreak::execute(Spine*) const=0x8022F690
NrvBreakModel::BreakModelNrvWait::execute(Spine*) const=0x8022F6A0
ChangeObjHolder::__ct(const char*)=0x8022F7A0
ChangeObjHolder::init(const JMapInfoIter&)=0x8022F800
ChangeObjHolder::__dt(void)=0x8022F960
ClippingActorHolder::__ct(void)=0x8022F9D0
ClippingActorHolder::movement(void)=0x8022FAC0
ClippingActorHolder::registerActor(LiveActor*)=0x8022FB30
ClippingActorHolder::binitSystemInfo(LiveActor*, const JMapInfoIter&)=0x8022FBA0
ClippingActorHolder::initViewGroupTable(void)=0x8022FC10
ClippingActorHolder::validateClipping(LiveActor*)=0x8022FC90
ClippingActorHolder::invalidateClipping(LiveActor*)=0x8022FD30
ClippingActorHolder::addToClippingTarget(LiveActor*)=0x8022FDF0
ClippingActorHolder::removeFromClippingTarget(LiveActor*)=0x8022FEA0
ClippingActorHolder::startGroupClipping(LiveActor*, const JMapInfoIter&)=0x8022FF40
ClippingActorHolder::setTypeToSphere(LiveActor*, float, const JGeometry::TVec3<float>*)=0x80230030
ClippingActorHolder::setFarClipLevel(LiveActor*, long)=0x80230080
ClippingActorHolder::find(const LiveActor*) const=0x802300B0
ClippingActorHolder::__dt(void)=0x80230140
ClippingActorInfo::__ct(LiveActor*)=0x802301A0
ClippingActorInfo::judgeClipping(void)=0x80230210
ClippingActorInfo::isJudgedToClip(void) const=0x80230290
ClippingActorInfo::isGroupClipping(void) const=0x80230300
ClippingActorInfo::setTypeToSphere(float, const JGeometry::TVec3<float>*)=0x80230310
ClippingActorInfo::setGroupClippingNo(const JMapInfoIter&)=0x80230340
ClippingActorInfoList::__ct(int)=0x802303B0
ClippingActorInfoList::add(ClippingActorInfo*)=0x80230430
ClippingActorInfoList::remove(LiveActor*)=0x80230450
ClippingActorInfoList::find(const LiveActor*, long*) const=0x802304C0
ClippingActorInfoList::findOrNone(const LiveActor*) const=0x80230520
ClippingActorInfoList::isInList(const LiveActor*) const=0x80230570
ClippingDirector::__ct(void)=0x802305B0
ClippingDirector::endInitActorSystemInfo(void)=0x80230680
ClippingDirector::movement(void)=0x80230690
ClippingDirector::registerActor(LiveActor*)=0x80230700
ClippingDirector::initActorSystemInfo(LiveActor*, const JMapInfoIter&)=0x80230710
ClippingDirector::joinToGroupClipping(LiveActor*, const JMapInfoIter&, int)=0x80230720
ClippingDirector::entryLodCtrl(LodCtrl*, const JMapInfoIter&)=0x802307A0
MR::getClippingDirector(void)=0x802307B0
MR::addToClippingTarget(LiveActor*)=0x802307E0
MR::removeFromClippingTarget(LiveActor*)=0x80230820
ClippingDirector::__dt(void)=0x80230860
ClippingInfoGroup::__ct(const char*, int)=0x802308C0
ClippingInfoGroup::setGroupNo(const JMapInfoIter&)=0x80230960
JMapIdInfo::__ct(const JMapIdInfo&)=0x802309D0
ClippingInfoGroup::registerInfo(ClippingActorInfo*)=0x802309F0
ClippingInfoGroup::isClippedNowAll(void) const=0x80230A10
ClippingInfoGroup::startClippedAll(void)=0x80230AC0
ClippingInfoGroup::endClippedAll(void)=0x80230B70
ClippingGroupHolder::__ct(void)=0x80230C10
ClippingGroupHolder::movement(void)=0x80230C90
ClippingGroupHolder::createAndAdd(ClippingActorInfo*, const JMapInfoIter&, int)=0x80230D30
ClippingGroupHolder::createGroup(ClippingActorInfo*, const JMapInfoIter&, int)=0x80230DA0
ClippingGroupHolder::findGroup(const JMapInfoIter&)=0x80230E30
ClippingInfoGroup::__dt(void)=0x80230ED0
ClippingGroupHolder::__dt(void)=0x80230F30
ClippingJudge::__ct(const char*)=0x80230F90
JGeometry::THexahedron3<float>::__ct(void)=0x80231060
ClippingJudge::init(const JMapInfoIter&)=0x80231070
ClippingJudge::movement(void)=0x80231080
ClippingJudge::isJudgedToClipFrustum(const JGeometry::TVec3<float>&, float) const=0x80231100
JGeometry::THexahedron3<float>::mayIntersectBall3(const JGeometry::TVec3<float>&, float) const=0x80231130
ClippingJudge::isJudgedToClipFrustum(const JGeometry::TVec3<float>&, float, long) const=0x802311C0
ClippingJudge::calcViewingVolume(JGeometry::THexahedron3<float>*, float)=0x80231210
JGeometry::TPartition3<float>::set(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80231500
MR::getClippingJudge(void)=0x80231550
ClippingJudge::__dt(void)=0x80231580
DisplayListMaker::__ct(J3DModel*, const ResourceHolder*)=0x802315E0
DisplayListMaker::update(void)=0x80231690
DisplayListMaker::diff(void)=0x80231720
DisplayListMaker::newDifferedDisplayList(void)=0x802317F0
DisplayListMaker::isValidDiff(void)=0x80231880
DisplayListMaker::onPrgFlag(unsigned short, unsigned long)=0x80231890
DisplayListMaker::onCurFlag(unsigned short, unsigned long)=0x802318B0
DisplayListMaker::getDiffFlag(long) const=0x802318D0
DisplayListMaker::addFogCtrl(bool)=0x80231920
DisplayListMaker::addMatColorCtrl(const char*, unsigned long, const J3DGXColor*)=0x802319A0
DisplayListMaker::addProjmapEffectMtxSetter(void)=0x80231A40
DisplayListMaker::addMirrorReflectionMtxSetter(void)=0x80231AB0
DisplayListMaker::addTexMtxCtrl(const char*)=0x80231B20
DisplayListMaker::onCurFlagBpk(const J3DAnmBase*, const char*)=0x80231BA0
DisplayListMaker::offCurFlagBpk(const J3DAnmBase*, const char*)=0x80231BC0
DisplayListMaker::onCurFlagBtp(const J3DAnmBase*, const char*)=0x80231BE0
DisplayListMaker::offCurFlagBtp(const J3DAnmBase*)=0x80231C00
DisplayListMaker::onCurFlagBtk(const J3DAnmBase*, const char*)=0x80231C20
DisplayListMaker::offCurFlagBtk(const J3DAnmBase*)=0x80231C40
DisplayListMaker::onCurFlagBrk(const J3DAnmBase*, const char*)=0x80231C60
DisplayListMaker::offCurFlagBrk(const J3DAnmBase*)=0x80231C80
DisplayListMaker::push(MaterialCtrl*)=0x80231CA0
DisplayListMaker::onBothFlag(unsigned short, unsigned long)=0x80231CC0
DisplayListMaker::onBothFlagAll(unsigned long)=0x80231CF0
DisplayListMaker::checkMaterial(void)=0x80231D60
DisplayListMaker::checkTexture(void)=0x80231FC0
DisplayListMaker::checkViewProjmapEffectMtx(void)=0x80232070
DisplayListMaker::addViewProjmapEffectMtxSetter(void)=0x80232130
DisplayListMaker::addMarioShadowProjmapMtxSetter(void)=0x802321A0
DisplayListMaker::isExistDiffMaterial(const J3DModelData*)=0x80232210
@unnamed@DynamicJointCtrl_cpp@::calcJointChildNum(J3DJoint*)=0x802322E0
JointCtrlRate::__ct(void)=0x80232360
JointCtrlRate::update(void)=0x80232380
JointCtrlRate::startCtrl(long)=0x80232460
JointCtrlRate::endCtrl(long)=0x80232490
DynamicJointCtrlNode::__ct(const DynamicJointCtrl*, A4_ff)=0x802324C0
DynamicJointCtrlNode::update(LiveActor*, const DynamicJointCtrlNode*)=0x80232570
DynamicJointCtrlNode::reset(void)=0x80232730
DynamicJointCtrlNode::updateJointMtxCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80232780
DynamicJointCtrl::__ct(LiveActor*, const char*, const DynamicJointCtrlParam*)=0x80232880
DynamicJointCtrl::init(void)=0x802328E0
DynamicJointCtrl::update(void)=0x80232B80
DynamicJointCtrl::setCallBackFunction(void)=0x80232C00
DynamicJointCtrlKeeper::update(void)=0x80232CF0
DynamicJointCtrlKeeper::setCallBackFunction(void)=0x80232D50
DynamicJointCtrlKeeper::startCtrl(const char*, long)=0x80232DB0
DynamicJointCtrlKeeper::endCtrl(const char*, long)=0x80232E20
DynamicJointCtrlKeeper::__ct(LiveActor*)=0x80232E90
JMapInfo::getValue<float>(int, const char*, float*, _Cb) const=0x802330A0
JointControlDelegator<DynamicJointCtrlNode>::__dt(void)=0x80233120
JointControlDelegator<DynamicJointCtrlNode>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80233160
JointControlDelegator<DynamicJointCtrlNode>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802331D0
@unnamed@EffectKeeper_cpp@::makeAttibuteEffectBaseName(char*, unsigned long, const char*)=0x80233240
EffectKeeper::__ct(const char*, ResourceHolder*, int, const char*)=0x802332C0
EffectKeeper::init(LiveActor*)=0x80233370
EffectKeeper::initAfterPlacementForAttributeEffect(A4_f)=0x80233390
EffectKeeper::setBinder(const Binder*)=0x80233530
EffectKeeper::addEffect(const char*, LiveActor*)=0x80233550
EffectKeeper::registerEffect(const char*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const char*)=0x802335A0
EffectKeeper::registerEffect(const char*, A4_fPCcPCc)=0x80233640
EffectKeeper::registerEffect(const char*, A4_fPCQ29JGeometry8TVec3<float>PCcPCc)=0x802336D0
EffectKeeper::registerEffectWithoutSRT(const char*, const char*)=0x80233770
EffectKeeper::registerSyncBckEffect(XanimePlayer*, const char*, const char*, long, float, float, bool)=0x802337E0
EffectKeeper::createEmitter(const char*)=0x802338A0
EffectKeeper::deleteEmitter(const char*)=0x802338E0
EffectKeeper::forceDeleteEmitter(const char*)=0x80233910
EffectKeeper::deleteEmitterAll(void)=0x80233940
EffectKeeper::forceDeleteEmitterAll(void)=0x802339B0
EffectKeeper::getEmitter(long) const=0x80233BA0
EffectKeeper::getEmitter(const char*) const=0x80233BB0
EffectKeeper::changeEffectName(const char*, const char*)=0x80233BC0
EffectKeeper::update(void)=0x80233C30
EffectKeeper::updateSyncBckEffect(void)=0x80233C70
EffectKeeper::syncEffectBck(MultiEmitter*)=0x80233CF0
EffectKeeper::updateAttributeEffect(void)=0x80233DF0
EffectKeeper::stopEmitterOnClipped(void)=0x80233EE0
EffectKeeper::playEmitterOffClipped(void)=0x80233F50
EffectKeeper::clear(void)=0x80233FC0
EffectKeeper::changeBck(void)=0x80234030
EffectKeeper::onDraw(void)=0x80234070
std::for_each<MultiEmitter*,std::binder2nd<std::mem_fun1_t<void,MultiEmitter,long>,long>>(MultiEmitter*, MultiEmitter*, std::binder2nd<std::mem_fun1_t<void,MultiEmitter,long>,long>, _Q23std51binder2nd<std::mem_fun1_t<void,MultiEmitter,long>,long>)=0x802340E0
EffectKeeper::offDraw(void)=0x80234160
EffectKeeper::onCalcEmitter(void)=0x802341D0
EffectKeeper::offCalcEmitter(void)=0x80234240
EffectKeeper::enableSort(void)=0x802342B0
EffectKeeper::finalizeSort(void)=0x80234300
EffectKeeper::isRegisteredEmitter(const char*) const=0x80234310
EffectKeeper::checkExistenceAttributeEffect(void)=0x80234390
EffectKeeper::registMultiEmitter(MultiEmitter*, const char*, const char*)=0x80234410
EffectKeeper::updateFloorCode(void)=0x802344B0
EffectKeeper::updateFloorCode(const Triangle*)=0x80234550
EffectKeeper::isTypeAttributeEffect(const char*) const=0x802345B0
FaceJointCtrl::startCtrl(long)=0x802347B0
FaceJointCtrl::endCtrl(long)=0x80234800
FaceJointCtrl::update(void)=0x80234850
FaceJointCtrl::setCallBackFunction(void)=0x80234870
FaceJointCtrl::updateJointMtxCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80234890
JointControlDelegator<FaceJointCtrl>::__dt(void)=0x80235250
JointControlDelegator<FaceJointCtrl>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80235290
JointControlDelegator<FaceJointCtrl>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80235300
FlashingCtrl::__ct(LiveActor*, bool)=0x802354C0
FlashingCtrl::movement(void)=0x80235550
FlashingCtrl::start(int)=0x80235610
FlashingCtrl::end(void)=0x80235630
FlashingCtrl::getCurrentInterval(void) const=0x802356B0
FlashingCtrl::isNowFlashing(void) const=0x802356E0
FlashingCtrl::isNowOn(void) const=0x80235700
FlashingCtrl::updateFlashing(void)=0x80235740
FlashingCtrl::__dt(void)=0x802357D0
HitSensor::__ct(unsigned long, unsigned short, float, LiveActor*)=0x80235830
HitSensor::receiveMessage(unsigned long, HitSensor*)=0x802358F0
HitSensor::setType(unsigned long)=0x80235910
HitSensor::isType(unsigned long) const=0x802359A0
HitSensor::validate(void)=0x802359C0
HitSensor::invalidate(void)=0x80235A00
HitSensor::validateBySystem(void)=0x80235A70
HitSensor::invalidateBySystem(void)=0x80235AD0
HitSensor::addHitSensor(HitSensor*)=0x80235B40
HitSensorInfo::setFollowPos(const JGeometry::TVec3<float>*)=0x80235B70
HitSensorInfo::setFollowMtx(A4_f)=0x80235B80
HitSensorInfo::__ct(const char*, HitSensor*, const JGeometry::TVec3<float>*, A4_fRCQ29JGeometry8TVec3<float>b)=0x80235B90
HitSensorInfo::update(void)=0x80235C10
HitSensorInfo::doObjCol(void)=0x80235E40
HitSensorKeeper::__ct(int)=0x80235ED0
HitSensorKeeper::add(const char*, unsigned long, unsigned short, float, LiveActor*, const JGeometry::TVec3<float>&)=0x80235F50
HitSensorKeeper::addCallback(const char*, unsigned long, unsigned short, float, LiveActor*)=0x80236010
HitSensorKeeper::getSensor(const char*) const=0x802360F0
HitSensorKeeper::update(void)=0x802361B0
HitSensorKeeper::doObjCol(void)=0x80236210
HitSensorKeeper::clear(void)=0x80236270
HitSensorKeeper::validate(void)=0x802362B0
HitSensorKeeper::invalidate(void)=0x80236310
HitSensorKeeper::validateBySystem(void)=0x80236370
HitSensorKeeper::invalidateBySystem(void)=0x802363D0
HitSensorKeeper::getNthSensorInfo(int) const=0x80236430
HitSensorKeeper::getSensorInfo(const char*) const=0x80236440
HitSensorKeeper::registHitSensorInfo(HitSensorInfo*)=0x802364F0
IKJointCtrl::__ct(LiveActor*)=0x80236520
IKJointCtrl::init(const IKJointCtrlParam&)=0x802365E0
MR::createJointController<IKJointCtrl>(IKJointCtrl*, const LiveActor*, unsigned short, M11IKJointCtrlFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_bM11IKJointCtrlFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_b_P15JointController)=0x802367B0
IKJointCtrl::setEndPosition(const JGeometry::TVec3<float>&, float)=0x80236890
IKJointCtrl::setEndDirection(const JGeometry::TVec3<float>&, float)=0x80236940
IKJointCtrl::setCallBackFunction(void)=0x802369C0
IKJointCtrl::updateRootJointCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80236A40
IKJointCtrl::updateMiddleJointCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80236A80
IKJointCtrl::updateEndJointCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80236AC0
IKJointCtrlHolder::__ct(LiveActor*, unsigned long)=0x80236B90
IKJointCtrlHolder::addCtrl(const IKJointCtrlParam&)=0x80236C00
IKJointCtrlHolder::startUpdate(void)=0x80236C90
IKJointCtrl::disableCallBack(void)=0x80236D00
std::for_each<IKJointCtrl*,std::mem_fun_t<void,IKJointCtrl>>(IKJointCtrl*, IKJointCtrl*, std::mem_fun_t<void,IKJointCtrl>, _Q23std26mem_fun_t<void,IKJointCtrl>)=0x80236D10
IKJointCtrlHolder::setEndPosition(const char*, const JGeometry::TVec3<float>&, float)=0x80236D90
IKJointCtrlHolder::setEndDirection(const char*, const JGeometry::TVec3<float>&, float)=0x80236DE0
IKJointCtrlHolder::endUpdate(void)=0x80236E30
IKJointCtrl::enableCallBack(void)=0x80236EB0
IKJointCtrlHolder::endCtrlAll(void)=0x80236EC0
IKJointCtrlHolder::setCallBackFunction(void)=0x80236F30
IKJointCtrlHolder::findIKJointCtrl(const char*)=0x80236FA0
ActorJoint::createIKJointCtrlHolder(LiveActor*)=0x80237020
JointControlDelegator<IKJointCtrl>::__dt(void)=0x80237200
JointControlDelegator<IKJointCtrl>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80237240
JointControlDelegator<IKJointCtrl>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802372B0
LiveActor::__ct(const char*)=0x80237320
LiveActor::init(const JMapInfoIter&)=0x80237410
LiveActor::appear(void)=0x80237420
LiveActor::makeActorAppeared(void)=0x80237430
LiveActor::kill(void)=0x80237500
LiveActor::makeActorDead(void)=0x80237570
LiveActor::movement(void)=0x80237610
LiveActor::calcAnim(void)=0x80237730
LiveActor::calcAnmMtx(void)=0x80237780
J3DModel::setBaseScale(const Vec&)=0x802377E0
LiveActor::calcViewAndEntry(void)=0x80237800
LiveActor::receiveMessage(unsigned long, HitSensor*, HitSensor*)=0x80237830
LiveActor::calcAndSetBaseMtx(void)=0x802378C0
LiveActor::getTakingMtx(void) const=0x80237970
LiveActor::setNerve(const Nerve*)=0x80237980
LiveActor::isNerve(const Nerve*) const=0x80237990
LiveActor::getNerveStep(void) const=0x802379D0
LiveActor::getSensor(const char*) const=0x802379E0
LiveActor::getBaseMtx(void) const=0x80237A00
LiveActor::startClipped(void)=0x80237A50
LiveActor::endClipped(void)=0x80237AD0
LiveActor::initModelManagerWithAnm(const char*, const char*, bool, bool)=0x80237B50
LiveActor::initNerve(const Nerve*, long)=0x80237C00
LiveActor::initHitSensor(long)=0x80237C60
LiveActor::initBinder(float, float, unsigned long)=0x80237CB0
LiveActor::initRailRider(const JMapInfoIter&)=0x80237D70
LiveActor::initEffectKeeper(long, const char*, bool)=0x80237DC0
LiveActor::initSound(long, const char*, bool, const JGeometry::TVec3<float>&)=0x80237E70
LiveActor::initShadowControllerList(unsigned long)=0x80237F00
LiveActor::initActorCollisionParts(const char*, HitSensor*, ResourceHolder*, A4_fbb)=0x80237F60
LiveActor::initStageSwitch(const JMapInfoIter&)=0x80238080
LiveActor::initActorStarPointerTarget(float, const JGeometry::TVec3<float>*, A4_fQ29JGeometry8TVec3<float>)=0x802380B0
LiveActor::initActorLightCtrl(void)=0x80238140
LiveActor::attackSensor(HitSensor*, HitSensor*)=0x80238190
LiveActor::updateBinder(void)=0x802381A0
LiveActorFlag::__ct(void)=0x80238220
LiveActorGroup::__ct(const char*, int)=0x80238250
LiveActorGroup::registerActor(LiveActor*)=0x80238290
LiveActorGroup::getActor(int) const=0x802382A0
LiveActorGroup::getDeadActor(void) const=0x802382B0
LiveActorGroup::getLivingActorNum(void) const=0x80238330
LiveActorGroup::killAll(void)=0x802383A0
LiveActorGroup::appearAll(void)=0x80238410
LiveActorGroup::makeAllDead(void)=0x80238480
MsgSharedGroup::__ct(const char*, long, const JMapInfoIter&)=0x802384F0
MsgSharedGroup::init(const JMapInfoIter&)=0x802385A0
MsgSharedGroup::movement(void)=0x802385C0
MsgSharedGroup::sendMsgToGroupMember(unsigned long, HitSensor*, const char*)=0x80238650
LiveActorGroupArray::__ct(const char*)=0x80238660
LiveActorGroupArray::init(const JMapInfoIter&)=0x802386B0
LiveActorGroupArray::tryCreateGroupForLiveActor(LiveActor*, const JMapInfoIter&)=0x802386C0
LiveActorGroupArray::getLiveActorGroup(const LiveActor*) const=0x80238780
LiveActorGroupArray::createGroup(const JMapInfoIter&, const char*, long)=0x80238790
LiveActorGroupArray::findGroup(const JMapInfoIter&) const=0x80238820
LiveActorGroupArray::findGroup(const LiveActor*) const=0x802388E0
MsgSharedGroup::__dt(void)=0x802389B0
LiveActorGroupArray::__dt(void)=0x80238A10
LodCtrl::__ct(LiveActor*, const JMapInfoIter&)=0x80238A70
LodCtrl::offSyncShadowHost(void)=0x80238B20
LodCtrl::appear(void)=0x80238B60
LodCtrl::kill(void)=0x80238C10
LodCtrl::validate(void)=0x80238CC0
LodCtrl::invalidate(void)=0x80238D00
LodCtrl::update(void)=0x80238D40
LodCtrl::isShowLowModel(void) const=0x80238EF0
LodCtrl::setDistanceToMiddle(float)=0x80238F20
LodCtrl::calcDistanceToCamera(void) const=0x80238F30
LodCtrl::setDistanceToLow(float)=0x80238F50
LodCtrl::setDistanceToMiddleAndLow(float, float)=0x80238F60
@unnamed@LodCtrl_cpp@::LodFuntionCall<float>(LodCtrl*, void(LiveActor*, float), float, _v)=0x80238F70
LodCtrl::setClippingTypeSphereContainsModelBoundingBox(float)=0x80239000
LodCtrl::setFarClipping(float)=0x80239010
LodCtrl::showHighModel(void)=0x80239020
LodCtrl::showMiddleModel(void)=0x802390F0
LodCtrl::showLowModel(void)=0x802391C0
LodCtrl::hideAllModel(void)=0x80239290
LodCtrl::setViewCtrlPtr(const bool*, const bool*, const bool*, const bool*)=0x80239330
LodCtrl::initLodModel(int, int, int, bool) const=0x80239350
LodCtrl::createLodModel(int, int, int)=0x802394C0
LodCtrl::syncMaterialAnimation(void)=0x80239560
LodCtrl::syncJointAnimation(void)=0x802395C0
LodCtrl::initLightCtrl(void)=0x80239620
LodCtrlFunction::isExistLodLowModel(const char*)=0x80239690
MaterialCtrl::__ct(J3DModelData*, const char*)=0x802396E0
MaterialCtrl::update(void)=0x80239740
MaterialCtrl::updateMaterial(J3DMaterial*)=0x802397D0
FogCtrl::__ct(J3DModelData*, bool)=0x802397F0
FogCtrl::update(void)=0x80239970
MatColorCtrl::__ct(J3DModelData*, const char*, unsigned long, const J3DGXColor*)=0x80239A10
MatColorCtrl::updateMaterial(J3DMaterial*)=0x80239A70
ViewProjmapEffectMtxSetter::update(void)=0x80239BE0
ProjmapEffectMtxSetter::__ct(J3DModel*, const ResourceHolder*)=0x80239CA0
ProjmapEffectMtxSetter::update(void)=0x80239E90
ProjmapEffectMtxSetter::getBaseTrans(JGeometry::TVec3<float>*) const=0x80239F10
ProjmapEffectMtxSetter::updateMtxUseBaseMtx(void)=0x80239F30
ProjmapEffectMtxSetter::updateMtxUseBaseMtxWithLocalOffset(const JGeometry::TVec3<float>&)=0x80239F80
MirrorReflectionMtxSetter::__ct(J3DModel*, const ResourceHolder*)=0x8023A020
MirrorReflectionMtxSetter::addUpdatingTexMtxFromName(J3DModelData*)=0x8023A0B0
MirrorReflectionMtxSetter::addUpdatingTexMtxFromTexNo(J3DModelData*, unsigned short)=0x8023A140
MirrorReflectionMtxSetter::addUpdatingTexMtxFromTexCoord(J3DMaterial*)=0x8023A1C0
MirrorReflectionMtxSetter::addUpdatingTexMtx(J3DTexMtx*)=0x8023A260
MirrorReflectionMtxSetter::update(void)=0x8023A280
MarioShadowProjmapMtxSetter::__ct(J3DModel*, const ResourceHolder*)=0x8023A2F0
MarioShadowProjmapMtxSetter::update(void)=0x8023A370
TexMtxCtrl::__ct(J3DModelData*, const char*)=0x8023A500
TexMtxCtrl::updateMaterial(J3DMaterial*)=0x8023A550
MessageSensorHolder::__ct(const char*)=0x8023A580
MessageSensorHolder::init(const JMapInfoIter&)=0x8023A5C0
MessageSensorHolder::__dt(void)=0x8023A620
MirrorActor::__ct(LiveActor*, const char*, const char*)=0x8023A680
MirrorActor::init(const JMapInfoIter&)=0x8023A6F0
MirrorActor::movement(void)=0x8023A7E0
MirrorActor::calcAnim(void)=0x8023A8C0
MirrorActor::calcViewAndEntry(void)=0x8023A900
MirrorActor::isHostInTheOtherSideOfMirror(void) const=0x8023A910
MirrorActor::getHostCenterPos(void) const=0x8023A970
MirrorActor::__dt(void)=0x8023A9D0
MirrorCamera::__ct(const char*)=0x8023AA30
MirrorCamera::init(const JMapInfoIter&)=0x8023AAA0
MirrorCamera::movement(void)=0x8023AAC0
@unnamed@MirrorCamera_cpp@::getVertexFormat(const J3DModelData*, _GXAttr)=0x8023AB10
MirrorCamera::setMirrorMapInfo(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8023AB40
MirrorCamera::setMirrorMapInfo(J3DModelData*)=0x8023ABA0
MirrorCamera::updateViewMtx(void)=0x8023ACB0
MirrorCamera::updateModelTexMtx(void)=0x8023AE60
MirrorCamera::getDistance(const JGeometry::TVec3<float>&) const=0x8023AF10
MR::getMirrorCamera(void)=0x8023AF80
MR::getDistanceToMirror(const JGeometry::TVec3<float>&)=0x8023AFB0
MirrorCamera::__dt(void)=0x8023AFF0
MirrorReflectionModel::__ct(const LiveActor*, const char*, const char*, A4_f)=0x8023B050
MirrorReflectionModel::init(const JMapInfoIter&)=0x8023B120
MirrorReflectionModel::movement(void)=0x8023B170
MirrorReflectionModel::calcAnim(void)=0x8023B230
MirrorReflectionModel::calcViewAndEntry(void)=0x8023B2A0
MirrorReflectionModel::calcAndSetBaseMtx(void)=0x8023B2C0
MirrorReflectionModel::__dt(void)=0x8023B320
ModelManager::__ct(void)=0x8023B380
ModelManager::init(const char*, const char*, bool)=0x8023B3C0
ModelManager::update(void)=0x8023B520
ModelManager::calcAnim(void)=0x8023B5C0
ModelManager::calcView(void)=0x8023B660
ModelManager::entry(void)=0x8023B690
ModelManager::newDifferedDLBuffer(void)=0x8023B6C0
ModelManager::updateDL(bool)=0x8023B6D0
ModelManager::startBck(const char*, const char*)=0x8023B800
ModelManager::startBckWithInterpole(const char*, long)=0x8023B860
ModelManager::startBtk(const char*)=0x8023B8C0
ModelManager::startBrk(const char*)=0x8023B920
ModelManager::startBtp(const char*)=0x8023B980
ModelManager::startBpk(const char*)=0x8023B9E0
ModelManager::startBva(const char*)=0x8023BA40
ModelManager::stopBtk(void)=0x8023BA90
ModelManager::stopBrk(void)=0x8023BAE0
ModelManager::stopBtp(void)=0x8023BB30
ModelManager::stopBpk(void)=0x8023BB80
ModelManager::stopBva(void)=0x8023BBD0
AnmPlayerBase::isStop(void) const=0x8023BC60
ModelManager::getBckCtrl(void) const=0x8023BE50
ModelManager::getBtkCtrl(void) const=0x8023BE60
ModelManager::getBrkCtrl(void) const=0x8023BE70
ModelManager::getBtpCtrl(void) const=0x8023BE80
ModelManager::getBpkCtrl(void) const=0x8023BE90
ModelManager::getBvaCtrl(void) const=0x8023BEA0
ModelManager::isBckStopped(void) const=0x8023BEB0
ModelManager::isBtkStopped(void) const=0x8023BED0
ModelManager::isBrkStopped(void) const=0x8023BEF0
ModelManager::isBtpStopped(void) const=0x8023BF10
ModelManager::isBpkStopped(void) const=0x8023BF30
ModelManager::isBvaStopped(void) const=0x8023BF50
ModelManager::isBtkPlaying(const char*) const=0x8023BF70
ModelManager::isBrkPlaying(const char*) const=0x8023BF80
ModelManager::isBpkPlaying(const char*) const=0x8023BF90
ModelManager::isBtpPlaying(const char*) const=0x8023BFA0
ModelManager::isBvaPlaying(const char*) const=0x8023BFB0
ModelManager::initJointTransform(void)=0x8023BFC0
ModelManager::getJointTransform(const char*)=0x8023C000
ModelManager::getResourceHolder(void) const=0x8023C070
ModelManager::getModelResourceHolder(void) const=0x8023C090
ModelManager::getJ3DModel(void) const=0x8023C0A0
ModelManager::getJ3DModelData(void) const=0x8023C0C0
ModelManager::getPlayingBckName(void) const=0x8023C0F0
ModelManager::initModelAndAnimation(ResourceHolder*, const char*, ResourceHolder*, J3DMdlFlag)=0x8023C110
ModelManager::initMaterialAnm(void)=0x8023C1B0
ModelManager::initVisibilityAnm(void)=0x8023C2D0
ModelManager::calc(void)=0x8023C350
ModelManager::changeBckSetting(const char*, const char*, XanimePlayer*)=0x8023C3F0
ModelObj::__ct(const char*, const char*, A4_flllb)=0x8023C540
ModelObj::init(const JMapInfoIter&)=0x8023C660
ModelObj::calcAndSetBaseMtx(void)=0x8023C670
Nerve::executeOnEnd(Spine*) const=0x8023C8F0
PartsModel::__ct(LiveActor*, const char*, const char*, A4_flb)=0x8023C900
PartsModel::init(const JMapInfoIter&)=0x8023CA40
PartsModel::makeActorAppeared(void)=0x8023CAD0
PartsModel::makeActorDead(void)=0x8023CB10
PartsModel::movement(void)=0x8023CB50
PartsModel::calcAnim(void)=0x8023CC40
PartsModel::calcViewAndEntry(void)=0x8023CCC0
PartsModel::initFixedPosition(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const char*)=0x8023CCE0
PartsModel::initFixedPosition(const char*)=0x8023CD80
PartsModel::initFixedPosition(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x8023CE00
PartsModel::loadFixedPosition(const char*, const LiveActor*)=0x8023CE70
PartsModel::offFixedPosNormalizeScale(void)=0x8023CEE0
PartsModel::calcAndSetBaseMtx(void)=0x8023CEF0
PartsModelLodCtrl::__ct(LiveActor*, const char*, const char*, A4_flb)=0x8023CF60
PartsModelLodCtrl::init(const JMapInfoIter&)=0x8023CFB0
PartsModelLodCtrl::control(void)=0x8023D000
PartsModelLodCtrl::setLodCtrl(LodCtrl*)=0x8023D010
PartsModelLodCtrl::initLightCtrl(void)=0x8023D020
PartsModelLodCtrl::calcAndSetBaseMtx(void)=0x8023D060
PartsModelLodCtrl::__dt(void)=0x8023D0A0
RailObj::__ct(const char*)=0x8023D100
RailObj::init(const JMapInfoIter&)=0x8023D160
RailObj::__dt(void)=0x8023D220
RailRider::__ct(const JMapInfoIter&)=0x8023D280
RailRider::__ct(long, long)=0x8023D330
RailRider::move(void)=0x8023D3E0
RailRider::moveToNearestPos(const JGeometry::TVec3<float>&)=0x8023D460
RailRider::moveToNearestPoint(const JGeometry::TVec3<float>&)=0x8023D4A0
RailRider::moveToNextPoint(void)=0x8023D570
RailRider::reverse(void)=0x8023D5C0
RailRider::calcPosAtCoord(JGeometry::TVec3<float>*, float) const=0x8023D5F0
RailRider::calcDirectionAtCoord(JGeometry::TVec3<float>*, float) const=0x8023D600
RailRider::calcNearestPos(const JGeometry::TVec3<float>&) const=0x8023D610
RailRider::getTotalLength(void) const=0x8023D620
RailRider::getPartLength(int) const=0x8023D630
RailRider::isLoop(void) const=0x8023D640
RailRider::isReachedGoal(void) const=0x8023D650
RailRider::isReachedEdge(void) const=0x8023D710
RailRider::setCoord(float)=0x8023D7A0
RailRider::setSpeed(float)=0x8023D7F0
RailRider::getRailArgWithInit(const char*, long*) const=0x8023D800
RailRider::getRailArgNoInit(const char*, long*) const=0x8023D860
RailRider::getNextPointCoord(void) const=0x8023D8D0
RailRider::getCurrentPointCoord(void) const=0x8023D910
RailRider::getPointNum(void) const=0x8023D920
RailRider::copyPointPos(JGeometry::TVec3<float>*, long) const=0x8023D930
RailRider::getPointCoord(long) const=0x8023D980
RailRider::initBezierRail(const JMapInfoIter&, const JMapInfo*)=0x8023D990
RailRider::syncPosDir(void)=0x8023DA30
RailRider::getPointArgS32NoInit(const char*, long*, long) const=0x8023DB60
RailRider::getPointArgS32WithInit(const char*, long*, long) const=0x8023DBF0
RailRider::getCurrentPointArgS32NoInit(const char*, long*) const=0x8023DC60
RailRider::getCurrentPointArgS32WithInit(const char*, long*) const=0x8023DCF0
RailRider::getNextPointArgS32NoInit(const char*, long*) const=0x8023DD60
RailRider::getNextPointArgS32WithInit(const char*, long*) const=0x8023DDF0
RailRider::getNextPointNo(void) const=0x8023DE60
SensorGroup::__ct(int, const char*)=0x8023DEE0
SensorGroup::add(HitSensor*)=0x8023DF60
SensorGroup::remove(HitSensor*)=0x8023DF90
SensorGroup::clear(void) const=0x8023DFE0
SensorHitChecker::__ct(const char*)=0x8023E020
SensorHitChecker::init(const JMapInfoIter&)=0x8023E150
SensorHitChecker::initGroup(HitSensor*)=0x8023E170
SensorHitChecker::movement(void)=0x8023E2B0
SensorHitChecker::doObjColGroup(SensorGroup*, SensorGroup*) const=0x8023E3F0
SensorHitChecker::doObjColInSameGroup(SensorGroup*) const=0x8023E500
SensorHitChecker::checkAttack(HitSensor*, HitSensor*) const=0x8023E600
MR::initHitSensorGroup(HitSensor*)=0x8023E6E0
SensorHitChecker::__dt(void)=0x8023E720
MR::Vector<MR::AssignableArray<ShadowController*>>::__ct(void)=0x8023E8A0
ShadowControllerList::__ct(LiveActor*, unsigned long)=0x8023EAD0
ShadowControllerList::addController(ShadowController*)=0x8023EB30
ShadowControllerList::getController(const char*) const=0x8023EB80
ShadowControllerList::resetCalcCount(void)=0x8023EC20
ShadowControllerList::requestCalc(void)=0x8023EC60
ShadowController::__ct(LiveActor*, const char*)=0x8023ECC0
ShadowController::requestCalc(void)=0x8023EDC0
ShadowController::update(void)=0x8023EE10
ShadowController::updateDirection(void)=0x8023EEC0
ShadowController::updateProjection(void)=0x8023EF90
ShadowController::getShadowDrawer(void)=0x8023F0E0
ShadowController::getHost(void) const=0x8023F0F0
ShadowController::setShadowDrawer(ShadowDrawer*)=0x8023F100
ShadowController::getDropPos(JGeometry::TVec3<float>*) const=0x8023F1E0
ShadowController::getDropDir(JGeometry::TVec3<float>*) const=0x8023F220
ShadowController::getDropLength(void) const=0x8023F250
ShadowController::getProjectionPos(JGeometry::TVec3<float>*) const=0x8023F260
ShadowController::getProjectionNormal(JGeometry::TVec3<float>*) const=0x8023F290
ShadowController::getProjectionLength(void) const=0x8023F2C0
ShadowController::isProjected(void) const=0x8023F380
ShadowController::isDraw(void) const=0x8023F3B0
ShadowController::isCalcCollision(void) const=0x8023F400
ShadowController::isCalcGravity(void) const=0x8023F440
ShadowController::isCalcShadowGravity(void) const=0x8023F490
ShadowController::setGroupName(const char*)=0x8023F4B0
ShadowController::setDropPosPtr(const JGeometry::TVec3<float>*)=0x8023F4C0
ShadowController::setDropPosMtxPtr(A4_fRCQ29JGeometry8TVec3<float>)=0x8023F4D0
ShadowController::setDropPosFix(const JGeometry::TVec3<float>&)=0x8023F4F0
ShadowController::setDropDirPtr(const JGeometry::TVec3<float>*)=0x8023F530
ShadowController::setProjectionPtr(const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*)=0x8023F540
ShadowController::setDropDirFix(const JGeometry::TVec3<float>&)=0x8023F560
ShadowController::setDropLength(float)=0x8023F5B0
ShadowController::setDropStartOffset(float)=0x8023F5C0
ShadowController::setDropTypeNormal(void)=0x8023F5D0
ShadowController::setDropTypeSurface(void)=0x8023F5E0
ShadowController::setProjectionFix(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool)=0x8023F5F0
ShadowController::onCalcCollision(void)=0x8023F650
ShadowController::offCalcCollision(void)=0x8023F660
ShadowController::onCalcCollisionOneTime(void)=0x8023F670
ShadowController::onCalcDropGravity(void)=0x8023F690
ShadowController::onCalcDropGravityOneTime(void)=0x8023F6F0
ShadowController::offCalcDropGravity(void)=0x8023F750
ShadowController::onCalcDropPrivateGravity(void)=0x8023F760
ShadowController::onCalcDropPrivateGravityOneTime(void)=0x8023F7C0
ShadowController::offCalcDropPrivateGravity(void)=0x8023F820
ShadowController::setCollisionPartsFilter(CollisionPartsFilterBase*)=0x8023F830
ShadowController::onFollowHostScale(void)=0x8023F840
ShadowController::offFollowHostScale(void)=0x8023F850
ShadowController::isFollowHostScale(void) const=0x8023F860
ShadowController::onVisibleSyncHost(void)=0x8023F870
ShadowController::offVisibleSyncHost(void)=0x8023F880
ShadowController::validate(void)=0x8023F890
ShadowController::invalidate(void)=0x8023F8A0
MR::addShadowController(ShadowController*)=0x8023F8B0
MR::requestCalcActorShadowAppear(LiveActor*)=0x8023F8F0
MR::requestCalcActorShadow(LiveActor*)=0x8023F950
MR::Vector<MR::AssignableArray<ShadowController*>>::push_back(const ShadowController*)=0x8023F970
ShadowDrawer::__ct(const char*)=0x8023FA70
ShadowDrawer::getController(void) const=0x8023FAC0
ShadowDrawer::setShadowController(ShadowController*)=0x8023FAD0
ShadowSurfaceBox::__ct(void)=0x8023FAE0
ShadowSurfaceDrawer::__dt(void)=0x8023FB40
ShadowSurfaceBox::setSize(const JGeometry::TVec3<float>&)=0x8023FBA0
ShadowSurfaceBox::draw(void) const=0x8023FBC0
ShadowSurfaceBox::__dt(void)=0x80240000
ShadowSurfaceCircle::__ct(void)=0x80240060
ShadowSurfaceCircle::setRadius(float)=0x802400B0
ShadowSurfaceCircle::draw(void) const=0x802400C0
ShadowSurfaceCircle::__dt(void)=0x80240210
ShadowSurfaceDrawInit::__ct(const char*)=0x80240270
ShadowSurfaceDrawInit::initDraw(void)=0x802402D0
ShadowSurfaceDrawer::__ct(const char*)=0x80240390
ShadowSurfaceDrawInit::__dt(void)=0x802403F0
ShadowSurfaceOval::__ct(void)=0x80240450
ShadowSurfaceOval::setColor(Color8)=0x802404E0
ShadowSurfaceOval::setAlpha(unsigned char)=0x80240520
ShadowSurfaceOval::setSize(const JGeometry::TVec3<float>&)=0x80240530
ShadowSurfaceOval::draw(void) const=0x80240550
ShadowSurfaceOval::__dt(void)=0x802406E0
ShadowVolumeBox::__ct(void)=0x80240740
ShadowVolumeBox::setSize(const JGeometry::TVec3<float>&)=0x802407C0
ShadowVolumeBox::loadModelDrawMtx(void) const=0x802407D0
ShadowVolumeBox::makeVertexBuffer(void) const=0x80240840
ShadowVolumeBox::drawShape(void) const=0x80240FD0
ShadowVolumeBox::__dt(void)=0x80241120
ShadowVolumeCylinder::__ct(void)=0x80241180
ShadowVolumeModel::__dt(void)=0x802411E0
ShadowVolumeCylinder::setRadius(float)=0x80241240
ShadowVolumeCylinder::loadModelDrawMtx(void) const=0x80241250
ShadowVolumeCylinder::__dt(void)=0x80241350
ShadowVolumeDrawInit::__ct(void)=0x802413B0
ShadowVolumeDrawer::__ct(const char*)=0x80241420
ShadowVolumeDrawer::setStartDrawShepeOffset(float)=0x80241490
ShadowVolumeDrawer::setEndDrawShepeOffset(float)=0x802414A0
ShadowVolumeDrawer::onCutDropShadow(void)=0x802414B0
ShadowVolumeDrawer::offCutDropShadow(void)=0x802414C0
ShadowVolumeDrawer::calcBaseDropPosition(JGeometry::TVec3<float>*) const=0x802414D0
ShadowVolumeDrawer::calcBaseDropPosition(JGeometry::TVec3<float>*, const ShadowController*) const=0x80241520
ShadowVolumeDrawer::calcBaseDropLength(void) const=0x80241600
ShadowVolumeDrawer::calcBaseDropLength(const ShadowController*) const=0x80241640
ShadowVolumeDrawer::loadModelDrawMtx(void) const=0x802416D0
ShadowVolumeDrawer::drawShape(void) const=0x802416E0
ShadowVolumeDrawer::isDraw(void) const=0x802416F0
ShadowVolumeDrawer::draw(void) const=0x80241720
ShadowVolumeDrawInit::__dt(void)=0x80241820
short::(nit_\ShadowVolumeDrawer_cpp)=0x80241880
ShadowVolumeFlatModel::__ct(const char*)=0x802418D0
ShadowVolumeFlatModel::__ct(void)=0x80241940
ShadowVolumeFlatModel::initModel(const char*)=0x80241990
ShadowVolumeFlatModel::initJointDrawMtxResister(void)=0x802419D0
ShadowVolumeFlatModel::draw(void) const=0x80241A30
ShadowVolumeFlatModel::loadModelDrawMtx(void) const=0x80241A70
ShadowVolumeFlatModel::__dt(void)=0x80241C30
ShadowVolumeLine::__ct(void)=0x80241C90
ShadowVolumeLine::loadModelDrawMtx(void) const=0x80241CF0
ShadowVolumeLine::drawShape(void) const=0x80241D50
ShadowVolumeLine::setFromShadowController(const ShadowController*)=0x80242020
ShadowVolumeLine::setToShadowController(const ShadowController*)=0x80242030
ShadowVolumeLine::setFromWidth(float)=0x80242040
ShadowVolumeLine::setToWidth(float)=0x80242050
ShadowVolumeLine::__dt(void)=0x80242060
ShadowVolumeModel::__ct(const char*)=0x802420C0
ShadowVolumeModel::initVolumeModel(const char*)=0x80242110
ShadowVolumeModel::drawShape(void) const=0x80242150
ShadowVolumeOval::__ct(void)=0x80242160
ShadowVolumeOval::isDraw(void) const=0x802421D0
ShadowVolumeOval::loadModelDrawMtx(void) const=0x80242230
ShadowVolumeOval::setSize(const JGeometry::TVec3<float>&)=0x80242490
ShadowVolumeOval::__dt(void)=0x802424B0
ShadowVolumeOvalPole::__ct(void)=0x80242510
ShadowVolumeOvalPole::loadModelDrawMtx(void) const=0x80242580
ShadowVolumeOvalPole::setSize(const JGeometry::TVec3<float>&)=0x80242820
ShadowVolumeOvalPole::__dt(void)=0x80242840
ShadowVolumeQuakeWave::__ct(LiveActor*)=0x802428A0
ShadowVolumeQuakeWave::loadModelDrawMtx(void) const=0x80242920
ShadowVolumeQuakeWave::drawShape(void) const=0x802429F0
ShadowVolumeQuakeWave::isDraw(void) const=0x80242C60
ShadowVolumeQuakeWave::__dt(void)=0x80242C70
ShadowVolumeSphere::__ct(void)=0x80242CD0
ShadowVolumeSphere::setRadius(float)=0x80242D30
ShadowVolumeSphere::isDraw(void) const=0x80242D40
ShadowVolumeSphere::loadModelDrawMtx(void) const=0x80242DA0
ShadowVolumeSphere::__dt(void)=0x80242E80
SimpleJ3DModelDrawer::__ct(NameObj*, const char*, const char*, int)=0x80242EE0
SimpleJ3DModelDrawer::initDraw(void) const=0x80242FD0
MR::FunctorV0M<const SimpleJ3DModelDrawer*,M20SimpleJ3DModelDrawerFPCvPCv_v>::__cl(void) const=0x80243050
MR::FunctorV0M<const SimpleJ3DModelDrawer*,M20SimpleJ3DModelDrawerFPCvPCv_v>::clone(JKRHeap*) const=0x80243080
SimpleJ3DModelDrawer::__dt(void)=0x802430F0
Spine::__ct(void*, const Nerve*, long)=0x80243150
Spine::update(void)=0x802431D0
Spine::setNerve(const Nerve*)=0x80243230
Spine::getCurrentNerve(void) const=0x802432A0
Spine::changeNerve(void)=0x802432C0
SpotMarkLight::__ct(LiveActor*, float, float, A4_f)=0x80243330
SpotMarkLight::control(void)=0x80243460
SpotMarkLight::calcAndSetBaseMtx(void)=0x80243510
SpotMarkLight::__dt(void)=0x80243520
ViewGroupCtrl::__ct(void)=0x80243580
ViewGroupCtrl::initActorInfo(ClippingActorInfo*, long)=0x80243600
ViewGroupCtrl::startInitViewGroupTable(void)=0x80243620
ViewGroupCtrl::initViewGroup(ClippingActorInfoList*)=0x80243780
ViewGroupCtrl::endInitViewGroupTable(void)=0x802437D0
ViewGroupCtrl::entryLodCtrl(LodCtrl*, const JMapInfoIter&)=0x802437E0
ViewGroupCtrl::update(void)=0x80243860
ActorAppearSwitchListener::__ct(LiveActor*, bool, bool)=0x80244180
ActorAppearSwitchListener::listenSwitchOnEvent(void)=0x802441A0
ActorAppearSwitchListener::listenSwitchOffEvent(void)=0x80244200
Air::__ct(const char*)=0x80244260
Air::init(const JMapInfoIter&)=0x802442B0
MR::Functor<Air>(Air*, M3AirFPCvPv_v_Q22MR31FunctorV0M<Air*,M3AirFPCvPv_v>)=0x802444F0
Air::connectToScene(void)=0x80244530
Air::appear(void)=0x80244540
Air::initModel(const char*)=0x80244630
Air::tryChange(void)=0x80244640
Air::appearFadeIn(void)=0x802446D0
Air::appearFadeOut(void)=0x80244730
Air::exeIn(void)=0x80244790
Air::exeOut(void)=0x80244860
ProjectionMapAir::__ct(const char*)=0x80244960
Air::__dt(void)=0x802449A0
ProjectionMapAir::initModel(const char*)=0x80244A00
Air::setFarClipping(void)=0x80244A60
AirFar100m::__ct(const char*)=0x80244A70
AirFar100m::setFarClipping(void)=0x80244AB0
AfterMapObjDrawAir::__ct(const char*)=0x80244AC0
AfterMapObjDrawAir::connectToScene(void)=0x80244B00
PriorDrawAir::__ct(const char*)=0x80244B20
PriorDrawAirHolder::__ct(void)=0x80244B80
PriorDrawAirHolder::add(PriorDrawAir*)=0x80244BD0
MR::FunctorV0M<Air*,M3AirFPCvPv_v>::__cl(void) const=0x80244BF0
MR::FunctorV0M<Air*,M3AirFPCvPv_v>::clone(JKRHeap*) const=0x80244C20
AirFar100m::__dt(void)=0x80244C90
ProjectionMapAir::__dt(void)=0x80244CF0
AfterMapObjDrawAir::__dt(void)=0x80244D50
PriorDrawAir::__dt(void)=0x80244DB0
PriorDrawAirHolder::__dt(void)=0x80244E10
short::(nit_\Air_cpp)=0x80244E70
NrvAir::HostTypeIn::__ct(void)=0x80244EB0
NrvAir::HostTypeOut::__ct(void)=0x80244EC0
NrvAir::HostTypeWait::__ct(void)=0x80244ED0
NrvAir::HostTypeWait::execute(Spine*) const=0x80244EE0
NrvAir::HostTypeOut::execute(Spine*) const=0x80244EF0
NrvAir::HostTypeIn::execute(Spine*) const=0x80244F00
AwakeControllerHolder::__ct(void)=0x80245060
AwakeControllerHolder::movement(void)=0x802450C0
AwakeControlFunc::addAwakeControl(AreaObj*, const JMapInfoIter&)=0x802452C0
AreaObj::awake(void)=0x802453C0
AreaObj::sleep(void)=0x802453D0
AwakeControlFunc::addAwakeControl(LiveActor*, const JMapInfoIter&)=0x802453E0
MR::Functor<AwakeControllerHolder>(AwakeControllerHolder*, M21AwakeControllerHolderFPCvPv_v_Q22MR69FunctorV0M<AwakeControllerHolder*,M21AwakeControllerHolderFPCvPv_v>)=0x802454E0
MR::FunctorV0M<AwakeControllerHolder*,M21AwakeControllerHolderFPCvPv_v>::__cl(void) const=0x80245520
MR::FunctorV0M<AwakeControllerHolder*,M21AwakeControllerHolderFPCvPv_v>::clone(JKRHeap*) const=0x80245550
AwakeControllerHolder::__dt(void)=0x802455C0
@unnamed@BezierRail_cpp@::calcRailDirection(JGeometry::TVec3<float>*, const RailPart*, float)=0x80245620
BezierRailPart::set(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802456F0
BezierRailPart::calcPos(JGeometry::TVec3<float>*, float) const=0x80245850
BezierRailPart::calcVelocity(JGeometry::TVec3<float>*, float) const=0x80245940
BezierRailPart::getLength(float, float, int) const=0x80245A00
BezierRailPart::getParam(float) const=0x80245C10
BezierRailPart::getNearestParam(const JGeometry::TVec3<float>&, float) const=0x80245D70
BezierRail::__ct(const JMapInfoIter&, const JMapInfo*)=0x80245E80
BezierRail::normalizePos(float, int) const=0x802460A0
BezierRail::getTotalLength(void) const=0x80246160
BezierRail::getPartLength(int) const=0x80246180
BezierRail::calcPos(JGeometry::TVec3<float>*, float) const=0x80246190
BezierRail::calcDirection(JGeometry::TVec3<float>*, float) const=0x802461E0
BezierRail::calcPosDir(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, float) const=0x80246230
BezierRail::getNearestRailPosCoord(const JGeometry::TVec3<float>&) const=0x802462B0
BezierRail::getRailPosCoord(int) const=0x80246430
BezierRail::calcCurrentRailCtrlPointIter(JMapInfoIter*, float, bool) const=0x80246480
BezierRail::calcRailCtrlPointIter(JMapInfoIter*, int) const=0x802464D0
BezierRail::getIncludedSection(const RailPart*, float*, float, int) const=0x802464E0
BezierRail::getCurrentCtrlPointIndex(float, bool) const=0x80246660
Butterfly::__ct(const char*)=0x802467D0
Butterfly::init(const JMapInfoIter&)=0x80246850
Butterfly::initAfterPlacement(void)=0x80246A20
Butterfly::control(void)=0x80246A70
Butterfly::calcAndSetBaseMtx(void)=0x80246AF0
Butterfly::attackSensor(HitSensor*, HitSensor*)=0x80246BD0
Butterfly::updatePosture(void)=0x80246C40
Butterfly::addRunAwayVelocity(void)=0x80246E40
JGeometry::TVec2<float>::__mi(const JGeometry::TVec2<float>&) const=0x80246FA0
Butterfly::tryRunAway(void)=0x80246FE0
Butterfly::tryHive(void)=0x80247130
Butterfly::tryPerchOnSleepingMario(void)=0x80247220
Butterfly::tryAppearStarPeace(long)=0x80247290
Butterfly::exeWait(void)=0x80247340
MR::converge<float>(float, float, float, _f)=0x80247480
Butterfly::exeRunAway(void)=0x802474B0
Butterfly::exeHive(void)=0x80247560
Butterfly::exePerchOn(void)=0x80247670
Butterfly::exeGotoSleepingMario(void)=0x80247760
Butterfly::exeReadyToPerchOnSleepingMario(void)=0x80247850
Butterfly::exePerchOnSleepingMario(void)=0x80247900
Butterfly::__dt(void)=0x802479A0
short::(nit_\Butterfly_cpp)=0x80247A00
NrvButterfly::HostTypeWait::__ct(void)=0x80247A60
NrvButterfly::HostTypeRunAway::__ct(void)=0x80247A70
NrvButterfly::HostTypeHive::__ct(void)=0x80247A80
NrvButterfly::HostTypePerchOn::__ct(void)=0x80247A90
NrvButterfly::HostTypeGotoSleepingMario::__ct(void)=0x80247AA0
NrvButterfly::HostTypeReadyToPerchOnSleepingMario::__ct(void)=0x80247AB0
NrvButterfly::HostTypePerchOnSleepingMario::__ct(void)=0x80247AC0
NrvButterfly::HostTypePerchOnSleepingMario::execute(Spine*) const=0x80247AD0
NrvButterfly::HostTypeReadyToPerchOnSleepingMario::execute(Spine*) const=0x80247AE0
NrvButterfly::HostTypeGotoSleepingMario::execute(Spine*) const=0x80247AF0
NrvButterfly::HostTypePerchOn::execute(Spine*) const=0x80247B00
NrvButterfly::HostTypeHive::execute(Spine*) const=0x80247B10
NrvButterfly::HostTypeRunAway::execute(Spine*) const=0x80247B20
NrvButterfly::HostTypeWait::execute(Spine*) const=0x80247B30
CollisionCategorizedKeeper::__ct(long)=0x80247B40
CollisionCategorizedKeeper::movement(void)=0x80247BE0
CollisionCategorizedKeeper::addToZone(CollisionParts*, long)=0x80247CD0
CollisionCategorizedKeeper::removeFromZone(CollisionParts*, long)=0x80247D20
CollisionCategorizedKeeper::addToGlobal(CollisionParts*)=0x80247D70
CollisionCategorizedKeeper::removeFromGlobal(CollisionParts*)=0x80247DB0
CollisionCategorizedKeeper::checkStrikePoint(const JGeometry::TVec3<float>&, HitInfo*)=0x80247DF0
CollisionParts::getTrans(void)=0x80248010
CollisionCategorizedKeeper::checkStrikeBall(const JGeometry::TVec3<float>&, float, bool, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x80248020
CollisionCategorizedKeeper::checkStrikeBallWithThickness(const JGeometry::TVec3<float>&, float, float, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x80248270
CollisionCategorizedKeeper::checkStrikeLine(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, const CollisionPartsFilterBase*, const TriangleFilterBase*)=0x802484D0
CollisionCategorizedKeeper::createAreaPolygonList(Triangle*, unsigned long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80248790
CollisionCategorizedKeeper::createAreaPolygonListArray(Triangle*, unsigned long, JGeometry::TVec3<float>*, unsigned long)=0x80248950
CollisionCategorizedKeeper::isSphereOverlappingWithBox(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x80248AB0
CollisionCategorizedKeeper::searchSameHostParts(CollisionParts*, CollisionParts*) const=0x80248B40
CollisionCategorizedKeeper::getStrikeInfo(unsigned long)=0x80248BC0
CollisionCategorizedKeeper::getZone(int)=0x80248BD0
CollisionZone::__ct(long)=0x80248C70
CollisionZone::addParts(CollisionParts*)=0x80248D30
CollisionZone::calcMinMaxAndRadius(void)=0x80248D60
CollisionZone::calcMinMaxAndRadiusIfMoveOuter(CollisionParts*)=0x80248F20
CollisionZone::addAndUpdateMinMax(JGeometry::TVec3<float>, JGeometry::TVec3<float>)=0x80249010
CollisionZone::eraseParts(CollisionParts*)=0x802490F0
CollisionCategorizedKeeper::__dt(void)=0x80249170
CollisionCode::__ct(void)=0x802491D0
CollisionCode::createFloorTable(void)=0x80249230
CodeTable::__ct(unsigned long)=0x80249540
CodeTable::add(const char*, unsigned long)=0x802495B0
CollisionCode::createWallTable(void)=0x80249630
CollisionCode::createSoundTable(void)=0x80249710
CollisionCode::createCameraTable(void)=0x802498D0
CollisionCode::getFloorCode(const JMapInfoIter&)=0x80249940
CollisionCode::getFloorCodeString(const Triangle&)=0x80249950
CodeTable::getString(unsigned long)=0x802499B0
CollisionCode::getWallCode(const JMapInfoIter&)=0x80249A00
CollisionCode::getWallCodeString(const Triangle&)=0x80249A10
CollisionCode::getSoundCode(const JMapInfoIter&)=0x80249A70
CollisionCode::getSoundCodeString(const Triangle&)=0x80249A80
CollisionCode::getSoundCodeString(const JMapInfoIter&)=0x80249AD0
JMapInfoIter::getValue<unsigned long>(const char*, unsigned long*, _b) const=0x80249BA0
CollisionCode::getCameraCode(const JMapInfoIter&)=0x80249C10
CollisionCode::getCameraID(const Triangle&)=0x80249C20
CollisionCode::getCameraID(const JMapInfoIter&)=0x80249C70
CollisionCode::getCode(const JMapInfoIter&, CodeTable*, const char*)=0x80249CD0
CollisionDirector::__ct(void)=0x80249DD0
CollisionDirector::init(const JMapInfoIter&)=0x80249EA0
CollisionDirector::initAfterPlacement(void)=0x80249EB0
CollisionDirector::movement(void)=0x80249EC0
MR::getCollisionDirector(void)=0x80249F20
CollisionDirector::__dt(void)=0x80249F50
CollisionParts::__ct(void)=0x80249FB0
CollisionParts::init(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, HitSensor*, const void*, const void*, long, bool)=0x8024A0F0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::getScale(JGeometry::TVec3<float>&) const=0x8024A1C0
CollisionParts::addToBelongZone(void)=0x8024A270
CollisionParts::removeFromBelongZone(void)=0x8024A2D0
CollisionParts::initWithAutoEqualScale(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, HitSensor*, const void*, const void*, long, bool)=0x8024A330
CollisionParts::initWithNotUsingScale(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, HitSensor*, const void*, const void*, long, bool)=0x8024A350
CollisionParts::resetAllMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x8024A370
CollisionParts::resetAllMtx(void)=0x8024A3A0
CollisionParts::resetAllMtxPrivate(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x8024A420
CollisionParts::setMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x8024A480
CollisionParts::setMtx(void)=0x8024A490
CollisionParts::updateMtx(void)=0x8024A4A0
CollisionParts::makeEqualScale(A4_f)=0x8024A5F0
CollisionParts::updateBoundingSphereRange(void)=0x8024A7B0
CollisionParts::updateBoundingSphereRange(JGeometry::TVec3<float>)=0x8024A800
CollisionParts::updateBoundingSphereRangePrivate(float)=0x8024A820
CollisionParts::getHostName(void) const=0x8024A840
CollisionParts::getPlacementZoneID(void) const=0x8024A870
CollisionParts::checkStrikePoint(HitInfo*, const JGeometry::TVec3<float>&)=0x8024A880
CollisionParts::checkStrikeBall(HitInfo*, unsigned long, const JGeometry::TVec3<float>&, float, bool, const TriangleFilterBase*)=0x8024AA30
CollisionParts::checkStrikeBallCore(HitInfo*, unsigned long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, float, KC_PrismData*, float*, unsigned char*, const TriangleFilterBase*, const JGeometry::TVec3<float>*)=0x8024AD00
CollisionParts::checkStrikeBallWithThickness(HitInfo*, unsigned long, const JGeometry::TVec3<float>&, float, float, const TriangleFilterBase*)=0x8024AEB0
CollisionParts::calcCollidePosition(JGeometry::TVec3<float>*, const KC_PrismData&, unsigned char)=0x8024B070
CollisionParts::projectToPlane(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8024B3E0
CollisionParts::checkStrikeLine(HitInfo*, unsigned long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const TriangleFilterBase*)=0x8024B4A0
CollisionParts::createAreaPolygonList(Triangle*, unsigned long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8024B690
CollisionParts::createAreaPolygonListArray(Triangle*, unsigned long, JGeometry::TVec3<float>*, unsigned long)=0x8024B780
CollisionParts::calcForceMovePower(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x8024B890
FileSelectCameraController::__ct(const char*)=0x8024B920
FileSelectCameraController::init(const JMapInfoIter&)=0x8024B9A0
FileSelectCameraController::appear(void)=0x8024BA00
FileSelectCameraController::kill(void)=0x8024BAD0
FileSelectCameraController::goToFarPoint(void)=0x8024BB10
FileSelectCameraController::goToNearPoint(const JGeometry::TVec3<float>&)=0x8024BB20
FileSelectCameraController::isAtFarPoint(void) const=0x8024BBA0
FileSelectCameraController::isAtNearPoint(void) const=0x8024BBB0
FileSelectCameraController::isToOrAtFarPoint(void) const=0x8024BBC0
FileSelectCameraController::isToOrAtNearPoint(void) const=0x8024BC20
FileSelectCameraController::exeTitle(void)=0x8024BC80
FileSelectCameraController::exeMoveToFarPoint(void)=0x8024BD20
FileSelectCameraController::exeFarPoint(void)=0x8024BE50
FileSelectCameraController::exeMoveToNearPoint(void)=0x8024BED0
FileSelectCameraController::exeNearPoint(void)=0x8024BFF0
FileSelectCameraController::control(void)=0x8024C060
FileSelectCameraController::__dt(void)=0x8024C0C0
short::(nit_\FileSelectCameraController_cpp)=0x8024C120
NrvFileSelectCameraController::FileSelectCameraControllerNrvTitle::__ct(void)=0x8024C170
NrvFileSelectCameraController::FileSelectCameraControllerNrvMoveToFarPoint::__ct(void)=0x8024C180
NrvFileSelectCameraController::FileSelectCameraControllerNrvFarPoint::__ct(void)=0x8024C190
NrvFileSelectCameraController::FileSelectCameraControllerNrvMoveToNearPoint::__ct(void)=0x8024C1A0
NrvFileSelectCameraController::FileSelectCameraControllerNrvNearPoint::__ct(void)=0x8024C1B0
NrvFileSelectCameraController::FileSelectCameraControllerNrvNearPoint::execute(Spine*) const=0x8024C1C0
NrvFileSelectCameraController::FileSelectCameraControllerNrvMoveToNearPoint::execute(Spine*) const=0x8024C1D0
NrvFileSelectCameraController::FileSelectCameraControllerNrvFarPoint::execute(Spine*) const=0x8024C1E0
NrvFileSelectCameraController::FileSelectCameraControllerNrvMoveToFarPoint::execute(Spine*) const=0x8024C1F0
NrvFileSelectCameraController::FileSelectCameraControllerNrvTitle::execute(Spine*) const=0x8024C200
FileSelectEffect::__ct(const char*)=0x8024C210
FileSelectEffect::init(const JMapInfoIter&)=0x8024C260
FileSelectEffect::appear(void)=0x8024C2D0
FileSelectEffect::exeAppear(void)=0x8024C310
FileSelectEffect::exeDisappear(void)=0x8024C380
FileSelectEffect::calcAndSetBaseMtx(void)=0x8024C430
FileSelectEffect::__dt(void)=0x8024C570
short::(nit_\FileSelectEffect_cpp)=0x8024C5D0
NrvFileSelectEffect::FileSelectEffectNrvAppear::__ct(void)=0x8024C610
NrvFileSelectEffect::FileSelectEffectNrvWait::__ct(void)=0x8024C620
NrvFileSelectEffect::FileSelectEffectNrvDisappear::__ct(void)=0x8024C630
NrvFileSelectEffect::FileSelectEffectNrvDisappear::execute(Spine*) const=0x8024C640
NrvFileSelectEffect::FileSelectEffectNrvWait::execute(Spine*) const=0x8024C650
NrvFileSelectEffect::FileSelectEffectNrvAppear::execute(Spine*) const=0x8024C660
FileSelectFunc::copyMiiName(unsigned short*, const FileSelectIconID&)=0x8024C670
FileSelectIconID::__ct(void)=0x8024C740
FileSelectIconID::__ct(const FileSelectIconID&)=0x8024C750
FileSelectIconID::set(const FileSelectIconID&)=0x8024C770
FileSelectIconID::setMiiIndex(unsigned short)=0x8024C790
FileSelectIconID::isMii(void) const=0x8024C7A0
FileSelectIconID::getMiiIndex(void) const=0x8024C7B0
FileSelectIconID::setFellowID(FileSelectIconID::EFellowID)=0x8024C7C0
FileSelectIconID::isFellow(void) const=0x8024C7D0
FileSelectIconID::getFellowID(void) const=0x8024C7E0
@unnamed@FileSelectItem_cpp@::checkCollisionOfPointAndCylinder(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x8024C7F0
FileSelectItem::__ct(long, bool, const FileSelectIconID&, const char*)=0x8024C8D0
FileSelectItem::init(const JMapInfoIter&)=0x8024CA30
FileSelectItem::appear(void)=0x8024CB00
FileSelectItem::makeActorAppeared(void)=0x8024CBA0
FileSelectItem::makeActorDead(void)=0x8024CBE0
FileSelectItem::isNew(void) const=0x8024CC70
FileSelectItem::isExist(void) const=0x8024CC80
FileSelectItem::format(void)=0x8024CC90
FileSelectItem::change(const FileSelectIconID&, bool)=0x8024CCD0
FileSelectItem::forceChange(const FileSelectIconID&, bool)=0x8024CD60
FileSelectItem::invalidateSelect(void)=0x8024CE30
FileSelectItem::validateSelect(void)=0x8024CE70
FileSelectItem::appearIndex(void)=0x8024CE80
FileSelectItem::disappearIndex(void)=0x8024CEA0
FileSelectItem::copyIconID(FileSelectIconID*)=0x8024CEB0
FileSelectItem::setSelectDelegator(FileSelectItemDelegatorBase*)=0x8024CEC0
FileSelectItem::onPointing(void)=0x8024CED0
FileSelectItem::offPointing(void)=0x8024CF80
FileSelectItem::validateRotate(void)=0x8024CFD0
FileSelectItem::turnToFront(long)=0x8024D000
FileSelectItem::exeFormat(void)=0x8024D020
FileSelectItem::exeChangeFellow(void)=0x8024D110
FileSelectItem::exeChangeMii(void)=0x8024D220
FileSelectItem::control(void)=0x8024D380
FileSelectItem::createNew(void)=0x8024D580
FileSelectItem::createFellows(void)=0x8024D5F0
FileSelectItem::createMii(void)=0x8024D670
FileSelectItem::createNumber(void)=0x8024D790
FileSelectItem::updatePointing(void)=0x8024D7F0
FileSelectItem::updateRotate(void)=0x8024D8F0
FileSelectItem::setPlanetColor(void)=0x8024DF60
FileSelectItem::appearFellowModel(void)=0x8024DFE0
FileSelectItem::killAllModels(void)=0x8024E030
FileSelectItem::emitOpen(void)=0x8024E0C0
FileSelectItem::emitVanish(void)=0x8024E170
FileSelectItem::emitCopy(void)=0x8024E220
FileSelectItem::emitCompleteEffect(void)=0x8024E2D0
FileSelectItem::deleteCompleteEffect(void)=0x8024E370
FileSelectItemSub::ScaleController::__ct(void)=0x8024E3E0
FileSelectItemSub::ScaleController::exeToSmall(void)=0x8024E440
FileSelectItemSub::ScaleController::exeToBig(void)=0x8024E4D0
FileSelectItemSub::BlinkController::__ct(FileSelectItem*)=0x8024E560
FileSelectItemSub::BlinkController::exeOpen(void)=0x8024E5D0
FileSelectItemSub::BlinkController::exeShut(void)=0x8024E6B0
FileSelectItemSub::BlinkController::exeSleep(void)=0x8024E720
FileSelectItemSub::BlinkController::exeBlink(void)=0x8024E7B0
FileSelectItemSub::BlinkController::shut(void)=0x8024E8E0
FileSelectItemSub::BlinkController::open(void)=0x8024E960
FileSelectItemSub::BlinkController::sleep(void)=0x8024E9E0
FileSelectItem::__dt(void)=0x8024EA60
FileSelectItemSub::ScaleController::__dt(void)=0x8024EAC0
FileSelectItemSub::BlinkController::__dt(void)=0x8024EB20
short::(nit_\FileSelectItem_cpp)=0x8024EB80
NrvFileSelectItem::FileSelectItemNrvNewWait::__ct(void)=0x8024EC10
NrvFileSelectItem::FileSelectItemNrvExistWait::__ct(void)=0x8024EC20
NrvFileSelectItem::FileSelectItemNrvFormat::__ct(void)=0x8024EC30
NrvFileSelectItem::FileSelectItemNrvChangeFellow::__ct(void)=0x8024EC40
NrvFileSelectItem::FileSelectItemNrvChangeMii::__ct(void)=0x8024EC50
FileSelectItemSub::ScaleControllerNrvToSmall::__ct(void)=0x8024EC60
FileSelectItemSub::ScaleControllerNrvSmall::__ct(void)=0x8024EC70
FileSelectItemSub::ScaleControllerNrvToBig::__ct(void)=0x8024EC80
FileSelectItemSub::ScaleControllerNrvBig::__ct(void)=0x8024EC90
FileSelectItemSub::BlinkControllerNrvOpen::__ct(void)=0x8024ECA0
FileSelectItemSub::BlinkControllerNrvShut::__ct(void)=0x8024ECB0
FileSelectItemSub::BlinkControllerNrvSleep::__ct(void)=0x8024ECC0
FileSelectItemSub::BlinkControllerNrvBlink::__ct(void)=0x8024ECD0
FileSelectItemSub::BlinkControllerNrvBlink::execute(Spine*) const=0x8024ECE0
FileSelectItemSub::BlinkControllerNrvSleep::execute(Spine*) const=0x8024ECF0
FileSelectItemSub::BlinkControllerNrvShut::execute(Spine*) const=0x8024ED00
FileSelectItemSub::BlinkControllerNrvOpen::execute(Spine*) const=0x8024ED10
FileSelectItemSub::ScaleControllerNrvBig::execute(Spine*) const=0x8024ED20
FileSelectItemSub::ScaleControllerNrvToBig::execute(Spine*) const=0x8024ED30
FileSelectItemSub::ScaleControllerNrvSmall::execute(Spine*) const=0x8024ED40
FileSelectItemSub::ScaleControllerNrvToSmall::execute(Spine*) const=0x8024ED50
NrvFileSelectItem::FileSelectItemNrvChangeMii::execute(Spine*) const=0x8024ED60
NrvFileSelectItem::FileSelectItemNrvChangeFellow::execute(Spine*) const=0x8024ED70
NrvFileSelectItem::FileSelectItemNrvFormat::execute(Spine*) const=0x8024ED80
NrvFileSelectItem::FileSelectItemNrvExistWait::execute(Spine*) const=0x8024ED90
NrvFileSelectItem::FileSelectItemNrvNewWait::execute(Spine*) const=0x8024EDA0
FileSelectModel::__ct(const char*, A4_fPCc)=0x8024EDB0
FileSelectModel::calcAnim(void)=0x8024EE80
FileSelectModel::open(void)=0x8024EE90
FileSelectModel::blinkOnce(void)=0x8024EEE0
FileSelectModel::close(void)=0x8024EEF0
FileSelectModel::blink(void)=0x8024EF00
FileSelectModel::isOpen(void) const=0x8024EF10
FileSelectModel::emitOpen(void)=0x8024EF20
FileSelectModel::emitVanish(void)=0x8024EF30
FileSelectModel::emitCopy(void)=0x8024EF40
FileSelectModel::emitCompleteEffect(void)=0x8024EF50
FileSelectModel::deleteCompleteEffect(void)=0x8024EF60
FileSelectModel::exeBlinkOnce(void)=0x8024EF70
FileSelectModel::exeBlink(void)=0x8024EFD0
FileSelectModel::calcAndSetBaseMtx(void)=0x8024F030
FileSelectModel::__dt(void)=0x8024F080
short::(nit_\FileSelectModel_cpp)=0x8024F0E0
NrvFileSelectModel::FileSelectModelNrvOpen::__ct(void)=0x8024F120
NrvFileSelectModel::FileSelectModelNrvBlinkOnce::__ct(void)=0x8024F130
NrvFileSelectModel::FileSelectModelNrvClose::__ct(void)=0x8024F140
NrvFileSelectModel::FileSelectModelNrvBlink::__ct(void)=0x8024F150
NrvFileSelectModel::FileSelectModelNrvBlink::execute(Spine*) const=0x8024F160
NrvFileSelectModel::FileSelectModelNrvClose::execute(Spine*) const=0x8024F170
NrvFileSelectModel::FileSelectModelNrvBlinkOnce::execute(Spine*) const=0x8024F1C0
NrvFileSelectModel::FileSelectModelNrvOpen::execute(Spine*) const=0x8024F1D0
@unnamed@FileSelector_cpp@::getItemArrayIndex(long)=0x8024F220
FileSelector::__ct(const char*)=0x8024F260
FileSelector::init(const JMapInfoIter&)=0x8024F320
FileSelector::appear(void)=0x8024F490
FileSelector::kill(void)=0x8024F4D0
FileSelector::callbackMii(void)=0x8024F530
FileSelector::notifyItem(FileSelectItem*, long)=0x8024F590
FileSelector::control(void)=0x8024F5B0
FileSelector::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8024F6F0
FileSelector::initUserFileArray(void)=0x8024F700
FileSelector::createCameraController(void)=0x8024F760
FileSelector::createFileItems(void)=0x8024F7B0
FileSelector::createOperationButton(void)=0x8024F900
MR::Functor<FileSelector>(FileSelector*, M12FileSelectorFPCvPv_v_Q22MR51FunctorV0M<FileSelector*,M12FileSelectorFPCvPv_v>)=0x8024FA20
FileSelector::createBackButton(void)=0x8024FA60
FileSelector::createFileInfo(void)=0x8024FB10
FileSelector::createTitle(void)=0x8024FB60
FileSelector::createMiiSelect(void)=0x8024FBB0
FileSelector::createManual(void)=0x8024FC70
FileSelectEffect::__defctor(void)=0x8024FD70
FileSelector::appearAllItems(void)=0x8024FD80
FileSelector::disappearAllLayout(void)=0x8024FDF0
FileSelector::isHiddenAllLayout(void) const=0x8024FE80
FileSelector::updateFileInfo(void)=0x8024FEF0
FileSelector::appearAllIndex(void)=0x8024FFA0
FileSelector::disappearAllIndex(void)=0x80250000
FileSelector::invalidateSelectAll(void)=0x80250060
FileSelector::validateSelectAll(void)=0x802500C0
FileSelector::initUserFile(void)=0x80250120
FileSelector::restoreUserFile(void)=0x80250180
FileSelector::checkAllComplete(void)=0x802501E0
FileSelector::onPoint(FileSelectItem*)=0x80250240
FileSelector::onSelect(FileSelectItem*)=0x802502C0
FileSelector::clearPointing(void)=0x80250360
FileSelector::setFileInfo(long)=0x802503B0
FileSelector::checkSelectedBackButton(void)=0x80250570
FileSelector::goToNearPoint(void)=0x802505C0
FileSelector::calcBasePos(float)=0x80250610
FileSelector::initAllItems(void)=0x80250790
FileSelector::validateRotateAllItems(void)=0x802508D0
FileSelector::getUserFileFellowID(long) const=0x80250E20
FileSelector::isUserFileMiiIdValid(long) const=0x80250E80
FileSelector::getUserFileMiiIndex(long) const=0x80250EF0
FileSelector::storeSetMiiIdUserFile(long, const FileSelectIconID&)=0x80250FC0
FileSelector::getMiiId(RFLCreateID*, const FileSelectIconID&) const=0x80251050
FileSelector::getIconId(FileSelectIconID*, long) const=0x802510B0
FileSelector::getMissCount(long) const=0x80251180
FileSelector::playSelectedME(void)=0x802512B0
FileSelector::updateBgm(void)=0x80251340
FileSelector::exeCreate(void)=0x80252090
FileSelector::exeMiiTip(void)=0x80252120
FileSelector::exeMiiSelectStart(void)=0x80252180
FileSelector::exeMiiSelect(void)=0x80252270
FileSelector::exeMiiCancel(void)=0x802523B0
FileSelector::exeMiiConfirmWait(void)=0x80252410
FileSelector::exeMiiConfirm(void)=0x80252470
FileSelector::exeMiiCreateWait(void)=0x80252610
FileSelector::exeMiiCreateDemo(void)=0x80252690
FileSelector::exeMiiCaution(void)=0x80252770
FileSelector::exeMiiInfoStart(void)=0x80252800
FileSelector::exeMiiInfo(void)=0x80252860
FileSelector::exeDeleteConfirmStart(void)=0x80252900
FileSelector::exeDeleteConfirm(void)=0x80252960
FileSelector::exeDelete(void)=0x80252A50
FileSelector::exeDeleteDemo(void)=0x80252AE0
FileSelector::exeManualStart(void)=0x80252B50
FileSelectItemDelegator<FileSelector>::notify(FileSelectItem*, long)=0x80252C30
MR::FunctorV0M<FileSelector*,M12FileSelectorFPCvPv_v>::__cl(void) const=0x80252C60
MR::FunctorV0M<FileSelector*,M12FileSelectorFPCvPv_v>::clone(JKRHeap*) const=0x80252C90
DeriveActorGroup<FileSelectItem>::__dt(void)=0x80252D60
short::(nit_\FileSelector_cpp)=0x80252DC0
Fish::__ct(const char*, FishGroup*, int, bool)=0x80253360
Fish::init(const JMapInfoIter&)=0x80253470
Fish::exeWander(void)=0x80253550
Fish::exeApproach(void)=0x80253620
Fish::exeEscape(void)=0x802537D0
Fish::control(void)=0x802538D0
Fish::calcAndSetBaseMtx(void)=0x80253AA0
Fish::tryEscapeFromPlayer(void)=0x80253B10
Fish::updateFollowPointPos(void)=0x80253BA0
FishGroup::__ct(const char*)=0x80253C00
FishGroup::init(const JMapInfoIter&)=0x80253C80
FishGroup::startClipped(void)=0x80253E80
FishGroup::endClipped(void)=0x80253EF0
FishGroup::control(void)=0x80253F60
Fish::__dt(void)=0x80253FB0
FishGroup::__dt(void)=0x80254010
short::(nit_\FishGroup_cpp)=0x80254070
NrvFish::FishNrvWander::__ct(void)=0x802540B0
NrvFish::FishNrvApproach::__ct(void)=0x802540C0
NrvFish::FishNrvEscape::__ct(void)=0x802540D0
NrvFish::FishNrvEscape::execute(Spine*) const=0x802540E0
NrvFish::FishNrvApproach::execute(Spine*) const=0x802540F0
NrvFish::FishNrvWander::execute(Spine*) const=0x80254100
Flag::__ct(const char*)=0x80254110
Flag::init(const JMapInfoIter&)=0x80254230
Flag::FixPoints::__ct(void)=0x80254A70
Flag::appear(void)=0x80254A90
Flag::movement(void)=0x80254B40
Flag::updateFlag(void)=0x80254BD0
Flag::draw(void) const=0x80255390
Flag::loadMaterial(void) const=0x802556B0
Flag::__dt(void)=0x80255980
GroundChecker::__ct(const char*, float, float)=0x802559E0
GroundChecker::bringFriction(float, float)=0x80255A90
GroundChecker::__dt(void)=0x80255AB0
GroupSwitchWatcher::__ct(const char*)=0x80255B10
GroupSwitchWatcher::init(const JMapInfoIter&)=0x80255B70
GroupSwitchWatcher::control(void)=0x80255C00
GroupSwitchWatcher::__dt(void)=0x80255D00
Halo::__ct(const char*)=0x80255EB0
MapObjActor::__dt(void)=0x80255F00
Halo::init(const JMapInfoIter&)=0x80255F60
Halo::appear(void)=0x802560A0
Halo::getDistance(void) const=0x80256120
Halo::connectToScene(const MapObjActorInitInfo&)=0x80256130
Halo::isDistanceAppear(void) const=0x80256140
Halo::isDistanceDisappear(void) const=0x802561D0
Halo::exeDisappear(void)=0x80256260
PowerStarHalo::__ct(const char*)=0x802563A0
Halo::__dt(void)=0x802563F0
PowerStarHalo::init(const JMapInfoIter&)=0x80256450
PowerStarHalo::appear(void)=0x802564B0
PowerStarHalo::getDistance(void) const=0x80256510
PowerStarHalo::exeWaitScenarioOpeningEnd(void)=0x80256550
MapObjActor::makeSubModels(const JMapInfoIter&, const MapObjActorInitInfo&)=0x802565B0
PowerStarHalo::__dt(void)=0x802565C0
short::(nit_\Halo_cpp)=0x80256620
NrvHalo::HostTypeAppear::__ct(void)=0x80256660
NrvHalo::HostTypeDisappear::__ct(void)=0x80256670
NrvPowerStarHalo::HostTypeWaitScenarioOpeningEnd::__ct(void)=0x80256680
NrvPowerStarHalo::HostTypeWaitScenarioOpeningEnd::execute(Spine*) const=0x80256690
NrvHalo::HostTypeDisappear::execute(Spine*) const=0x802566A0
NrvHalo::HostTypeAppear::execute(Spine*) const=0x802566B0
HeadLight::__ct(const char*)=0x80256710
HeadLight::init(const JMapInfoIter&)=0x80256770
HeadLight::calcAndSetBaseMtx(void)=0x80256860
HeadLight::control(void)=0x802568C0
HeadLight::__dt(void)=0x802569D0
Triangle::__ct(void)=0x80256A30
Triangle::fillData(CollisionParts*, unsigned long, HitSensor*)=0x80256AB0
Triangle::getHostName(void) const=0x80256C60
Triangle::getHostPlacementZoneID(void) const=0x80256C70
Triangle::isHostMoved(void) const=0x80256C80
Triangle::isValid(void) const=0x80256CA0
Triangle::getNormal(int) const=0x80256CC0
Triangle::getFaceNormal(void) const=0x80256CD0
Triangle::getEdgeNormal(int) const=0x80256CE0
Triangle::getPos(int) const=0x80256D00
Triangle::calcAndGetNormal(int)=0x80256D10
Triangle::calcAndGetEdgeNormal(int)=0x80256E70
Triangle::calcAndGetPos(int)=0x80256F90
Triangle::calcForceMovePower(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x80257020
Triangle::getAttributes(void) const=0x80257030
Triangle::getBaseMtx(void) const=0x80257090
Triangle::getBaseInvMtx(void) const=0x802570A0
Triangle::getPrevBaseMtx(void) const=0x802570B0
HitInfo::__ct(void)=0x802570C0
HitInfo::isCollisionAtFace(void) const=0x80257140
HitInfo::isCollisionAtEdge(void) const=0x80257160
HitInfo::isCollisionAtCorner(void) const=0x80257180
KCollisionServer::__ct(void)=0x802571A0
KCollisionServer::init(void*, const void*)=0x80257200
KCollisionServer::setData(void*)=0x80257250
KCollisionServer::calcFarthestVertexDistance(void)=0x802572D0
std::find<KC_PrismData*,KC_PrismData*>(KC_PrismData*, KC_PrismData*, const KC_PrismData*, _PP12KC_PrismData)=0x80257B00
KCollisionServer::V3u::setUsingCast(const JGeometry::TVec3<float>&)=0x80258810
JGeometry::TVec3<float>::__eq(const JGeometry::TVec3<float>&) const=0x80259670
JGeometry::TVec3<float>::__dv(float) const=0x802599C0
KCollisionServer::toIndex(const KC_PrismData*) const=0x80259A10
KCollisionServer::getFaceNormal(const KC_PrismData*) const=0x80259A30
KCollisionServer::getEdgeNormal1(const KC_PrismData*) const=0x80259A50
KCollisionServer::getEdgeNormal2(const KC_PrismData*) const=0x80259A70
KCollisionServer::getEdgeNormal3(const KC_PrismData*) const=0x80259A90
KCollisionServer::getNormal(unsigned long) const=0x80259AB0
KCollisionServer::calXvec(const Fxyz*, const Fxyz*, Fxyz*) const=0x80259AD0
KCollisionServer::getPos(const KC_PrismData*, int) const=0x80259B20
KCollisionServer::getPrismData(unsigned long) const=0x80259D20
KCollisionServer::getTriangleNum(void) const=0x80259D40
KCollisionServer::getAttributes(unsigned long) const=0x80259D60
KCollisionServer::isInsideMinMaxInLocalSpace(const KCollisionServer::V3u&) const=0x80259D90
KCollisionServer::objectSpaceToLocalSpace(KCollisionServer::V3u*, const JGeometry::TVec3<float>&) const=0x80259F10
KoopaBattlePlanet::__ct(const char*)=0x80259F80
PlanetMap::__dt(void)=0x80259FD0
KoopaBattlePlanet::init(const JMapInfoIter&)=0x8025A030
KoopaBattlePlanet::initAfterPlacement(void)=0x8025A0C0
KoopaBattlePlanet::makeActorAppeared(void)=0x8025A100
KoopaBattlePlanet::makeActorDead(void)=0x8025A140
PlanetMap::initProjmapMtx(void)=0x8025A180
PlanetMap::getFarClipDistance(void) const=0x8025A1A0
KoopaBattlePlanet::__dt(void)=0x8025A1B0
KoopaFinalStarPlanet::__ct(const char*)=0x8025A210
KoopaFinalStarPlanet::init(const JMapInfoIter&)=0x8025A250
KoopaFinalStarPlanet::__dt(void)=0x8025A2D0
LightDataHolder::__ct(void)=0x8025A330
LightDataHolder::initLightData(void)=0x8025A340
LightDataHolder::findAreaLight(const char*) const=0x8025A3C0
LightDataHolder::getDefaultAreaLightName(void) const=0x8025A440
LightDataHolder::getDefaultStepInterpolate(void) const=0x8025A450
LightDirector::__ct(void)=0x8025A460
LightDirector::init(const JMapInfoIter&)=0x8025A4D0
LightDirector::initData(void)=0x8025A560
LightDirector::loadLightPlayer(void) const=0x8025A610
LightDirector::movement(void)=0x8025A6A0
LightDirector::__dt(void)=0x8025A6E0
LightFunction::initLightData(void)=0x8025A890
LightFunction::loadLightArchive(void)=0x8025A8C0
LightFunction::createLightDataParser(JMapInfo*)=0x8025A960
LightFunction::createZoneDataParser(const char*, JMapInfo*)=0x8025A9D0
LightFunction::getDataLightInfo(JMapInfo*, int, LightInfo*, const char*)=0x8025AA70
@unnamed@LightFunction_cpp@::getDataActorLightInfo(JMapInfo*, int, ActorLightInfo*, const char*)=0x8025AB40
LightFunction::getAreaLightLightData(JMapInfo*, int, AreaLightInfo*)=0x8025AC40
LightFunction::getDefaultAreaLightName(void)=0x8025AD10
LightFunction::getDefaultStepInterpolate(void)=0x8025AD40
LightFunction::registerPlayerLightCtrl(const ActorLightCtrl*)=0x8025AD70
LightFunction::registerLightAreaHolder(LightAreaHolder*)=0x8025ADB0
LightFunction::tryFindNewAreaLightID(const JGeometry::TVec3<float>&, ZoneLightID*)=0x8025ADF0
LightFunction::getAreaLightInfo(const ZoneLightID&)=0x8025AE40
@unnamed@LightFunction_cpp@::blendActorLightPos(const LightInfo&, const LightInfo&, LightInfo*, float)=0x8025AEA0
LightFunction::blendActorLightInfo(ActorLightInfo*, const ActorLightInfo&, const ActorLightInfo&, float)=0x8025B010
@unnamed@LightFunction_cpp@::loadLightDiffuse(_GXColor, const JGeometry::TVec3<float>&, _GXLightID)=0x8025B100
@unnamed@LightFunction_cpp@::loadLightInfoDiffuse(const LightInfo&, _GXLightID)=0x8025B190
LightFunction::loadActorLightInfo(const ActorLightInfo*)=0x8025B230
LightFunction::loadPointLightInfo(const PointLightInfo*)=0x8025B2C0
LightFunction::loadAllLightWhite(void)=0x8025B360
LightPointCtrl::__ct(void)=0x8025B410
LightPointCtrl::loadPointLight(void)=0x8025B4C0
LightPointCtrl::update(void)=0x8025B530
PointLightInfo::__as(const PointLightInfo&)=0x8025B5A0
LightPointCtrl::requestPointLight(const LiveActor*, JGeometry::TVec3<float>, Color8, float, long)=0x8025B5E0
Vec::__as(const Vec&)=0x8025B6F0
LightPointCtrl::updatePointLight(void)=0x8025B710
LightPointCtrl::clearPointLight(PointLightInfo*)=0x8025B830
LightPointCtrl::blendPointLight(PointLightInfo*, const PointLightInfo&, const PointLightInfo&, float)=0x8025B8D0
LightPointCtrl::tryBlendStart(void)=0x8025BA00
LightPointCtrl::isUpdateCandidateActor(const LiveActor*) const=0x8025BA30
ZoneLightID::__ct(void)=0x8025BA90
ZoneLightID::clear(void)=0x8025BAA0
ZoneLightID::isTargetArea(const LightArea*) const=0x8025BAB0
ZoneLightID::isOutOfArea(void) const=0x8025BAE0
LightZoneInfo::__ct(void)=0x8025BAF0
LightZoneInfo::init(long)=0x8025BB00
LightZoneInfo::getAreaLightNameInZoneData(long) const=0x8025BBB0
LightZoneDataHolder::__ct(void)=0x8025BBF0
LightZoneDataHolder::initZoneData(void)=0x8025BC00
LightZoneDataHolder::getAreaLightNameInZoneData(const ZoneLightID&) const=0x8025BCA0
LightZoneDataHolder::getDefaultStageAreaLightName(void) const=0x8025BCD0
NamePosHolder::__ct(void)=0x8025C040
NamePosInfo::__ct(void)=0x8025C110
NamePosHolder::tryRegisterLinkObj(const NameObj*, const JMapInfoIter&, const char*)=0x8025C120
NamePosHolder::find(const NameObj*, const char*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*) const=0x8025C230
MR::getNamePosHolder(void)=0x8025C3C0
NamePosHolder::__dt(void)=0x8025C3F0
OceanSpherePlane::__ct(long, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&)=0x8025C450
OceanSpherePlane::update(float, float, float)=0x8025C8B0
OceanSpherePlane::getPoint(int, int) const=0x8025C960
OceanSpherePlaneEdge::__ct(long, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&)=0x8025C980
OceanSpherePlaneEdge::update(float, float, float)=0x8025CB80
OceanSphere::__ct(const char*)=0x8025CC10
OceanSphere::init(const JMapInfoIter&)=0x8025CD30
OceanSphere::appear(void)=0x8025CF00
OceanSphere::isInWater(const JGeometry::TVec3<float>&) const=0x8025CF40
OceanSphere::calcWaterInfo(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, WaterInfo*) const=0x8025CFB0
OceanSphere::exeRiseUp(void)=0x8025D140
OceanSphere::initPoints(void)=0x8025D200
@unnamed@OceanSphere_cpp@::calcDisplayListSize(unsigned long, unsigned long)=0x8025D8C0
OceanSphere::initDisplayList(void)=0x8025D900
OceanSphere::control(void)=0x8025DA20
OceanSphere::updatePoints(void)=0x8025DBC0
OceanSphere::getPlanePointLeftUpper(int, int) const=0x8025DD50
OceanSphere::getPlanePointRightUpper(int, int) const=0x8025DE60
OceanSphere::getPlanePointLeftLower(int, int) const=0x8025DF70
OceanSphere::getPlanePointRightLower(int, int) const=0x8025E080
OceanSphere::draw(void) const=0x8025E190
OceanSphere::loadMaterialFace(void) const=0x8025E300
OceanSphere::loadMaterialBack(void) const=0x8025E720
@unnamed@OceanSphere_cpp@::beginDrawPolygon(int, long, bool)=0x8025EA30
OceanSphere::drawSphere(bool, bool) const=0x8025EB20
OceanSphere::sendVertex(const OceanSpherePoint*, bool, bool) const=0x8025F070
OceanSphere::__dt(void)=0x8025F280
short::(nit_\OceanSphere_cpp)=0x8025F2E0
NrvOceanSphere::OceanSphereNrvRiseUp::__ct(void)=0x8025F350
NrvOceanSphere::OceanSphereNrvWait::__ct(void)=0x8025F360
NrvOceanSphere::OceanSphereNrvWait::execute(Spine*) const=0x8025F370
NrvOceanSphere::OceanSphereNrvRiseUp::execute(Spine*) const=0x8025F380
OceanSpherePoint::__ct(const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float, float, const JGeometry::TVec2<float>&)=0x8025F390
OceanSpherePoint::updatePos(float, float, float)=0x8025F430
OceanSpherePoint::calcHeight(float, float, float, float) const=0x8025F4D0
OmoteuLandSky::__ct(const char*)=0x8025F540
OmoteuLandSky::init(const JMapInfoIter&)=0x8025F580
OmoteuLandSky::calcAnim(void)=0x8025F620
OmoteuLandSky::exeFirstWait(void)=0x8025F670
OmoteuLandSky::exeFaceWait(void)=0x8025F700
OmoteuLandSky::exeFaceToBack(void)=0x8025F780
OmoteuLandSky::exeBackWait(void)=0x8025F7E0
OmoteuLandSky::exeBackToFace(void)=0x8025F840
OmoteuLandSky::isPlayerGravitySameDirection(void)=0x8025F8A0
OmoteuLandSky::__dt(void)=0x8025F8F0
short::(nit_\OmoteuLandSky_cpp)=0x8025F950
NrvOmoteuLandSky::OmoteuLandSkyNrvFirst::__ct(void)=0x8025F9A0
NrvOmoteuLandSky::OmoteuLandSkyNrvFaceWait::__ct(void)=0x8025F9B0
NrvOmoteuLandSky::OmoteuLandSkyNrvFaceToBack::__ct(void)=0x8025F9C0
NrvOmoteuLandSky::OmoteuLandSkyNrvBackWait::__ct(void)=0x8025F9D0
NrvOmoteuLandSky::OmoteuLandSkyNrvBackToFace::__ct(void)=0x8025F9E0
NrvOmoteuLandSky::OmoteuLandSkyNrvBackToFace::execute(Spine*) const=0x8025F9F0
NrvOmoteuLandSky::OmoteuLandSkyNrvBackWait::execute(Spine*) const=0x8025FA00
NrvOmoteuLandSky::OmoteuLandSkyNrvFaceToBack::execute(Spine*) const=0x8025FA10
NrvOmoteuLandSky::OmoteuLandSkyNrvFaceWait::execute(Spine*) const=0x8025FA20
NrvOmoteuLandSky::OmoteuLandSkyNrvFirst::execute(Spine*) const=0x8025FA30
PlanetMap::__ct(const char*, const char*)=0x8025FA40
PlanetMap::init(const JMapInfoIter&)=0x8025FAC0
PlanetMap::connectToScene(void)=0x8025FD10
PlanetMap::makeActorAppeared(void)=0x8025FD20
PlanetMap::makeActorDead(void)=0x8025FD70
PlanetMap::initClipping(const JMapInfoIter&)=0x8025FDC0
PlanetMap::getLowMovementType(void) const=0x8025FF10
PlanetMap::initDemoActionAppear(const JMapInfoIter&)=0x8025FF20
PlanetMap::initModel(const char*, const JMapInfoIter&)=0x8025FF80
PlanetMap::initBloomModel(const char*)=0x80260060
PlanetMap::control(void)=0x802600E0
PlanetMap::startClipped(void)=0x80260130
PlanetMap::endClipped(void)=0x80260170
PlanetMap::tryEmitMyEffect(void)=0x802601C0
PlanetMap::tryDeleteMyEffect(void)=0x802601D0
PlanetMap::initSwitchBListener(const JMapInfoIter&)=0x802601E0
MR::Functor<PlanetMap>(PlanetMap*, M9PlanetMapFPCvPv_v_Q22MR43FunctorV0M<PlanetMap*,M9PlanetMapFPCvPv_v>)=0x80260280
PlanetMap::hide(void)=0x802602C0
PlanetMap::show(void)=0x802602D0
PlanetMapFarClippable::__ct(const char*)=0x802602E0
PlanetMapFarClippable::init(const JMapInfoIter&)=0x80260330
FurPlanetMap::__ct(const char*)=0x802603D0
FurPlanetMap::init(const JMapInfoIter&)=0x80260410
PlanetMapAnimLow::getLowMovementType(void) const=0x80260450
PlanetMapStrongLight::__ct(const char*)=0x80260460
PlanetMapStrongLight::connectToScene(void)=0x802604A0
PlanetMapProjmap::__ct(const char*)=0x802604C0
PlanetMapProjmap::initProjmapMtx(void)=0x80260510
PlanetMapPress::init(const JMapInfoIter&)=0x80260550
PlanetMapFarClippable::getFarClipDistance(void) const=0x80260940
MR::FunctorV0M<PlanetMap*,M9PlanetMapFPCvPv_v>::__cl(void) const=0x80260950
MR::FunctorV0M<PlanetMap*,M9PlanetMapFPCvPv_v>::clone(JKRHeap*) const=0x80260980
PlanetMapFarClippable::__dt(void)=0x802609F0
FurPlanetMap::__dt(void)=0x80260AB0
PlanetMapAnimLow::__dt(void)=0x80260B10
PlanetMapStrongLight::__dt(void)=0x80260B70
PlanetMapProjmap::__dt(void)=0x80260BD0
PlanetMapPress::__dt(void)=0x80260C30
PlanetMapCreator::makeSubModelName(const char*, const JMapInfo*, long, const char*, const char*)=0x80260CF0
PlanetMapCreator::createNameObj<BendSwanpPlanet>(const char*, _P7NameObj)=0x80260DC0
PlanetMapCreator::createNameObj<BlueStarCupsulePlanet>(const char*, _P7NameObj)=0x80260E00
PlanetMapCreator::createNameObj<CrescentSeesawPlanet>(const char*, _P7NameObj)=0x80260E40
PlanetMapCreator::createNameObj<FlowerBlossomRellayPlanet>(const char*, _P7NameObj)=0x80260E80
PlanetMapCreator::createNameObj<KoopaFinalStarPlanet>(const char*, _P7NameObj)=0x80260EC0
PlanetMapCreator::createNameObj<MagmaBoatPlanetIce>(const char*, _P7NameObj)=0x80260F00
PlanetMapCreator::createNameObj<MagmaBoatPlanetMagma>(const char*, _P7NameObj)=0x80260F40
PlanetMapCreator::createNameObj<MarioFacePlanet>(const char*, _P7NameObj)=0x80260F80
PlanetMapCreator::createNameObj<MysteryMountainPlanet>(const char*, _P7NameObj)=0x80260FC0
PlanetMapCreator::createNameObj<RelayDrill2DPlanet>(const char*, _P7NameObj)=0x80261040
PlanetMapCreator::createNameObj<RisePictureBookPlanet>(const char*, _P7NameObj)=0x80261080
PlanetMapCreator::createNameObj<GravityTimerChangeWall>(const char*, _P7NameObj)=0x802610C0
PlanetMapCreator::createNameObj<PlanetMapAnimLow>(const char*, _P7NameObj)=0x80261100
PlanetMapCreator::createNameObj<PlanetMapPress>(const char*, _P7NameObj)=0x80261160
PlanetMapCreator::createNameObj<PlanetMapFarClippable>(const char*, _P7NameObj)=0x802611C0
PlanetMapCreator::createNameObj<RotateMoveObj>(const char*, _P7NameObj)=0x80261200
PlanetMapCreator::createNameObj<SimpleMapObj>(const char*, _P7NameObj)=0x80261260
SimpleMapObj::__ct(const char*)=0x802612A0
PlanetMapCreator::createNameObj<SimpleClipPartsObj>(const char*, _P7NameObj)=0x802612E0
PlanetMapCreator::createNameObj<PlanetMapProjmap>(const char*, _P7NameObj)=0x80261320
PlanetMapCreator::createNameObj<FurPlanetMap>(const char*, _P7NameObj)=0x80261360
PlanetMapCreator::createNameObj<KoopaBattlePlanet>(const char*, _P7NameObj)=0x802613A0
PlanetMapCreator::createNameObj<QuicksandPlanet>(const char*, _P7NameObj)=0x802613E0
PlanetMapCreator::createNameObj<PictureJoinPlanet>(const char*, _P7NameObj)=0x80261420
SimpleMapObj::__dt(void)=0x80261480
PlanetMapCreator::createNameObj<SwitchFreezePlanet>(const char*, _P7NameObj)=0x80261520
PlanetMapCreator::createNameObj<PlanetMapStrongLight>(const char*, _P7NameObj)=0x802615A0
@unnamed@PlanetMapCreator_cpp@::isDataForceLow(const PlanetMapData*)=0x802615E0
PlanetMapCreator::__ct(const char*)=0x80261650
PlanetMapCreator::getCreateFunc(const char*)=0x802616D0
@unnamed@PlanetMapCreator_cpp@::createNameObj<PlanetMap>(const char*, _P7NameObj)=0x80261780
PlanetMapCreator::createNameObj<PlanetMapWithoutHighModel>(const char*, _P7NameObj)=0x802617D0
PlanetMapCreator::createPlanetMapDataTable(JMapInfo*)=0x80261810
PlanetMapCreator::addTableData(const JMapInfo*, long)=0x80261890
PlanetMapCreator::getTableData(const char*) const=0x802619F0
PlanetMapCreator::isScenarioForceLow(const PlanetMapData*) const=0x80261A70
PlanetMapCreatorFunction::getPlanetMapCreator(const char*)=0x80261B40
PlanetMapCreatorFunction::isLoadArchiveAfterScenarioSelected(const char*)=0x80261B80
PlanetMapCreatorFunction::isRegisteredObj(const char*)=0x80261BF0
PlanetMapCreator::__dt(void)=0x80261C40
PlanetMapWithoutHighModel::__ct(const char*)=0x80261CA0
PlanetMapWithoutHighModel::init(const JMapInfoIter&)=0x80261CE0
PlanetMapWithoutHighModel::connectToScene(const MapObjActorInitInfo&)=0x80261DA0
PlanetMapWithoutHighModel::__dt(void)=0x80261DB0
ProductMapCreator::createNameObj<SimpleMapObj>(const char*, _P7NameObj)=0x80261E10
ProductMapCreator::createNameObj<AnmModelSwitchMove>(const char*, _P7NameObj)=0x80261E50
ProductMapCreator::createNameObj<AnmModelSwitchMoveEndKill>(const char*, _P7NameObj)=0x80261E90
AnmModelSwitchMoveEndKill::__ct(const char*)=0x80261ED0
AnmModelSwitchMove::__dt(void)=0x80261F10
AnmModelObj::__dt(void)=0x80261F70
ProductMapCreator::createNameObj<AnmModelSwitchMoveEndKillAnyAnim>(const char*, _P7NameObj)=0x80261FD0
AnmModelSwitchMoveEndKill::__dt(void)=0x80262030
ProductMapCreator::createNameObj<AnmModelSwitchMoveValidateCollision>(const char*, _P7NameObj)=0x80262090
ProductMapCreator::createNameObj<AnmModelSwitchMoveInvalidateCollision>(const char*, _P7NameObj)=0x802620F0
ProductMapCreator::createNameObj<AnmModelSwitchSyncBrk>(const char*, _P7NameObj)=0x80262150
ProductMapCreator::createNameObj<CloudStep>(const char*, _P7NameObj)=0x80262190
ProductMapCreator::createNameObj<CloudSea>(const char*, _P7NameObj)=0x802621D0
ProductMapCreator::createNameObj<HipDropMoveBlock>(const char*, _P7NameObj)=0x80262210
ProductMapCreator::createNameObj<RailMoveObj>(const char*, _P7NameObj)=0x80262250
ProductMapCreator::createNameObj<RailMoveWithReverseAnimObj>(const char*, _P7NameObj)=0x80262290
RailMoveObj::__dt(void)=0x802622F0
ProductMapCreator::createNameObj<RailMoveWithIndirectModelObj>(const char*, _P7NameObj)=0x80262350
ProductMapCreator::createNameObj<RailMoveShadowDropYObj>(const char*, _P7NameObj)=0x80262390
ProductMapCreator::createNameObj<RailMoveObjClipParts>(const char*, _P7NameObj)=0x802623D0
ProductMapCreator::createNameObj<RailMoveDemoActionObj>(const char*, _P7NameObj)=0x80262410
ProductMapCreator::createNameObj<RailMoveLavaProjmapObj>(const char*, _P7NameObj)=0x80262450
ProductMapCreator::createNameObj<RailRotateMoveObj>(const char*, _P7NameObj)=0x80262490
ProductMapCreator::createNameObj<RailAndRotateMoveObj>(const char*, _P7NameObj)=0x802624D0
ProductMapCreator::createNameObj<RotateMoveObj>(const char*, _P7NameObj)=0x80262510
ProductMapCreator::createNameObj<RotateMoveObjClipParts>(const char*, _P7NameObj)=0x80262570
ProductMapCreator::createNameObj<GorogoroCylinderRock>(const char*, _P7NameObj)=0x802625B0
ProductMapCreator::createNameObj<LavaFloater>(const char*, _P7NameObj)=0x802625F0
ProductMapCreator::createNameObj<SimpleBreakableCollisionObj>(const char*, _P7NameObj)=0x80262630
SimpleBreakableObj::__dt(void)=0x80262690
ProductMapCreator::createNameObj<SimpleBreakableDeleteShadowObj>(const char*, _P7NameObj)=0x802626F0
ProductMapCreator::createNameObj<SimpleBreakableObj>(const char*, _P7NameObj)=0x80262750
ProductMapCreator::createNameObj<SimpleBreakableStrongLightObj>(const char*, _P7NameObj)=0x80262790
ProductMapCreator::createNameObj<SimpleClipPartsObj>(const char*, _P7NameObj)=0x802627F0
ProductMapCreator::createNameObj<SimpleFloaterObj>(const char*, _P7NameObj)=0x80262830
ProductMapCreator::createNameObj<SimpleMapObjFarMax>(const char*, _P7NameObj)=0x80262870
ProductMapCreator::createNameObj<SimpleMapObjWithEffect>(const char*, _P7NameObj)=0x802628D0
ProductMapCreator::createNameObj<SimpleSeesawObj>(const char*, _P7NameObj)=0x80262930
ProductMapCreator::createNameObj<SwitchingMoveBlock>(const char*, _P7NameObj)=0x80262970
ProductMapCreator::createNameObj<EffectObjR500F50>(const char*, _P7NameObj)=0x802629B0
ProductMapCreator::createNameObj<EffectObjR1000F50>(const char*, _P7NameObj)=0x80262A10
ProductMapCreator::createNameObj<EffectObjR1500F400>(const char*, _P7NameObj)=0x80262A70
ProductMapCreator::createNameObj<EffectObj20x20x10SyncClipping>(const char*, _P7NameObj)=0x80262AD0
ProductMapCreator::createNameObj<EffectObj50x50x10SyncClipping>(const char*, _P7NameObj)=0x80262B30
ProductMapCreator::createNameObj<EffectObj10x10x10SyncClipping>(const char*, _P7NameObj)=0x80262B90
ProductMapCreator::createNameObj<Sky>(const char*, _P7NameObj)=0x80262BF0
ProductMapCreator::createNameObj<ProjectionMapSky>(const char*, _P7NameObj)=0x80262C30
ProductMapCreator::createNameObj<SoundSyncSky>(const char*, _P7NameObj)=0x80262C70
ProductMapCreator::createNameObj<Air>(const char*, _P7NameObj)=0x80262CB0
ProductMapCreator::createNameObj<PriorDrawAir>(const char*, _P7NameObj)=0x80262CF0
ProductMapCreator::createNameObj<AfterMapObjDrawAir>(const char*, _P7NameObj)=0x80262D30
ProductMapCreator::createNameObj<ProjectionMapAir>(const char*, _P7NameObj)=0x80262D70
ProductMapCreator::__ct(const char*)=0x80262DB0
ProductMapCreator::doesProductMapObjExist(const char*)=0x80262F20
ProductMapCreator::getObjClassName(const char*)=0x80262FA0
MR::getObjClassName(const char*)=0x80263020
MR::doesProductMapObjExist(const char*)=0x80263080
EffectObj10x10x10SyncClipping::isSyncClipping(void) const=0x802630D0
EffectObj10x10x10SyncClipping::getClippingCenterOffset(void) const=0x802630E0
EffectObj10x10x10SyncClipping::getFarClipDistance(void) const=0x80263110
EffectObj10x10x10SyncClipping::getClippingRadius(void) const=0x80263120
EffectObj50x50x10SyncClipping::isSyncClipping(void) const=0x80263130
EffectObj50x50x10SyncClipping::getClippingCenterOffset(void) const=0x80263140
EffectObj50x50x10SyncClipping::getFarClipDistance(void) const=0x80263170
EffectObj50x50x10SyncClipping::getClippingRadius(void) const=0x80263180
EffectObj20x20x10SyncClipping::isSyncClipping(void) const=0x80263190
EffectObj20x20x10SyncClipping::getClippingCenterOffset(void) const=0x802631A0
EffectObj20x20x10SyncClipping::getFarClipDistance(void) const=0x802631D0
EffectObj20x20x10SyncClipping::getClippingRadius(void) const=0x802631E0
EffectObjR1500F400::getFarClipDistance(void) const=0x802631F0
EffectObjR1500F400::getClippingRadius(void) const=0x80263200
EffectObjR1000F50::getFarClipDistance(void) const=0x80263210
EffectObjR1000F50::getClippingRadius(void) const=0x80263220
AnmModelObj::isKilledAtMoveDone(void) const=0x80263280
AnmModelObj::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x80263290
AnmModelObj::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802632A0
AnmModelObj::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x802632B0
AnmModelObj::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802632C0
AnmModelObj::control(void)=0x802632D0
ProductMapCreator::__dt(void)=0x802632F0
AnmModelSwitchMoveInvalidateCollision::__dt(void)=0x80263350
EffectObjR1000F50::__dt(void)=0x802633B0
EffectObjR1500F400::__dt(void)=0x80263410
EffectObj20x20x10SyncClipping::__dt(void)=0x80263470
EffectObj50x50x10SyncClipping::__dt(void)=0x802634D0
EffectObj10x10x10SyncClipping::__dt(void)=0x80263530
QuakeEffectGenerator::__ct(void)=0x80263590
QuakeEffectGenerator::init(const JMapInfoIter&)=0x802635E0
QuakeEffectGenerator::exeWaitInArea(void)=0x80263640
QuakeEffectGenerator::exeQuaking(void)=0x802636D0
QuakeEffectGenerator::__dt(void)=0x80263780
short::(nit_\QuakeEffectGenerator_cpp)=0x802637E0
NrvQuakeEffectGenerator::HostTypeWait::__ct(void)=0x80263820
NrvQuakeEffectGenerator::HostTypeWaitInArea::__ct(void)=0x80263830
NrvQuakeEffectGenerator::HostTypeQuaking::__ct(void)=0x80263840
NrvQuakeEffectGenerator::HostTypeQuaking::execute(Spine*) const=0x80263850
NrvQuakeEffectGenerator::HostTypeWaitInArea::execute(Spine*) const=0x80263860
NrvQuakeEffectGenerator::HostTypeWait::execute(Spine*) const=0x80263870
RaceManager::__ct(void)=0x802638C0
AbstractRacer::initRacer(void)=0x80263B40
AbstractRacer::compRacer(const AbstractRacer*, const AbstractRacer*)=0x802643C0
RaceManager::isGoal(const AbstractRacer*) const=0x80265000
RaceManagerFunction::getRaceTime(void)=0x802653A0
RaceManagerFunction::getRaceName(int)=0x802653D0
short::(nit_\RaceManager_cpp)=0x80265570
RaceRail::__ct(const char*)=0x80265810
RaceRail::init(const JMapInfoIter&)=0x80265850
PlayerRacer::__ct(const char*)=0x802658C0
PlayerRacer::init(const JMapInfoIter&)=0x80265950
PlayerRacer::startRacer(void)=0x80265B30
PlayerRacer::updateRacer(const RaceManager*)=0x80265B40
PlayerRacer::__dt(void)=0x80265D90
RaceRail::__dt(void)=0x80265DF0
RailGraph::__ct(void)=0x80265EE0
RailGraph::addNode(const JGeometry::TVec3<float>&)=0x80265F80
RailGraph::connectNodeTwoWay(long, long, const RailGraphEdge*)=0x80266020
RailGraphEdge::__as(const RailGraphEdge&)=0x802660F0
RailGraph::getNode(long) const=0x80266180
RailGraph::getEdge(long) const=0x80266190
RailGraph::isValidEdge(long) const=0x802661A0
RailGraph::connectEdgeToNode(long, long)=0x802661D0
RailGraphEdge::__ct(void)=0x802662A0
RailGraphEdge::clearConnectInfo(void)=0x802662E0
RailGraphEdge::setArgs(const JMapInfo*, long)=0x80266300
RailGraphEdge::getNextNode(long) const=0x802663E0
RailGraphEdge::getNextEdge(long) const=0x80266410
RailGraphEdge::setNextEdge(long, long)=0x80266440
RailGraphIter::__ct(const RailGraph*)=0x80266470
RailGraphIter::moveNodeNext(void)=0x80266490
RailGraphIter::setNode(long)=0x802664E0
RailGraphIter::watchStartEdge(void)=0x80266500
RailGraphIter::watchNextEdge(void)=0x80266540
RailGraphIter::isWatchEndEdge(void) const=0x80266580
RailGraphIter::selectEdge(void)=0x802665A0
RailGraphIter::selectEdge(long)=0x802665B0
RailGraphIter::isWatchedPrevEdge(void) const=0x802665C0
RailGraphIter::isSelectedEdge(void) const=0x80266610
RailGraphIter::getCurrentNode(void) const=0x80266620
RailGraphIter::getNextNode(void) const=0x80266630
RailGraphIter::getWatchNode(void) const=0x80266680
RailGraphIter::getCurrentEdge(void) const=0x802666D0
RailGraphIter::getWatchEdge(void) const=0x802666E0
RailGraphNode::__ct(void)=0x802666F0
RailPart::__ct(void)=0x80266720
RailPart::init(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80266730
JGeometry::TVec3<float>::epsilonEquals(const JGeometry::TVec3<float>&, float) const=0x802667E0
RailPart::initForBezier(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80266880
RailPart::calcPos(JGeometry::TVec3<float>*, float) const=0x802668E0
RailPart::calcVelocity(JGeometry::TVec3<float>*, float) const=0x80266910
RailPart::getLength(float, float, int) const=0x80266930
RailPart::getTotalLength(void) const=0x80266960
RailPart::getParam(float) const=0x80266980
RailPart::getNearestParam(const JGeometry::TVec3<float>&, float) const=0x802669B0
LinearRailPart::set(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802669D0
LinearRailPart::getNearestParam(const JGeometry::TVec3<float>&, float) const=0x80266A30
RepeatTimerSwitch::__ct(const char*)=0x80266AE0
RepeatTimerSwitch::init(const JMapInfoIter&)=0x80266B40
RepeatTimerSwitch::movement(void)=0x80266BD0
RepeatTimerSwitch::__dt(void)=0x80266D10
ScenarioSelectStar::__ct(EffectSystem*, int)=0x80266D70
MultiSceneActor::__dt(void)=0x80266E30
ScenarioSelectStar::init(const JMapInfoIter&)=0x80266E90
ScenarioSelectStar::calcViewAndEntry(void)=0x80266EA0
ScenarioSelectStar::appear(void)=0x80266F00
ScenarioSelectStar::kill(void)=0x80267030
ScenarioSelectStar::tryPointing(void)=0x80267070
ScenarioSelectStar::select(void)=0x802670D0
ScenarioSelectStar::notSelect(void)=0x802670E0
ScenarioSelectStar::isAppearEnd(void) const=0x802670F0
ScenarioSelectStar::setup(long, int, const JGeometry::TVec3<float>&, long)=0x80267140
ScenarioSelectStar::control(void)=0x80267200
ScenarioSelectStar::tryEndPointing(void)=0x802672C0
ScenarioSelectStar::updatePos(void)=0x80267300
ScenarioSelectStar::exeAppear(void)=0x80267420
ScenarioSelectStar::exeNotPointing(void)=0x802674F0
ScenarioSelectStar::exePointing(void)=0x80267540
ScenarioSelectStar::exeEndPointing(void)=0x80267600
ScenarioSelectStar::exeSelected(void)=0x80267670
ScenarioSelectStar::exeSelectedMove(void)=0x80267710
ScenarioSelectStar::exeNotSelected(void)=0x80267820
ScenarioSelectStar::__dt(void)=0x80267910
short::(nit_\ScenarioSelectStar_cpp)=0x80267970
NrvScenarioSelectStar::ScenarioSelectStarNrvAppear::__ct(void)=0x802679D0
NrvScenarioSelectStar::ScenarioSelectStarNrvNotPointing::__ct(void)=0x802679E0
NrvScenarioSelectStar::ScenarioSelectStarNrvPointing::__ct(void)=0x802679F0
NrvScenarioSelectStar::ScenarioSelectStarNrvEndPointing::__ct(void)=0x80267A00
NrvScenarioSelectStar::ScenarioSelectStarNrvSelected::__ct(void)=0x80267A10
NrvScenarioSelectStar::ScenarioSelectStarNrvSelectedMove::__ct(void)=0x80267A20
NrvScenarioSelectStar::ScenarioSelectStarNrvNotSelected::__ct(void)=0x80267A30
NrvScenarioSelectStar::ScenarioSelectStarNrvNotSelected::execute(Spine*) const=0x80267A40
NrvScenarioSelectStar::ScenarioSelectStarNrvSelectedMove::execute(Spine*) const=0x80267A50
NrvScenarioSelectStar::ScenarioSelectStarNrvSelected::execute(Spine*) const=0x80267A60
NrvScenarioSelectStar::ScenarioSelectStarNrvEndPointing::execute(Spine*) const=0x80267A70
NrvScenarioSelectStar::ScenarioSelectStarNrvPointing::execute(Spine*) const=0x80267A80
NrvScenarioSelectStar::ScenarioSelectStarNrvNotPointing::execute(Spine*) const=0x80267A90
NrvScenarioSelectStar::ScenarioSelectStarNrvAppear::execute(Spine*) const=0x80267AA0
SeaGull::__ct(SeaGullGroup*)=0x80267AB0
SeaGull::init(const JMapInfoIter&)=0x80267B80
SeaGull::exeHoverFront(void)=0x80267D70
SeaGull::exeHoverLeft(void)=0x80267E40
SeaGull::exeHoverRight(void)=0x80267EC0
SeaGull::control(void)=0x80267F40
SeaGull::updateHover(void)=0x802680D0
SeaGull::calcAndSetBaseMtx(void)=0x802682D0
SeaGullGroup::__ct(const char*)=0x80268370
SeaGullGroup::init(const JMapInfoIter&)=0x802683D0
SeaGullGroup::makeActorAppeared(void)=0x80268660
SeaGullGroup::makeActorDead(void)=0x802686D0
SeaGullGroup::updatePosInfo(long*, bool) const=0x80268740
SeaGull::__dt(void)=0x802687A0
SeaGullGroup::__dt(void)=0x80268800
short::(nit_\SeaGull_cpp)=0x80268860
NrvSeaGull::SeaGullNrvHoverFront::__ct(void)=0x802688A0
NrvSeaGull::SeaGullNrvHoverLeft::__ct(void)=0x802688B0
NrvSeaGull::SeaGullNrvHoverRight::__ct(void)=0x802688C0
NrvSeaGull::SeaGullNrvHoverRight::execute(Spine*) const=0x802688D0
NrvSeaGull::SeaGullNrvHoverLeft::execute(Spine*) const=0x802688E0
NrvSeaGull::SeaGullNrvHoverFront::execute(Spine*) const=0x802688F0
Sky::__ct(const char*)=0x80268B80
Sky::__ct(const char*, const char*)=0x80268BD0
Sky::init(const JMapInfoIter&)=0x80268C30
MR::Functor<Sky>(Sky*, M3SkyFPCvPv_v_Q22MR31FunctorV0M<Sky*,M3SkyFPCvPv_v>)=0x80268E50
Sky::calcAnim(void)=0x80268E90
Sky::getModelName(void)=0x80268EE0
Sky::initModel(const char*)=0x80268F10
Sky::control(void)=0x80268F20
Sky::appearSpaceInner(void)=0x80268FA0
Sky::disappearSpaceInner(void)=0x80269000
Sky::exeWait(void)=0x80269050
ProjectionMapSky::__ct(const char*)=0x802690D0
Sky::__dt(void)=0x80269120
ProjectionMapSky::calcAndSetBaseMtx(void)=0x80269180
ProjectionMapSky::initModel(const char*)=0x802691C0
SoundSyncSky::__ct(const char*)=0x80269210
WorldMapSky::__ct(const char*)=0x802692C0
WorldMapSky::appear(void)=0x80269310
WorldMapSky::getModelName(void)=0x80269370
WorldMapSky::calcAndSetBaseMtx(void)=0x802693B0
WorldMapSky::initModel(const char*)=0x802693F0
MR::FunctorV0M<Sky*,M3SkyFPCvPv_v>::__cl(void) const=0x80269500
MR::FunctorV0M<Sky*,M3SkyFPCvPv_v>::clone(JKRHeap*) const=0x80269530
ProjectionMapSky::__dt(void)=0x802695A0
SoundSyncSky::__dt(void)=0x80269600
WorldMapSky::__dt(void)=0x80269660
short::(nit_\Sky_cpp)=0x802696C0
NrvSky::HostTypeWait::__ct(void)=0x802696F0
NrvSky::HostTypeChange::__ct(void)=0x80269700
NrvSky::HostTypeChange::execute(Spine*) const=0x80269710
NrvSky::HostTypeWait::execute(Spine*) const=0x80269760
SoundSyncSwitch::__ct(const char*)=0x80269770
SoundSyncSwitch::init(const JMapInfoIter&)=0x802697E0
SoundSyncSwitch::movement(void)=0x802698A0
SoundSyncSwitch::emit(void)=0x80269A30
SoundSyncSwitch::__dt(void)=0x80269C20
SpaceInner::__ct(const char*)=0x80269C80
SpaceInner::init(const JMapInfoIter&)=0x80269CC0
SpaceInner::calcAnim(void)=0x80269D50
SpaceInner::appear(void)=0x80269DA0
SpaceInner::disappear(void)=0x80269DF0
SpaceInner::isAppeared(void) const=0x80269E30
SpaceInner::__dt(void)=0x80269E80
short::(nit_\SpaceInner_cpp)=0x80269EE0
NrvSpaceInner::HostTypeAppear::__ct(void)=0x80269F10
NrvSpaceInner::HostTypeDisappear::__ct(void)=0x80269F20
NrvSpaceInner::HostTypeDisappear::execute(Spine*) const=0x80269F30
NrvSpaceInner::HostTypeAppear::execute(Spine*) const=0x80269F80
BitFlag128::get(int) const=0x80269F90
BitFlag128::set(int, bool)=0x80269FD0
ZoneSwitch::__ct(int)=0x8026A040
SwitchIdInfo::__ct(long, const JMapInfoIter&)=0x8026A0C0
SwitchIdInfo::getSwitchNo(void) const=0x8026A140
StageSwitchContainer::__ct(void)=0x8026A170
StageSwitchContainer::createAndAddZone(const SwitchIdInfo&)=0x8026A1E0
StageSwitchContainer::getZoneSwitch(const SwitchIdInfo&)=0x8026A260
StageSwitchCtrl::__ct(const JMapInfoIter&)=0x8026A2D0
StageSwitchCtrl::onSwitchA(void)=0x8026A390
StageSwitchCtrl::offSwitchA(void)=0x8026A3A0
StageSwitchCtrl::isOnSwitchA(void) const=0x8026A3B0
StageSwitchCtrl::isValidSwitchA(void) const=0x8026A3C0
StageSwitchCtrl::onSwitchB(void)=0x8026A3D0
StageSwitchCtrl::offSwitchB(void)=0x8026A3E0
StageSwitchCtrl::isOnSwitchB(void) const=0x8026A3F0
StageSwitchCtrl::isValidSwitchB(void) const=0x8026A400
StageSwitchCtrl::isOnSwitchAppear(void) const=0x8026A410
StageSwitchCtrl::isValidSwitchAppear(void) const=0x8026A420
StageSwitchCtrl::onSwitchDead(void)=0x8026A430
StageSwitchCtrl::isValidSwitchDead(void) const=0x8026A450
StageSwitchCtrl::isOnAllSwitchAfterB(int) const=0x8026A460
StageSwitchCtrl::isOnAnyOneSwitchAfterB(int) const=0x8026A4F0
StageSwitchFunction::createSwitchIdInfo(const char*, const JMapInfoIter&, bool)=0x8026A580
StageSwitchFunction::onSwitchBySwitchIdInfo(const SwitchIdInfo&)=0x8026A630
StageSwitchFunction::offSwitchBySwitchIdInfo(const SwitchIdInfo&)=0x8026A6A0
StageSwitchFunction::isOnSwitchBySwitchIdInfo(const SwitchIdInfo&)=0x8026A710
StageSwitchFunction::onGlobalSwitchById(int)=0x8026A770
MR::createStageSwitchCtrl(NameObj*, const JMapInfoIter&)=0x8026A7E0
StageSwitchCtrl::isOnSwitchParam(void) const=0x8026A820
StageSwitchCtrl::isValidSwitchParam(void) const=0x8026A830
StageSwitchContainer::__dt(void)=0x8026A840
SunshadeMapHolder::__ct(void)=0x8026A8A0
MR::isInShadeFromTheSun(const JGeometry::TVec3<float>&, float)=0x8026A900
SunshadeMapHolder::__dt(void)=0x8026A9D0
SwitchSynchronizer::__ct(const char*)=0x8026AA30
SwitchSynchronizer::init(const JMapInfoIter&)=0x8026AA80
SwitchSynchronizer::movement(void)=0x8026AAD0
SwitchSynchronizer::__dt(void)=0x8026ABB0
SwitchWatcher::__ct(const StageSwitchCtrl*)=0x8026AC10
SwitchWatcher::movement(void)=0x8026AC80
SwitchWatcher::checkSwitch(SwitchEventListener*, unsigned long, bool)=0x8026AD20
SwitchWatcher::isSameSwitch(const StageSwitchCtrl*) const=0x8026ADC0
SwitchWatcher::addSwitchListener(SwitchEventListener*, unsigned long)=0x8026ADE0
SwitchWatcher::__dt(void)=0x8026AE20
SwitchWatcherHolder::__ct(void)=0x8026AE80
SwitchWatcherHolder::movement(void)=0x8026AEF0
SwitchWatcherHolder::joinSwitchEventListenerA(const StageSwitchCtrl*, SwitchEventListener*)=0x8026AF80
SwitchWatcherHolder::joinSwitchEventListenerB(const StageSwitchCtrl*, SwitchEventListener*)=0x8026AF90
SwitchWatcherHolder::joinSwitchEventListenerAppear(const StageSwitchCtrl*, SwitchEventListener*)=0x8026AFA0
SwitchWatcherHolder::findSwitchWatcher(const StageSwitchCtrl*)=0x8026AFB0
SwitchWatcherHolder::joinSwitchEventListener(const StageSwitchCtrl*, unsigned long, SwitchEventListener*)=0x8026B030
SwitchWatcherHolder::addSwitchWatcher(SwitchWatcher*)=0x8026B0C0
MR::getSwitchWatcherHolder(void)=0x8026B0E0
MR::requestMovementOnSwitchWatcher(void)=0x8026B110
SwitchWatcherHolder::__dt(void)=0x8026B140
TimerSwitch::__ct(const char*)=0x8026B1A0
TimerSwitch::init(const JMapInfoIter&)=0x8026B1F0
TimerSwitch::control(void)=0x8026B280
TimerSwitch::__dt(void)=0x8026B320
WaterAreaHolder::__ct(void)=0x8026B380
WaterAreaHolder::entryOceanSphere(OceanSphere*)=0x8026B490
WaterAreaHolder::entryWaterStream(WaterStream*)=0x8026B4B0
WaterAreaHolder::movement(void)=0x8026B4D0
WaterAreaFunction::entryOceanSphere(OceanSphere*)=0x8026B5B0
WaterAreaFunction::entryWaterStream(WaterStream*)=0x8026B600
WaterAreaFunction::createWaterAreaHolder(void)=0x8026B650
WaterAreaFunction::tryInOceanArea(const JGeometry::TVec3<float>&, WaterInfo*)=0x8026B660
WaterAreaFunction::isCameraInWaterForCameraUtil(void)=0x8026B770
WaterAreaFunction::getCameraWaterDepth(void)=0x8026B7C0
WaterAreaFunction::getCameraWaterInfo(void)=0x8026B810
WaterAreaFunction::pauseOffWaterArea(void)=0x8026B860
WaterAreaHolder::__dt(void)=0x8026B8B0
WaterInfo::__ct(void)=0x8026B910
WaterInfo::isInWater(void) const=0x8026B940
WaterInfo::clear(void)=0x8026B990
WaterPlant::__ct(const char*)=0x8026BA20
WaterPlant::init(const JMapInfoIter&)=0x8026BA90
WaterPlant::initAfterPlacement(void)=0x8026BB80
WaterPlant::movement(void)=0x8026BB90
WaterPlant::draw(void) const=0x8026BF90
WaterPlant::initPlant(void)=0x8026BFE0
WaterPlant::PlantData::__ct(void)=0x8026C050
WaterPlant::initPlantAfterPlacement(void)=0x8026C060
WaterPlant::drawDirect(void) const=0x8026C360
WaterPlantDrawInit::__ct(void)=0x8026C640
WaterPlantDrawInit::movement(void)=0x8026C810
WaterPlantDrawInit::loadTex(int)=0x8026C8F0
WaterPlantDrawInit::updateSwingPos(void)=0x8026C940
WaterPlantDrawInit::initDraw(void) const=0x8026C9E0
MR::FunctorV0M<const WaterPlantDrawInit*,M18WaterPlantDrawInitFPCvPCv_v>::__cl(void) const=0x8026CC00
MR::FunctorV0M<const WaterPlantDrawInit*,M18WaterPlantDrawInitFPCvPCv_v>::clone(JKRHeap*) const=0x8026CC30
WaterPlant::__dt(void)=0x8026CCA0
WaterPlantDrawInit::__dt(void)=0x8026CD00
short::(nit_\WaterPlant_cpp)=0x8026CD60
WaterStream::__ct(const char*)=0x8026CD80
WaterStream::init(const JMapInfoIter&)=0x8026CE10
WaterStream::initAfterPlacement(void)=0x8026CF80
WaterStream::isInWater(const JGeometry::TVec3<float>&) const=0x8026CF90
WaterStream::calcWaterInfo(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, WaterInfo*) const=0x8026D0F0
WaterStream::calcNearestPos(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*) const=0x8026D3B0
WaterStream::calcWaveHeight(const JGeometry::TVec3<float>&, float, JGeometry::TVec3<float>*) const=0x8026D520
WaterStream::movement(void)=0x8026D6A0
WaterStream::calcCurrentWidthRate(float) const=0x8026D760
WaterStream::__dt(void)=0x8026DA70
AirBubble::__ct(const char*)=0x8026E320
AirBubble::init(const JMapInfoIter&)=0x8026E390
AirBubble::initAfterPlacement(void)=0x8026E410
AirBubble::control(void)=0x8026E420
AirBubble::appearMove(const JGeometry::TVec3<float>&, long)=0x8026E430
AirBubble::exeWait(void)=0x8026E4D0
AirBubble::exeMove(void)=0x8026E600
AirBubble::exeBreak(void)=0x8026E920
AirBubble::receiveMsgPush(HitSensor*, HitSensor*)=0x8026E9B0
AirBubble::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8026EA60
AirBubble::canSpinGet(void) const=0x8026ECA0
AirBubble::__dt(void)=0x8026ED00
short::(nit_\AirBubble_cpp)=0x8026ED60
NrvAirBubble::AirBubbleNrvWait::__ct(void)=0x8026EDB0
NrvAirBubble::AirBubbleNrvMove::__ct(void)=0x8026EDC0
NrvAirBubble::AirBubbleNrvBreak::__ct(void)=0x8026EDF0
NrvAirBubble::AirBubbleNrvKillWait::__ct(void)=0x8026EE00
NrvAirBubble::AirBubbleNrvKillWait::execute(Spine*) const=0x8026EE10
NrvAirBubble::AirBubbleNrvBreak::execute(Spine*) const=0x8026EE60
NrvAirBubble::AirBubbleNrvMove::execute(Spine*) const=0x8026EE90
NrvAirBubble::AirBubbleNrvWait::execute(Spine*) const=0x8026EEA0
AirBubbleGenerator::__ct(const char*)=0x8026EEB0
AirBubbleGenerator::init(const JMapInfoIter&)=0x8026EF10
AirBubbleGenerator::control(void)=0x8026F020
AirBubbleGenerator::exeWait(void)=0x8026F030
AirBubbleGenerator::exeGenerate(void)=0x8026F090
AirBubbleGenerator::__dt(void)=0x8026F1A0
short::(nit_\AirBubbleGenerator_cpp)=0x8026F200
NrvAirBubbleGenerator::AirBubbleGeneratorNrvWait::__ct(void)=0x8026F230
NrvAirBubbleGenerator::AirBubbleGeneratorNrvGenerate::__ct(void)=0x8026F240
NrvAirBubbleGenerator::AirBubbleGeneratorNrvGenerate::execute(Spine*) const=0x8026F250
NrvAirBubbleGenerator::AirBubbleGeneratorNrvWait::execute(Spine*) const=0x8026F260
AirBubbleHolder::__ct(const char*)=0x8026F270
DeriveActorGroup<AirBubble>::__dt(void)=0x8026F2B0
AirBubbleHolder::init(const JMapInfoIter&)=0x8026F310
AirBubbleHolder::appearAirBubble(const JGeometry::TVec3<float>&, long)=0x8026F3A0
MR::createAirBubbleHolder(void)=0x8026F410
MR::appearAirBubble(const JGeometry::TVec3<float>&, long)=0x8026F420
AirBubbleHolder::__dt(void)=0x8026F470
AncientCage::__ct(const char*)=0x8026F4D0
AncientCage::init(const JMapInfoIter&)=0x8026F520
AncientCage::exeStartDemo(void)=0x8026F5B0
AncientCage::exeOpen(void)=0x8026F620
AncientCage::kill(void)=0x8026F6D0
AncientCage::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x8026F730
AncientCage::startOpenDemo(void)=0x8026F780
AncientCage::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x8026F7E0
AncientCage::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x8026F7F0
AncientCage::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x8026F800
MR::FunctorV0M<AncientCage*,M11AncientCageFPCvPv_v>::__cl(void) const=0x8026F810
MR::FunctorV0M<AncientCage*,M11AncientCageFPCvPv_v>::clone(JKRHeap*) const=0x8026F840
AncientCage::__dt(void)=0x8026F8B0
short::(nit_\AncientCage_cpp)=0x8026F910
NrvAncientCage::AncientCageNrvWait::__ct(void)=0x8026F950
NrvAncientCage::AncientCageNrvStartDemo::__ct(void)=0x8026F960
NrvAncientCage::AncientCageNrvOpen::__ct(void)=0x8026F970
NrvAncientCage::AncientCageNrvDisappear::__ct(void)=0x8026F980
NrvAncientCage::AncientCageNrvDisappear::execute(Spine*) const=0x8026F990
NrvAncientCage::AncientCageNrvOpen::execute(Spine*) const=0x8026F9E0
NrvAncientCage::AncientCageNrvStartDemo::execute(Spine*) const=0x8026F9F0
NrvAncientCage::AncientCageNrvWait::execute(Spine*) const=0x8026FA00
AnmModelObj::__ct(const char*)=0x8026FA10
AnmModelObj::init(const JMapInfoIter&)=0x8026FA60
AnmModelObj::isDone(void) const=0x8026FB20
AnmModelObj::exeMove(void)=0x8026FB30
AnmModelObj::isRepeat(void) const=0x8026FD10
AnmModelObj::exeDone(void)=0x8026FD20
AnmModelSwitchMove::__ct(const char*)=0x8026FDB0
AnmModelSwitchMove::init(const JMapInfoIter&)=0x8026FDF0
AnmModelSwitchMove::isOnStartAnmTrigger(void) const=0x8026FE60
AnmModelSwitchMoveValidateCollision::init(const JMapInfoIter&)=0x8026FED0
AnmModelSwitchMoveEndKill::kill(void)=0x8026FF50
AnmModelSwitchMoveEndKillAnyAnim::init(const JMapInfoIter&)=0x8026FFA0
AnmModelSwitchSyncBrk::__ct(const char*)=0x80270170
AnmModelSwitchSyncBrk::init(const JMapInfoIter&)=0x802701B0
AnmModelSwitchSyncBrk::__dt(void)=0x802703F0
AnmModelSwitchMoveEndKillAnyAnim::__dt(void)=0x80270450
AnmModelSwitchMoveValidateCollision::__dt(void)=0x802704B0
short::(nit_\AnmModelObj_cpp)=0x80270510
NrvAnmModelObj::HostTypeWait::__ct(void)=0x80270550
NrvAnmModelObj::HostTypeMove::__ct(void)=0x80270560
NrvAnmModelObj::HostTypeDone::__ct(void)=0x80270570
NrvAnmModelObj::HostTypeDone::execute(Spine*) const=0x80270580
NrvAnmModelObj::HostTypeMove::execute(Spine*) const=0x80270590
NrvAnmModelObj::HostTypeWait::execute(Spine*) const=0x802705A0
ArrowSwitch::__ct(const char*)=0x802705F0
ArrowSwitch::init(const JMapInfoIter&)=0x80270660
MR::Functor<ArrowSwitch>(ArrowSwitch*, M11ArrowSwitchFPCvPv_v_Q22MR49FunctorV0M<ArrowSwitch*,M11ArrowSwitchFPCvPv_v>)=0x80270940
ArrowSwitch::control(void)=0x80270980
ArrowSwitch::calcAndSetBaseMtx(void)=0x80270990
ArrowSwitch::attackSensor(HitSensor*, HitSensor*)=0x80270AB0
ArrowSwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80270B10
ArrowSwitch::receiveMsgPush(HitSensor*, HitSensor*)=0x80270B70
ArrowSwitch::requestPunch(HitSensor*, HitSensor*)=0x80270B80
ArrowSwitch::listenOnSwitch(void)=0x80270CF0
ArrowSwitch::listenOffSwitch(void)=0x80270DE0
ArrowSwitch::exeWait(void)=0x80270E90
ArrowSwitch::exeRotate(void)=0x80270F00
ArrowSwitch::exeLock(void)=0x802710F0
ArrowSwitch::isPlusLimit(void) const=0x80271160
ArrowSwitch::isMinusLimit(void) const=0x802711E0
ArrowSwitch::getOneStep(void) const=0x80271260
MR::FunctorV0M<ArrowSwitch*,M11ArrowSwitchFPCvPv_v>::__cl(void) const=0x802712A0
MR::FunctorV0M<ArrowSwitch*,M11ArrowSwitchFPCvPv_v>::clone(JKRHeap*) const=0x802712D0
ArrowSwitch::__dt(void)=0x80271340
short::(nit_\ArrowSwitch_cpp)=0x802713A0
NrvArrowSwitch::ArrowSwitchNrvWait::__ct(void)=0x802713E0
NrvArrowSwitch::ArrowSwitchNrvRotate::__ct(void)=0x802713F0
NrvArrowSwitch::ArrowSwitchNrvLock::__ct(void)=0x80271400
NrvArrowSwitch::ArrowSwitchNrvStop::__ct(void)=0x80271410
NrvArrowSwitch::ArrowSwitchNrvStop::execute(Spine*) const=0x80271420
NrvArrowSwitch::ArrowSwitchNrvLock::execute(Spine*) const=0x80271430
NrvArrowSwitch::ArrowSwitchNrvRotate::execute(Spine*) const=0x80271440
NrvArrowSwitch::ArrowSwitchNrvWait::execute(Spine*) const=0x80271450
AssemblyBlock::__ct(const char*)=0x80271460
AssemblyBlock::init(const JMapInfoIter&)=0x802714F0
AssemblyBlock::exeWait(void)=0x80271830
AssemblyBlock::exeAssemble(void)=0x80271990
AssemblyBlock::exeAssembleWait(void)=0x80271AB0
AssemblyBlock::exeReturn(void)=0x80271B50
AssemblyBlock::exeTimer(void)=0x80271C40
AssemblyBlock::calcAndSetBaseMtx(void)=0x80271D20
AssemblyBlock::tryStartAssemble(void)=0x80271D30
AssemblyBlock::tryStartReturn(void)=0x80271DA0
AssemblyBlock::__dt(void)=0x80271E10
short::(nit_\AssemblyBlock_cpp)=0x80271E70
NrvAssemblyBlock::AssemblyBlockNrvWait::__ct(void)=0x80271EC0
NrvAssemblyBlock::AssemblyBlockNrvAssemble::__ct(void)=0x80271ED0
NrvAssemblyBlock::AssemblyBlockNrvAssembleWait::__ct(void)=0x80271EE0
NrvAssemblyBlock::AssemblyBlockNrvReturn::__ct(void)=0x80271EF0
NrvAssemblyBlock::AssemblyBlockNrvTimer::__ct(void)=0x80271F00
NrvAssemblyBlock::AssemblyBlockNrvTimer::execute(Spine*) const=0x80271F10
NrvAssemblyBlock::AssemblyBlockNrvReturn::execute(Spine*) const=0x80271F20
NrvAssemblyBlock::AssemblyBlockNrvAssembleWait::execute(Spine*) const=0x80271F30
NrvAssemblyBlock::AssemblyBlockNrvAssemble::execute(Spine*) const=0x80271F40
NrvAssemblyBlock::AssemblyBlockNrvWait::execute(Spine*) const=0x80271F50
BalloonFruit::__ct(const char*)=0x80271F60
BalloonFruit::init(const JMapInfoIter&)=0x80271FD0
BalloonFruit::control(void)=0x802726A0
BalloonFruit::attackSensor(HitSensor*, HitSensor*)=0x802729A0
BalloonFruit::receiveMsgPush(HitSensor*, HitSensor*)=0x80272A10
BalloonFruit::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80272A20
BalloonFruit::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80272BA0
BalloonFruit::__dt(void)=0x802731A0
short::(nit_\BalloonFruit_cpp)=0x80273200
BallOpener::__ct(const char*)=0x802733F0
BallOpener::init(const JMapInfoIter&)=0x802734D0
BallOpener::initAfterPlacement(void)=0x802735C0
BallOpener::control(void)=0x80273610
BallOpener::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80273620
BallOpener::exeWait(void)=0x80273750
BallOpener::exeSetCenter(void)=0x802737B0
BallOpener::exeOpen(void)=0x80273880
BallOpener::bindHole(void)=0x80273980
BallOpener::__dt(void)=0x80273C80
short::(nit_\BallOpener_cpp)=0x80273CE0
NrvBallOpener::BallOpenerNrvWait::__ct(void)=0x80273D20
NrvBallOpener::BallOpenerNrvSetCenter::__ct(void)=0x80273D30
NrvBallOpener::BallOpenerNrvOpen::__ct(void)=0x80273D40
NrvBallOpener::BallOpenerNrvOpen::execute(Spine*) const=0x80273D50
NrvBallOpener::BallOpenerNrvSetCenter::execute(Spine*) const=0x80273D60
NrvBallOpener::BallOpenerNrvWait::execute(Spine*) const=0x80273D70
BallRail::__ct(const char*)=0x80273D80
BallRail::init(const JMapInfoIter&)=0x80273DF0
BallRail::control(void)=0x80273F90
BallRail::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80273FA0
BallRail::initRailPoints(void)=0x802740A0
BallRail::exeWait(void)=0x802742A0
BallRail::exeSetUp(void)=0x80274300
BallRail::exeRun(void)=0x80274470
BallRail::trySetNerveRun(void)=0x80274640
BallRailPoint::__ct(void)=0x802746A0
TriangleFilterDelegator<BallRail>::isInvalidTriangle(const Triangle*) const=0x80274720
BallRail::__dt(void)=0x80274750
short::(nit_\BallRail_cpp)=0x802747B0
NrvBallRail::BallRailNrvWait::__ct(void)=0x802747F0
NrvBallRail::BallRailNrvSetUp::__ct(void)=0x80274800
NrvBallRail::BallRailNrvRun::__ct(void)=0x80274810
NrvBallRail::BallRailNrvNoBind::__ct(void)=0x80274820
NrvBallRail::BallRailNrvNoBind::execute(Spine*) const=0x80274830
NrvBallRail::BallRailNrvRun::execute(Spine*) const=0x80274880
NrvBallRail::BallRailNrvSetUp::execute(Spine*) const=0x80274890
NrvBallRail::BallRailNrvWait::execute(Spine*) const=0x802748A0
BeeFlowerHover::__ct(const char*)=0x802748B0
BeeFlowerHover::init(const JMapInfoIter&)=0x80274920
BeeFlowerHover::exeSoftTouch(void)=0x80274BC0
BeeFlowerHover::exeSoftTouchWait(void)=0x80274C40
BeeFlowerHover::exeHardTouch(void)=0x80274CD0
BeeFlowerHover::exeRecover(void)=0x80274D90
BeeFlowerHover::control(void)=0x80274E60
BeeFlowerHover::calcAndSetBaseMtx(void)=0x80275020
BeeFlowerHover::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802750B0
BeeFlowerHover::__dt(void)=0x80275140
short::(nit_\BeeFlowerHover_cpp)=0x802751A0
NrvBeeFlowerHover::BeeFlowerHoverNrvWait::__ct(void)=0x802751F0
NrvBeeFlowerHover::BeeFlowerHoverNrvSoftTouch::__ct(void)=0x80275200
NrvBeeFlowerHover::BeeFlowerHoverNrvSoftTouchWait::__ct(void)=0x80275210
NrvBeeFlowerHover::BeeFlowerHoverNrvHardTouch::__ct(void)=0x80275220
NrvBeeFlowerHover::BeeFlowerHoverNrvRecover::__ct(void)=0x80275230
NrvBeeFlowerHover::BeeFlowerHoverNrvRecover::execute(Spine*) const=0x80275240
NrvBeeFlowerHover::BeeFlowerHoverNrvHardTouch::execute(Spine*) const=0x80275250
NrvBeeFlowerHover::BeeFlowerHoverNrvSoftTouchWait::execute(Spine*) const=0x80275260
NrvBeeFlowerHover::BeeFlowerHoverNrvSoftTouch::execute(Spine*) const=0x80275270
NrvBeeFlowerHover::BeeFlowerHoverNrvWait::execute(Spine*) const=0x80275280
BeeJumpBall::__ct(const char*)=0x802752D0
BeeJumpBall::init(const JMapInfoIter&)=0x80275310
BeeJumpBall::exeBound(void)=0x802753E0
BeeJumpBall::exeBreak(void)=0x80275450
BeeJumpBall::exeRecover(void)=0x802754B0
BeeJumpBall::attackSensor(HitSensor*, HitSensor*)=0x80275560
BeeJumpBall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80275780
BeeJumpBall::__dt(void)=0x80275840
short::(nit_\BeeJumpBall_cpp)=0x802758A0
NrvBeeJumpBall::BeeJumpBallNrvWait::__ct(void)=0x802758F0
NrvBeeJumpBall::BeeJumpBallNrvBound::__ct(void)=0x80275900
NrvBeeJumpBall::BeeJumpBallNrvBounce::__ct(void)=0x80275910
NrvBeeJumpBall::BeeJumpBallNrvBreak::__ct(void)=0x80275920
NrvBeeJumpBall::BeeJumpBallNrvRecover::__ct(void)=0x80275930
NrvBeeJumpBall::BeeJumpBallNrvRecover::execute(Spine*) const=0x80275940
NrvBeeJumpBall::BeeJumpBallNrvBreak::execute(Spine*) const=0x80275950
NrvBeeJumpBall::BeeJumpBallNrvBounce::execute(Spine*) const=0x80275960
NrvBeeJumpBall::BeeJumpBallNrvBound::execute(Spine*) const=0x80275970
NrvBeeJumpBall::BeeJumpBallNrvWait::execute(Spine*) const=0x80275980
BendSwanpPlanet::__ct(const char*)=0x802759D0
BendSwanpPlanet::init(const JMapInfoIter&)=0x80275A20
BendSwanpPlanet::exeWaitA(void)=0x80275B50
BendSwanpPlanet::exeMoveA(void)=0x80275BB0
BendSwanpPlanet::exeWaitB(void)=0x80275C10
BendSwanpPlanet::exeMoveB(void)=0x80275C70
BendSwanpPlanet::__dt(void)=0x80275CD0
short::(nit_\BendSwanpPlanet_cpp)=0x80275D30
NrvBendSwanpPlanet::BendSwanpPlanetNrvWaitA::__ct(void)=0x80275D80
NrvBendSwanpPlanet::BendSwanpPlanetNrvMoveA::__ct(void)=0x80275D90
NrvBendSwanpPlanet::BendSwanpPlanetNrvWaitB::__ct(void)=0x80275DA0
NrvBendSwanpPlanet::BendSwanpPlanetNrvMoveB::__ct(void)=0x80275DB0
NrvBendSwanpPlanet::BendSwanpPlanetNrvWaitC::__ct(void)=0x80275DC0
NrvBendSwanpPlanet::BendSwanpPlanetNrvWaitC::execute(Spine*) const=0x80275DD0
NrvBendSwanpPlanet::BendSwanpPlanetNrvMoveB::execute(Spine*) const=0x80275E20
NrvBendSwanpPlanet::BendSwanpPlanetNrvWaitB::execute(Spine*) const=0x80275E30
NrvBendSwanpPlanet::BendSwanpPlanetNrvMoveA::execute(Spine*) const=0x80275E40
NrvBendSwanpPlanet::BendSwanpPlanetNrvWaitA::execute(Spine*) const=0x80275E50
BenefitItemInvincible::__ct(const char*)=0x80275E60
BenefitItemInvincible::exeCatch(void)=0x80275EC0
BenefitItemInvincible::init(const JMapInfoIter&)=0x80275ED0
BenefitItemInvincible::appearThrowUp(void)=0x80275F60
BenefitItemInvincible::initEscape(void)=0x80276020
BenefitItemInvincible::doEscape(void)=0x802760C0
BenefitItemInvincible::__dt(void)=0x802762C0
BenefitItemLifeUp::__ct(const char*)=0x80276320
BenefitItemLifeUp::exeCatch(void)=0x80276380
BenefitItemLifeUp::__dt(void)=0x802763C0
BenefitItemObj::__ct(const char*, const char*)=0x80276420
BenefitItemObj::init(const JMapInfoIter&)=0x80276530
BenefitItemObj::appear(void)=0x80276B50
BenefitItemObj::initAfterPlacement(void)=0x80276D60
BenefitItemObj::makeActorAppeared(void)=0x80276DB0
BenefitItemObj::control(void)=0x80276DF0
BenefitItemObj::doRotateY(void)=0x80276E40
BenefitItemObj::initEscape(void)=0x80276EC0
BenefitItemObj::doEscape(void)=0x80276F50
BenefitItemObj::appearGround(void)=0x802772B0
BenefitItemObj::appearThrowUp(void)=0x80277310
BenefitItemObj::appearThrowUpQuestionBox(void)=0x80277440
BenefitItemObj::exeShoot(void)=0x80277710
BenefitItemObj::exeAppearGround(void)=0x80277900
BenefitItemObj::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80277A10
MR::setMtxTrans(A4_fRCQ29JGeometry8TVec3<float>)=0x80277C40
BenefitItemObj::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80277E20
BenefitItemObj::calcAndSetBaseMtx(void)=0x80278410
MR::FunctorV0M<BenefitItemObj*,M14BenefitItemObjFPCvPv_v>::__cl(void) const=0x80278700
MR::FunctorV0M<BenefitItemObj*,M14BenefitItemObjFPCvPv_v>::clone(JKRHeap*) const=0x80278730
short::(nit_\BenefitItemObj_cpp)=0x802787A0
BigFan::__ct(const char*)=0x80278970
BigFan::init(const JMapInfoIter&)=0x802789F0
BigFan::initWindModel(void)=0x80278BE0
BigFan::calcWindInfo(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80278C70
BigFan::control(void)=0x80278E20
BigFan::start(void)=0x80278E30
BigFan::exeStart(void)=0x80278E80
BigFan::exeWait(void)=0x80278F50
MR::FunctorV0M<BigFan*,M6BigFanFPCvPv_v>::__cl(void) const=0x80278FF0
MR::FunctorV0M<BigFan*,M6BigFanFPCvPv_v>::clone(JKRHeap*) const=0x80279020
BigFan::__dt(void)=0x80279090
short::(nit_\BigFan_cpp)=0x802790F0
NrvBigFan::BigFanNrvStop::__ct(void)=0x80279130
NrvBigFan::BigFanNrvStart::__ct(void)=0x80279140
NrvBigFan::BigFanNrvWait::__ct(void)=0x80279150
NrvBigFan::BigFanNrvWait::execute(Spine*) const=0x80279160
NrvBigFan::BigFanNrvStart::execute(Spine*) const=0x80279170
NrvBigFan::BigFanNrvStop::execute(Spine*) const=0x80279180
BigFanCloud::__ct(const char*)=0x802791D0
BigFanCloud::init(const JMapInfoIter&)=0x80279220
BigFanCloud::calcAndSetBaseMtx(void)=0x802794E0
BigFanCloud::control(void)=0x80279520
JointControlDelegator<BigFanCloud>::__dt(void)=0x80279680
JointControlDelegator<BigFanCloud>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802796C0
JointControlDelegator<BigFanCloud>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80279730
BigFanCloud::__dt(void)=0x802797A0
short::(nit_\BigFanCloud_cpp)=0x80279800
BigFanHolder::__ct(void)=0x802798C0
DeriveActorGroup<BigFan>::__dt(void)=0x80279910
BigFanHolder::calcWindInfo(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float*)=0x80279970
BigFanFunction::createBigFanHolder(void)=0x80279AC0
BigFanFunction::calcWindInfo(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, float*)=0x80279AD0
BigFanFunction::registerBigFan(BigFan*)=0x80279B50
BigFanHolder::__dt(void)=0x80279B90
BigRepeatWarpLift::__ct(const char*)=0x80279BF0
BigRepeatWarpLift::init(const JMapInfoIter&)=0x80279C40
BigRepeatWarpLift::exeAppear(void)=0x80279D70
BigRepeatWarpLift::exeMove(void)=0x80279DF0
BigRepeatWarpLift::exeSign(void)=0x80279EA0
BigRepeatWarpLift::exeDisappear(void)=0x80279F60
BigRepeatWarpLift::__dt(void)=0x80279FD0
short::(nit_\BigRepeatWarpLift_cpp)=0x8027A030
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvHide::__ct(void)=0x8027A080
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvAppear::__ct(void)=0x8027A090
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvMove::__ct(void)=0x8027A0A0
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvSign::__ct(void)=0x8027A0B0
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvDisappear::__ct(void)=0x8027A0C0
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvDisappear::execute(Spine*) const=0x8027A0D0
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvSign::execute(Spine*) const=0x8027A0E0
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvMove::execute(Spine*) const=0x8027A0F0
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvAppear::execute(Spine*) const=0x8027A100
NrvBigRepeatWarpLift::BigRepeatWarpLiftNrvHide::execute(Spine*) const=0x8027A110
BlackHole::__ct(const char*)=0x8027A160
BlackHole::init(const JMapInfoIter&)=0x8027A1F0
BlackHole::makeActorAppeared(void)=0x8027A3A0
BlackHole::makeActorDead(void)=0x8027A420
BlackHole::kill(void)=0x8027A470
BlackHole::tryStartDemoCamera(void)=0x8027A4C0
BlackHole::calcAndSetBaseMtx(void)=0x8027A500
BlackHole::attackSensor(HitSensor*, HitSensor*)=0x8027A630
BlackHole::initMapToolInfo(const JMapInfoIter&)=0x8027A6E0
BlackHole::initModel(void)=0x8027A7F0
BlackHole::initCubeBox(void)=0x8027A880
BlackHole::isInCubeBox(const JGeometry::TVec3<float>&) const=0x8027A970
BlackHole::updateModelScale(float, float)=0x8027AA10
BlackHole::exeWait(void)=0x8027AA70
BlackHole::exeDisappear(void)=0x8027AB40
BlackHole::__dt(void)=0x8027AC30
short::(nit_\BlackHole_cpp)=0x8027AC90
NrvBlackHole::BlackHoleNrvWait::__ct(void)=0x8027ACD0
NrvBlackHole::BlackHoleNrvDemo::__ct(void)=0x8027ACE0
NrvBlackHole::BlackHoleNrvDisappear::__ct(void)=0x8027ACF0
NrvBlackHole::BlackHoleNrvDisappear::execute(Spine*) const=0x8027AD00
NrvBlackHole::BlackHoleNrvDemo::execute(Spine*) const=0x8027AD10
NrvBlackHole::BlackHoleNrvWait::execute(Spine*) const=0x8027AD30
BloomFlower::__ct(const char*)=0x8027AD40
BloomFlower::init(const JMapInfoIter&)=0x8027AD90
BloomFlower::control(void)=0x8027AEB0
BloomFlower::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8027AEC0
BloomFlower::exeGrow(void)=0x8027AF30
BloomFlower::exeWither(void)=0x8027AFA0
BloomFlower::tryGrow(void)=0x8027B010
BloomFlower::tryWither(void)=0x8027B080
BloomFlower::__dt(void)=0x8027B0F0
short::(nit_\BloomFlower_cpp)=0x8027B150
NrvBloomFlower::BloomFlowerNrvGrow::__ct(void)=0x8027B190
NrvBloomFlower::BloomFlowerNrvWaitGrow::__ct(void)=0x8027B1A0
NrvBloomFlower::BloomFlowerNrvWither::__ct(void)=0x8027B1B0
NrvBloomFlower::BloomFlowerNrvWaitWither::__ct(void)=0x8027B1C0
NrvBloomFlower::BloomFlowerNrvWaitWither::execute(Spine*) const=0x8027B1D0
NrvBloomFlower::BloomFlowerNrvWither::execute(Spine*) const=0x8027B210
NrvBloomFlower::BloomFlowerNrvWaitGrow::execute(Spine*) const=0x8027B220
NrvBloomFlower::BloomFlowerNrvGrow::execute(Spine*) const=0x8027B260
BlueStarCupsulePlanet::__ct(const char*)=0x8027B270
BlueStarCupsulePlanet::init(const JMapInfoIter&)=0x8027B2D0
MR::Functor<BlueStarCupsulePlanet>(BlueStarCupsulePlanet*, M21BlueStarCupsulePlanetFPCvPv_v_Q22MR69FunctorV0M<BlueStarCupsulePlanet*,M21BlueStarCupsulePlanetFPCvPv_v>)=0x8027B640
BlueStarCupsulePlanet::control(void)=0x8027B680
BlueStarCupsulePlanet::startClipped(void)=0x8027B6C0
BlueStarCupsulePlanet::endClipped(void)=0x8027B700
BlueStarCupsulePlanet::updatePose(void)=0x8027B740
BlueStarCupsulePlanet::decidedTarget(void)=0x8027B830
BlueStarCupsulePlanet::releasedTarget(void)=0x8027B880
BlueStarCupsulePlanet::getTargetPosition(JGeometry::TVec3<float>*)=0x8027B8E0
BlueStarCupsulePlanet::isReleaseForce(void) const=0x8027B8F0
BlueStarCupsulePlanet::getPointableRange(void) const=0x8027B900
BlueStarCupsulePlanet::exeWait(void)=0x8027B910
BlueStarCupsulePlanet::exePointable(void)=0x8027B980
BlueStarCupsulePlanet::exeHitPointer(void)=0x8027BA40
BlueStarCupsulePlanet::exeActive(void)=0x8027BB70
BlueStarCupsulePlanet::calcAndSetBaseMtx(void)=0x8027BC30
BlueStarCupsulePlanet::isPointable(void) const=0x8027BCE0
BlueStarCupsulePlanet::emitNerveEffect(void)=0x8027BDE0
BlueStarCupsulePlanet::activateMapPartsFunction(void)=0x8027BF10
BlueStarCupsulePlanet::deactivateMapPartsFunction(void)=0x8027BF40
GCaptureTargetable::releaseDistance(void) const=0x8027BF70
GCaptureTargetable::canEndHold(void) const=0x8027BF80
GCaptureTargetable::getPointableRange(void) const=0x8027BF90
GCaptureTargetable::isReleaseForce(void) const=0x8027BFA0
MR::FunctorV0M<BlueStarCupsulePlanet*,M21BlueStarCupsulePlanetFPCvPv_v>::__cl(void) const=0x8027BFB0
MR::FunctorV0M<BlueStarCupsulePlanet*,M21BlueStarCupsulePlanetFPCvPv_v>::clone(JKRHeap*) const=0x8027BFE0
BlueStarCupsulePlanet::__dt(void)=0x8027C050
short::(nit_\BlueStarCupsulePlanet_cpp)=0x8027C0B0
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvWait::__ct(void)=0x8027C0F0
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvPointable::__ct(void)=0x8027C100
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvHitPointer::__ct(void)=0x8027C110
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvActive::__ct(void)=0x8027C120
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvActive::execute(Spine*) const=0x8027C130
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvHitPointer::execute(Spine*) const=0x8027C140
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvPointable::execute(Spine*) const=0x8027C150
NrvBlueStarCupsulePlanet::BlueStarCupsulePlanetNrvWait::execute(Spine*) const=0x8027C160
BossJugemPlanetCloud::__ct(const char*)=0x8027C1C0
BossJugemPlanetCloud::init(const JMapInfoIter&)=0x8027C200
BossJugemPlanetCloud::attackSensor(HitSensor*, HitSensor*)=0x8027C270
BossJugemPlanetCloud::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8027C2E0
BossJugemPlanetCloud::exeWhiteToGray(void)=0x8027C2F0
BossJugemPlanetCloud::exeWaitGray(void)=0x8027C350
BossJugemPlanetCloud::exeGrayToWhite(void)=0x8027C3B0
BossJugemPlanetCloud::__dt(void)=0x8027C420
short::(nit_\BossJugemPlanetCloud_cpp)=0x8027C480
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvWaitWhite::__ct(void)=0x8027C4C0
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvWhiteToGray::__ct(void)=0x8027C4D0
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvWaitGray::__ct(void)=0x8027C4E0
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvGrayToWhite::__ct(void)=0x8027C4F0
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvGrayToWhite::execute(Spine*) const=0x8027C500
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvWaitGray::execute(Spine*) const=0x8027C510
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvWhiteToGray::execute(Spine*) const=0x8027C520
NrvBossJugemPlanetCloud::BossJugemPlanetCloudNrvWaitWhite::execute(Spine*) const=0x8027C530
BreakableCage::__ct(const char*)=0x8027C590
BreakableCage::init(const JMapInfoIter&)=0x8027C600
BreakableCage::appear(void)=0x8027C9A0
BreakableCage::kill(void)=0x8027CA50
BreakableCage::calcAndSetBaseMtx(void)=0x8027CAC0
BreakableCage::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8027CC50
BreakableCage::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8027CCC0
BreakableCage::initMapToolInfo(const JMapInfoIter&)=0x8027CD30
BreakableCage::initModel(const char*, const JMapInfoIter&)=0x8027CE10
BreakableCage::initBaseMtxForCage(void)=0x8027CF70
BreakableCage::isTypeCage(void) const=0x8027CFF0
BreakableCage::isAppearPowerStar(void) const=0x8027D060
BreakableCage::tryBreak(void)=0x8027D0B0
BreakableCage::exeWait(void)=0x8027D130
BreakableCage::exeBreak(void)=0x8027D1A0
BreakableCage::__dt(void)=0x8027D520
short::(nit_\BreakableCage_cpp)=0x8027D580
NrvBreakableCage::BreakableCageNrvWait::__ct(void)=0x8027D5C0
NrvBreakableCage::BreakableCageNrvWaitStartDemoBreak::__ct(void)=0x8027D5D0
NrvBreakableCage::BreakableCageNrvBreak::__ct(void)=0x8027D5E0
NrvBreakableCage::BreakableCageNrvBreak::execute(Spine*) const=0x8027D5F0
NrvBreakableCage::BreakableCageNrvWaitStartDemoBreak::execute(Spine*) const=0x8027D600
NrvBreakableCage::BreakableCageNrvWait::execute(Spine*) const=0x8027D610
@unnamed@BrightObj_cpp@::calcScreenPosition(JGeometry::TVec2<float>*, const JGeometry::TVec3<float>&, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TProjection3<JGeometry::TMatrix44<JGeometry::SMatrix44C<float>>>&)=0x8027D620
BrightInfo::__ct(void)=0x8027D7B0
BrightInfo::write(const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&, float)=0x8027D7E0
BrightInfo::endRead(void)=0x8027D880
BrightInfo::reset(void)=0x8027D8B0
JGeometry::TVec2<float>::zero(void)=0x8027D940
BrightDrawInfo::__ct(void)=0x8027D950
BrightDrawInfo::write(unsigned short, const JGeometry::TVec3<float>&, float)=0x8027D9D0
BrightCamInfo::__ct(void)=0x8027DA30
BrightCamInfo::write(unsigned short, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TProjection3<JGeometry::TMatrix44<JGeometry::SMatrix44C<float>>>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8027DB30
BrightObjBase::__ct(void)=0x8027DC10
BrightObjBase::checkVisibilityOfSphere(unsigned short, const BrightCamInfo&)=0x8027DC80
BrightObjBase::checkVisible(BrightObjBase::CheckArg*, const JGeometry::TVec3<float>&, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TProjection3<JGeometry::TMatrix44<JGeometry::SMatrix44C<float>>>&)=0x8027DFD0
BrightObjBase::setResult(const BrightObjBase::CheckArg&)=0x8027E0A0
BrightObjBase::drawSphere(const JGeometry::TVec3<float>&, float) const=0x8027E1C0
BrightObjBase::__dt(void)=0x8027E310
BrightSun::__ct(const char*)=0x8027E350
BrightSun::init(const JMapInfoIter&)=0x8027E3B0
BrightSun::control(void)=0x8027E450
BrightSun::draw(void) const=0x8027E500
BrightSun::calcBrightInfo(unsigned short, const BrightCamInfo&)=0x8027E570
BrightSun::getNowCenter(JGeometry::TVec2<float>*) const=0x8027E5D0
BrightSun::controlSunModel(void)=0x8027E630
BrightObjBase::endRead(void)=0x8027E880
BrightObjBase::getCenter(void) const=0x8027E890
BrightObjBase::getBrightCenter(void) const=0x8027E8B0
BrightObjBase::getBright(void) const=0x8027E8D0
BrightObjBase::getNowCenter(JGeometry::TVec2<float>*) const=0x8027E8F0
BrightSun::__dt(void)=0x8027E900
@unnamed@Candlestand_cpp@::getParam(const char*)=0x8027E990
Candlestand::__ct(const char*)=0x8027EA00
Candlestand::init(const JMapInfoIter&)=0x8027EA60
Candlestand::initAfterPlacement(void)=0x8027EC40
Candlestand::calcAndSetBaseMtx(void)=0x8027EC80
Candlestand::makeActorAppeared(void)=0x8027ECD0
Candlestand::startClipped(void)=0x8027ED10
Candlestand::endClipped(void)=0x8027ED70
Candlestand::control(void)=0x8027EDD0
Candlestand::attackSensor(HitSensor*, HitSensor*)=0x8027EE10
Candlestand::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8027EEC0
Candlestand::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8027EFA0
Candlestand::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8027F060
Candlestand::tryExtinguish(void)=0x8027F0C0
Candlestand::emitEffectFire(void)=0x8027F140
Candlestand::deleteEffectFire(void)=0x8027F1B0
Candlestand::emitEffectExtinguishFire(void)=0x8027F220
Candlestand::appearItem(void)=0x8027F2A0
Candlestand::exeFire(void)=0x8027F530
Candlestand::exeExtinguish(void)=0x8027F5E0
Candlestand::exeFlicker(void)=0x8027F6A0
Candlestand::__dt(void)=0x8027F770
short::(nit_\Candlestand_cpp)=0x8027F7D0
NrvCandlestand::HostTypeWaitFire::__ct(void)=0x8027F830
NrvCandlestand::HostTypeFire::__ct(void)=0x8027F840
NrvCandlestand::HostTypeBurn::__ct(void)=0x8027F850
NrvCandlestand::HostTypeEmit::__ct(void)=0x8027F860
NrvCandlestand::HostTypeAttack::__ct(void)=0x8027F870
NrvCandlestand::HostTypeExtinguish::__ct(void)=0x8027F880
NrvCandlestand::HostTypeFlicker::__ct(void)=0x8027F890
NrvCandlestand::HostTypeFlicker::execute(Spine*) const=0x8027F8A0
NrvCandlestand::HostTypeExtinguish::execute(Spine*) const=0x8027F8B0
NrvCandlestand::HostTypeAttack::execute(Spine*) const=0x8027F8C0
NrvCandlestand::HostTypeEmit::execute(Spine*) const=0x8027F930
NrvCandlestand::HostTypeBurn::execute(Spine*) const=0x8027F980
NrvCandlestand::HostTypeFire::execute(Spine*) const=0x8027F9A0
NrvCandlestand::HostTypeWaitFire::execute(Spine*) const=0x8027F9B0
CapsuleCage::__ct(const char*)=0x8027F9C0
CapsuleCage::init(const JMapInfoIter&)=0x8027FA20
CapsuleCage::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8027FBD0
CapsuleCage::startOpen(void)=0x8027FC50
CapsuleCage::exeStartCamera(void)=0x8027FCB0
CapsuleCage::exeOpen(void)=0x8027FD20
CapsuleCage::kill(void)=0x8027FE40
CapsuleCage::connectToScene(const MapObjActorInitInfo&)=0x8027FEC0
CapsuleCage::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x8027FED0
CapsuleCage::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x8027FF20
CapsuleCage::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x8027FF30
CapsuleCage::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x8027FF40
MR::FunctorV0M<CapsuleCage*,M11CapsuleCageFPCvPv_v>::__cl(void) const=0x8027FF50
MR::FunctorV0M<CapsuleCage*,M11CapsuleCageFPCvPv_v>::clone(JKRHeap*) const=0x8027FF80
CapsuleCage::__dt(void)=0x8027FFF0
short::(nit_\CapsuleCage_cpp)=0x80280050
NrvCapsuleCage::CapsuleCageNrvWait::__ct(void)=0x80280090
NrvCapsuleCage::CapsuleCageNrvStartCamera::__ct(void)=0x802800A0
NrvCapsuleCage::CapsuleCageNrvOpen::__ct(void)=0x802800B0
NrvCapsuleCage::CapsuleCageNrvEndCamera::__ct(void)=0x802800C0
NrvCapsuleCage::CapsuleCageNrvEndCamera::execute(Spine*) const=0x802800D0
NrvCapsuleCage::CapsuleCageNrvOpen::execute(Spine*) const=0x80280120
NrvCapsuleCage::CapsuleCageNrvStartCamera::execute(Spine*) const=0x80280130
NrvCapsuleCage::CapsuleCageNrvWait::execute(Spine*) const=0x80280140
CaveInCube::__ct(const char*)=0x80280150
CaveInCube::init(const JMapInfoIter&)=0x802801C0
CaveInCube::initRotate(void)=0x80280250
CaveInCube::calcDebrisMtx(CaveInParts*)=0x80280340
CaveInCube::initDebris(void)=0x80280450
CaveInCube::getUnusedDebris(unsigned long)=0x802805C0
CaveInCube::exeGenerate(void)=0x80280660
CaveInCube::__dt(void)=0x802807A0
short::(nit_\CaveInCube_cpp)=0x80280800
NrvCaveInCube::CaveInCubeNrvGenerate::__ct(void)=0x80280810
NrvCaveInCube::CaveInCubeNrvGenerate::execute(Spine*) const=0x80280820
CaveInParts::__ct(CaveInCube*, const char*, const char*)=0x80280830
CaveInParts::init(const JMapInfoIter&)=0x802808B0
CaveInParts::appear(void)=0x80280960
CaveInParts::control(void)=0x802809A0
CaveInParts::attackSensor(HitSensor*, HitSensor*)=0x80280A00
CaveInParts::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80280A90
CaveInParts::setLifeAndSpeed(long, float, float, float)=0x80280B10
CaveInParts::exeFall(void)=0x80280B30
CaveInParts::__dt(void)=0x80280C70
short::(nit_\CaveInParts_cpp)=0x80280CD0
NrvCaveInParts::CaveInPartsNrvFall::__ct(void)=0x80280D10
NrvCaveInParts::CaveInPartsNrvFreeze::__ct(void)=0x80280D20
NrvCaveInParts::CaveInPartsNrvExplode::__ct(void)=0x80280D30
NrvCaveInParts::CaveInPartsNrvExplode::execute(Spine*) const=0x80280D40
NrvCaveInParts::CaveInPartsNrvFreeze::execute(Spine*) const=0x80280DA0
NrvCaveInParts::CaveInPartsNrvFall::execute(Spine*) const=0x80280DB0
ChangeAlphaObj::__ct(const char*)=0x80280DC0
ChangeAlphaObj::init(const JMapInfoIter&)=0x80280E10
ChangeAlphaObj::exeWait(void)=0x80280F50
ChangeAlphaObj::exeAlpha(void)=0x80280FC0
ChangeAlphaObj::isNeedForKill(void)=0x80281050
ChangeAlphaObj::__dt(void)=0x80281110
short::(nit_\ChangeAlphaObj_cpp)=0x80281170
NrvChangeAlphaObj::ChangeAlphaObjNrvWait::__ct(void)=0x802811A0
NrvChangeAlphaObj::ChangeAlphaObjNrvAlpha::__ct(void)=0x802811B0
NrvChangeAlphaObj::ChangeAlphaObjNrvAlpha::execute(Spine*) const=0x802811C0
NrvChangeAlphaObj::ChangeAlphaObjNrvWait::execute(Spine*) const=0x802811D0
ChangeRoom::__ct(const char*)=0x802811E0
ChangeRoom::init(const JMapInfoIter&)=0x80281230
ChangeRoom::makeActorDead(void)=0x802814C0
ChangeRoom::attackSensor(HitSensor*, HitSensor*)=0x80281800
ChangeRoom::calcAnim(void)=0x80281930
ChangeRoom::__dt(void)=0x80281B10
short::(nit_\ChangeRoom_cpp)=0x80281B70
ChimneyEntryObj::__ct(const char*)=0x80281CA0
ChimneyEntryObj::init(const JMapInfoIter&)=0x80281D10
ChimneyEntryObj::initAfterPlacement(void)=0x80281E50
ChimneyEntryObj::control(void)=0x80281F10
ChimneyEntryObj::exeWarpStart(void)=0x80281F30
ChimneyEntryObj::exeWarp(void)=0x80281FC0
ChimneyEntryObj::exeWarpEnd(void)=0x80282070
ChimneyEntryObj::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80282100
ChimneyEntryObj::warpPlayer(void)=0x802822D0
ChimneyEntryObj::__dt(void)=0x80282390
short::(nit_\ChimneyEntryObj_cpp)=0x802823F0
NrvChimneyEntryObj::ChimneyEntryObjNrvWait::__ct(void)=0x80282450
NrvChimneyEntryObj::ChimneyEntryObjNrvWarpStart::__ct(void)=0x80282460
NrvChimneyEntryObj::ChimneyEntryObjNrvWarp::__ct(void)=0x80282470
NrvChimneyEntryObj::ChimneyEntryObjNrvWarpEnd::__ct(void)=0x80282480
NrvChimneyEntryObj::ChimneyEntryObjNrvWarpEnd::execute(Spine*) const=0x80282490
NrvChimneyEntryObj::ChimneyEntryObjNrvWarp::execute(Spine*) const=0x802824A0
NrvChimneyEntryObj::ChimneyEntryObjNrvWarpStart::execute(Spine*) const=0x802824B0
NrvChimneyEntryObj::ChimneyEntryObjNrvWait::execute(Spine*) const=0x802824C0
ChipBase::__ct(const char*, long, const char*)=0x802824D0
ChipBase::init(const JMapInfoIter&)=0x80282560
ChipBase::initModel(const JMapInfoIter&)=0x802826A0
ChipBase::initSensor(void)=0x80282790
ChipBase::initShadow(const JMapInfoIter&)=0x80282830
ChipBase::initJMapParam(const JMapInfoIter&)=0x80282970
ChipBase::initAfterPlacement(void)=0x80282A20
ChipBase::deactive(void)=0x80282A70
ChipBase::setGroupID(long)=0x80282AC0
ChipBase::setHost(LiveActor*)=0x80282AD0
ChipBase::makeActorAppeared(void)=0x80282AE0
ChipBase::makeActorDead(void)=0x80282B50
ChipBase::control(void)=0x80282BA0
ChipBase::appearWait(void)=0x80282C20
ChipBase::appearFlashing(long)=0x80282CA0
ChipBase::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80282D30
ChipBase::requestGet(HitSensor*, HitSensor*)=0x80282E40
ChipBase::requestShow(void)=0x80282ED0
ChipBase::requestHide(void)=0x80282F40
ChipBase::exeFlashing(void)=0x802832B0
ChipBase::exeGot(void)=0x80283330
ChipBase::isGettable(void) const=0x80283430
ChipBase::isNeedBubble(const JMapInfoIter&)=0x80283560
ChipBase::__dt(void)=0x802835C0
short::(nit_\ChipBase_cpp)=0x80283620
NrvChipBase::ChipBaseNrvDeactive::__ct(void)=0x80283680
NrvChipBase::ChipBaseNrvWait::__ct(void)=0x80283690
NrvChipBase::ChipBaseNrvControled::__ct(void)=0x802836B0
NrvChipBase::ChipBaseNrvFlashing::__ct(void)=0x802836C0
NrvChipBase::ChipBaseNrvHide::__ct(void)=0x802836D0
NrvChipBase::ChipBaseNrvGot::__ct(void)=0x802836E0
NrvChipBase::ChipBaseNrvGot::execute(Spine*) const=0x802836F0
NrvChipBase::ChipBaseNrvHide::execute(Spine*) const=0x80283700
NrvChipBase::ChipBaseNrvFlashing::execute(Spine*) const=0x80283710
NrvChipBase::ChipBaseNrvControled::execute(Spine*) const=0x80283720
NrvChipBase::ChipBaseNrvWait::execute(Spine*) const=0x80283740
NrvChipBase::ChipBaseNrvDeactive::execute(Spine*) const=0x80283790
ChipCounter::__ct(const char*, long)=0x802837A0
LayoutActor::__dt(void)=0x80283810
ChipCounter::init(const JMapInfoIter&)=0x80283870
ChipCounter::control(void)=0x80283980
ChipCounter::setCount(long)=0x80283A10
ChipCounter::requestShow(long, long)=0x80283B00
ChipCounter::requestComplete(long)=0x80283C00
ChipCounter::requestHide(long)=0x80283CA0
ChipCounter::requestActive(void)=0x80283D20
ChipCounter::requestDeactive(void)=0x80283DA0
ChipCounter::tryEndFrameIn(void)=0x80283E40
ChipCounter::tryEndFrameOut(void)=0x80283E90
ChipCounter::tryEndComplete(void)=0x80283F00
ChipCounter::exeComplete(void)=0x80283F50
ChipCounter::exeCompleteOut(void)=0x80284000
ChipCounter::__dt(void)=0x80284090
short::(nit_\ChipCounter_cpp)=0x802840F0
NrvChipCounter::ChipCounterNrvHide::__ct(void)=0x80284150
NrvChipCounter::ChipCounterNrvFrameIn::__ct(void)=0x80284160
NrvChipCounter::ChipCounterNrvShow::__ct(void)=0x80284170
NrvChipCounter::ChipCounterNrvFrameOut::__ct(void)=0x80284180
NrvChipCounter::ChipCounterNrvTryDemo::__ct(void)=0x80284190
NrvChipCounter::ChipCounterNrvComplete::__ct(void)=0x802841A0
NrvChipCounter::ChipCounterNrvCompleteOut::__ct(void)=0x802841B0
NrvChipCounter::ChipCounterNrvCompleteOut::execute(Spine*) const=0x802841C0
NrvChipCounter::ChipCounterNrvComplete::execute(Spine*) const=0x802841D0
NrvChipCounter::ChipCounterNrvTryDemo::execute(Spine*) const=0x802841E0
NrvChipCounter::ChipCounterNrvFrameOut::execute(Spine*) const=0x80284220
NrvChipCounter::ChipCounterNrvShow::execute(Spine*) const=0x80284270
NrvChipCounter::ChipCounterNrvFrameIn::execute(Spine*) const=0x802842C0
NrvChipCounter::ChipCounterNrvHide::execute(Spine*) const=0x80284320
ChipGroup::__ct(const char*, long)=0x80284330
ChipGroup::init(const JMapInfoIter&)=0x802843E0
ChipGroup::updateUIRange(void)=0x80284520
ChipGroup::movement(void)=0x80284720
ChipGroup::registerChip(ChipBase*)=0x802847D0
ChipGroup::noticeGet(ChipBase*)=0x80284870
ChipGroup::noticeEndCompleteDemo(void)=0x802849D0
ChipGroup::receiveAppearRequest(void)=0x802849E0
ChipGroup::getGotCount(void) const=0x80284AE0
ChipGroup::isComplete(void) const=0x80284AF0
ChipGroup::__dt(void)=0x80284B30
YellowChipGroup::__ct(const char*)=0x80284B90
MR::FunctorV0M<ChipGroup*,M9ChipGroupFPCvPv_v>::__cl(void) const=0x80284BD0
MR::FunctorV0M<ChipGroup*,M9ChipGroupFPCvPv_v>::clone(JKRHeap*) const=0x80284C00
YellowChipGroup::__dt(void)=0x80284C70
ChipHolder::__ct(const char*, long)=0x80284CD0
ChipHolder::init(const JMapInfoIter&)=0x80284D30
ChipHolder::registerChipGroup(ChipGroup*)=0x80284DD0
ChipHolder::findChipGroup(long) const=0x80284DF0
MR::createChipHolder(long)=0x80284E40
MR::getChipHolder(long)=0x80284E60
MR::registerChipGroup(long, ChipGroup*)=0x80284EB0
MR::registerChip(long, ChipBase*, long)=0x80284EF0
MR::updateChipCounterUIRange(long, ChipBase*, long)=0x80284F40
MR::noticeGetChip(long, ChipBase*, long)=0x80284F90
MR::showChipCounter(long, long)=0x80285000
MR::hideChipCounter(long, long)=0x80285060
MR::requestStartChipCompleteDemo(long, long)=0x802850A0
MR::noticeEndChipCompleteDemo(long, long)=0x802850E0
MR::getGotChipCount(long, long)=0x80285120
MR::activateChipLayout(void)=0x80285160
MR::deactivateChipLayout(void)=0x802851A0
ChipHolder::__dt(void)=0x802851E0
CircleCoinGroup::__ct(const char*)=0x80285240
CoinGroup::__dt(void)=0x80285290
CircleCoinGroup::initCoinArray(const JMapInfoIter&)=0x802852F0
CircleCoinGroup::getCoinName(void) const=0x80285370
CircleCoinGroup::placementCoin(void)=0x80285390
MR::createCircleCoinGroup(const char*)=0x802855A0
MR::createCirclePurpleCoinGroup(const char*)=0x802855E0
CircleCoinGroup::__dt(void)=0x80285630
ClipArea::__ct(const char*)=0x80285690
ClipArea::init(const JMapInfoIter&)=0x802856F0
ClipArea::initBaseMatrix(const JMapInfoIter&)=0x80285770
ClipArea::draw(void) const=0x802857B0
ClipArea::setShape(ClipAreaShape*)=0x80285870
ClipArea::isInArea(const JGeometry::TVec3<float>&, float) const=0x80285880
MR::setClipSphereArea(ClipArea*)=0x802858A0
MR::setClipCenterBoxArea(ClipArea*, const char*)=0x802858F0
MR::setClipBottomBoxArea(ClipArea*, const char*)=0x80285950
MR::setClipCylinderArea(ClipArea*)=0x802859B0
MR::setClipTopConeArea(ClipArea*)=0x802859F0
MR::setClipBottomConeArea(ClipArea*)=0x80285A40
ClipArea::getBaseMtx(void) const=0x80285A90
ClipArea::__dt(void)=0x80285AA0
short::(nit_\ClipArea_cpp)=0x80285B00
ClipAreaDrop::__ct(const char*, const char*)=0x80285B50
ClipAreaDrop::init(const JMapInfoIter&)=0x80285C00
ClipAreaDrop::setBaseSize(float)=0x80285C70
ClipAreaDrop::appear(void)=0x80285D10
ClipAreaDrop::control(void)=0x80285D60
ClipAreaDrop::exeWait(void)=0x80285DE0
ClipAreaDrop::__dt(void)=0x80285F20
short::(nit_\ClipAreaDrop_cpp)=0x80285F80
NrvClipAreaDrop::ClipAreaDropNrvWait::__ct(void)=0x80285FC0
NrvClipAreaDrop::ClipAreaDropNrvWait::execute(Spine*) const=0x80285FD0
ClipAreaDropHolder::__ct(void)=0x80285FF0
DeriveActorGroup<ClipAreaDrop>::__dt(void)=0x80286090
MR::createClipAreaDropHolder(void)=0x802860F0
MR::getDeadClipAreaDrop(void)=0x80286100
MR::appearClipAreaDrop(const JGeometry::TVec3<float>&, float)=0x80286150
ClipAreaHolder::__ct(const char*)=0x802862F0
DeriveActorGroup<ClipArea>::__dt(void)=0x80286360
ClipAreaHolder::init(const JMapInfoIter&)=0x802863C0
ClipAreaHolder::isInArea(const JGeometry::TVec3<float>&, float) const=0x802863D0
MR::createClipAreaHolder(void)=0x80286480
MR::isExistClipAreaHolder(void)=0x80286490
MR::addClipArea(ClipArea*)=0x802864A0
MR::isInClipArea(const JGeometry::TVec3<float>&, float)=0x802864E0
MR::isActiveClipArea(void)=0x80286520
MR::activateClipArea(void)=0x80286560
MR::deactivateClipArea(void)=0x80286590
ClipAreaHolder::__dt(void)=0x802865C0
ClipAreaMovable::__ct(const char*)=0x80286620
ClipAreaMovable::init(const JMapInfoIter&)=0x80286670
ClipAreaMovable::makeActorAppeared(void)=0x80286760
ClipAreaMovable::makeActorDead(void)=0x802867A0
ClipAreaMovable::control(void)=0x802867E0
ClipAreaMovable::initMoveFunction(const JMapInfoIter&)=0x80286840
ClipAreaMovable::startMoveFunction(void)=0x802868F0
ClipAreaMovable::endMoveFunction(void)=0x80286960
ClipAreaMovable::movementMoveFunction(void)=0x802869D0
ClipAreaMovable::updateMatrix(void)=0x80286A40
MR::createClipAreaSphere(const char*)=0x80286B00
MR::createClipAreaCenterBox(const char*)=0x80286B60
MR::createClipAreaBottomBox(const char*)=0x80286BD0
MR::createClipAreaCenterBoxHighModel(const char*)=0x80286C40
MR::createClipAreaBottomBoxHighModel(const char*)=0x80286CB0
MR::createClipAreaCylinder(const char*)=0x80286D20
MR::createClipAreaTopCone(const char*)=0x80286D80
MR::createClipAreaBottomCone(const char*)=0x80286DE0
ClipAreaMovable::__dt(void)=0x80286E40
ClipAreaShape::__ct(const char*)=0x80286EA0
ClipAreaShape::isInArea(const JGeometry::TVec3<float>&, float, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x80286EF0
ClipAreaShape::isInArea(const JGeometry::TVec3<float>&) const=0x80286FE0
ClipAreaShape::calcVolumeMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x80286FF0
ClipAreaShape::drawVolumeShape(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x80287040
ClipAreaShapeSphere::__ct(void)=0x802870D0
ClipAreaShapeSphere::isInArea(const JGeometry::TVec3<float>&) const=0x80287120
ClipAreaShapeSphere::calcVolumeMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x80287150
ClipAreaShapeBox::__ct(const char*, long)=0x802871F0
ClipAreaShapeBox::isInArea(const JGeometry::TVec3<float>&) const=0x80287250
ClipAreaShapeBox::calcVolumeMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x80287360
ClipAreaShapeCylinder::__ct(void)=0x802873D0
ClipAreaShapeCylinder::isInArea(const JGeometry::TVec3<float>&) const=0x80287420
ClipAreaShapeCylinder::calcVolumeMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x80287560
ClipAreaShapeCone::__ct(long)=0x802875D0
ClipAreaShapeCone::isInArea(const JGeometry::TVec3<float>&) const=0x80287630
ClipAreaShapeCone::calcVolumeMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const JGeometry::TVec3<float>&) const=0x802876E0
ClipFieldFillDraw::__ct(const char*)=0x80287790
ClipFieldFillDraw::init(const JMapInfoIter&)=0x80287850
ClipFieldFillDraw::setUpFillScreen(void) const=0x80287880
ClipFieldFillDraw::sendFillScreen(_GXColor) const=0x80287B40
ClipFieldFillDraw::draw(void) const=0x80287C00
ClipFieldFillDraw::__dt(void)=0x80287CC0
ClipFieldSwitch::__ct(const char*)=0x80287D20
ClipFieldSwitch::init(const JMapInfoIter&)=0x80287D60
ClipFieldSwitch::control(void)=0x80287E10
ClipFieldSwitch::__dt(void)=0x80287F00
CloudSea::__ct(const char*)=0x80287F60
CloudSea::init(const JMapInfoIter&)=0x80287FB0
CloudSea::control(void)=0x80288050
CloudSea::__dt(void)=0x80288060
CloudStep::__ct(const char*)=0x802880C0
CloudStep::init(const JMapInfoIter&)=0x80288150
MR::Functor<CloudStep>(CloudStep*, M9CloudStepFPCvPv_v_Q22MR43FunctorV0M<CloudStep*,M9CloudStepFPCvPv_v>)=0x802882F0
CloudStep::control(void)=0x80288330
CloudStep::calcAndSetBaseMtx(void)=0x80288380
CloudStep::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80288540
CloudStep::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80288590
CloudStep::exeAppear(void)=0x80288680
CloudStep::exeDisappear(void)=0x802886E0
CloudStep::startAppear(void)=0x802887F0
CloudStep::startDisappear(void)=0x80288840
MR::FunctorV0M<CloudStep*,M9CloudStepFPCvPv_v>::__cl(void) const=0x80288890
MR::FunctorV0M<CloudStep*,M9CloudStepFPCvPv_v>::clone(JKRHeap*) const=0x802888C0
CloudStep::__dt(void)=0x80288930
short::(nit_\CloudStep_cpp)=0x80288990
NrvCloudStep::CloudStepNrvWait::__ct(void)=0x802889D0
NrvCloudStep::CloudStepNrvAppear::__ct(void)=0x802889E0
NrvCloudStep::CloudStepNrvDisappear::__ct(void)=0x802889F0
NrvCloudStep::CloudStepNrvDisappear::execute(Spine*) const=0x80288A00
NrvCloudStep::CloudStepNrvAppear::execute(Spine*) const=0x80288A10
NrvCloudStep::CloudStepNrvWait::execute(Spine*) const=0x80288A20
CocoNut::__ct(const char*)=0x80288A30
CocoNut::init(const JMapInfoIter&)=0x80288AF0
CocoNut::initAfterPlacement(void)=0x80288CA0
CocoNut::startClipped(void)=0x80288D40
CocoNut::hit(const JGeometry::TVec3<float>&, float)=0x80288E30
CocoNut::isPossibleToHit(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&) const=0x80288EC0
CocoNut::calcMoveSpeed(void) const=0x80288FC0
CocoNut::getModelName(void)=0x80289020
CocoNut::getBreakEffectName(void)=0x80289060
CocoNut::calcAndSetBaseMtx(void)=0x802890A0
CocoNut::attackSensor(HitSensor*, HitSensor*)=0x80289210
CocoNut::receiveMsgPush(HitSensor*, HitSensor*)=0x80289350
CocoNut::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802893E0
CocoNut::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80289660
CocoNut::initMapToolInfo(const JMapInfoIter&)=0x80289780
CocoNut::initSensor(void)=0x80289800
CocoNut::initEffect(void)=0x802898B0
CocoNut::updateRotate(float)=0x80289960
CocoNut::updateGravity(void)=0x80289B10
CocoNut::processMove(void)=0x80289BB0
CocoNut::setFrontVec(const JGeometry::TVec3<float>&)=0x80289F90
CocoNut::tryHit(HitSensor*, HitSensor*)=0x8028A030
CocoNut::tryPushedFromActor(HitSensor*, HitSensor*)=0x8028A130
CocoNut::reviseFrontVec(void)=0x8028A290
CocoNut::statusToWait(void)=0x8028A3D0
CocoNut::tryMoveEnd(void)=0x8028A480
CocoNut::tryDisappear(void)=0x8028A570
CocoNut::isValidPushedFromPlayer(const HitSensor*, const HitSensor*) const=0x8028A640
CocoNut::calcHitSpeedAndFrontVec(float*, float*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&) const=0x8028A770
CocoNut::isOnGround(void) const=0x8028A8E0
CocoNut::getWallNormal(JGeometry::TVec3<float>*) const=0x8028A980
CocoNut::sendMsgToBindedSensor(void)=0x8028AA30
CocoNut::sendMsgEnemyAttackToBindedSensor(HitSensor*)=0x8028AAD0
CocoNut::isValidReceiveMsg(const HitSensor*) const=0x8028AB30
CocoNut::statusToHide(void)=0x8028ABC0
CocoNut::emitEffectSpinHit(const HitSensor*, const HitSensor*)=0x8028AC20
CocoNut::isContactWithOtherCocoNut(void) const=0x8028ACB0
CocoNut::exeWait(void)=0x8028AD30
CocoNut::exeWaitOnBind(void)=0x8028ADD0
CocoNut::exeMove(void)=0x8028AE50
CocoNut::exeInWater(void)=0x8028AF10
CocoNut::exeBreak(void)=0x8028B010
CocoNut::__dt(void)=0x8028B0D0
short::(nit_\CocoNut_cpp)=0x8028B130
NrvCocoNut::CocoNutNrvWait::__ct(void)=0x8028B180
NrvCocoNut::CocoNutNrvWaitOnBind::__ct(void)=0x8028B190
NrvCocoNut::CocoNutNrvMove::__ct(void)=0x8028B1A0
NrvCocoNut::CocoNutNrvInWater::__ct(void)=0x8028B1B0
NrvCocoNut::CocoNutNrvBreak::__ct(void)=0x8028B1C0
NrvCocoNut::CocoNutNrvReplaceReady::__ct(void)=0x8028B1D0
NrvCocoNut::CocoNutNrvReplaceReady::execute(Spine*) const=0x8028B1E0
NrvCocoNut::CocoNutNrvBreak::execute(Spine*) const=0x8028B220
NrvCocoNut::CocoNutNrvInWater::execute(Spine*) const=0x8028B230
NrvCocoNut::CocoNutNrvMove::execute(Spine*) const=0x8028B240
NrvCocoNut::CocoNutNrvWaitOnBind::execute(Spine*) const=0x8028B250
NrvCocoNut::CocoNutNrvWait::execute(Spine*) const=0x8028B260
CoconutTreeLeaf::__ct(const CoconutTreeLeafGroup*, A4_fPCQ29JGeometry8TVec3<float>)=0x8028B270
CoconutTreeLeaf::init(const JMapInfoIter&)=0x8028B3C0
CoconutTreeLeaf::update(float, float)=0x8028B460
CoconutTreeLeaf::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8028B7C0
CoconutTreeLeafGroup::__ct(const char*)=0x8028B830
CoconutTreeLeafGroup::init(const JMapInfoIter&)=0x8028B890
CoconutTreeLeafGroup::startClipped(void)=0x8028B9F0
CoconutTreeLeafGroup::endClipped(void)=0x8028BA60
CoconutTreeLeafGroup::control(void)=0x8028BAD0
CoconutTreeLeaf::getBaseMtx(void) const=0x8028BBA0
CoconutTreeLeaf::__dt(void)=0x8028BBB0
CoconutTreeLeafGroup::__dt(void)=0x8028BC10
Coin::__ct(const char*)=0x8028BC70
Coin::init(const JMapInfoIter&)=0x8028BD20
Coin::initAfterPlacement(void)=0x8028C070
Coin::initShadow(const JMapInfoIter&)=0x8028C0C0
Coin::setShadowAndPoseModeFromJMapIter(const JMapInfoIter&)=0x8028C1C0
Coin::makeActorAppeared(void)=0x8028C2A0
Coin::makeActorDead(void)=0x8028C3D0
Coin::calcAndSetBaseMtx(void)=0x8028C460
Coin::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8028C5F0
Coin::exeNonActive(void)=0x8028C740
Coin::exeFix(void)=0x8028C7C0
Coin::exeFixTimer(void)=0x8028C850
Coin::exeMove(void)=0x8028C8F0
Coin::exeControled(void)=0x8028CB80
Coin::exeSpinDrained(void)=0x8028CBE0
Coin::exeHop(void)=0x8028CC40
Coin::appear(void)=0x8028CE00
Coin::appearFixInit(void)=0x8028CE10
Coin::appearFix(void)=0x8028CE80
Coin::appearFixTimer(long, long)=0x8028CEF0
Coin::appearMove(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, long)=0x8028CF80
Coin::appearHop(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8028D080
Coin::requestSpinDrain(void)=0x8028D1E0
Coin::requestShow(void)=0x8028D4A0
Coin::requestHide(void)=0x8028D510
Coin::noticeGetCoin(void)=0x8028D580
Coin::setLife(long)=0x8028D660
Coin::setHostInfo(CoinHostInfo*)=0x8028D680
Coin::setCalcShadowMode(void)=0x8028D690
Coin::setCannotTime(long)=0x8028D710
Coin::calcRebouond(void)=0x8028D730
Coin::attenuateVelocity(void)=0x8028D870
Coin::isNeedBubble(const JMapInfoIter&)=0x8028D8C0
MR::createDirectSetCoin(const char*)=0x8028D9B0
MR::createCoin(const NameObj*, const char*)=0x8028DA20
MR::createDirectSetPurpleCoin(const char*)=0x8028DA90
MR::createPurpleCoin(const NameObj*, const char*)=0x8028DB00
MR::FunctorV0M<Coin*,M4CoinFPCvPv_v>::__cl(void) const=0x8028DB80
MR::FunctorV0M<Coin*,M4CoinFPCvPv_v>::clone(JKRHeap*) const=0x8028DBB0
Coin::__dt(void)=0x8028DC20
short::(nit_\Coin_cpp)=0x8028DC80
NrvCoin::CoinNrvNonActive::__ct(void)=0x8028DCF0
NrvCoin::CoinNrvFix::__ct(void)=0x8028DD00
NrvCoin::CoinNrvFixHide::__ct(void)=0x8028DD10
NrvCoin::CoinNrvFixTimer::__ct(void)=0x8028DD20
NrvCoin::CoinNrvControled::__ct(void)=0x8028DD30
NrvCoin::CoinNrvSpinDrained::__ct(void)=0x8028DD40
NrvCoin::CoinNrvMove::__ct(void)=0x8028DD50
NrvCoin::CoinNrvHop::__ct(void)=0x8028DD60
NrvCoin::CoinNrvHop::execute(Spine*) const=0x8028DDB0
NrvCoin::CoinNrvMove::execute(Spine*) const=0x8028DDC0
NrvCoin::CoinNrvSpinDrained::execute(Spine*) const=0x8028DDD0
NrvCoin::CoinNrvControled::execute(Spine*) const=0x8028DDE0
NrvCoin::CoinNrvFixTimer::execute(Spine*) const=0x8028DDF0
NrvCoin::CoinNrvFixHide::execute(Spine*) const=0x8028DE00
NrvCoin::CoinNrvFix::execute(Spine*) const=0x8028DE10
NrvCoin::CoinNrvNonActive::execute(Spine*) const=0x8028DE20
CoinAppearSpot::__ct(const char*)=0x8028DE30
CoinAppearSpot::init(const JMapInfoIter&)=0x8028DE80
CoinAppearSpot::appear(void)=0x8028DF20
CoinAppearSpot::getBaseMtx(void) const=0x8028DF60
CoinAppearSpot::__dt(void)=0x8028DF70
CoinGroup::__ct(const char*)=0x8028DFD0
CoinGroup::init(const JMapInfoIter&)=0x8028E030
MR::Functor<CoinGroup>(CoinGroup*, M9CoinGroupFPCvPv_v_Q22MR43FunctorV0M<CoinGroup*,M9CoinGroupFPCvPv_v>)=0x8028E360
CoinGroup::killCoinAll(void)=0x8028E400
CoinGroup::appearCoinAll(void)=0x8028E470
CoinGroup::appearCoinFix(void)=0x8028E490
CoinGroup::appearCoinAllTimer(void)=0x8028E500
CoinGroup::setCoinTrans(long, const JGeometry::TVec3<float>&)=0x8028E570
CoinGroup::appear(void)=0x8028E5D0
CoinGroup::exeAppear(void)=0x8028E630
CoinGroup::exeDemoAppear(void)=0x8028E6C0
CoinGroup::exeKill(void)=0x8028E770
MR::FunctorV0M<CoinGroup*,M9CoinGroupFPCvPv_v>::__cl(void) const=0x8028E7F0
MR::FunctorV0M<CoinGroup*,M9CoinGroupFPCvPv_v>::clone(JKRHeap*) const=0x8028E820
short::(nit_\CoinGroup_cpp)=0x8028E890
NrvCoinGroup::CoinGroupNrvWait::__ct(void)=0x8028E8E0
NrvCoinGroup::CoinGroupNrvAppear::__ct(void)=0x8028E8F0
NrvCoinGroup::CoinGroupNrvTryStartDemo::__ct(void)=0x8028E900
NrvCoinGroup::CoinGroupNrvDemoAppear::__ct(void)=0x8028E910
NrvCoinGroup::CoinGroupNrvKill::__ct(void)=0x8028E920
NrvCoinGroup::CoinGroupNrvKill::execute(Spine*) const=0x8028E930
NrvCoinGroup::CoinGroupNrvDemoAppear::execute(Spine*) const=0x8028E940
NrvCoinGroup::CoinGroupNrvTryStartDemo::execute(Spine*) const=0x8028E950
NrvCoinGroup::CoinGroupNrvAppear::execute(Spine*) const=0x8028E960
NrvCoinGroup::CoinGroupNrvWait::execute(Spine*) const=0x8028E970
CoinHolder::__ct(const char*)=0x8028E9C0
CoinHostInfo::__ct(void)=0x8028EA30
DeriveActorGroup<Coin>::__dt(void)=0x8028EA50
CoinHolder::init(const JMapInfoIter&)=0x8028EAB0
CoinHolder::appearCoin(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, long, long, float)=0x8028EB30
DeriveActorGroup<Coin>::getDeadMember(void) const=0x8028EC80
CoinHolder::hopCoin(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8028ECD0
CoinHolder::appearCoinPop(const NameObj*, const JGeometry::TVec3<float>&, long)=0x8028ED60
CoinHolder::appearCoinPopToDirection(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x8028EE10
CoinHolder::appearCoinToVelocity(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x8028EF60
CoinHolder::appearCoinCircle(const NameObj*, const JGeometry::TVec3<float>&, long)=0x8028EF80
CoinHolder::declare(const NameObj*, long)=0x8028F100
CoinHolder::getDeclareRemnantCoinCount(const NameObj*) const=0x8028F180
CoinHolder::findHostInfo(const NameObj*) const=0x8028F200
MR::createCoinHolder(void)=0x8028F240
MR::getCoinHolder(void)=0x8028F270
MR::addToCoinHolder(const NameObj*, Coin*)=0x8028F2A0
CoinHolder::__dt(void)=0x8028F310
CoinLinkGroup::__ct(const char*)=0x8028F370
CoinLinkGroup::init(const JMapInfoIter&)=0x8028F3D0
MR::Functor<CoinLinkGroup>(CoinLinkGroup*, M13CoinLinkGroupFPCvPv_v_Q22MR53FunctorV0M<CoinLinkGroup*,M13CoinLinkGroupFPCvPv_v>)=0x8028F590
CoinLinkGroup::initCoins(const JMapInfoIter&)=0x8028F5D0
MR::FunctorV0M<CoinLinkGroup*,M13CoinLinkGroupFPCvPv_v>::__cl(void) const=0x8028FBA0
MR::FunctorV0M<CoinLinkGroup*,M13CoinLinkGroupFPCvPv_v>::clone(JKRHeap*) const=0x8028FBD0
CoinLinkGroup::__dt(void)=0x8028FC40
short::(nit_\CoinLinkGroup_cpp)=0x8028FCA0
CoinRotater::__ct(const char*)=0x8028FE10
CoinRotater::movement(void)=0x8028FE80
MR::createCoinRotater(void)=0x8028FF80
MR::getCoinRotateYMatrix(void)=0x8028FF90
MR::getCoinHiSpeedRotateYMatrix(void)=0x8028FFC0
MR::getCoinInWaterRotateYMatrix(void)=0x8028FFF0
CoinRotater::__dt(void)=0x80290020
CollapsePlane::__ct(const char*)=0x80290080
CollapsePlane::init(const JMapInfoIter&)=0x802900E0
CollapsePlane::exeWait(void)=0x802902F0
CollapsePlane::exeCollapse(void)=0x80290340
CollapsePlane::exeDPDStop(void)=0x80290400
CollapsePlane::calcAndSetBaseMtx(void)=0x80290490
CollapsePlane::control(void)=0x802904F0
CollapsePlane::calcJointPlane(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80290530
CollapsePlane::tryDPDStop(void)=0x80290610
JointControlDelegator<CollapsePlane>::__dt(void)=0x802906A0
JointControlDelegator<CollapsePlane>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802906E0
JointControlDelegator<CollapsePlane>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80290750
CollapsePlane::__dt(void)=0x802907C0
short::(nit_\CollapsePlane_cpp)=0x80290820
NrvCollapsePlane::CollapsePlaneNrvWait::__ct(void)=0x80290860
NrvCollapsePlane::CollapsePlaneNrvCollapse::__ct(void)=0x80290870
NrvCollapsePlane::CollapsePlaneNrvDPDStop::__ct(void)=0x80290880
NrvCollapsePlane::CollapsePlaneNrvEnd::__ct(void)=0x80290890
NrvCollapsePlane::CollapsePlaneNrvEnd::execute(Spine*) const=0x802908A0
NrvCollapsePlane::CollapsePlaneNrvDPDStop::execute(Spine*) const=0x802908F0
NrvCollapsePlane::CollapsePlaneNrvCollapse::execute(Spine*) const=0x80290900
NrvCollapsePlane::CollapsePlaneNrvWait::execute(Spine*) const=0x80290910
CollectCounter::__ct(const char*)=0x80290920
CollectCounter::init(const JMapInfoIter&)=0x80290990
CollectCounter::control(void)=0x80290A00
CollectCounter::setCount(long)=0x80290A10
CollectCounter::tryEndShow(void)=0x80290A80
CollectCounter::setPosition(void)=0x80290AF0
CollectCounter::__dt(void)=0x80290B70
short::(nit_\CollectCounter_cpp)=0x80290BD0
NrvCollectCounter::CollectCounterNrvHide::__ct(void)=0x80290C00
NrvCollectCounter::CollectCounterNrvShow::__ct(void)=0x80290C10
NrvCollectCounter::CollectCounterNrvShow::execute(Spine*) const=0x80290C20
NrvCollectCounter::CollectCounterNrvHide::execute(Spine*) const=0x80290C80
CollectTicoHolder::__ct(void)=0x80290C90
CollectTicoHolder::__dt(void)=0x80290E10
ConstructionLight::__ct(const char*)=0x80290E70
ConstructionLight::init(const JMapInfoIter&)=0x80290EC0
ConstructionLight::appear(void)=0x80290F60
ConstructionLight::exeNormal(void)=0x80290FC0
ConstructionLight::exeBreak(void)=0x80291020
ConstructionLight::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802910D0
ConstructionLight::__dt(void)=0x802911A0
short::(nit_\ConstructionLight_cpp)=0x80291200
NrvConstructionLight::ConstructionLightNrvNormal::__ct(void)=0x80291230
NrvConstructionLight::ConstructionLightNrvBreak::__ct(void)=0x80291240
NrvConstructionLight::ConstructionLightNrvBreak::execute(Spine*) const=0x80291250
NrvConstructionLight::ConstructionLightNrvNormal::execute(Spine*) const=0x80291260
CountFlower::__ct(const char*)=0x80291270
CountFlower::init(const JMapInfoIter&)=0x802912C0
CountFlower::exeCount(void)=0x80291440
CountFlower::activateSwitch(void)=0x802914C0
CountFlower::__dt(void)=0x80291530
short::(nit_\CountFlower_cpp)=0x80291590
NrvCountFlower::CountFlowerNrvCount::__ct(void)=0x802915D0
NrvCountFlower::CountFlowerNrvDone::__ct(void)=0x802915E0
NrvCountFlower::CountFlowerNrvDone::execute(Spine*) const=0x802915F0
NrvCountFlower::CountFlowerNrvCount::execute(Spine*) const=0x80291650
CrescentSeesawPlanet::__ct(const char*)=0x80291660
CrescentSeesawPlanet::init(const JMapInfoIter&)=0x802916C0
CrescentSeesawPlanet::control(void)=0x80291740
CrescentSeesawPlanet::calcAndSetBaseMtx(void)=0x80291820
CrescentSeesawPlanet::move(void)=0x802918F0
CrescentSeesawPlanet::__dt(void)=0x802919E0
short::(nit_\CrescentSeesawPlanet_cpp)=0x80291A40
NrvCrescentSeesawPlanet::CrescentSeesawPlanetNrvWait::__ct(void)=0x80291A50
NrvCrescentSeesawPlanet::CrescentSeesawPlanetNrvWait::execute(Spine*) const=0x80291A60
CrystalCage::__ct(const char*)=0x80291A70
CrystalCage::init(const JMapInfoIter&)=0x80291B50
CrystalCage::initAfterPlacement(void)=0x80291F90
CrystalCage::kill(void)=0x802920C0
CrystalCage::forceBreak(void)=0x80292120
CrystalCage::appear(void)=0x802921C0
CrystalCage::attackSensor(HitSensor*, HitSensor*)=0x80292200
CrystalCage::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80292220
CrystalCage::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80292410
CrystalCage::initMapToolInfo(const JMapInfoIter&)=0x80292490
CrystalCage::initModel()=0x802925D0
CrystalCage::tryOnSwitchDead(void)=0x802926A0
CrystalCage::exeFall(void)=0x802927B0
CrystalCage::exeWait(void)=0x802928E0
CrystalCage::exeBreak(void)=0x80292A00
CrystalCage::exeBreakAfter(void)=0x80292CD0
MR::FunctorV0M<CrystalCage*,M11CrystalCageFPCvPv_v>::__cl(void) const=0x80292D20
MR::FunctorV0M<CrystalCage*,M11CrystalCageFPCvPv_v>::clone(JKRHeap*) const=0x80292D50
CrystalCage::__dt(void)=0x80292DC0
short::(nit_\CrystalCage_cpp)=0x80292E20
NrvCrystalCage::CrystalCageNrvFall::__ct(void)=0x80292E60
NrvCrystalCage::CrystalCageNrvWait::__ct(void)=0x80292E70
NrvCrystalCage::CrystalCageNrvBreak::__ct(void)=0x80292E80
NrvCrystalCage::CrystalCageNrvBreakAfter::__ct(void)=0x80292E90
NrvCrystalCage::CrystalCageNrvBreakAfter::execute(Spine*) const=0x80292EA0
NrvCrystalCage::CrystalCageNrvBreak::execute(Spine*) const=0x80292EB0
NrvCrystalCage::CrystalCageNrvWait::execute(Spine*) const=0x80292EC0
NrvCrystalCage::CrystalCageNrvFall::execute(Spine*) const=0x80292ED0
CrystalCageOpa::__ct(const char*)=0x80292EE0
CrystalCageOpa::init(const JMapInfoIter&)=0x80292F50
CrystalCageOpa::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80293080
CrystalCageOpa::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80293140
CrystalCageOpa::exeWait(void)=0x802931B0
CrystalCageOpa::exeBreak(void)=0x80293210
CrystalCageOpa::exeBreakAfter(void)=0x80293350
CrystalCageOpa::appearItem(void)=0x802933A0
CrystalCageOpa::__dt(void)=0x802933E0
short::(nit_\CrystalCageOpa_cpp)=0x80293440
NrvCrystalCageOpa::CrystalCageOpaNrvWait::__ct(void)=0x80293480
NrvCrystalCageOpa::CrystalCageOpaNrvBreak::__ct(void)=0x80293490
NrvCrystalCageOpa::CrystalCageOpaNrvBreakAfter::__ct(void)=0x802934A0
NrvCrystalCageOpa::CrystalCageOpaNrvBreakAfter::execute(Spine*) const=0x802934B0
NrvCrystalCageOpa::CrystalCageOpaNrvBreak::execute(Spine*) const=0x802934C0
NrvCrystalCageOpa::CrystalCageOpaNrvWait::execute(Spine*) const=0x802934D0
CymbalsStep::__ct(const char*)=0x802934E0
SimpleSeesawObj::__dt(void)=0x80293540
CymbalsStep::init(const JMapInfoIter&)=0x802935A0
CymbalsStep::calcAndSetBaseMtx(void)=0x80293740
CymbalsStep::calcAnim(void)=0x80293800
CymbalsStep::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80293850
CymbalsStep::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802938E0
CymbalsStep::exeClose(void)=0x802939A0
CymbalsStep::move(void)=0x80293A30
CymbalsStep::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x80293B80
JointControlDelegator<CymbalsStep>::__dt(void)=0x80293B90
JointControlDelegator<CymbalsStep>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80293BD0
JointControlDelegator<CymbalsStep>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80293C40
CymbalsStep::__dt(void)=0x80293CB0
short::(nit_\CymbalsStep_cpp)=0x80293D10
NrvCymbalsStep::CymbalsStepNrvWait::__ct(void)=0x80293D50
NrvCymbalsStep::CymbalsStepNrvMove::__ct(void)=0x80293D60
NrvCymbalsStep::CymbalsStepNrvClose::__ct(void)=0x80293D70
NrvCymbalsStep::CymbalsStepNrvClose::execute(Spine*) const=0x80293D80
NrvCymbalsStep::CymbalsStepNrvMove::execute(Spine*) const=0x80293D90
NrvCymbalsStep::CymbalsStepNrvWait::execute(Spine*) const=0x80293DA0
DashFruit::onEat(void)=0x80293DD0
DashFruit::__dt(void)=0x80293DF0
StemFruit::__dt(void)=0x80293E50
DashRing::__ct(const char*)=0x80293F70
DashRing::init(const JMapInfoIter&)=0x80293FB0
DashRing::initAfterPlacement(void)=0x80294190
DashRing::calcAndSetBaseMtx(void)=0x802941A0
DashRing::calcAxis(void)=0x80294200
DashRing::calcSubAxis(void)=0x80294280
DashRing::attackSensor(HitSensor*, HitSensor*)=0x80294460
DashRing::control(void)=0x80294550
DashRing::draw(void) const=0x80294690
DashRing::__dt(void)=0x80294890
DrillHole::__ct(const char*, const char*)=0x802948F0
DrillHole::init(const JMapInfoIter&)=0x80294950
DrillHole::appear(void)=0x802949B0
DrillHole::control(void)=0x802949F0
DrillHole::calcAndSetBaseMtx(void)=0x80294A00
DrillHole::__dt(void)=0x80294A10
short::(nit_\DrillHole_cpp)=0x80294A70
NrvDrillHole::DrillHoleNrvAppear::__ct(void)=0x80294AA0
NrvDrillHole::DrillHoleNrvWait::__ct(void)=0x80294AB0
NrvDrillHole::DrillHoleNrvWait::execute(Spine*) const=0x80294AC0
NrvDrillHole::DrillHoleNrvAppear::execute(Spine*) const=0x80294AD0
DrillHoleHolder::__ct(const char*)=0x80294B30
DrillHoleHolder::init(const JMapInfoIter&)=0x80294B80
DrillHoleHolder::__dt(void)=0x80294E60
DrumTrampoline::__ct(const char*)=0x80294EC0
DrumTrampoline::init(const JMapInfoIter&)=0x80294F10
DrumTrampoline::control(void)=0x80294FB0
DrumTrampoline::exeBound(void)=0x80295130
DrumTrampoline::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80295190
DrumTrampoline::__dt(void)=0x80295370
short::(nit_\DrumTrampoline_cpp)=0x802953D0
NrvDrumTrampoline::DrumTrampolineNrvWait::__ct(void)=0x80295400
NrvDrumTrampoline::DrumTrampolineNrvBounce::__ct(void)=0x80295410
NrvDrumTrampoline::DrumTrampolineNrvBounce::execute(Spine*) const=0x80295420
NrvDrumTrampoline::DrumTrampolineNrvWait::execute(Spine*) const=0x80295430
@unnamed@DummyDisplayModel_cpp@::tryCreateDummyModel(LiveActor*, const JMapInfoIter&, long, int)=0x80295440
DummyDisplayModel::__ct(LiveActor*, const DummyDisplayModelInfo*, int, long, long)=0x80295550
DummyDisplayModel::init(const JMapInfoIter&)=0x80295640
DummyDisplayModel::makeActorAppeared(void)=0x80295840
DummyDisplayModel::makeActorDead(void)=0x80295880
DummyDisplayModel::control(void)=0x802958D0
DummyDisplayModel::calcAndSetBaseMtx(void)=0x80295980
MR::createDummyDisplayModel(LiveActor*, const JMapInfoIter&, long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80295B90
MR::createDummyDisplayModel(LiveActor*, const JMapInfoIter&, const char*, long)=0x80295C00
MR::createDummyDisplayModel(LiveActor*, const JMapInfoIter&, A4_flRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80295C70
MR::createDummyDisplayModelCrystalItem(LiveActor*, const JMapInfoIter&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80295CE0
MR::createDummyDisplayModelCrystalItem(LiveActor*, long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80295D50
MR::getDummyDisplayModelId(const JMapInfoIter&, long)=0x80295DC0
MR::getDummyDisplayModelId(const LiveActor*)=0x80295E30
DummyDisplayModel::__dt(void)=0x80295E40
DynamicCollisionObj::__ct(const char*)=0x80295EA0
DynamicCollisionObj::init(const JMapInfoIter&)=0x80295F10
DynamicCollisionObj::createCollision(void)=0x80295F60
DynamicCollisionObj::syncCollision(void)=0x80296100
DynamicCollisionObj::updateTriangle(void)=0x80296160
DynamicCollisionObj::updateCollisionHeader(void)=0x80296410
GravityArrow::__ct(const char*)=0x80296580
GravityArrow::init(const JMapInfoIter&)=0x802965F0
GravityArrow::calcAndSetBaseMtx(void)=0x80296680
GravityArrow::control(void)=0x80296690
GravityArrow::endClipped(void)=0x80296750
GravityArrow::__dt(void)=0x802967D0
WorldWarpPoint::__ct(const char*)=0x80296830
WorldWarpPoint::init(const JMapInfoIter&)=0x80296870
WorldWarpPoint::__dt(void)=0x80296A00
short::(nit_\WorldWarpPoint_cpp)=0x80296A60
EarthenPipe::__ct(const char*)=0x80296B20
EarthenPipe::init(const JMapInfoIter&)=0x80296C00
EarthenPipe::makeActorAppeared(void)=0x80297180
EarthenPipe::tryShowUp(void)=0x802971D0
EarthenPipe::tryHideDown(void)=0x80297240
EarthenPipe::isNerveShowUp(void) const=0x802972E0
EarthenPipe::exeWait(void)=0x80297360
EarthenPipe::exeReady(void)=0x80297440
EarthenPipe::exePlayerIn(void)=0x802974D0
EarthenPipe::exeTargetPipeShowUp(void)=0x80297680
EarthenPipe::exePlayerOut(void)=0x80297700
EarthenPipe::exeLaunch(void)=0x802977F0
EarthenPipe::exeInvalid(void)=0x80297860
EarthenPipe::exeShowUp(void)=0x802978F0
EarthenPipe::exeHideDown(void)=0x80297A10
EarthenPipe::control(void)=0x80297B20
EarthenPipe::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80297B80
EarthenPipe::calcTrans(float)=0x80297DF0
EarthenPipe::launchPlayer(void)=0x80297EB0
EarthenPipe::getBaseMtx(void) const=0x80298030
EarthenPipeMediator::__ct(void)=0x80298040
EarthenPipeMediator::entry(EarthenPipe*, const JMapInfoIter&)=0x802980E0
EarthenPipe::calcAnim(void)=0x802981A0
EarthenPipe::__dt(void)=0x802981B0
EarthenPipeMediator::__dt(void)=0x80298210
short::(nit_\EarthenPipe_cpp)=0x80298270
NrvEarthenPipe::EarthenPipeNrvWait::__ct(void)=0x80298300
NrvEarthenPipe::EarthenPipeNrvReady::__ct(void)=0x80298310
NrvEarthenPipe::EarthenPipeNrvPlayerIn::__ct(void)=0x80298320
NrvEarthenPipe::EarthenPipeNrvTargetPipeShowUp::__ct(void)=0x80298330
NrvEarthenPipe::EarthenPipeNrvPlayerOut::__ct(void)=0x80298340
NrvEarthenPipe::EarthenPipeNrvLaunch::__ct(void)=0x80298350
NrvEarthenPipe::EarthenPipeNrvInvalid::__ct(void)=0x80298360
NrvEarthenPipe::EarthenPipeNrvHide::__ct(void)=0x80298370
NrvEarthenPipe::EarthenPipeNrvShow::__ct(void)=0x80298380
NrvEarthenPipe::EarthenPipeNrvWaitToShowUp::__ct(void)=0x80298390
NrvEarthenPipe::EarthenPipeNrvShowUp::__ct(void)=0x802983A0
NrvEarthenPipe::EarthenPipeNrvWaitToHideDown::__ct(void)=0x802983B0
NrvEarthenPipe::EarthenPipeNrvHideDown::__ct(void)=0x802983C0
NrvEarthenPipe::EarthenPipeNrvHideDown::execute(Spine*) const=0x802983D0
NrvEarthenPipe::EarthenPipeNrvWaitToHideDown::execute(Spine*) const=0x802983E0
NrvEarthenPipe::EarthenPipeNrvShowUp::execute(Spine*) const=0x80298430
NrvEarthenPipe::EarthenPipeNrvWaitToShowUp::execute(Spine*) const=0x80298440
NrvEarthenPipe::EarthenPipeNrvShow::execute(Spine*) const=0x80298490
NrvEarthenPipe::EarthenPipeNrvHide::execute(Spine*) const=0x802984A0
NrvEarthenPipe::EarthenPipeNrvInvalid::execute(Spine*) const=0x802984B0
NrvEarthenPipe::EarthenPipeNrvLaunch::execute(Spine*) const=0x802984C0
NrvEarthenPipe::EarthenPipeNrvPlayerOut::execute(Spine*) const=0x802984D0
NrvEarthenPipe::EarthenPipeNrvTargetPipeShowUp::execute(Spine*) const=0x802984E0
NrvEarthenPipe::EarthenPipeNrvPlayerIn::execute(Spine*) const=0x802984F0
NrvEarthenPipe::EarthenPipeNrvReady::execute(Spine*) const=0x80298500
NrvEarthenPipe::EarthenPipeNrvWait::execute(Spine*) const=0x80298510
ElectricPressure::__ct(const char*)=0x80298520
ElectricPressure::init(const JMapInfoIter&)=0x80298570
ElectricPressure::exeShotStart(void)=0x80298670
ElectricPressure::exeShot(void)=0x802986D0
ElectricPressure::attackSensor(HitSensor*, HitSensor*)=0x80298770
ElectricPressure::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802987C0
ElectricPressure::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802987D0
ElectricPressure::shoot(void)=0x802987E0
short::(nit_\ElectricPressure_cpp)=0x802989E0
NrvElectricPressure::ElectricPressureNrvWaitFirst::__ct(void)=0x80298A20
NrvElectricPressure::ElectricPressureNrvWait::__ct(void)=0x80298A30
NrvElectricPressure::ElectricPressureNrvShotStart::__ct(void)=0x80298A40
NrvElectricPressure::ElectricPressureNrvShot::__ct(void)=0x80298A50
NrvElectricPressure::ElectricPressureNrvShot::execute(Spine*) const=0x80298A60
NrvElectricPressure::ElectricPressureNrvShotStart::execute(Spine*) const=0x80298A70
NrvElectricPressure::ElectricPressureNrvWait::execute(Spine*) const=0x80298A80
NrvElectricPressure::ElectricPressureNrvWaitFirst::execute(Spine*) const=0x80298AD0
ElectricRailPoint::__ct(const char*)=0x80298B20
ElectricRailPoint::init(const JMapInfoIter&)=0x80298B70
ElectricRailPoint::control(void)=0x80298C30
ElectricRailPoint::attackSensor(HitSensor*, HitSensor*)=0x80298C80
ElectricRailSeparator::__ct(void)=0x80298CA0
ElectricRailSeparator::setup(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80298D10
ElectricRailShadowDrawer::__ct(const LiveActor*, ElectricRailSeparator*, long)=0x80298DD0
ElectricRailShadowDrawer::loadModelDrawMtx(void) const=0x80298F00
ElectricRailShadowDrawer::drawShape(void) const=0x80298F60
ElectricRailShadowDrawer::isDraw(void) const=0x80298F70
ElectricRailShadowDrawer::drawShadowVolumeShape(ElectricRailSeparator*, long) const=0x80298F80
ElectricRail::__ct(const char*)=0x80299400
ElectricRail::init(const JMapInfoIter&)=0x80299480
ElectricRail::initAfterPlacement(void)=0x80299680
ElectricRail::draw(void) const=0x80299710
ElectricRail::makeActorAppeared(void)=0x80299780
ElectricRail::makeActorDead(void)=0x802997F0
ElectricRail::disappear(void)=0x80299860
ElectricRail::attackSensor(HitSensor*, HitSensor*)=0x802998B0
ElectricRail::initMapToolInfo(const JMapInfoIter&)=0x80299900
ElectricRail::initSensor(void)=0x80299990
ElectricRail::initPoints(void)=0x80299A70
ElectricRailPoint::__defctor(void)=0x80299C50
ElectricRailPoint::__dt(void)=0x80299C60
ElectricRail::initSeparators(void)=0x80299CC0
ElectricRail::initDisplayList(void)=0x80299EA0
ElectricRail::drawRailGX(float) const=0x80299F70
ElectricRail::drawPlane(float, float, float, float) const=0x80299FD0
ElectricRail::drawPlaneGX(float, float, float, float) const=0x8029A230
ElectricRail::initShadow(const JMapInfoIter&)=0x8029A4B0
ElectricRail::updateHitSensorPos(void)=0x8029A650
ElectricRail::calcGravity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x8029A7A0
ElectricRail::exeWait(void)=0x8029A830
ElectricRail::exeDisappear(void)=0x8029A8B0
MR::FunctorV0M<ElectricRail*,M12ElectricRailFPCvPv_v>::__cl(void) const=0x8029A970
MR::FunctorV0M<ElectricRail*,M12ElectricRailFPCvPv_v>::clone(JKRHeap*) const=0x8029A9A0
ElectricRailShadowDrawer::__dt(void)=0x8029AA10
ElectricRail::__dt(void)=0x8029AA70
short::(nit_\ElectricRail_cpp)=0x8029AAD0
NrvElectricRail::ElectricRailNrvWait::__ct(void)=0x8029AB10
NrvElectricRail::ElectricRailNrvDisappear::__ct(void)=0x8029AB20
NrvElectricRail::ElectricRailNrvDisappeared::__ct(void)=0x8029AB30
NrvElectricRail::ElectricRailNrvDisappeared::execute(Spine*) const=0x8029AB40
NrvElectricRail::ElectricRailNrvDisappear::execute(Spine*) const=0x8029AB80
NrvElectricRail::ElectricRailNrvWait::execute(Spine*) const=0x8029AB90
ElectricRail2Point::__ct(const char*)=0x8029ABA0
ElectricRail2Point::init(const JMapInfoIter&)=0x8029AC20
ElectricRailMovingPoint::__defctor(void)=0x8029AEC0
ElectricRailMovingPoint::__dt(void)=0x8029AED0
ElectricRail2Point::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8029AF30
ElectricRail2Point::makeActorAppeared(void)=0x8029B030
ElectricRail2Point::makeActorDead(void)=0x8029B0A0
ElectricRail2Point::exeMove(void)=0x8029B110
ElectricRail2Point::attackSensor(HitSensor*, HitSensor*)=0x8029B420
ElectricRail2Point::draw(void) const=0x8029B540
ElectricRail2Point::__dt(void)=0x8029B8D0
short::(nit_\ElectricRail2Point_cpp)=0x8029B990
NrvElectricRail2Point::ElectricRail2PointNrvMove::__ct(void)=0x8029B9A0
NrvElectricRail2Point::ElectricRail2PointNrvMove::execute(Spine*) const=0x8029B9B0
@unnamed@ElectricRailHolder_cpp@::isNearRail(const LiveActor*, const HitSensor*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8029B9C0
ElectricRailHolder::__ct(const char*)=0x8029BAD0
ElectricRailHolder::init(const JMapInfoIter&)=0x8029BB30
ElectricRailHolder::calcAnim(void)=0x8029BBD0
ElectricRailHolder::draw(void) const=0x8029BC50
ElectricRailHolder::registerRail(const LiveActor*, ElectricRailType)=0x8029BD00
ElectricRailHolder::isTouchRail(const HitSensor*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*) const=0x8029BDE0
ElectricRailHolder::control(void)=0x8029BED0
ElectricRailHolder::initDraw(void) const=0x8029BF90
ElectricRailHolder::createModel(ElectricRailType) const=0x8029C030
ElectricRailFunction::registerRail(const LiveActor*, ElectricRailType)=0x8029C250
ElectricRailFunction::isTouchRail(const HitSensor*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x8029C2B0
ElectricRailFunction::getHitSensorRadius(void)=0x8029C320
ElectricRailFunction::calcDisplayListSize(unsigned long, long)=0x8029C340
MR::FunctorV0M<const ElectricRailHolder*,M18ElectricRailHolderFPCvPCv_v>::__cl(void) const=0x8029C360
MR::FunctorV0M<const ElectricRailHolder*,M18ElectricRailHolderFPCvPCv_v>::clone(JKRHeap*) const=0x8029C390
ElectricRailHolder::__dt(void)=0x8029C400
ElectricRailMovingPoint::__ct(const char*)=0x8029C460
ElectricRailMovingPoint::init(const JMapInfoIter&)=0x8029C4B0
ElectricRailMovingPoint::control(void)=0x8029C5B0
ElectricRailMovingPoint::attackSensor(HitSensor*, HitSensor*)=0x8029C600
ElectricRailMoving::__ct(const char*)=0x8029C670
ElectricRailMoving::init(const JMapInfoIter&)=0x8029C710
ElectricRailMoving::draw(void) const=0x8029C810
ElectricRailMoving::disappear(void)=0x8029C8E0
ElectricRailMoving::isTouchRail(const HitSensor*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*) const=0x8029C8F0
ElectricRailMoving::attackSensor(HitSensor*, HitSensor*)=0x8029CA00
ElectricRailMoving::initMapToolInfo(const JMapInfoIter&)=0x8029CA60
ElectricRailMoving::initSensor(void)=0x8029CB10
ElectricRailMoving::initRail(const JMapInfoIter&)=0x8029CBF0
ElectricRailMoving::initPoints(void)=0x8029CD90
ElectricRailMoving::initDisplayList(void)=0x8029CFE0
ElectricRailMoving::drawRailGX(float) const=0x8029D0B0
ElectricRailMoving::drawPlane(float, float, float, float) const=0x8029D110
ElectricRailMoving::drawPlaneGX(float, float, float, float) const=0x8029D360
ElectricRailMoving::setVertexAttribute(int, int, float, float, float, float, void(float, float, float), void(float, float)) const=0x8029D460
ElectricRailMoving::updateHitSensorPos(void)=0x8029D750
ElectricRailMoving::updatePointPos(void)=0x8029D8F0
ElectricRailMoving::updatePointPosAndModel(void)=0x8029DB70
ElectricRailMoving::isValidCoord(float) const=0x8029DC50
ElectricRailMoving::getRepeatedCoord(float) const=0x8029DD00
ElectricRailMoving::calcPointPos(JGeometry::TVec3<float>*, float) const=0x8029DD60
ElectricRailMoving::move(void)=0x8029DE30
ElectricRailMoving::exeDisappear(void)=0x8029E180
MR::FunctorV0M<ElectricRailMoving*,M18ElectricRailMovingFPCvPv_v>::__cl(void) const=0x8029E250
MR::FunctorV0M<ElectricRailMoving*,M18ElectricRailMovingFPCvPv_v>::clone(JKRHeap*) const=0x8029E280
ElectricRailMoving::__dt(void)=0x8029E2F0
short::(nit_\ElectricRailMoving_cpp)=0x8029E350
NrvElectricRailMoving::ElectricRailMovingNrvDisappear::__ct(void)=0x8029E3B0
NrvElectricRailMoving::ElectricRailMovingNrvDisappeared::__ct(void)=0x8029E3C0
NrvElectricRailMoving::ElectricRailMovingNrvDisappeared::execute(Spine*) const=0x8029E3D0
NrvElectricRailMoving::ElectricRailMovingNrvDisappear::execute(Spine*) const=0x8029E410
ExterminationCheckerWoodBox::__ct(const char*)=0x8029E440
ExterminationCheckerWoodBox::init(const JMapInfoIter&)=0x8029E490
ExterminationCheckerWoodBox::exeMove(void)=0x8029E5A0
ExterminationCheckerWoodBox::checkAllDestroyed(void)=0x8029E650
ExterminationCheckerWoodBox::__dt(void)=0x8029E690
short::(nit_\ExterminationCheckerWoodBox_cpp)=0x8029E6F0
NrvExterminationCheckerWoodBox::ExterminationCheckerWoodBoxNrvMove::__ct(void)=0x8029E700
NrvExterminationCheckerWoodBox::ExterminationCheckerWoodBoxNrvMove::execute(Spine*) const=0x8029E710
ExterminationSwitch::__ct(const char*)=0x8029E720
ExterminationSwitch::init(const JMapInfoIter&)=0x8029E7A0
ExterminationSwitch::__dt(void)=0x8029EB90
short::(nit_\ExterminationSwitch_cpp)=0x8029EBF0
ExterminationWoodBoxFlagHolder::__ct(const char*)=0x8029ECB0
ExterminationWoodBoxFlagHolder::init(const JMapInfoIter&)=0x8029ED00
MR::setExterminationWoodBoxFlag(void)=0x8029ED10
MR::clearExterminationWoodBoxFlag(void)=0x8029ED40
MR::getExterminationWoodBoxFlagHolder(void)=0x8029ED70
ExterminationWoodBoxFlagHolder::__dt(void)=0x8029EDA0
FallDownBridge::__ct(const char*)=0x8029EE00
FallDownBridge::init(const JMapInfoIter&)=0x8029EE70
FallDownBridge::control(void)=0x8029EFA0
FallDownBridge::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8029F1C0
FallDownBridge::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8029F320
FallDownBridge::calcAndSetBaseMtx(void)=0x8029F4D0
FallDownBridge::exeQuake(void)=0x8029F710
FallDownBridge::__dt(void)=0x8029F770
short::(nit_\FallDownBridge_cpp)=0x8029F7D0
NrvFallDownBridge::FallDownBridgeNrvWait::__ct(void)=0x8029F820
NrvFallDownBridge::FallDownBridgeNrvQuake::__ct(void)=0x8029F830
NrvFallDownBridge::FallDownBridgeNrvQuake::execute(Spine*) const=0x8029F840
NrvFallDownBridge::FallDownBridgeNrvWait::execute(Spine*) const=0x8029F850
FallDownWall::__ct(const char*)=0x8029F860
FallDownWall::init(const JMapInfoIter&)=0x8029F8B0
FallDownWall::startMoveInner(void)=0x8029F940
FallDownWall::doAtEndPoint(void)=0x8029F980
RailMoveObj::setupInitInfo(const JMapInfoIter&, MapObjActorInitInfo*)=0x8029FA50
FallDownWall::__dt(void)=0x8029FA60
short::(nit_\FallDownWall_cpp)=0x8029FAC0
FallOutFieldDraw::__ct(const char*)=0x8029FAE0
FallOutFieldDraw::setUpFillScreen(void) const=0x8029FB90
FallOutFieldDraw::setUpEdgeAndClearAlpha(void) const=0x8029FCE0
FallOutFieldDraw::init(const JMapInfoIter&)=0x8029FDA0
FallOutFieldDraw::movement(void) const=0x8029FDB0
FallOutFieldDraw::draw(void) const=0x8029FEF0
MR::createFallOutFieldDraw(const char*)=0x802A0250
FallOutFieldDraw::__dt(void)=0x802A0300
short::(nit_\FallOutFieldDraw_cpp)=0x802A0360
FireBarBall::__ct(LiveActor*)=0x802A0380
FireBarBall::init(const JMapInfoIter&)=0x802A03E0
JGeometry::TVec3<float>::negate(void)=0x802A0560
FireBarBall::initAfterPlacement(void)=0x802A0580
FireBarBall::makeActorAppeared(void)=0x802A0590
FireBarBall::movement(void)=0x802A05D0
FireBarBall::startClipped(void)=0x802A06E0
FireBarBall::endClipped(void)=0x802A0720
FireBar::__ct(const char*)=0x802A0760
FireBar::init(const JMapInfoIter&)=0x802A07F0
FireBar::makeActorAppeared(void)=0x802A0C10
FireBar::makeActorDead(void)=0x802A0C80
FireBar::attackSensor(HitSensor*, HitSensor*)=0x802A0D00
FireBar::updateHitSensor(HitSensor*)=0x802A0DA0
FireBar::initFireBarBall(const JMapInfoIter&)=0x802A10B0
FireBar::fixFireBarBall(void)=0x802A1230
FireBarBall::__dt(void)=0x802A14B0
FireBar::__dt(void)=0x802A1510
short::(nit_\FireBar_cpp)=0x802A1570
FirePressure::__ct(const char*)=0x802A1630
PressureBase::__dt(void)=0x802A1680
FirePressure::init(const JMapInfoIter&)=0x802A16E0
FirePressure::initBullet(const JMapInfoIter&)=0x802A1730
FirePressure::shotBullet(float)=0x802A1740
FirePressure::calcGunPointFromCannon(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x802A17D0
FirePressure::__dt(void)=0x802A18A0
FirePressureBullet::__ct(const char*)=0x802A1900
FirePressureBullet::init(const JMapInfoIter&)=0x802A1970
FirePressureBullet::kill(void)=0x802A1A20
FirePressureBullet::calcAndSetBaseMtx(void)=0x802A1A80
FirePressureBullet::shotFireBullet(LiveActor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, const float&, bool, bool)=0x802A1AE0
FirePressureBullet::exeFly(void)=0x802A1BB0
FirePressureBullet::attackSensor(HitSensor*, HitSensor*)=0x802A1D50
FirePressureBullet::isCrash(void) const=0x802A1E10
FirePressureBullet::__dt(void)=0x802A1E30
short::(nit_\FirePressureBullet_cpp)=0x802A1E90
NrvFirePressureBullet::FirePressureBulletNrvFly::__ct(void)=0x802A1EC0
NrvFirePressureBullet::FirePressureBulletNrvFly::execute(Spine*) const=0x802A1EF0
FirePressureBulletHolder::__ct(const char*)=0x802A1F00
FirePressureBulletHolder::init(const JMapInfoIter&)=0x802A1F40
FirePressureBulletHolder::callEmptyBullet(void)=0x802A1FB0
FirePressureBulletHolder::__dt(void)=0x802A2020
FireRing::__ct(const char*)=0x802A2080
FireRing::init(const JMapInfoIter&)=0x802A2110
FireRing::makeActorDead(void)=0x802A2280
FireRing::startClipped(void)=0x802A2310
FireRing::endClipped(void)=0x802A23A0
FireRing::initBalls(const JMapInfoIter&)=0x802A2420
FireRing::getBaseMtx(void)=0x802A2C60
FireRing::__dt(void)=0x802A2C70
short::(nit_\FireRing_cpp)=0x802A2CD0
FireRingBall::__ct(LiveActor*, const char*, const char*)=0x802A2D70
FireRingBall::init(const JMapInfoIter&)=0x802A2DF0
FireRingBall::movement(void)=0x802A2E80
FireRingBall::control(void)=0x802A2F20
FireRingBall::calcAndSetBaseMtx(void)=0x802A2F30
FireRingBall::setShadowDropDirectionPtr(void)=0x802A2F90
FireRingBall::setShadowDropDirection(const JGeometry::TVec3<float>&)=0x802A2FD0
FireRingBall::setShadowDropLength(float)=0x802A2FE0
FireRingBall::attackSensor(HitSensor*, HitSensor*)=0x802A3000
FireRingBall::__dt(void)=0x802A3070
short::(nit_\FireRingBall_cpp)=0x802A30D0
FlipPanel::__ct(const char*)=0x802A3180
FlipPanel::init(const JMapInfoIter&)=0x802A31E0
FlipPanel::exeFrontLand(void)=0x802A33A0
FlipPanel::exeBackLand(void)=0x802A34E0
FlipPanel::exeWait(void)=0x802A3620
FlipPanel::exeEnd(void)=0x802A36E0
FlipPanel::appear(void)=0x802A3790
FlipPanel::endClipped(void)=0x802A37E0
FlipPanel::calcAndSetBaseMtx(void)=0x802A3860
FlipPanel::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802A38A0
FlipPanel::calcJointMove(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802A3950
FlipPanel::checkPlayerOnTop(void)=0x802A39F0
FlipPanelObserver::__ct(const char*)=0x802A3B20
FlipPanelObserver::init(const JMapInfoIter&)=0x802A3B80
FlipPanelObserver::exeWait(void)=0x802A3CA0
FlipPanelObserver::exeComplete(void)=0x802A3D60
FlipPanelObserver::exeDemoWait(void)=0x802A3E30
FlipPanelObserver::initAfterPlacement(void)=0x802A3E90
FlipPanelObserver::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802A3ED0
JointControlDelegator<FlipPanel>::__dt(void)=0x802A3FB0
JointControlDelegator<FlipPanel>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802A3FF0
JointControlDelegator<FlipPanel>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802A4060
FlipPanel::__dt(void)=0x802A40D0
FlipPanelObserver::__dt(void)=0x802A4130
short::(nit_\FlipPanel_cpp)=0x802A4190
NrvFlipPanel::FlipPanelNrvFrontLand::__ct(void)=0x802A4200
NrvFlipPanel::FlipPanelNrvBackLand::__ct(void)=0x802A4210
NrvFlipPanel::FlipPanelNrvFront::__ct(void)=0x802A4220
NrvFlipPanel::FlipPanelNrvBack::__ct(void)=0x802A4230
NrvFlipPanel::FlipPanelNrvEndPrepare::__ct(void)=0x802A4240
NrvFlipPanel::FlipPanelNrvEnd::__ct(void)=0x802A4250
NrvFlipPanelObserver::FlipPanelObserverNrvWait::__ct(void)=0x802A4260
NrvFlipPanelObserver::FlipPanelObserverNrvComplete::__ct(void)=0x802A4270
NrvFlipPanelObserver::FlipPanelObserverNrvDemoWait::__ct(void)=0x802A4280
NrvFlipPanelObserver::FlipPanelObserverNrvDemoWait::execute(Spine*) const=0x802A4290
NrvFlipPanelObserver::FlipPanelObserverNrvComplete::execute(Spine*) const=0x802A42A0
NrvFlipPanelObserver::FlipPanelObserverNrvWait::execute(Spine*) const=0x802A42B0
NrvFlipPanel::FlipPanelNrvEnd::execute(Spine*) const=0x802A42C0
NrvFlipPanel::FlipPanelNrvEndPrepare::execute(Spine*) const=0x802A42D0
NrvFlipPanel::FlipPanelNrvBack::execute(Spine*) const=0x802A4320
NrvFlipPanel::FlipPanelNrvFront::execute(Spine*) const=0x802A4330
NrvFlipPanel::FlipPanelNrvBackLand::execute(Spine*) const=0x802A4340
NrvFlipPanel::FlipPanelNrvFrontLand::execute(Spine*) const=0x802A4350
FlowerBlossomRellayPlanet::__ct(const char)=0x802A4360
FlowerBlossomRellayPlanet::init(const JMapInfoIter&)=0x802A43A0
short::(nit_\FlowerBlossomRellayPlanet_cpp)=0x802A4470
NrvFlowerBlossomRelayPlanet::FlowerBlossomRelayPlanetNrvWait::__ct(void)=0x802A44B0
NrvFlowerBlossomRelayPlanet::FlowerBlossomRelayPlanetNrvBloomStart::__ct(void)=0x802A44C0
NrvFlowerBlossomRelayPlanet::FlowerBlossomRelayPlanetNrvBloomEnd::__ct(void)=0x802A44D0
NrvFlowerBlossomRelayPlanet::FlowerBlossomRelayPlanetNrvBloomEnd::execute(Spine*) const=0x802A44E0
NrvFlowerBlossomRelayPlanet::FlowerBlossomRelayPlanetNrvBloomStart::execute(Spine*) const=0x802A4530
NrvFlowerBlossomRelayPlanet::FlowerBlossomRelayPlanetNrvWait::execute(Spine*) const=0x802A4590
Fountain::__ct(const char*)=0x802A45F0
Fountain::init(const JMapInfoIter&)=0x802A4650
Fountain::appear(void)=0x802A48B0
Fountain::startClipped(void)=0x802A4910
Fountain::endClipped(void)=0x802A4960
Fountain::attackSensor(HitSensor*, HitSensor*)=0x802A49B0
Fountain::exeWait(void)=0x802A4BE0
Fountain::exeMove(void)=0x802A4C40
Fountain::__dt(void)=0x802A4CB0
short::(nit_\Fountain_cpp)=0x802A4D10
NrvFountain::HostTypeWait::__ct(void)=0x802A4D40
NrvFountain::HostTypeMove::__ct(void)=0x802A4D50
NrvFountain::HostTypeMove::execute(Spine*) const=0x802A4D60
NrvFountain::HostTypeWait::execute(Spine*) const=0x802A4D70
FountainBig::__ct(const char*)=0x802A4D80
FountainBig::init(const JMapInfoIter&)=0x802A4DE0
FountainBig::exeWait(void)=0x802A4F10
FountainBig::exeSign(void)=0x802A4F80
FountainBig::exeSignStop(void)=0x802A5000
FountainBig::exeSpout(void)=0x802A5070
FountainBig::exeSpoutEnd(void)=0x802A51D0
FountainBig::attackSensor(HitSensor*, HitSensor*)=0x802A5260
FountainBig::updateHitSensor(HitSensor*)=0x802A5320
FountainBig::__dt(void)=0x802A53D0
short::(nit_\FountainBig_cpp)=0x802A5430
NrvFountainBig::FountainBigNrvWait::__ct(void)=0x802A5480
NrvFountainBig::FountainBigNrvSign::__ct(void)=0x802A5490
NrvFountainBig::FountainBigNrvSignStop::__ct(void)=0x802A54A0
NrvFountainBig::FountainBigNrvSpout::__ct(void)=0x802A54B0
NrvFountainBig::FountainBigNrvSpoutEnd::__ct(void)=0x802A54C0
NrvFountainBig::FountainBigNrvSpoutEnd::execute(Spine*) const=0x802A54D0
NrvFountainBig::FountainBigNrvSpout::execute(Spine*) const=0x802A54E0
NrvFountainBig::FountainBigNrvSignStop::execute(Spine*) const=0x802A54F0
NrvFountainBig::FountainBigNrvSign::execute(Spine*) const=0x802A5500
NrvFountainBig::FountainBigNrvWait::execute(Spine*) const=0x802A5510
GCapture::__ct(const char*)=0x802A5520
GCapture::init(const JMapInfoIter&)=0x802A5690
GCapture::draw(void) const=0x802A5880
GCapture::control(void)=0x802A58A0
GCapture::attackSensor(HitSensor*, HitSensor*)=0x802A59F0
GCapture::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802A5AA0
GCapture::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802A5B10
GCapture::requestBind(HitSensor*)=0x802A5C00
GCapture::requestCancelBind(void)=0x802A5D10
GCapture::requestDamageCancel(unsigned long)=0x802A5D70
GCapture::tryCapture(void)=0x802A5DF0
GCapture::tryCancelCapture(void)=0x802A5E80
GCapture::tryEndTraction(void)=0x802A5F70
GCapture::tryRecapture(void)=0x802A5FE0
GCapture::tryRetraction(void)=0x802A6040
GCapture::tryBreak(void)=0x802A6090
GCapture::tryFireDamage(void)=0x802A61F0
GCapture::tryRelease(void)=0x802A6250
GCapture::exeCoolDown(void)=0x802A6300
GCapture::exeWait(void)=0x802A6380
GCapture::exeCapture(void)=0x802A63F0
GCapture::exeRecapture(void)=0x802A64E0
GCapture::exeTraction(void)=0x802A6600
GCapture::exeHold(void)=0x802A69B0
GCapture::exeBreak(void)=0x802A6AD0
GCapture::endBindByDamage(long)=0x802A6C70
GCapture::endBindByFireDamage(void)=0x802A6CF0
GCapture::calcBindActorPose(void)=0x802A6D70
GCapture::updateBindActorMatrix(void)=0x802A6E40
GCapture::canRequestTarget(void) const=0x802A6F20
GCapture::canCancelBind(void) const=0x802A6F50
GCapture::upTractPower(void)=0x802A6FC0
GCapture::downTractPower(void)=0x802A7010
GCapture::fillGapBindTrans(void)=0x802A7060
GCapture::updateRibbon(const JGeometry::TVec3<float>&, long)=0x802A7090
GCapture::updateRibbonPointEffectMatrix(const JGeometry::TVec3<float>&)=0x802A71A0
GCapture::addRotateAccelPointing(void)=0x802A7240
GCapture::tryAddVelocityReflectJumpCollision(void)=0x802A72D0
GCapture::requestTarget(GCaptureTargetable*)=0x802A7360
GCapture::isRequestedTarget(GCaptureTargetable*)=0x802A7430
GCapture::decideTractTarget(void)=0x802A7460
GCapture::releaseTractTarget(void)=0x802A74D0
GCapture::endStarPointerMode(void)=0x802A7530
GCapture::updateCameraTargetMatrix(void)=0x802A75B0
MR::createGCapture(void)=0x802A7620
MR::isRequestedGCaptureTarget(GCaptureTargetable*)=0x802A76D0
MR::noticeInTouchableRange(void)=0x802A7710
MR::testCorePadButtonAorB(long)=0x802A7740
MR::testCorePadTriggerAorB(long)=0x802A7790
MR::isPlayerGCaptured(void)=0x802A77E0
GCapture::__dt(void)=0x802A7840
short::(nit_\GCapture_cpp)=0x802A78A0
NrvGCapture::GCaptureNrvWait::__ct(void)=0x802A7900
NrvGCapture::GCaptureNrvCapture::__ct(void)=0x802A7910
NrvGCapture::GCaptureNrvRecapture::__ct(void)=0x802A7920
NrvGCapture::GCaptureNrvTraction::__ct(void)=0x802A7930
NrvGCapture::GCaptureNrvHold::__ct(void)=0x802A7940
NrvGCapture::GCaptureNrvBreak::__ct(void)=0x802A7950
NrvGCapture::GCaptureNrvCoolDown::__ct(void)=0x802A7960
NrvGCapture::GCaptureNrvCoolDown::execute(Spine*) const=0x802A7970
NrvGCapture::GCaptureNrvBreak::execute(Spine*) const=0x802A7980
NrvGCapture::GCaptureNrvHold::execute(Spine*) const=0x802A7990
NrvGCapture::GCaptureNrvTraction::execute(Spine*) const=0x802A79A0
NrvGCapture::GCaptureNrvRecapture::executeOnEnd(Spine*) const=0x802A79B0
NrvGCapture::GCaptureNrvRecapture::execute(Spine*) const=0x802A7A10
NrvGCapture::GCaptureNrvCapture::executeOnEnd(Spine*) const=0x802A7A20
NrvGCapture::GCaptureNrvCapture::execute(Spine*) const=0x802A7A80
NrvGCapture::GCaptureNrvWait::execute(Spine*) const=0x802A7A90
GCaptureRibbon::__ct(const char*)=0x802A7AA0
GCaptureRibbon::init(const JMapInfoIter&)=0x802A7AF0
GCaptureRibbon::draw(void) const=0x802A7B90
GCaptureRibbon::reset(void)=0x802A7E50
GCaptureRibbon::lengthen(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802A7E60
GCaptureRibbon::shorten(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802A7EC0
GCaptureRibbon::updateAxis(void)=0x802A7F20
GCaptureRibbon::calcLineWidth(void) const=0x802A8190
GCaptureRibbon::__dt(void)=0x802A81F0
GCaptureTarget::__ct(const char*)=0x802A8250
GCaptureTarget::init(const JMapInfoIter&)=0x802A82D0
GCaptureTarget::initAfterPlacement(void)=0x802A8580
GCaptureTarget::appear(void)=0x802A8590
GCaptureTarget::makeActorAppeared(void)=0x802A8630
GCaptureTarget::makeActorDead(void)=0x802A86A0
GCaptureTarget::startClipped(void)=0x802A8710
GCaptureTarget::endClipped(void)=0x802A8750
GCaptureTarget::control(void)=0x802A8790
GCaptureTarget::exeAppear(void)=0x802A87F0
GCaptureTarget::exeWait(void)=0x802A8920
GCaptureTarget::exePointable(void)=0x802A89D0
GCaptureTarget::exeHitPointer(void)=0x802A8AD0
GCaptureTarget::exeActive(void)=0x802A8C50
GCaptureTarget::decidedTarget(void)=0x802A8D10
GCaptureTarget::releasedTarget(void)=0x802A8D60
GCaptureTarget::emitNerveEffect(void)=0x802A8DC0
GCaptureTarget::isReleaseForce(void) const=0x802A8F30
GCaptureTarget::getTargetPosition(JGeometry::TVec3<float>*)=0x802A8F40
GCaptureTarget::releaseDistance(void) const=0x802A8F60
GCaptureTarget::getPointableRange(void) const=0x802A8F70
GCaptureTarget::__dt(void)=0x802A8F80
short::(nit_\GCaptureTarget_cpp)=0x802A8FE0
NrvGCaptureTarget::GCaptureTargetNrvTryDemoAppear::__ct(void)=0x802A9030
NrvGCaptureTarget::GCaptureTargetNrvAppear::__ct(void)=0x802A9040
NrvGCaptureTarget::GCaptureTargetNrvWait::__ct(void)=0x802A9050
NrvGCaptureTarget::GCaptureTargetNrvPointable::__ct(void)=0x802A9060
NrvGCaptureTarget::GCaptureTargetNrvHitPointer::__ct(void)=0x802A9070
NrvGCaptureTarget::GCaptureTargetNrvActive::__ct(void)=0x802A9080
NrvGCaptureTarget::GCaptureTargetNrvActive::execute(Spine*) const=0x802A9090
NrvGCaptureTarget::GCaptureTargetNrvHitPointer::execute(Spine*) const=0x802A90A0
NrvGCaptureTarget::GCaptureTargetNrvPointable::execute(Spine*) const=0x802A90B0
NrvGCaptureTarget::GCaptureTargetNrvWait::execute(Spine*) const=0x802A90C0
NrvGCaptureTarget::GCaptureTargetNrvAppear::execute(Spine*) const=0x802A90D0
NrvGCaptureTarget::GCaptureTargetNrvTryDemoAppear::execute(Spine*) const=0x802A90E0
GemCageS::__ct(const char*)=0x802A9150
GemCageS::init(const JMapInfoIter&)=0x802A91A0
GemCageS::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802A9270
GemCageS::attackSensor(HitSensor*, HitSensor*)=0x802A9340
GemCageS::appearItem(void)=0x802A9390
GemCageS::exeWait(void)=0x802A9400
GemCageS::exeBreak(void)=0x802A9470
GemCageS::__dt(void)=0x802A9530
short::(nit_\GemCageS_cpp)=0x802A9590
NrvGemCageS::GemCageSNrvWait::__ct(void)=0x802A95C0
NrvGemCageS::GemCageSNrvBreak::__ct(void)=0x802A95D0
NrvGemCageS::GemCageSNrvBreak::execute(Spine*) const=0x802A95E0
NrvGemCageS::GemCageSNrvWait::execute(Spine*) const=0x802A95F0
GhostMazePlanetMask::__ct(const char*)=0x802A9600
GhostMazePlanetMask::init(const JMapInfoIter&)=0x802A9640
GhostMazePlanetMask::exeWait(void)=0x802A96C0
GhostMazePlanetMask::exeAppear(void)=0x802A9740
GhostMazePlanetMask::exeDisappear(void)=0x802A97A0
GhostMazePlanetMask::__dt(void)=0x802A9800
short::(nit_\GhostMazePlanetMask_cpp)=0x802A9860
NrvGhostMazePlanetMask::GhostMazePlanetMaskNrvWait::__ct(void)=0x802A98A0
NrvGhostMazePlanetMask::GhostMazePlanetMaskNrvAppear::__ct(void)=0x802A98B0
NrvGhostMazePlanetMask::GhostMazePlanetMaskNrvDisappear::__ct(void)=0x802A98C0
NrvGhostMazePlanetMask::GhostMazePlanetMaskNrvDisappear::execute(Spine*) const=0x802A98D0
NrvGhostMazePlanetMask::GhostMazePlanetMaskNrvAppear::execute(Spine*) const=0x802A98E0
NrvGhostMazePlanetMask::GhostMazePlanetMaskNrvWait::execute(Spine*) const=0x802A98F0
GliderCometMedalCage::__ct(const char*)=0x802A9900
GliderCometMedalCage::init(const JMapInfoIter&)=0x802A9950
GliderCometMedalCage::exeWait(void)=0x802A99B0
GliderCometMedalCage::exeOpen(void)=0x802A9A10
GliderCometMedalCage::__dt(void)=0x802A9A70
short::(nit_\GliderCometMedalCage_cpp)=0x802A9AD0
NrvGliderCometMedalCage::GliderCometMedalCageNrvWait::__ct(void)=0x802A9B00
NrvGliderCometMedalCage::GliderCometMedalCageNrvOpen::__ct(void)=0x802A9B10
NrvGliderCometMedalCage::GliderCometMedalCageNrvOpen::execute(Spine*) const=0x802A9B20
NrvGliderCometMedalCage::GliderCometMedalCageNrvWait::execute(Spine*) const=0x802A9B30
GliderBalloon::__ct(const char*)=0x802A9B40
GliderBalloon::init(const JMapInfoIter&)=0x802A9BC0
GliderBalloon::attackSensor(HitSensor*, HitSensor*)=0x802A9E70
GliderBalloon::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802A9EF0
GliderBalloon::exeBurst(void)=0x802A9FB0
GliderBalloon::exeStarPieceBurst(void)=0x802AA050
GliderBalloon::appearStarPieceTracking(void)=0x802AA0F0
GliderBalloon::__dt(void)=0x802AA340
StarPieceTracking::__dt(void)=0x802AA3A0
short::(nit_\GliderBalloon_cpp)=0x802AA400
NrvGliderBalloon::GliderBalloonNrvWait::__ct(void)=0x802AA440
NrvGliderBalloon::GliderBalloonNrvBurst::__ct(void)=0x802AA450
NrvGliderBalloon::GliderBalloonNrvStarPieceBurst::__ct(void)=0x802AA460
NrvGliderBalloon::GliderBalloonNrvStarPieceBurst::execute(Spine*) const=0x802AA470
NrvGliderBalloon::GliderBalloonNrvBurst::execute(Spine*) const=0x802AA480
NrvGliderBalloon::GliderBalloonNrvWait::execute(Spine*) const=0x802AA490
GliderTree::__ct(const char*)=0x802AA4E0
GliderTree::init(const JMapInfoIter&)=0x802AA520
GliderTree::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802AA5A0
GliderTree::exeSwing(void)=0x802AA630
GliderTree::__dt(void)=0x802AA690
short::(nit_\GliderTree_cpp)=0x802AA6F0
NrvGliderTree::GliderTreeNrvWait::__ct(void)=0x802AA720
NrvGliderTree::GliderTreeNrvSwing::__ct(void)=0x802AA730
NrvGliderTree::GliderTreeNrvSwing::execute(Spine*) const=0x802AA740
NrvGliderTree::GliderTreeNrvWait::execute(Spine*) const=0x802AA750
Gorogoro::__ct(const char*)=0x802AA760
Gorogoro::init(const JMapInfoIter&)=0x802AA7F0
Gorogoro::calcAndSetBaseMtx(void)=0x802AAA50
Gorogoro::control(void)=0x802AAB10
Gorogoro::attackSensor(HitSensor*, HitSensor*)=0x802AAB30
Gorogoro::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802AAD80
Gorogoro::exeWait(void)=0x802AADC0
Gorogoro::exeMove(void)=0x802AAE50
Gorogoro::exeDisappear(void)=0x802AAF20
Gorogoro::doRailMove(void)=0x802AAFB0
Gorogoro::__dt(void)=0x802AB070
short::(nit_\Gorogoro_cpp)=0x802AB0D0
NrvGorogoro::GorogoroNrvWait::__ct(void)=0x802AB110
NrvGorogoro::GorogoroNrvMove::__ct(void)=0x802AB120
NrvGorogoro::GorogoroNrvDisappear::__ct(void)=0x802AB130
NrvGorogoro::GorogoroNrvDisappear::execute(Spine*) const=0x802AB140
NrvGorogoro::GorogoroNrvMove::execute(Spine*) const=0x802AB150
NrvGorogoro::GorogoroNrvWait::execute(Spine*) const=0x802AB160
GorogoroCylinderRock::__ct(const char*)=0x802AB170
GorogoroCylinderRock::init(const JMapInfoIter&)=0x802AB210
GorogoroCylinderRock::exeHide(void)=0x802AB3D0
GorogoroCylinderRock::exeAppear(void)=0x802AB460
GorogoroCylinderRock::exeFall(void)=0x802AB4D0
GorogoroCylinderRock::calcAndSetBaseMtx(void)=0x802AB900
GorogoroCylinderRock::tryUpdateNerve(void)=0x802ABAB0
GorogoroCylinderRock::__dt(void)=0x802ABBB0
short::(nit_\GorogoroCylinderRock_cpp)=0x802ABC10
NrvGorogoroCylinderRock::GorogoroCylinderRockNrvHide::__ct(void)=0x802ABCA0
NrvGorogoroCylinderRock::GorogoroCylinderRockNrvAppear::__ct(void)=0x802ABCB0
NrvGorogoroCylinderRock::GorogoroCylinderRockNrvFall::__ct(void)=0x802ABCC0
NrvGorogoroCylinderRock::GorogoroCylinderRockNrvFall::execute(Spine*) const=0x802ABD50
NrvGorogoroCylinderRock::GorogoroCylinderRockNrvAppear::execute(Spine*) const=0x802ABD60
NrvGorogoroCylinderRock::GorogoroCylinderRockNrvHide::execute(Spine*) const=0x802ABD70
GoroRockLaneParts::__ct(const char*)=0x802ABD80
GoroRockLaneParts::init(const JMapInfoIter&)=0x802ABDD0
GoroRockLaneParts::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802ABF00
MR::Functor<GoroRockLaneParts>(GoroRockLaneParts*, M17GoroRockLanePartsFPCvPv_v_Q22MR61FunctorV0M<GoroRockLaneParts*,M17GoroRockLanePartsFPCvPv_v>)=0x802ABF90
GoroRockLaneParts::setChangeColor(void)=0x802ABFD0
GoroRockLaneParts::setNormalColor(void)=0x802ABFE0
GoroRockLaneParts::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802ABFF0
MR::FunctorV0M<GoroRockLaneParts*,M17GoroRockLanePartsFPCvPv_v>::__cl(void) const=0x802AC000
MR::FunctorV0M<GoroRockLaneParts*,M17GoroRockLanePartsFPCvPv_v>::clone(JKRHeap*) const=0x802AC030
GoroRockLaneParts::__dt(void)=0x802AC0A0
short::(nit_\GoroRockLaneParts_cpp)=0x802AC100
NrvGoroRockLaneParts::GoroRockLanePartsNrvMove::__ct(void)=0x802AC110
NrvGoroRockLaneParts::GoroRockLanePartsNrvMove::execute(Spine*) const=0x802AC120
GravityBgmCtrl::__ct(const char*)=0x802AC160
GravityBgmCtrl::init(const JMapInfoIter&)=0x802AC1A0
GravityBgmCtrl::checkGravityDir(void)=0x802AC220
GravityBgmCtrl::exeChangeBack(void)=0x802AC290
GravityBgmCtrl::exeChange(void)=0x802AC340
GravityBgmCtrl::tryChangeBack(void)=0x802AC3E0
GravityBgmCtrl::tryChange(void)=0x802AC440
GravityBgmCtrl::tryWait(void)=0x802AC4A0
GravityBgmCtrl::__dt(void)=0x802AC4F0
short::(nit_\GravityBgmCtrl_cpp)=0x802AC550
NrvGravityBgmCtrl::GravityBgmCtrlNrvChangeBack::__ct(void)=0x802AC5C0
NrvGravityBgmCtrl::GravityBgmCtrlNrvChange::__ct(void)=0x802AC5D0
NrvGravityBgmCtrl::GravityBgmCtrlNrvWait::__ct(void)=0x802AC5E0
NrvGravityBgmCtrl::GravityBgmCtrlNrvWait::execute(Spine*) const=0x802AC5F0
NrvGravityBgmCtrl::GravityBgmCtrlNrvChange::execute(Spine*) const=0x802AC640
NrvGravityBgmCtrl::GravityBgmCtrlNrvChangeBack::execute(Spine*) const=0x802AC650
GravityFallBlock::__ct(const char*)=0x802AC660
GravityFallBlock::init(const JMapInfoIter&)=0x802AC6D0
GravityFallBlock::exeWait(void)=0x802AC760
GravityFallBlock::exeFall(void)=0x802AC810
GravityFallBlock::exeBreak(void)=0x802AC970
GravityFallBlock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802ACA20
GravityFallBlock::__dt(void)=0x802ACAC0
short::(nit_\GravityFallBlock_cpp)=0x802ACB20
NrvGravityFallBlock::GravityFallBlockNrvWait::__ct(void)=0x802ACB60
NrvGravityFallBlock::GravityFallBlockNrvStartFall::__ct(void)=0x802ACB70
NrvGravityFallBlock::GravityFallBlockNrvFall::__ct(void)=0x802ACB80
NrvGravityFallBlock::GravityFallBlockNrvBreak::__ct(void)=0x802ACB90
NrvGravityFallBlock::GravityFallBlockNrvBreak::execute(Spine*) const=0x802ACBA0
NrvGravityFallBlock::GravityFallBlockNrvFall::execute(Spine*) const=0x802ACBB0
NrvGravityFallBlock::GravityFallBlockNrvStartFall::execute(Spine*) const=0x802ACBC0
NrvGravityFallBlock::GravityFallBlockNrvWait::execute(Spine*) const=0x802ACC10
GravityLightRoad::__ct(const char*)=0x802ACC20
GravityLightRoad::init(const JMapInfoIter&)=0x802ACCA0
GravityLightRoad::exeAppear(void)=0x802ACDC0
GravityLightRoad::exePlayerFall(void)=0x802ACE20
GravityLightRoad::exeDisappear(void)=0x802ACFC0
GravityLightRoad::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802AD030
GravityLightRoad::updateHitSensor(HitSensor*)=0x802AD120
GravityLightRoad::endPlayerFall(void)=0x802AD1A0
GravityLightRoad::tryPlayerFall(void)=0x802AD220
GravityLightRoad::isPlayerFall(void) const=0x802AD2B0
GravityLightRoad::isPlayerInVolume(void)=0x802AD2C0
MR::FunctorV0M<GravityLightRoad*,M16GravityLightRoadFPCvPv_v>::__cl(void) const=0x802AD390
MR::FunctorV0M<GravityLightRoad*,M16GravityLightRoadFPCvPv_v>::clone(JKRHeap*) const=0x802AD3C0
GravityLightRoad::__dt(void)=0x802AD430
short::(nit_\GravityLightRoad_cpp)=0x802AD490
NrvGravityLightRoad::GravityLightRoadNrvAppear::__ct(void)=0x802AD4D0
NrvGravityLightRoad::GravityLightRoadNrvWait::__ct(void)=0x802AD4E0
NrvGravityLightRoad::GravityLightRoadNrvPlayerFall::__ct(void)=0x802AD4F0
NrvGravityLightRoad::GravityLightRoadNrvDisappear::__ct(void)=0x802AD500
NrvGravityLightRoad::GravityLightRoadNrvDisappear::execute(Spine*) const=0x802AD510
NrvGravityLightRoad::GravityLightRoadNrvPlayerFall::execute(Spine*) const=0x802AD520
NrvGravityLightRoad::GravityLightRoadNrvWait::execute(Spine*) const=0x802AD530
NrvGravityLightRoad::GravityLightRoadNrvAppear::execute(Spine*) const=0x802AD580
GravityTimerChangeWall::__ct(const char*)=0x802AD590
GravityTimerChangeWall::init(const JMapInfoIter&)=0x802AD5E0
GravityTimerChangeWall::exeWait(void)=0x802AD700
GravityTimerChangeWall::exeUpToDown(void)=0x802AD770
GravityTimerChangeWall::exeDownToUp(void)=0x802AD810
GravityTimerChangeWall::tryChange(void)=0x802AD8B0
GravityTimerChangeWall::listenSwitchOnA(void)=0x802AD900
MR::FunctorV0M<GravityTimerChangeWall*,M22GravityTimerChangeWallFPCvPv_v>::__cl(void) const=0x802AD960
MR::FunctorV0M<GravityTimerChangeWall*,M22GravityTimerChangeWallFPCvPv_v>::clone(JKRHeap*) const=0x802AD990
GravityTimerChangeWall::__dt(void)=0x802ADA00
short::(nit_\GravityTimerChangeWall_cpp)=0x802ADA60
NrvGravityTimerChangeWall::GravityTimerChangeWallNrvWait::__ct(void)=0x802ADAA0
NrvGravityTimerChangeWall::GravityTimerChangeWallNrvUpToDown::__ct(void)=0x802ADAB0
NrvGravityTimerChangeWall::GravityTimerChangeWallNrvDownToUp::__ct(void)=0x802ADAC0
NrvGravityTimerChangeWall::GravityTimerChangeWallNrvDownToUp::execute(Spine*) const=0x802ADAD0
NrvGravityTimerChangeWall::GravityTimerChangeWallNrvUpToDown::execute(Spine*) const=0x802ADAE0
NrvGravityTimerChangeWall::GravityTimerChangeWallNrvWait::execute(Spine*) const=0x802ADAF0
HipDropMoveBlock::__ct(const char*)=0x802ADB00
HipDropMoveBlock::init(const JMapInfoIter&)=0x802ADB70
HipDropMoveBlock::control(void)=0x802ADFF0
HipDropMoveBlock::calcAndSetBaseMtx(void)=0x802AE000
HipDropMoveBlock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802AE010
HipDropMoveBlock::__dt(void)=0x802AE420
short::(nit_\HipDropMoveBlock_cpp)=0x802AE480
HipDropMoveBlockSwitch::init(const JMapInfoIter&)=0x802AE5F0
HipDropMoveBlockSwitch::calcAnim(void)=0x802AE710
HipDropMoveBlockSwitch::calcAndSetBaseMtx(void)=0x802AE770
HipDropMoveBlockSwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802AE840
HipDropMoveBlockSwitch::__dt(void)=0x802AEA00
short::(nit_\HipDropMoveBlockSwitch_cpp)=0x802AEA60
HipDropRock::__ct(const char*)=0x802AEB00
HipDropRock::init(const JMapInfoIter&)=0x802AEB60
HipDropRock::exeBreak(void)=0x802AECE0
HipDropRock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802AEE50
HipDropRock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802AEEE0
HipDropRock::initBreakModel(void)=0x802AEF60
HipDropRock::initItem(const JMapInfoIter&)=0x802AF050
HipDropRock::appearItem(void)=0x802AF0F0
HipDropRock::__dt(void)=0x802AF140
short::(nit_\HipDropRock_cpp)=0x802AF1A0
NrvHipDropRock::HipDropRockNrvWait::__ct(void)=0x802AF1E0
NrvHipDropRock::HipDropRockNrvBreak::__ct(void)=0x802AF1F0
NrvHipDropRock::HipDropRockNrvWreck::__ct(void)=0x802AF200
NrvHipDropRock::HipDropRockNrvWreck::execute(Spine*) const=0x802AF210
NrvHipDropRock::HipDropRockNrvBreak::execute(Spine*) const=0x802AF250
NrvHipDropRock::HipDropRockNrvWait::execute(Spine*) const=0x802AF260
HipDropSwitch::__ct(const char*)=0x802AF2A0
SpringValue::reset(void)=0x802AF350
HipDropSwitch::makeActorAppeared(void)=0x802AF370
HipDropSwitch::makeActorDead(void)=0x802AF3B0
HipDropSwitch::init(const JMapInfoIter&)=0x802AF3F0
HipDropSwitch::initAfterPlacement(void)=0x802AF560
HipDropSwitch::control(void)=0x802AF570
HipDropSwitch::calcAnim(void)=0x802AF590
HipDropSwitch::calcAndSetBaseMtx(void)=0x802AF6E0
HipDropSwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802AF720
HipDropSwitch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802AF7D0
HipDropSwitch::trySwitchDown(void)=0x802AF850
HipDropSwitch::tryOn(void)=0x802AF890
HipDropSwitch::isPlayerOnTop(void)=0x802AF8F0
HipDropSwitch::exeOff(void)=0x802AF960
HipDropSwitch::exeSwitchDown(void)=0x802AFA40
HipDropSwitch::exeOn(void)=0x802AFAB0
HipDropSwitch::__dt(void)=0x802AFB20
short::(nit_\HipDropSwitch_cpp)=0x802AFB80
NrvHipDropSwitch::HipDropSwitchNrvOff::__ct(void)=0x802AFBC0
NrvHipDropSwitch::HipDropSwitchNrvSwitchDown::__ct(void)=0x802AFBD0
NrvHipDropSwitch::HipDropSwitchNrvOn::__ct(void)=0x802AFBE0
NrvHipDropSwitch::HipDropSwitchNrvOn::execute(Spine*) const=0x802AFBF0
NrvHipDropSwitch::HipDropSwitchNrvSwitchDown::execute(Spine*) const=0x802AFC00
NrvHipDropSwitch::HipDropSwitchNrvOff::execute(Spine*) const=0x802AFC10
HipDropTimerSwitch::__ct(const char*)=0x802AFC20
HipDropTimerSwitch::init(const JMapInfoIter&)=0x802AFCE0
MR::Functor<HipDropTimerSwitch>(HipDropTimerSwitch*, M18HipDropTimerSwitchFPCvPv_v_Q22MR63FunctorV0M<HipDropTimerSwitch*,M18HipDropTimerSwitchFPCvPv_v>)=0x802AFE30
HipDropTimerSwitch::initAfterPlacement(void)=0x802AFE70
HipDropTimerSwitch::control(void)=0x802AFE80
HipDropTimerSwitch::calcAnim(void)=0x802AFEA0
HipDropTimerSwitch::calcAndSetBaseMtx(void)=0x802AFFF0
HipDropTimerSwitch::updateTimerSE(void)=0x802B0030
HipDropTimerSwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802B0190
HipDropTimerSwitch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802B0260
HipDropTimerSwitch::exeOff(void)=0x802B02D0
HipDropTimerSwitch::exeSwitchDown(void)=0x802B0380
HipDropTimerSwitch::exeOn(void)=0x802B0400
HipDropTimerSwitch::exeSwitchUp(void)=0x802B04A0
HipDropTimerSwitch::exeSyncOff(void)=0x802B0530
HipDropTimerSwitch::listenSwitchOnA(void)=0x802B0590
HipDropTimerSwitch::listenSwitchOffA(void)=0x802B05E0
MR::FunctorV0M<HipDropTimerSwitch*,M18HipDropTimerSwitchFPCvPv_v>::__cl(void) const=0x802B0630
MR::FunctorV0M<HipDropTimerSwitch*,M18HipDropTimerSwitchFPCvPv_v>::clone(JKRHeap*) const=0x802B0660
HipDropTimerSwitch::__dt(void)=0x802B06D0
short::(nit_\HipDropTimerSwitch_cpp)=0x802B0730
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvOff::__ct(void)=0x802B0780
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSwitchDown::__ct(void)=0x802B0790
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvOn::__ct(void)=0x802B07A0
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSwitchUp::__ct(void)=0x802B07B0
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSyncOn::__ct(void)=0x802B07C0
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSyncOff::__ct(void)=0x802B07D0
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSyncOff::execute(Spine*) const=0x802B07E0
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSyncOn::execute(Spine*) const=0x802B07F0
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSwitchUp::execute(Spine*) const=0x802B0840
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvOn::execute(Spine*) const=0x802B0850
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvSwitchDown::execute(Spine*) const=0x802B0860
NrvHipDropTimerSwitch::HipDropTimerSwitchNrvOff::execute(Spine*) const=0x802B0870
IceMeteor::__ct(const char*)=0x802B0880
IceMeteor::init(const JMapInfoIter&)=0x802B0910
IceMeteor::exeWait(void)=0x802B0A40
IceMeteor::exeFall(void)=0x802B0AA0
IceMeteor::exeSpread(void)=0x802B0B20
IceMeteor::exeSpreadWait(void)=0x802B0BC0
IceMeteor::exeShrink(void)=0x802B0C30
IceMeteor::exeShrinkWait(void)=0x802B0CA0
IceMeteor::attackSensor(HitSensor*, HitSensor*)=0x802B0CF0
IceMeteor::__dt(void)=0x802B10B0
short::(nit_\IceMeteor_cpp)=0x802B1110
NrvIceMeteor::IceMeteorNrvWait::__ct(void)=0x802B1160
NrvIceMeteor::IceMeteorNrvFall::__ct(void)=0x802B1170
NrvIceMeteor::IceMeteorNrvSpread::__ct(void)=0x802B1180
NrvIceMeteor::IceMeteorNrvSpreadWait::__ct(void)=0x802B1190
NrvIceMeteor::IceMeteorNrvShrink::__ct(void)=0x802B11A0
NrvIceMeteor::IceMeteorNrvShrinkWait::__ct(void)=0x802B11B0
NrvIceMeteor::IceMeteorNrvShrinkWait::execute(Spine*) const=0x802B11C0
NrvIceMeteor::IceMeteorNrvShrink::execute(Spine*) const=0x802B11D0
NrvIceMeteor::IceMeteorNrvSpreadWait::execute(Spine*) const=0x802B11E0
NrvIceMeteor::IceMeteorNrvSpread::execute(Spine*) const=0x802B11F0
NrvIceMeteor::IceMeteorNrvFall::execute(Spine*) const=0x802B1200
NrvIceMeteor::IceMeteorNrvWait::execute(Spine*) const=0x802B1210
IceMeteorParts::__ct(const char*)=0x802B1220
IceMeteorParts::init(const JMapInfoIter&)=0x802B1280
IceMeteorParts::calcAndSetBaseMtx(void)=0x802B1300
IceMeteorParts::exeFall(void)=0x802B1390
IceMeteorParts::__dt(void)=0x802B13A0
short::(nit_\IceMeteorParts_cpp)=0x802B1400
NrvIceMeteorParts::IceMeteorPartsNrvFall::__ct(void)=0x802B1410
NrvIceMeteorParts::IceMeteorPartsNrvFall::execute(Spine*) const=0x802B1420
IceMeteorHolder::__ct(const char*)=0x802B1440
IceMeteorHolder::init(const JMapInfoIter&)=0x802B1490
IceMeteorHolder::movement(void)=0x802B14A0
MR::createIceMeteorHolder(void)=0x802B1560
IceMeteorHolder::__dt(void)=0x802B1610
IceStep::__ct(const char*)=0x802B1670
IceStep::__dt(void)=0x802B16B0
IceStep::init(const JMapInfoIter&)=0x802B1710
IceStep::exeWait(void)=0x802B1850
IceStep::setOn(unsigned long, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802B1910
IceStep::destroy(void)=0x802B1A90
IceStep::doHit(void)=0x802B1AF0
IceStep::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802B1B70
IceStep::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802B1B80
IceStep::control(void)=0x802B1BF0
short::(nit_\IceStep_cpp)=0x802B1C00
NrvIceStep::IceStepNrvWait::__ct(void)=0x802B1C30
NrvIceStep::IceStepNrvHit::__ct(void)=0x802B1C40
NrvIceStep::IceStepNrvHit::execute(Spine*) const=0x802B1C50
NrvIceStep::IceStepNrvWait::execute(Spine*) const=0x802B1CC0
InvisiblePolygonObj::__ct(const char*)=0x802B1CD0
InvisiblePolygonObj::init(const JMapInfoIter&)=0x802B1D20
InvisiblePolygonObj::initBaseMtx(void)=0x802B1D90
InvisiblePolygonObj::initCollision(const JMapInfoIter&)=0x802B1DD0
InvisiblePolygonObj::getBaseMtx(void) const=0x802B1E70
InvisiblePolygonObj::__dt(void)=0x802B1E80
ItemBlock::__ct(const char*)=0x802B1EE0
ItemBlock::init(const JMapInfoIter&)=0x802B1F50
ItemBlock::initAfterPlacement(void)=0x802B20C0
ItemBlock::startClipped(void)=0x802B20D0
ItemBlock::endClipped(void)=0x802B2110
ItemBlock::checkKind(const JMapInfoIter&)=0x802B2150
ItemBlock::makeActorAppeared(void)=0x802B2350
ItemBlock::kill(void)=0x802B23B0
ItemBlock::control(void)=0x802B2410
ItemBlock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802B24D0
ItemBlock::tryStartJumpPunch(void)=0x802B25C0
ItemBlock::exeWait(void)=0x802B2720
ItemBlock::exeAppearItem(void)=0x802B2780
ItemBlock::exeAppearItemSplash(void)=0x802B2980
ItemBlock::decTimer(void)=0x802B2A80
ItemBlock::calcAnim(void)=0x802B2AC0
ItemBlock::__dt(void)=0x802B2B00
short::(nit_\ItemBlock_cpp)=0x802B2B60
NrvItemBlock::ItemBlockNrvStandby::__ct(void)=0x802B2BC0
NrvItemBlock::ItemBlockNrvWait::__ct(void)=0x802B2BD0
NrvItemBlock::ItemBlockNrvAppearItem::__ct(void)=0x802B2BE0
NrvItemBlock::ItemBlockNrvAppearItemSplash::__ct(void)=0x802B2BF0
NrvItemBlock::ItemBlockNrvAppearItemSplash::execute(Spine*) const=0x802B2C00
NrvItemBlock::ItemBlockNrvAppearItem::execute(Spine*) const=0x802B2C10
NrvItemBlock::ItemBlockNrvWait::execute(Spine*) const=0x802B2C20
NrvItemBlock::ItemBlockNrvStandby::execute(Spine*) const=0x802B2C30
ItemCollectionPlanetWall::__ct(const char*)=0x802B2C80
ItemCollectionPlanetWall::init(const JMapInfoIter&)=0x802B2CC0
ItemCollectionPlanetWall::listenDemoAction(void)=0x802B2DB0
ItemCollectionPlanetWall::exeFadeIn(void)=0x802B2DC0
MR::FunctorV0M<ItemCollectionPlanetWall*,M24ItemCollectionPlanetWallFPCvPv_v>::__cl(void) const=0x802B2E40
MR::FunctorV0M<ItemCollectionPlanetWall*,M24ItemCollectionPlanetWallFPCvPv_v>::clone(JKRHeap*) const=0x802B2E70
ItemCollectionPlanetWall::__dt(void)=0x802B2EE0
short::(nit_\ItemCollectionPlanetWall_cpp)=0x802B2F40
NrvItemCollectionPlanetWall::ItemCollectionPlanetWallNrvWait::__ct(void)=0x802B2F70
NrvItemCollectionPlanetWall::ItemCollectionPlanetWallNrvFadeIn::__ct(void)=0x802B2F80
NrvItemCollectionPlanetWall::ItemCollectionPlanetWallNrvFadeIn::execute(Spine*) const=0x802B2F90
NrvItemCollectionPlanetWall::ItemCollectionPlanetWallNrvWait::execute(Spine*) const=0x802B2FA0
DiceBase::__ct(const char*)=0x802B3330
DiceBase::init(const JMapInfoIter&)=0x802B33D0
DiceBase::appear(void)=0x802B35F0
DiceBase::exeSpin(void)=0x802B3670
DiceBase::exeThrow(void)=0x802B3990
DiceBase::exeLand(void)=0x802B3B60
DiceBase::control(void)=0x802B3D40
DiceBase::calcAndSetBaseMtx(void)=0x802B3D60
DiceBase::attackSensor(HitSensor*, HitSensor*)=0x802B3E00
DiceBase::receiveMsgPush(HitSensor*, HitSensor*)=0x802B3E80
DiceBase::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802B3F00
DiceBase::tryThrow(void)=0x802B42A0
ItemDice::__ct(const char*)=0x802B4860
DiceBase::__dt(void)=0x802B48B0
ItemDice::getModelName(void)=0x802B4910
ItemDice::initItems(void)=0x802B4920
ItemDice::setAnimFrame(void)=0x802B4A40
ItemDice::setResultFrame(unsigned long)=0x802B4A80
ItemDice::makeResult(unsigned long)=0x802B4AC0
ItemDice::isGoodResult(unsigned long) const=0x802B4B30
SwitchDice::getModelName(void)=0x802B4C10
SwitchDice::initItems(void)=0x802B4C20
SwitchDice::setAnimFrame(void)=0x802B4C70
SwitchDice::setResultFrame(unsigned long)=0x802B4CB0
SwitchDice::makeResult(unsigned long)=0x802B4CE0
SwitchDice::isGoodResult(unsigned long) const=0x802B4D60
PositiveDice::__ct(const char*)=0x802B4D80
PositiveDice::getModelName(void)=0x802B4DD0
PositiveDice::initItems(void)=0x802B4DE0
PositiveDice::setAnimFrame(void)=0x802B4E70
PositiveDice::setResultFrame(unsigned long)=0x802B4EB0
PositiveDice::makeResult(unsigned long)=0x802B4EF0
PositiveDice::isGoodResult(unsigned long) const=0x802B4F70
LuckyDice::__ct(const char*)=0x802B4FF0
LuckyDice::getModelName(void)=0x802B5030
LuckyDice::initItems(void)=0x802B5040
LuckyDice::setAnimFrame(void)=0x802B50F0
LuckyDice::setResultFrame(unsigned long)=0x802B5130
LuckyDice::makeResult(unsigned long)=0x802B5180
LuckyDice::isGoodResult(unsigned long) const=0x802B5220
ItemDice::__dt(void)=0x802B54B0
SwitchDice::__dt(void)=0x802B5510
PositiveDice::__dt(void)=0x802B5570
LuckyDice::__dt(void)=0x802B55D0
short::(nit_\ItemDice_cpp)=0x802B5630
NrvItemDice::ItemDiceNrvSpin::__ct(void)=0x802B57A0
NrvItemDice::ItemDiceNrvThrow::__ct(void)=0x802B57B0
NrvItemDice::ItemDiceNrvLand::__ct(void)=0x802B57C0
NrvItemDice::ItemDiceNrvLand::execute(Spine*) const=0x802B57D0
NrvItemDice::ItemDiceNrvThrow::execute(Spine*) const=0x802B57E0
NrvItemDice::ItemDiceNrvSpin::execute(Spine*) const=0x802B57F0
ItemDrill::__ct(const char*)=0x802B5880
ItemDrill::init(const JMapInfoIter&)=0x802B5970
ItemDrill::draw(void) const=0x802B5BE0
ItemDrill::calcAndSetBaseMtx(void)=0x802B5C40
ItemDrill::attackSensor(HitSensor*, HitSensor*)=0x802B5C90
ItemDrill::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802B5EA0
ItemDrill::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802B5F80
JGeometry::TVec3<float>::setLength(const JGeometry::TVec3<float>&, float)=0x802B6880
ItemDrill::__dt(void)=0x802B81C0
short::(nit_\ItemDrill_cpp)=0x802B8220
ItemDrillMovementLimitPos::__ct(const char*)=0x802B8520
ItemDrillMovementLimitPos::init(const JMapInfoIter&)=0x802B8570
ItemDrillMovementLimitPos::initAfterPlacement(void)=0x802B85C0
ItemDrillMovementLimitPos::control(void)=0x802B86B0
ItemDrillMovementLimitPos::__dt(void)=0x802B8990
MR::isPlayerInRange(float)=0x802B89F0
ItemRoomDoor::__ct(const char*)=0x802B8A30
ItemRoomDoor::init(const JMapInfoIter&)=0x802B8A80
ItemRoomDoor::exeCloseWait(void)=0x802B8B70
ItemRoomDoor::exeOpen(void)=0x802B8BF0
ItemRoomDoor::exeOpenWait(void)=0x802B8C90
ItemRoomDoor::exeClose(void)=0x802B8DA0
ItemRoomDoor::exeDemoPlayerWait(void)=0x802B8E10
ItemRoomDoor::__dt(void)=0x802B8E80
short::(nit_\ItemRoomDoor_cpp)=0x802B8EE0
NrvItemRoomDoor::ItemRoomDoorNrvCloseWait::__ct(void)=0x802B8F30
NrvItemRoomDoor::ItemRoomDoorNrvOpen::__ct(void)=0x802B8F40
NrvItemRoomDoor::ItemRoomDoorNrvOpenWait::__ct(void)=0x802B8F50
NrvItemRoomDoor::ItemRoomDoorNrvClose::__ct(void)=0x802B8F60
NrvItemRoomDoor::ItemRoomDoorNrvDemoPlayerWaitOpen::__ct(void)=0x802B8F70
NrvItemRoomDoor::ItemRoomDoorNrvDemoPlayerWaitClose::__ct(void)=0x802B8F80
NrvItemRoomDoor::ItemRoomDoorNrvDemoPlayerWaitClose::execute(Spine*) const=0x802B8F90
NrvItemRoomDoor::ItemRoomDoorNrvDemoPlayerWaitOpen::execute(Spine*) const=0x802B8FA0
NrvItemRoomDoor::ItemRoomDoorNrvClose::execute(Spine*) const=0x802B8FB0
NrvItemRoomDoor::ItemRoomDoorNrvOpenWait::execute(Spine*) const=0x802B8FC0
NrvItemRoomDoor::ItemRoomDoorNrvOpen::execute(Spine*) const=0x802B8FD0
NrvItemRoomDoor::ItemRoomDoorNrvCloseWait::execute(Spine*) const=0x802B8FE0
JetTurtle::__ct(const char*)=0x802B8FF0
JetTurtle::init(const JMapInfoIter&)=0x802B9040
JetTurtle::init2(const JMapInfoIter&, long)=0x802B9050
JetTurtle::initAfterPlacement(void)=0x802B93F0
JetTurtle::appear(void)=0x802B9430
JetTurtle::attackSensor(HitSensor*, HitSensor*)=0x802B9570
JetTurtle::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802B97B0
JetTurtle::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802B9C40
JetTurtle::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802B9D80
JetTurtle::receiveMsgThrow(HitSensor*, HitSensor*)=0x802B9E70
JetTurtle::control(void)=0x802B9FD0
JetTurtle::appearAndTryTaken(void)=0x802BA000
JetTurtle::isWait(void) const=0x802BA1C0
JetTurtle::isRestart(void) const=0x802BA220
JetTurtle::becomeSlowType(void)=0x802BA230
JetTurtle::becomeFastType(void)=0x802BA290
JetTurtle::exeWait(void)=0x802BA2F0
JetTurtle::exeThrowWait(void)=0x802BA550
JetTurtle::exeThrowing(void)=0x802BA670
JetTurtle::exeTakenReserve(void)=0x802BAD20
JetTurtle::exeTakenStart(void)=0x802BAEA0
JetTurtle::exeRestart(void)=0x802BAFC0
JetTurtle::exeDrop(void)=0x802BB150
JetTurtle::resetPosition(void)=0x802BB250
JetTurtle::reset(unsigned long)=0x802BB2F0
JetTurtle::resetPositionAndVanish(void)=0x802BB4D0
JetTurtle::bound(void)=0x802BB590
JetTurtle::boundDrop(void)=0x802BB790
GoldenTurtle::init(const JMapInfoIter&)=0x802BB990
GoldenTurtle::resetPosition(void)=0x802BB9F0
GoldenTurtle::exeThrowing(void)=0x802BBA30
GoldenTurtle::reset(unsigned long)=0x802BBAA0
JetTurtle::__dt(void)=0x802BBAE0
GoldenTurtle::__dt(void)=0x802BBB40
short::(nit_\JetTurtle_cpp)=0x802BBBA0
NrvJetTurtle::JetTurtleNrvWait::__ct(void)=0x802BBC20
NrvJetTurtle::JetTurtleNrvWait2::__ct(void)=0x802BBC30
NrvJetTurtle::JetTurtleNrvThrowWait::__ct(void)=0x802BBC40
NrvJetTurtle::JetTurtleNrvThrowing::__ct(void)=0x802BBC50
NrvJetTurtle::JetTurtleNrvTakenReserve::__ct(void)=0x802BBC60
NrvJetTurtle::JetTurtleNrvTakenReserveD::__ct(void)=0x802BBC70
NrvJetTurtle::JetTurtleNrvTakenStart::__ct(void)=0x802BBC80
NrvJetTurtle::JetTurtleNrvRestart::__ct(void)=0x802BBC90
NrvJetTurtle::JetTurtleNrvDrop::__ct(void)=0x802BBCA0
NrvJetTurtle::JetTurtleNrvDrop::execute(Spine*) const=0x802BBCF0
NrvJetTurtle::JetTurtleNrvRestart::execute(Spine*) const=0x802BBD00
NrvJetTurtle::JetTurtleNrvTakenStart::execute(Spine*) const=0x802BBD10
NrvJetTurtle::JetTurtleNrvTakenReserveD::execute(Spine*) const=0x802BBD20
NrvJetTurtle::JetTurtleNrvTakenReserve::execute(Spine*) const=0x802BBD30
NrvJetTurtle::JetTurtleNrvThrowing::execute(Spine*) const=0x802BBD40
NrvJetTurtle::JetTurtleNrvThrowWait::execute(Spine*) const=0x802BBD60
NrvJetTurtle::JetTurtleNrvWait2::executeOnEnd(Spine*) const=0x802BBD70
NrvJetTurtle::JetTurtleNrvWait2::execute(Spine*) const=0x802BBD90
NrvJetTurtle::JetTurtleNrvWait::executeOnEnd(Spine*) const=0x802BBDA0
NrvJetTurtle::JetTurtleNrvWait::execute(Spine*) const=0x802BBDC0
JumpHole::__ct(const char*)=0x802BBDD0
JumpHole::init(const JMapInfoIter&)=0x802BBEB0
JumpHole::initAfterPlacement(void)=0x802BBFA0
JumpHole::control(void)=0x802BBFF0
JumpHole::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802BC000
JumpHole::exeWait(void)=0x802BC120
JumpHole::exeSetCenter(void)=0x802BC170
JumpHole::exeSetUp(void)=0x802BC250
JumpHole::exeRailMove(void)=0x802BC2D0
JumpHole::bindHole(void)=0x802BC540
JumpHole::initParabola(const JGeometry::TVec3<float>&)=0x802BC830
JumpHole::isNerveTypeNotWait(void)=0x802BCA30
JumpHole::__dt(void)=0x802BCA90
short::(nit_\JumpHole_cpp)=0x802BCAF0
NrvJumpHole::JumpHoleNrvWait::__ct(void)=0x802BCB60
NrvJumpHole::JumpHoleNrvSetCenter::__ct(void)=0x802BCB70
NrvJumpHole::JumpHoleNrvSetUp::__ct(void)=0x802BCB80
NrvJumpHole::JumpHoleNrvRailMove::__ct(void)=0x802BCB90
NrvJumpHole::JumpHoleNrvRailMove::execute(Spine*) const=0x802BCBA0
NrvJumpHole::JumpHoleNrvSetUp::execute(Spine*) const=0x802BCBB0
NrvJumpHole::JumpHoleNrvSetCenter::execute(Spine*) const=0x802BCBC0
NrvJumpHole::JumpHoleNrvWait::execute(Spine*) const=0x802BCBD0
JumpStand::__ct(const char*)=0x802BCBE0
JumpStand::init(const JMapInfoIter&)=0x802BCC30
JumpStand::exeTrampleBound(void)=0x802BCDE0
JumpStand::exeHipDropBound(void)=0x802BCFA0
JumpStand::exeStarPieceBound(void)=0x802BD110
JumpStand::control(void)=0x802BD190
JumpStand::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802BD1E0
JumpStand::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802BD270
JumpStand::tryToStartBind(HitSensor*)=0x802BD3D0
JumpStand::updateBindActorMtx(void)=0x802BD450
JumpStand::endBindAndShootUp(float, JumpStand::JumpType)=0x802BD510
JumpStand::__dt(void)=0x802BD750
short::(nit_\JumpStand_cpp)=0x802BD7B0
NrvJumpStand::JumpStandNrvWait::__ct(void)=0x802BD7F0
NrvJumpStand::JumpStandNrvTrampleBound::__ct(void)=0x802BD800
NrvJumpStand::JumpStandNrvHipDropBound::__ct(void)=0x802BD810
NrvJumpStand::JumpStandNrvStarPieceBound::__ct(void)=0x802BD820
NrvJumpStand::JumpStandNrvStarPieceBound::execute(Spine*) const=0x802BD830
NrvJumpStand::JumpStandNrvHipDropBound::execute(Spine*) const=0x802BD840
NrvJumpStand::JumpStandNrvTrampleBound::execute(Spine*) const=0x802BD850
NrvJumpStand::JumpStandNrvWait::execute(Spine*) const=0x802BD860
JumpStandAuto::__ct(const char*)=0x802BD8B0
JumpStandAuto::init(const JMapInfoIter&)=0x802BD8F0
JumpStandAuto::attackSensor(HitSensor*, HitSensor*)=0x802BD970
JumpStandAuto::exeWait(void)=0x802BDA00
JumpStandAuto::exeExtend(void)=0x802BDA60
JumpStandAuto::jumpPlayer(float)=0x802BDB20
JumpStandAuto::__dt(void)=0x802BDC80
short::(nit_\JumpStandAuto_cpp)=0x802BDCE0
NrvJumpStandAuto::JumpStandAutoNrvWait::__ct(void)=0x802BDD10
NrvJumpStandAuto::JumpStandAutoNrvExtend::__ct(void)=0x802BDD20
NrvJumpStandAuto::JumpStandAutoNrvExtend::execute(Spine*) const=0x802BDD30
NrvJumpStandAuto::JumpStandAutoNrvWait::execute(Spine*) const=0x802BDD40
KeySwitch::__ct(const char*)=0x802BDD50
KeySwitch::init(const JMapInfoIter&)=0x802BDDA0
KeySwitch::initKeySwitchByOwner(const JMapInfoIter&)=0x802BDFA0
KeySwitch::prepareDemoStart(void)=0x802BE000
KeySwitch::appearKeySwitch(const JGeometry::TVec3<float>&)=0x802BE050
KeySwitch::exeDemoStart(void)=0x802BE090
KeySwitch::exeAppear(void)=0x802BE110
KeySwitch::exeWait(void)=0x802BE280
KeySwitch::appear(void)=0x802BE2F0
KeySwitch::kill(void)=0x802BE330
KeySwitch::calcAndSetBaseMtx(void)=0x802BE390
KeySwitch::control(void)=0x802BE3F0
KeySwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802BE490
KeySwitch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802BE4A0
KeySwitch::tryAvoid(void)=0x802BE580
KeySwitch::__dt(void)=0x802BE6B0
short::(nit_\KeySwitch_cpp)=0x802BE710
NrvKeySwitch::KeySwitchNrvDemoStart::__ct(void)=0x802BE750
NrvKeySwitch::KeySwitchNrvAppear::__ct(void)=0x802BE760
NrvKeySwitch::KeySwitchNrvWait::__ct(void)=0x802BE770
NrvKeySwitch::KeySwitchNrvWait::execute(Spine*) const=0x802BE780
NrvKeySwitch::KeySwitchNrvAppear::execute(Spine*) const=0x802BE790
NrvKeySwitch::KeySwitchNrvDemoStart::execute(Spine*) const=0x802BE7A0
KoopaJrCastleCloudStep::__ct(const char*)=0x802BE7B0
KoopaJrCastleCloudStep::init(const JMapInfoIter&)=0x802BE850
KoopaJrCastleCloudStep::makeActorAppeared(void)=0x802BE940
KoopaJrCastleCloudStep::makeActorDead(void)=0x802BE980
KoopaJrCastleCloudStep::control(void)=0x802BE9C0
KoopaJrCastleCloudStep::calcAndSetBaseMtx(void)=0x802BEA30
KoopaJrCastleCloudStep::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802BEBE0
KoopaJrCastleCloudStep::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802BEC30
KoopaJrCastleCloudStep::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802BEC90
KoopaJrCastleCloudStep::__dt(void)=0x802BF360
short::(nit_\KoopaJrCastleCloudStep_cpp)=0x802BF3C0
KoopaJrCastleGate::__ct(const char*)=0x802BF480
KoopaJrCastleGate::init(const JMapInfoIter&)=0x802BF4C0
KoopaJrCastleGate::exeWait(void)=0x802BF550
KoopaJrCastleGate::exeMove(void)=0x802BF5C0
KoopaJrCastleGate::exeMoveFast(void)=0x802BF630
KoopaJrCastleGate::__dt(void)=0x802BF6C0
short::(nit_\KoopaJrCastleGate_cpp)=0x802BF720
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvWait::__ct(void)=0x802BF760
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvMove::__ct(void)=0x802BF770
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvMoveFast::__ct(void)=0x802BF780
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvEnd::__ct(void)=0x802BF790
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvEnd::execute(Spine*) const=0x802BF7A0
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvMoveFast::execute(Spine*) const=0x802BF7B0
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvMove::execute(Spine*) const=0x802BF7C0
NrvKoopaJrCastleGate::KoopaJrCastleGateNrvWait::execute(Spine*) const=0x802BF7D0
KoopaStatueVomit::__ct(const char*)=0x802BF7E0
KoopaStatueVomit::init(const JMapInfoIter&)=0x802BF830
KoopaStatueVomit::exeWait(void)=0x802BF8E0
KoopaStatueVomit::exeRotate(void)=0x802BF940
KoopaStatueVomit::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x802BF9E0
KoopaStatueVomit::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x802BF9F0
KoopaStatueVomit::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802BFA00
KoopaStatueVomit::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802BFA10
KoopaStatueVomit::__dt(void)=0x802BFA20
short::(nit_\KoopaStatueVomit_cpp)=0x802BFA80
NrvKoopaStatueVomit::KoopaStatueVomitNrvWait::__ct(void)=0x802BFAC0
NrvKoopaStatueVomit::KoopaStatueVomitNrvRotate::__ct(void)=0x802BFAD0
NrvKoopaStatueVomit::KoopaStatueVomitNrvEnd::__ct(void)=0x802BFAE0
NrvKoopaStatueVomit::KoopaStatueVomitNrvEnd::execute(Spine*) const=0x802BFAF0
NrvKoopaStatueVomit::KoopaStatueVomitNrvRotate::execute(Spine*) const=0x802BFB00
NrvKoopaStatueVomit::KoopaStatueVomitNrvWait::execute(Spine*) const=0x802BFB10
LavaFloater::__ct(const char*)=0x802BFB20
LavaFloater::init(const JMapInfoIter&)=0x802BFBA0
LavaFloater::initAfterPlacement(void)=0x802BFDE0
LavaFloater::makeActorAppeared(void)=0x802BFEF0
LavaFloater::makeActorDead(void)=0x802BFF30
LavaFloater::control(void)=0x802BFF80
FloaterFloatingForce::updateHostTrans(JGeometry::TVec3<float>*) const=0x802C0030
FloaterFloatingForce::updateHostVelocity(JGeometry::TVec3<float>*) const=0x802C0040
LavaFloater::startClipped(void)=0x802C0050
LavaFloater::endClipped(void)=0x802C0090
LavaFloater::getCurrentSinkDepth(void) const=0x802C00E0
LavaFloater::exeFloat(void)=0x802C01C0
LavaFloater::exeSink(void)=0x802C0220
LavaFloater::__dt(void)=0x802C0290
short::(nit_\LavaFloater_cpp)=0x802C02F0
NrvLavaFloater::HostTypeFloat::__ct(void)=0x802C0320
NrvLavaFloater::HostTypeSink::__ct(void)=0x802C0330
NrvLavaFloater::HostTypeSink::execute(Spine*) const=0x802C0340
NrvLavaFloater::HostTypeFloat::execute(Spine*) const=0x802C0350
LavaGeyser::__ct(const char*)=0x802C0360
LavaGeyser::init(const JMapInfoIter&)=0x802C03E0
LavaGeyser::startClipped(void)=0x802C0550
LavaGeyser::kill(void)=0x802C05B0
LavaGeyser::control(void)=0x802C0620
LavaGeyser::updateHitSensor(HitSensor*)=0x802C0690
LavaGeyser::attackSensor(HitSensor*, HitSensor*)=0x802C07E0
LavaGeyser::exeWaitSwitch(void)=0x802C08A0
LavaGeyser::exeWait(void)=0x802C0900
LavaGeyser::exeSign(void)=0x802C09C0
LavaGeyser::exeShootUp(void)=0x802C0A70
LavaGeyser::exeShootKeep(void)=0x802C0B60
LavaGeyser::exeShootDown(void)=0x802C0C20
LavaGeyser::__dt(void)=0x802C0CD0
short::(nit_\LavaGeyser_cpp)=0x802C0D30
NrvLavaGeyser::HostTypeNrvWaitSwitch::__ct(void)=0x802C0D80
NrvLavaGeyser::HostTypeNrvWait::__ct(void)=0x802C0D90
NrvLavaGeyser::HostTypeNrvSign::__ct(void)=0x802C0DA0
NrvLavaGeyser::HostTypeNrvShootUp::__ct(void)=0x802C0DB0
NrvLavaGeyser::HostTypeNrvShootKeep::__ct(void)=0x802C0DC0
NrvLavaGeyser::HostTypeNrvShootDown::__ct(void)=0x802C0DD0
NrvLavaGeyser::HostTypeNrvShootDown::execute(Spine*) const=0x802C0DE0
NrvLavaGeyser::HostTypeNrvShootKeep::execute(Spine*) const=0x802C0DF0
NrvLavaGeyser::HostTypeNrvShootUp::execute(Spine*) const=0x802C0E00
NrvLavaGeyser::HostTypeNrvSign::execute(Spine*) const=0x802C0E10
NrvLavaGeyser::HostTypeNrvWait::execute(Spine*) const=0x802C0E20
NrvLavaGeyser::HostTypeNrvWaitSwitch::execute(Spine*) const=0x802C0E30
LavaProminence::__ct(const char*)=0x802C0E40
LavaProminence::init(const JMapInfoIter&)=0x802C0F60
LavaProminence::appear(void)=0x802C1220
LavaProminence::kill(void)=0x802C1230
LavaProminence::control(void)=0x802C1240
LavaProminence::initAfterPlacement(void)=0x802C1250
LavaProminence::startClipped(void)=0x802C1380
LavaProminence::moveOnRail(void)=0x802C13F0
LavaProminence::setGravityAndMakeMtx(void)=0x802C14F0
LavaProminence::updateEffectClipping(bool)=0x802C1570
LavaProminence::exeWaitSwitch(void)=0x802C1620
LavaProminence::exeWait(void)=0x802C1690
LavaProminence::exeSign(void)=0x802C1750
LavaProminence::exeMoveStartExtra(void)=0x802C1800
LavaProminence::exeMoveStart(void)=0x802C1990
LavaProminence::exeMoveLoop(void)=0x802C1A90
LavaProminence::exeMoveEnd(void)=0x802C1B20
LavaProminence::exeMoveEndExtra(void)=0x802C1BD0
LavaProminence::calcAndSetBaseMtx(void)=0x802C1CD0
LavaProminence::attackSensor(HitSensor*, HitSensor*)=0x802C1EB0
LavaProminence::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802C1F00
LavaProminence::__dt(void)=0x802C1F50
short::(nit_\LavaProminence_cpp)=0x802C1FB0
NrvLavaProminence::HostTypeNrvWaitSwitch::__ct(void)=0x802C2010
NrvLavaProminence::HostTypeNrvWait::__ct(void)=0x802C2020
NrvLavaProminence::HostTypeNrvSign::__ct(void)=0x802C2030
NrvLavaProminence::HostTypeNrvMoveStartExtra::__ct(void)=0x802C2040
NrvLavaProminence::HostTypeNrvMoveStart::__ct(void)=0x802C2050
NrvLavaProminence::HostTypeNrvMoveLoop::__ct(void)=0x802C2060
NrvLavaProminence::HostTypeNrvMoveEnd::__ct(void)=0x802C2070
NrvLavaProminence::HostTypeNrvMoveEndExtra::__ct(void)=0x802C2080
NrvLavaProminence::HostTypeNrvMoveEndExtra::execute(Spine*) const=0x802C2090
NrvLavaProminence::HostTypeNrvMoveEnd::execute(Spine*) const=0x802C20A0
NrvLavaProminence::HostTypeNrvMoveLoop::execute(Spine*) const=0x802C20B0
NrvLavaProminence::HostTypeNrvMoveStart::execute(Spine*) const=0x802C20C0
NrvLavaProminence::HostTypeNrvMoveStartExtra::execute(Spine*) const=0x802C20D0
NrvLavaProminence::HostTypeNrvSign::execute(Spine*) const=0x802C20E0
NrvLavaProminence::HostTypeNrvWait::execute(Spine*) const=0x802C20F0
NrvLavaProminence::HostTypeNrvWaitSwitch::execute(Spine*) const=0x802C2100
LavaSeparateWaterfall::__ct(const char*)=0x802C2110
LavaSeparateWaterfall::init(const JMapInfoIter&)=0x802C2180
LavaSeparateWaterfall::control(void)=0x802C2500
LavaSeparateWaterfall::calcAndSetBaseMtx(void)=0x802C25A0
LavaSeparateWaterfall::calcAnim(void)=0x802C25E0
LavaSeparateWaterfall::exeMove(void)=0x802C2620
JointControlDelegator<LavaSeparateWaterfall>::__dt(void)=0x802C2860
JointControlDelegator<LavaSeparateWaterfall>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802C28A0
JointControlDelegator<LavaSeparateWaterfall>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802C2910
LavaSeparateWaterfall::__dt(void)=0x802C2980
short::(nit_\LavaSeparateWaterfall_cpp)=0x802C29E0
NrvLavaSeparateWaterfall::LavaSeparateWaterfallNrvWait::__ct(void)=0x802C2A10
NrvLavaSeparateWaterfall::LavaSeparateWaterfallNrvMove::__ct(void)=0x802C2A20
NrvLavaSeparateWaterfall::LavaSeparateWaterfallNrvMove::execute(Spine*) const=0x802C2A30
NrvLavaSeparateWaterfall::LavaSeparateWaterfallNrvWait::execute(Spine*) const=0x802C2A40
LeafBoard::__ct(const char*)=0x802C2C30
LeafBoard::init(const JMapInfoIter&)=0x802C2CD0
LeafBoard::initAfterPlacement(void)=0x802C2DF0
LeafBoard::control(void)=0x802C2E30
LeafBoard::calcAndSetBaseMtx(void)=0x802C2F90
LeafBoard::attackSensor(HitSensor*, HitSensor*)=0x802C3290
LeafBoard::receiveMsgPush(HitSensor*, HitSensor*)=0x802C32F0
LeafBoard::__dt(void)=0x802C3730
short::(nit_\LeafBoard_cpp)=0x802C3790
LiftFlower::__ct(const char*)=0x802C3830
LiftFlower::init(const JMapInfoIter&)=0x802C38A0
LiftFlower::control(void)=0x802C39B0
LiftFlower::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802C39D0
LiftFlower::__dt(void)=0x802C3ED0
short::(nit_\LiftFlower_cpp)=0x802C3F30
LightFruit::__ct(const char*)=0x802C4110
LightFruit::init(const JMapInfoIter&)=0x802C4180
LightFruit::control(void)=0x802C4230
LightFruit::attackSensor(HitSensor*, HitSensor*)=0x802C4270
LightFruit::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802C42C0
LightFruit::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802C4420
LightFruit::__dt(void)=0x802C48D0
short::(nit_\LightFruit_cpp)=0x802C4930
LightFruitClipArea::__ct(void)=0x802C4AC0
LightFruitClipArea::init(const JMapInfoIter&)=0x802C4B60
LightFruitClipArea::control(void)=0x802C4CA0
LightFruitClipArea::exeAppear(void)=0x802C4EB0
LightFruitClipArea::exeDisappear(void)=0x802C4F50
LightFruitClipArea::playTimerSound(void)=0x802C5010
MR::createLightFruitClipArea(void)=0x802C50C0
LightFruitClipArea::__dt(void)=0x802C5170
short::(nit_\LightFruitClipArea_cpp)=0x802C51D0
NrvLightFruitClipArea::LightFruitClipAreaNrvAppear::__ct(void)=0x802C5210
NrvLightFruitClipArea::LightFruitClipAreaNrvTimer::__ct(void)=0x802C5220
NrvLightFruitClipArea::LightFruitClipAreaNrvDisappear::__ct(void)=0x802C5230
NrvLightFruitClipArea::LightFruitClipAreaNrvDisappear::execute(Spine*) const=0x802C5240
NrvLightFruitClipArea::LightFruitClipAreaNrvTimer::execute(Spine*) const=0x802C5250
NrvLightFruitClipArea::LightFruitClipAreaNrvAppear::execute(Spine*) const=0x802C52A0
LotusLeaf::__ct(const char*)=0x802C52B0
LotusLeaf::init(const JMapInfoIter&)=0x802C5310
LotusLeaf::exeWait(void)=0x802C53B0
LotusLeaf::exeWaitPlayerOn(void)=0x802C5420
LotusLeaf::exeShake(void)=0x802C5480
LotusLeaf::convergeToInitPos(void)=0x802C5690
LotusLeaf::__dt(void)=0x802C5750
short::(nit_\LotusLeaf_cpp)=0x802C57B0
NrvLotusLeaf::HostTypeWait::__ct(void)=0x802C57F0
NrvLotusLeaf::HostTypeShakeOnPlayer::__ct(void)=0x802C5800
NrvLotusLeaf::HostTypeShake::__ct(void)=0x802C5810
NrvLotusLeaf::HostTypeWaitPlayerOn::__ct(void)=0x802C5820
NrvLotusLeaf::HostTypeWaitPlayerOn::execute(Spine*) const=0x802C5830
NrvLotusLeaf::HostTypeShake::execute(Spine*) const=0x802C5840
NrvLotusLeaf::HostTypeShakeOnPlayer::execute(Spine*) const=0x802C5850
NrvLotusLeaf::HostTypeWait::execute(Spine*) const=0x802C5860
MagmaBoatPlanetMagma::__ct(const char*)=0x802C5870
MagmaBoatPlanetMagma::init(const JMapInfoIter&)=0x802C58C0
MagmaBoatPlanetMagma::connectToScene(const MapObjActorInitInfo&)=0x802C59B0
MagmaBoatPlanetMagma::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802C59C0
MagmaBoatPlanetMagma::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802C59D0
MagmaBoatPlanetMagma::exeFreeze(void)=0x802C59E0
MagmaBoatPlanetMagma::__dt(void)=0x802C5AC0
short::(nit_\MagmaBoatPlanetMagma_cpp)=0x802C5B20
NrvMagmaBoatPlanetMagma::MagmaBoatPlanetMagmaNrvWait::__ct(void)=0x802C5B60
NrvMagmaBoatPlanetMagma::MagmaBoatPlanetMagmaNrvFreeze::__ct(void)=0x802C5B70
NrvMagmaBoatPlanetMagma::MagmaBoatPlanetMagmaNrvKill::__ct(void)=0x802C5B80
NrvMagmaBoatPlanetMagma::MagmaBoatPlanetMagmaNrvKill::execute(Spine*) const=0x802C5B90
NrvMagmaBoatPlanetMagma::MagmaBoatPlanetMagmaNrvFreeze::execute(Spine*) const=0x802C5BE0
NrvMagmaBoatPlanetMagma::MagmaBoatPlanetMagmaNrvWait::execute(Spine*) const=0x802C5BF0
MagmaBoatPlanetIce::__ct(const char*)=0x802C5C50
MagmaBoatPlanetIce::init(const JMapInfoIter&)=0x802C5CA0
MagmaBoatPlanetIce::connectToScene(const MapObjActorInitInfo&)=0x802C5D50
MagmaBoatPlanetIce::exeFreeze(void)=0x802C5D60
MagmaBoatPlanetIce::__dt(void)=0x802C5DB0
short::(nit_\MagmaBoatPlanetIce_cpp)=0x802C5E10
NrvMagmaBoatPlanetIce::MagmaBoatPlanetIceNrvWait::__ct(void)=0x802C5E40
NrvMagmaBoatPlanetIce::MagmaBoatPlanetIceNrvFreeze::__ct(void)=0x802C5E50
NrvMagmaBoatPlanetIce::MagmaBoatPlanetIceNrvFreeze::execute(Spine*) const=0x802C5E60
NrvMagmaBoatPlanetIce::MagmaBoatPlanetIceNrvWait::execute(Spine*) const=0x802C5E70
MagmaMeteor::__ct(const char*)=0x802C5E80
MagmaMeteor::init(const JMapInfoIter&)=0x802C5F10
MagmaMeteor::attackSensor(HitSensor*, HitSensor*)=0x802C6350
MagmaMeteor::__dt(void)=0x802C66D0
short::(nit_\MagmaMeteor_cpp)=0x802C6730
MagmaMeteorParts::__ct(MagmaMeteor*, const char*)=0x802C6840
MagmaMeteorParts::init(const JMapInfoIter&)=0x802C68A0
MagmaMeteorParts::calcAndSetBaseMtx(void)=0x802C6920
MagmaMeteorParts::exeFall(void)=0x802C6AD0
MagmaMeteorParts::__dt(void)=0x802C6B30
short::(nit_\MagmaMeteorParts_cpp)=0x802C6B90
NrvMagmaMeteorParts::MagmaMeteorPartsNrvFall::__ct(void)=0x802C6BA0
NrvMagmaMeteorParts::MagmaMeteorPartsNrvFall::execute(Spine*) const=0x802C6BB0
MagmaSeaWave::__ct(const char*)=0x802C6BD0
MagmaSeaWave::init(const JMapInfoIter&)=0x802C6C50
MagmaSeaWave::control(void)=0x802C6D60
MagmaSeaWave::attackSensor(HitSensor*, HitSensor*)=0x802C6E50
MagmaSeaWave::kill(void)=0x802C6EC0
MagmaSeaWave::exeMove(void)=0x802C6F00
MagmaSeaWave::__dt(void)=0x802C6FD0
short::(nit_\MagmaSeaWave_cpp)=0x802C7030
NrvMagmaSeaWave::MagmaSeaWaveNrvMove::__ct(void)=0x802C70A0
NrvMagmaSeaWave::MagmaSeaWaveNrvMove::execute(Spine*) const=0x802C70B0
ManholeCover::__ct(const char*)=0x802C70C0
ManholeCover::init(const JMapInfoIter&)=0x802C7130
ManholeCover::initAfterPlacement(void)=0x802C71D0
ManholeCover::control(void)=0x802C71E0
ManholeCover::calcAndSetBaseMtx(void)=0x802C7200
ManholeCover::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802C7240
ManholeCover::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802C7350
ManholeCover::exeOpen(void)=0x802C73F0
ManholeCover::exeRattle(void)=0x802C74F0
ManholeCover::__dt(void)=0x802C7570
short::(nit_\ManholeCover_cpp)=0x802C75D0
NrvManholeCover::HostTypeWait::__ct(void)=0x802C7610
NrvManholeCover::HostTypeOpen::__ct(void)=0x802C7620
NrvManholeCover::HostTypeRattle::__ct(void)=0x802C7630
NrvManholeCover::HostTypeRattle::execute(Spine*) const=0x802C7640
NrvManholeCover::HostTypeOpen::execute(Spine*) const=0x802C7650
NrvManholeCover::HostTypeWait::execute(Spine*) const=0x802C7660
MarioFacePlanet::__ct(const char*)=0x802C7670
MarioFacePlanet::init(const JMapInfoIter&)=0x802C76B0
MarioFacePlanet::listenDemoAction(void)=0x802C7770
MR::FunctorV0M<MarioFacePlanet*,M15MarioFacePlanetFPCvPv_v>::__cl(void) const=0x802C7780
MR::FunctorV0M<MarioFacePlanet*,M15MarioFacePlanetFPCvPv_v>::clone(JKRHeap*) const=0x802C77B0
MarioFacePlanet::__dt(void)=0x802C7820
short::(nit_\MarioFacePlanet_cpp)=0x802C7880
NrvMarioFacePlanet::MarioFacePlanetNrvWait::__ct(void)=0x802C7890
NrvMarioFacePlanet::MarioFacePlanetNrvWait::execute(Spine*) const=0x802C78A0
MarioFacePlanetPrevious::__ct(const char*)=0x802C78B0
MarioFacePlanetPrevious::init(const JMapInfoIter&)=0x802C7900
MarioFacePlanetPrevious::makeActorAppeared(void)=0x802C79C0
MarioFacePlanetPrevious::makeActorDead(void)=0x802C7A40
MarioFacePlanetPrevious::exeDemo(void)=0x802C7AC0
MarioFacePlanetPrevious::__dt(void)=0x802C7CC0
short::(nit_\MarioFacePlanetPrevious_cpp)=0x802C7D20
NrvMarioFacePlanetPrevious::MarioFacePlanetPreviousNrvWait::__ct(void)=0x802C7D50
NrvMarioFacePlanetPrevious::MarioFacePlanetPreviousNrvDemo::__ct(void)=0x802C7D60
NrvMarioFacePlanetPrevious::MarioFacePlanetPreviousNrvDemo::execute(Spine*) const=0x802C7D70
NrvMarioFacePlanetPrevious::MarioFacePlanetPreviousNrvWait::execute(Spine*) const=0x802C7D80
MarioFaceShipNpcRegister::__ct(LiveActor*, const char*, const char*)=0x802C9850
MarioFaceShipNpcRegister::init(const JMapInfoIter&)=0x802C98B0
MR::registerMarioFaceShipNpc(LiveActor*, const JMapInfoIter&)=0x802C99D0
MarioFaceShipNpcRegister::__dt(void)=0x802C9AA0
MapObjActor::__ct(const char*)=0x802C9B00
MapObjActor::__ct(const char*, const char*)=0x802C9BB0
MapObjActor::setPlayAppearSe(void)=0x802C9C60
MapObjActor::init(const JMapInfoIter&)=0x802C9C70
MapObjActor::initAfterPlacement(void)=0x802C9C90
MapObjActor::appear(void)=0x802C9D20
MapObjActor::kill(void)=0x802C9DD0
MapObjActor::initialize(const JMapInfoIter&, const MapObjActorInitInfo&)=0x802C9E50
MapObjActor::isObjectName(const char*) const=0x802CAA00
MapObjActor::connectToScene(const MapObjActorInitInfo&)=0x802CAA10
MapObjActor::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802CAAC0
MapObjActor::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x802CAAD0
MapObjActor::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802CAAE0
MR::Functor<MapObjActor>(MapObjActor*, M11MapObjActorFPCvPv_v_Q22MR49FunctorV0M<MapObjActor*,M11MapObjActorFPCvPv_v>)=0x802CAB70
MapObjActor::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x802CABB0
MapObjActor::control(void)=0x802CABC0
MapObjActor::calcAndSetBaseMtx(void)=0x802CACF0
MapPartsFunction::isWorking(void) const=0x802CAEF0
MapObjActor::startClipped(void)=0x802CAF00
MapObjActor::endClipped(void)=0x802CAF60
MapObjActor::tryCreateBreakModel(const MapObjActorInitInfo&)=0x802CAFC0
MapObjActor::tryEmitWaitEffect(void)=0x802CB0D0
MapObjActor::tryDeleteWaitEffect(void)=0x802CB170
MapObjActor::initStageEffectCamera(void)=0x802CB230
MapObjActor::initStageEffectPad(void)=0x802CB330
MapObjActor::startMapPartsFunctions(void)=0x802CB410
MapObjActor::endMapPartsFunctions(void)=0x802CB420
MapObjActor::pauseMapPartsFunctions(void)=0x802CB430
MapObjActor::resumeMapPartsFunctions(void)=0x802CB440
MapObjActor::setStateWait(void)=0x802CB450
MapObjActor::updateProjmapMtx(void)=0x802CB460
MapObjActor::exeWait(void)=0x802CB490
MapObjActor::exeMove(void)=0x802CB4F0
MapObjActorUtil::startAllMapPartsFunctions(const MapObjActor*)=0x802CB580
MapPartsFunction::start(void)=0x802CB640
MapObjActorUtil::endAllMapPartsFunctions(const MapObjActor*)=0x802CB650
MapPartsFunction::end(void)=0x802CB6F0
MapObjActorUtil::pauseAllMapPartsFunctions(const MapObjActor*)=0x802CB700
MapObjActorUtil::resumeAllMapPartsFunctions(const MapObjActor*)=0x802CB740
MapObjActorUtil::isRotatorMoving(const MapObjActor*)=0x802CB780
MapObjActorUtil::isRailMoverWorking(const MapObjActor*)=0x802CB7A0
MapObjActorUtil::getSeesaw1AxisAngularSpeed(const MapObjActor*)=0x802CB7C0
MapObjActorUtil::startRotator(const MapObjActor*)=0x802CB7D0
MapObjActorUtil::startRailMover(const MapObjActor*)=0x802CB7F0
MapObjActorUtil::pauseRotator(const MapObjActor*)=0x802CB830
MapObjActorUtil::resetRailMoverToInitPos(const MapObjActor*)=0x802CB840
MapObjActorUtil::tryStartBreak(MapObjActor*)=0x802CB850
MapObjActorUtil::isBreakStopped(const MapObjActor*)=0x802CB970
MapObjActorUtil::killBloomModel(MapObjActor*)=0x802CB9E0
MapObjActorUtil::appearBloomModel(MapObjActor*)=0x802CBA00
MR::FunctorV0M<MapObjActor*,M11MapObjActorFPCvPv_v>::__cl(void) const=0x802CBA70
MR::FunctorV0M<MapObjActor*,M11MapObjActorFPCvPv_v>::clone(JKRHeap*) const=0x802CBAA0
short::(nit_\MapObjActor_cpp)=0x802CBB10
NrvMapObjActor::HostTypeWait::__ct(void)=0x802CBB50
NrvMapObjActor::HostTypeMove::__ct(void)=0x802CBB60
NrvMapObjActor::HostTypeDone::__ct(void)=0x802CBB70
NrvMapObjActor::HostTypeDone::execute(Spine*) const=0x802CBB80
NrvMapObjActor::HostTypeMove::execute(Spine*) const=0x802CBB90
NrvMapObjActor::HostTypeWait::execute(Spine*) const=0x802CBBA0
MapObjActorInitInfo::__ct(void)=0x802CBBB0
MapObjActorInitInfo::setupHioNode(const char*)=0x802CBCB0
MapObjActorInitInfo::setupDefaultPos(void)=0x802CBCC0
MapObjActorInitInfo::setupModelName(const char*)=0x802CBCD0
MapObjActorInitInfo::setupConnectToScene(void)=0x802CBCE0
MapObjActorInitInfo::setupBinder(float, float)=0x802CBCF0
MapObjActorInitInfo::setupEffect(const char*, long)=0x802CBD10
MapObjActorInitInfo::setupSound(long, long)=0x802CBD30
MapObjActorInitInfo::setupSoundPos(JGeometry::TVec3<float>*)=0x802CBD40
MapObjActorInitInfo::setupHitSensor(void)=0x802CBD50
MapObjActorInitInfo::setupHitSensorParam(unsigned short, float, const JGeometry::TVec3<float>&)=0x802CBD60
MapObjActorInitInfo::setupNerve(const Nerve*)=0x802CBD90
J3DTexGenBlockPatched::setTexMtxOffset(unsigned long)=0x802CBDA0
MapObjActorInitInfo::setupShadow(const char*)=0x802CBDB0
MapObjActorInitInfo::setupGroupClipping(long)=0x802CBDC0
MapObjActorInitInfo::setupClippingRadius(float)=0x802CBDD0
MapObjActorInitInfo::setupFarClipping(float)=0x802CBDE0
MapObjActorInitInfo::setupProjmapMtx(bool, bool)=0x802CBDF0
MapObjActorInitInfo::setupMultiFur(long)=0x802CBE10
MapObjActorInitInfo::setupRailMover(void)=0x802CBE20
MapObjActorInitInfo::setupRotator(void)=0x802CBE30
MapObjActorInitInfo::setupRailRotator(void)=0x802CBE40
MapObjActorInitInfo::setupBaseMtxFollowTarget(void, _0)=0x802CBE50
MapObjActorInitInfo::setupBaseMtxFollowTarget(void)=0x802CBE60
MapObjActorInitInfo::setupAffectedScale(void)=0x802CBE70
MapObjActorInitInfo::setupSeAppear(void)=0x802CBE80
MapObjActorInitInfo::setupLightCtrl(void)=0x802CBE90
MapObjActorInitInfo::setupNoUseLodCtrl(void)=0x802CBEA0
MapObjActorUtil::setupInitInfoSimpleMapObj(MapObjActorInitInfo*)=0x802CBEB0
MapObjActorUtil::setupInitInfoPlanet(MapObjActorInitInfo*)=0x802CBF00
MapObjActorUtil::setupInitInfoTypical(MapObjActorInitInfo*, const char*)=0x802CBF40
MapObjActorUtil::setupInitInfoColorChangeArg0(MapObjActorInitInfo*, const JMapInfoIter&)=0x802CC150
MapObjActorUtil::setupInitInfoTextureChangeArg1(MapObjActorInitInfo*, const JMapInfoIter&)=0x802CC1A0
MapObjActorUtil::setupInitInfoShadowLengthArg2(MapObjActorInitInfo*, const JMapInfoIter&)=0x802CC1F0
MapObjActorUtil::setupInitInfoSeesaw(MapObjActorInitInfo*, const JMapInfoIter&, const char*, float)=0x802CC240
MapObjConnector::__ct(LiveActor*)=0x802CC2F0
MapObjConnector::attachToUnder(void)=0x802CC350
MapObjConnector::attachToBack(void)=0x802CC390
MapObjConnector::attach(const JGeometry::TVec3<float>&)=0x802CC3D0
MapObjConnector::connect(void)=0x802CC5F0
MapObjConnector::connect(LiveActor*)=0x802CC600
MarinePlant::__ct(const char*)=0x802CC690
MarinePlant::init(const JMapInfoIter&)=0x802CC6F0
MarinePlant::makeActorAppeared(void)=0x802CC870
MarinePlant::makeActorDead(void)=0x802CC8E0
MarinePlant::initAfterPlacement(void)=0x802CC950
JGeometry::TVec3<float>::set<int>(int, int, int, _v)=0x802CCA80
MarinePlant::control(void)=0x802CCAE0
MarinePlant::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802CCB50
MarinePlant::initMember(const JMapInfoIter&)=0x802CCBD0
MarinePlant::attackSensor(HitSensor*, HitSensor*)=0x802CD300
MarinePlant::startClipped(void)=0x802CD310
MarinePlant::endClipped(void)=0x802CD380
MarinePlantMember::__ct(const char*, const char*)=0x802CD3F0
MarinePlantMember::init(const JMapInfoIter&)=0x802CD460
MarinePlant::__dt(void)=0x802CD850
MarinePlantMember::__dt(void)=0x802CD8B0
short::(nit_\MarinePlant_cpp)=0x802CD910
MarioLauncher::__ct(const char*)=0x802CD9C0
MarioLauncher::init(const JMapInfoIter&)=0x802CDA60
MarioLauncherShell::init(const JMapInfoIter&)=0x802CDE10
MarioLauncherLayout::init(const JMapInfoIter&)=0x802CDE70
MR::Functor<MarioLauncher>(MarioLauncher*, M13MarioLauncherFPCvPv_v_Q22MR53FunctorV0M<MarioLauncher*,M13MarioLauncherFPCvPv_v>)=0x802CDEF0
MarioLauncher::exeWait(void)=0x802CDF30
MarioLauncher::exeReady(void)=0x802CDF90
MarioLauncher::exePlayerIn(void)=0x802CE060
MarioLauncher::exePrep(void)=0x802CE160
MarioLauncher::exeAim(void)=0x802CE270
MarioLauncher::exeFlight(void)=0x802CE450
MarioLauncher::exeKill(void)=0x802CE570
MarioLauncherShell::calcBaseMtx(void)=0x802CE600
MarioLauncherShell::getBaseMtx(void) const=0x802CE780
MarioLauncher::exeReject(void)=0x802CE790
MarioLauncher::exeLand(void)=0x802CE900
MarioLauncher::attackSensor(HitSensor*, HitSensor*)=0x802CE960
MarioLauncher::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802CE9E0
MarioLauncher::receiveMsgPush(HitSensor*, HitSensor*)=0x802CEA50
MarioLauncher::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802CEAD0
MarioLauncher::doReady(HitSensor*)=0x802CEB90
MarioLauncher::doPrep(void)=0x802CEC30
MarioLauncher::doAim(void)=0x802CED30
MarioLauncher::doReject(void)=0x802CEE60
MarioLauncherLayout::kill(void)=0x802CEF30
MarioLauncher::doEject(void)=0x802CEF80
MarioLauncher::doFlight(void)=0x802CF150
MarioLauncher::doLanding(long)=0x802CF3D0
MarioLauncher::testHitCollision(void)=0x802CF520
MarioLauncher::isBreak(const Triangle*)=0x802CF550
MarioLauncher::onSwitchA(void)=0x802CF5C0
MarioLauncher::offSwitchA(void)=0x802CF5D0
MarioLauncherShell::calcAndSetBaseMtx(void)=0x802CF640
LayoutActor::control(void)=0x802CF650
MR::FunctorV0M<MarioLauncher*,M13MarioLauncherFPCvPv_v>::__cl(void) const=0x802CF6C0
MR::FunctorV0M<MarioLauncher*,M13MarioLauncherFPCvPv_v>::clone(JKRHeap*) const=0x802CF6F0
MarioLauncher::__dt(void)=0x802CF760
MarioLauncherLayout::__dt(void)=0x802CF7D0
MarioLauncherShell::__dt(void)=0x802CF830
short::(nit_\MarioLauncher_cpp)=0x802CF890
NrvMarioLauncher::MarioLauncherNrvWait::__ct(void)=0x802CF900
NrvMarioLauncher::MarioLauncherNrvReady::__ct(void)=0x802CF910
NrvMarioLauncher::MarioLauncherNrvPlayerIn::__ct(void)=0x802CF920
NrvMarioLauncher::MarioLauncherNrvPrep::__ct(void)=0x802CF930
NrvMarioLauncher::MarioLauncherNrvAim::__ct(void)=0x802CF940
NrvMarioLauncher::MarioLauncherNrvFlight::__ct(void)=0x802CF950
NrvMarioLauncher::MarioLauncherNrvKill::__ct(void)=0x802CF960
NrvMarioLauncher::MarioLauncherNrvLand::__ct(void)=0x802CF970
NrvMarioLauncher::MarioLauncherNrvReject::__ct(void)=0x802CF980
NrvMarioLauncher::MarioLauncherNrvReject::execute(Spine*) const=0x802CF990
NrvMarioLauncher::MarioLauncherNrvLand::execute(Spine*) const=0x802CF9A0
NrvMarioLauncher::MarioLauncherNrvKill::execute(Spine*) const=0x802CF9B0
NrvMarioLauncher::MarioLauncherNrvFlight::execute(Spine*) const=0x802CF9C0
NrvMarioLauncher::MarioLauncherNrvAim::execute(Spine*) const=0x802CF9D0
NrvMarioLauncher::MarioLauncherNrvPrep::execute(Spine*) const=0x802CF9E0
NrvMarioLauncher::MarioLauncherNrvPlayerIn::execute(Spine*) const=0x802CF9F0
NrvMarioLauncher::MarioLauncherNrvReady::execute(Spine*) const=0x802CFA00
NrvMarioLauncher::MarioLauncherNrvWait::execute(Spine*) const=0x802CFA10
MarioLauncherTarget::__ct(const char*)=0x802CFA20
MarioLauncherTarget::init(const JMapInfoIter&)=0x802CFA80
MarioLauncherTarget::control(void)=0x802CFB80
MarioLauncherTarget::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802CFC70
MarioLauncherTarget::__dt(void)=0x802CFDB0
short::(nit_\MarioLauncherTarget_cpp)=0x802CFE10
MemoryRoadDoor::__ct(const char*)=0x802CFEF0
MemoryRoadDoor::init(const JMapInfoIter&)=0x802CFF30
MemoryRoadDoor::exeOpen(void)=0x802CFF90
MemoryRoadDoor::exeClose(void)=0x802D0010
MemoryRoadDoor::tryFlashAnim(void)=0x802D0080
MemoryRoadDoor::__dt(void)=0x802D00E0
short::(nit_\MemoryRoadDoor_cpp)=0x802D0140
NrvMemoryRoadDoor::MemoryRoadDoorNrvOpen::__ct(void)=0x802D0170
NrvMemoryRoadDoor::MemoryRoadDoorNrvClose::__ct(void)=0x802D0180
NrvMemoryRoadDoor::MemoryRoadDoorNrvClose::execute(Spine*) const=0x802D0190
NrvMemoryRoadDoor::MemoryRoadDoorNrvOpen::execute(Spine*) const=0x802D01A0
MemoryRoadStep::__ct(const char*)=0x802D01B0
MemoryRoadStep::init(const JMapInfoIter&)=0x802D01F0
MemoryRoadStep::exeWait(void)=0x802D02F0
MemoryRoadStep::tryFlashAnim(void)=0x802D0370
MemoryRoadStep::__dt(void)=0x802D0400
short::(nit_\MemoryRoadStep_cpp)=0x802D0460
NrvMemoryRoadStep::MemoryRoadStepNrvWait::__ct(void)=0x802D0470
NrvMemoryRoadStep::MemoryRoadStepNrvWait::execute(Spine*) const=0x802D0480
MeteorStrike::__ct(const char*)=0x802D0490
MeteorStrike::init(const JMapInfoIter&)=0x802D0510
MeteorStrike::initAfterPlacement(void)=0x802D06A0
MeteorStrike::appear(void)=0x802D07C0
MeteorStrike::appear(long)=0x802D07D0
MeteorStrike::kill(void)=0x802D0890
MeteorStrike::getMovedPos(JGeometry::TVec3<float>*, long) const=0x802D08F0
MeteorStrike::getSpeed(const JMapInfoIter&)=0x802D09A0
MeteorStrike::calcAndSetBaseMtx(void)=0x802D09D0
MeteorStrike::attackSensor(HitSensor*, HitSensor*)=0x802D0B80
MeteorStrike::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802D0C70
MeteorStrike::initMapToolInfo(const JMapInfoIter&)=0x802D0C80
MeteorStrike::initModel(void)=0x802D0D20
MeteorStrike::calcBreakPosture(const JGeometry::TVec3<float>&, JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x802D0DD0
MeteorStrike::emitEffectColumn(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x802D0F50
MeteorStrike::startRumble(void)=0x802D0F90
MeteorStrike::isInScreen(void) const=0x802D0FD0
MeteorStrike::exeMove(void)=0x802D1040
MeteorStrike::exeBreak(void)=0x802D1340
MeteorStrike::__dt(void)=0x802D1440
short::(nit_\MeteorStrike_cpp)=0x802D14A0
NrvMeteorStrike::MeteorStrikeNrvMove::__ct(void)=0x802D14D0
NrvMeteorStrike::MeteorStrikeNrvBreak::__ct(void)=0x802D14E0
NrvMeteorStrike::MeteorStrikeNrvBreak::execute(Spine*) const=0x802D14F0
NrvMeteorStrike::MeteorStrikeNrvMove::execute(Spine*) const=0x802D1500
MeteorStrikeLauncher::__ct(const char*)=0x802D1510
MeteorStrikeLauncher::init(const JMapInfoIter&)=0x802D1570
MeteorStrikeLauncher::appear(void)=0x802D1720
MeteorStrikeLauncher::kill(void)=0x802D1760
MeteorStrikeLauncher::initMapToolInfo(const JMapInfoIter&)=0x802D17F0
MeteorStrikeLauncher::getUnusedMeteorStrike(void)=0x802D1880
MeteorStrikeLauncher::create(void)=0x802D1900
MeteorStrikeLauncher::exeCreate(void)=0x802D1A30
MeteorStrikeLauncher::__dt(void)=0x802D1AB0
short::(nit_\MeteorStrikeLauncher_cpp)=0x802D1B10
NrvMeteorStrikeLauncher::MeteorStrikeLauncherNrvCreate::__ct(void)=0x802D1B40
NrvMeteorStrikeLauncher::MeteorStrikeLauncherNrvInterval::__ct(void)=0x802D1B50
NrvMeteorStrikeLauncher::MeteorStrikeLauncherNrvInterval::execute(Spine*) const=0x802D1B60
NrvMeteorStrikeLauncher::MeteorStrikeLauncherNrvCreate::execute(Spine*) const=0x802D1BB0
MorphItemCollection::__ct(const char*)=0x802D1BC0
MorphItemCollection::init(const JMapInfoIter&)=0x802D1C20
MorphItemCollection::calcAndSetBaseMtx(void)=0x802D1CE0
MorphItemCollection::exeWait(void)=0x802D1D60
MorphItemCollection::initPowerUpModel(const JMapInfoIter&)=0x802D1E10
MorphItemCollection::__dt(void)=0x802D1F40
short::(nit_\MorphItemCollection_cpp)=0x802D1FA0
NrvMorphItemCollection::MorphItemCollectionNrvWait::execute(Spine*) const=0x802D1FC0
MR::enablePlayerResourceMorph(void)=0x802D1FD0
MorphItemObjNeo::__ct(const char*)=0x802D20D0
MorphItemObjNeo::init(const JMapInfoIter&)=0x802D21A0
MorphItemObjNeo::initAfterPlacement(void)=0x802D27E0
MorphItemObjNeo::makeActorAppeared(void)=0x802D2800
MorphItemObjNeo::makeActorDead(void)=0x802D2860
MorphItemObjNeo::appear(void)=0x802D28B0
MorphItemObjNeo::emitAppearEffects(void)=0x802D29C0
MorphItemObjNeo::kill(void)=0x802D29D0
MorphItemObjNeo::control(void)=0x802D2A20
MorphItemObjNeo::calcAndSetBaseMtx(void)=0x802D2B80
MorphItemObjNeo::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802D2DB0
MorphItemObjNeo::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802D2F00
MorphItemObjNeo::appearTransformation(void)=0x802D3570
MorphItemObjNeo::killTransformation(void)=0x802D35F0
MorphItemObjNeo::isDemo(void) const=0x802D39B0
MorphItemObjNeo::__dt(void)=0x802D4330
short::(nit_\MorphItemObjNeo_cpp)=0x802D4390
MorphItemNeoHopper::emitAppearEffects(void)=0x802D4500
MorphItemNeoFire::emitAppearEffects(void)=0x802D4550
MorphItemRock::__ct(const char*)=0x802D45A0
MorphItemRock::init(const JMapInfoIter&)=0x802D4610
MorphItemRock::emitAppearEffects(void)=0x802D4670
MorphItemRock::appearTransformation(void)=0x802D46C0
MorphItemRock::killTransformation(void)=0x802D46E0
MorphItemRock::getPowerUp(void) const=0x802D4770
MorphItemNeoFire::getPowerUp(void) const=0x802D4780
MorphItemNeoHopper::getPowerUp(void)=0x802D4790
MorphItemNeoHopper::__dt(void)=0x802D47A0
MorphItemNeoFire::__dt(void)=0x802D4800
MorphItemRock::__dt(void)=0x802D4860
MoveBlockFunction::__ct(void)=0x802D48C0
MoveBlockFunction::init(const JMapInfoIter&)=0x802D4990
MoveBlockFunction::__dt(void)=0x802D4D40
MysteryMountainPlanet::__ct(const char*)=0x802D4DA0
MysteryMountainPlanet::init(const JMapInfoIter&)=0x802D4DE0
MysteryMountainPlanet::exeBoxVanish(void)=0x802D4EB0
MysteryMountainPlanet::exeCakeVanish(void)=0x802D4F10
MysteryMountainPlanet::__dt(void)=0x802D4F70
short::(nit_\MysteryMountainPlanet_cpp)=0x802D4FD0
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvWait::__ct(void)=0x802D5010
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvBoxVanish::__ct(void)=0x802D5020
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvCakeVanish::__ct(void)=0x802D5030
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvWaitVanished::__ct(void)=0x802D5040
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvWaitVanished::execute(Spine*) const=0x802D5050
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvCakeVanish::execute(Spine*) const=0x802D5090
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvBoxVanish::execute(Spine*) const=0x802D50A0
NrvMysteryMountainPlanet::MysteryMountainPlanetNrvWait::execute(Spine*) const=0x802D50B0
NeedlePlant::__ct(const char*)=0x802D5110
NeedlePlant::init(const JMapInfoIter&)=0x802D5180
NeedlePlant::initAfterPlacement(void)=0x802D5300
NeedlePlant::exeWait(void)=0x802D5340
NeedlePlant::exeShake(void)=0x802D53C0
NeedlePlant::attackSensor(HitSensor*, HitSensor*)=0x802D57F0
NeedlePlant::receiveMsgPush(HitSensor*, HitSensor*)=0x802D5950
NeedlePlant::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802D59E0
NeedlePlant::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802D5AC0
NeedlePlant::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802D5B10
NeedlePlant::break(void)=0x802D5DF0
NeedlePlant::__dt(void)=0x802D5ED0
short::(nit_\NeedlePlant_cpp)=0x802D5F30
NrvNeedlePlant::NeedlePlantNrvWait::__ct(void)=0x802D5F90
NrvNeedlePlant::NeedlePlantNrvShake::__ct(void)=0x802D5FA0
NrvNeedlePlant::NeedlePlantNrvShake::execute(Spine*) const=0x802D6070
NrvNeedlePlant::NeedlePlantNrvWait::execute(Spine*) const=0x802D6080
NeedleTrap::__ct(const char*)=0x802D6090
NeedleTrap::init(const JMapInfoIter&)=0x802D60E0
NeedleTrap::control(void)=0x802D6190
NeedleTrap::exeWaitFirst(void)=0x802D61E0
NeedleTrap::exeWait(void)=0x802D6250
NeedleTrap::exeAttackSign(void)=0x802D62C0
NeedleTrap::exeAttack(void)=0x802D6320
NeedleTrap::exeAttackEnd(void)=0x802D63A0
NeedleTrap::exeFreeze(void)=0x802D6400
NeedleTrap::isNotNerveFreeze(void) const=0x802D6470
NeedleTrap::__dt(void)=0x802D64A0
short::(nit_\NeedleTrap_cpp)=0x802D6500
NrvNeedleTrap::NeedleTrapNrvWaitFirst::__ct(void)=0x802D6550
NrvNeedleTrap::NeedleTrapNrvWait::__ct(void)=0x802D6560
NrvNeedleTrap::NeedleTrapNrvAttackSign::__ct(void)=0x802D6570
NrvNeedleTrap::NeedleTrapNrvAttack::__ct(void)=0x802D6580
NrvNeedleTrap::NeedleTrapNrvAttackEnd::__ct(void)=0x802D6590
NrvNeedleTrap::NeedleTrapNrvFreeze::__ct(void)=0x802D65A0
NrvNeedleTrap::NeedleTrapNrvFreeze::execute(Spine*) const=0x802D65B0
NrvNeedleTrap::NeedleTrapNrvAttackEnd::execute(Spine*) const=0x802D65C0
NrvNeedleTrap::NeedleTrapNrvAttack::execute(Spine*) const=0x802D65D0
NrvNeedleTrap::NeedleTrapNrvAttackSign::execute(Spine*) const=0x802D65E0
NrvNeedleTrap::NeedleTrapNrvWait::execute(Spine*) const=0x802D65F0
NrvNeedleTrap::NeedleTrapNrvWaitFirst::execute(Spine*) const=0x802D6600
Note::__ct(const char*, const JGeometry::TVec3<float>&, NoteFairy*)=0x802D6610
Note::init(const JMapInfoIter&)=0x802D66A0
Note::startCountDown(void)=0x802D6820
Note::exeWait(void)=0x802D6830
Note::exeCountDown(void)=0x802D68E0
Note::exeFlyUp(void)=0x802D6980
Note::appear(void)=0x802D6A20
Note::control(void)=0x802D6A90
Note::calcAndSetBaseMtx(void)=0x802D6AD0
Note::attackSensor(HitSensor*, HitSensor*)=0x802D6B70
NoteGroup::__ct(void)=0x802D6C00
NoteGroup::init(const JMapInfoIter&)=0x802D6C50
NoteGroup::movement(void)=0x802D6C60
Note::__dt(void)=0x802D6CD0
NoteGroup::__dt(void)=0x802D6D30
short::(nit_\Note_cpp)=0x802D6D90
NrvNote::NoteNrvWait::__ct(void)=0x802D6DD0
NrvNote::NoteNrvCountDown::__ct(void)=0x802D6DE0
NrvNote::NoteNrvFlyUp::__ct(void)=0x802D6DF0
NrvNote::NoteNrvFlyUp::execute(Spine*) const=0x802D6E00
NrvNote::NoteNrvCountDown::execute(Spine*) const=0x802D6E10
NrvNote::NoteNrvWait::execute(Spine*) const=0x802D6E20
NoteFairy::__ct(const char*)=0x802D6E30
NoteFairy::init(const JMapInfoIter&)=0x802D6EF0
NoteFairy::control(void)=0x802D7420
NoteFairy::kill(void)=0x802D74B0
NoteFairy::killAllNotes(void)=0x802D7500
NoteFairy::exeHide(void)=0x802D7570
NoteFairy::exeStartAppearDemo(void)=0x802D7660
NoteFairy::exeRailMoveStart(void)=0x802D7720
NoteFairy::exeDemoAppear(void)=0x802D77D0
NoteFairy::exeAppearNoteBloom(void)=0x802D7A30
NoteFairy::exeAppearNote(void)=0x802D7C80
NoteFairy::exeEndWait(void)=0x802D7D70
NoteFairy::exeSuccess(void)=0x802D7E80
NoteFairy::enterDemoAppear(const Nerve*, bool)=0x802D7F30
NoteFairy::isDeadAllNotes(void)=0x802D7FD0
NoteFairy::setLastGotNote(Note*)=0x802D8040
NoteFairy::getNoteCoord(long)=0x802D8050
NoteFairy::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802D80B0
NoteFairy::__dt(void)=0x802D8150
short::(nit_\NoteFairy_cpp)=0x802D81B0
NrvNoteFairy::NoteFairyNrvHide::__ct(void)=0x802D8220
NrvNoteFairy::NoteFairyNrvStartAppearDemo::__ct(void)=0x802D8230
NrvNoteFairy::NoteFairyNrvRailMoveStart::__ct(void)=0x802D8240
NrvNoteFairy::NoteFairyNrvDemoAppear::__ct(void)=0x802D8250
NrvNoteFairy::NoteFairyNrvAppearNoteBloom::__ct(void)=0x802D8260
NrvNoteFairy::NoteFairyNrvAppearNote::__ct(void)=0x802D8270
NrvNoteFairy::NoteFairyNrvEndWait::__ct(void)=0x802D8280
NrvNoteFairy::NoteFairyNrvSuccess::__ct(void)=0x802D82B0
NrvNoteFairy::NoteFairyNrvSuccess::execute(Spine*) const=0x802D82C0
NrvNoteFairy::NoteFairyNrvEndWait::execute(Spine*) const=0x802D8360
NrvNoteFairy::NoteFairyNrvAppearNote::execute(Spine*) const=0x802D8370
NrvNoteFairy::NoteFairyNrvAppearNoteBloom::execute(Spine*) const=0x802D8380
NrvNoteFairy::NoteFairyNrvDemoAppear::execute(Spine*) const=0x802D8390
NrvNoteFairy::NoteFairyNrvRailMoveStart::execute(Spine*) const=0x802D83A0
NrvNoteFairy::NoteFairyNrvStartAppearDemo::execute(Spine*) const=0x802D83B0
NrvNoteFairy::NoteFairyNrvHide::execute(Spine*) const=0x802D83C0
OldFortressCover::__ct(const char*)=0x802D83D0
OldFortressCover::init(const JMapInfoIter&)=0x802D8410
OldFortressCover::exeOpen(void)=0x802D84E0
OldFortressCover::__dt(void)=0x802D8540
short::(nit_\OldFortressCover_cpp)=0x802D85A0
NrvOldFortressCover::OldFortressCoverNrvWait::__ct(void)=0x802D85E0
NrvOldFortressCover::OldFortressCoverNrvOpen::__ct(void)=0x802D85F0
NrvOldFortressCover::OldFortressCoverNrvEnd::__ct(void)=0x802D8600
NrvOldFortressCover::OldFortressCoverNrvEnd::execute(Spine*) const=0x802D8610
NrvOldFortressCover::OldFortressCoverNrvOpen::execute(Spine*) const=0x802D8620
NrvOldFortressCover::OldFortressCoverNrvWait::execute(Spine*) const=0x802D8630
PetitPorter::__ct(const char*)=0x802D8690
PetitPorter::init(const JMapInfoIter&)=0x802D8720
PetitPorter::makeActorAppeared(void)=0x802D8920
PetitPorter::calcAndSetBaseMtx(void)=0x802D8990
PetitPorterWarpPoint::getBaseMtx(void) const=0x802D8F20
PetitPorterExitPoint::getBaseMtx(void) const=0x802D92D0
PetitPorter::updateHitSensor(HitSensor*)=0x802D93C0
PetitPorter::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802D9400
PetitPorterWarpPoint::__ct(const char*)=0x802D95C0
PetitPorterWarpPoint::init(const JMapInfoIter&)=0x802D9610
PetitPorterExitPoint::__ct(const char*)=0x802D9690
PetitPorterExitPoint::init(const JMapInfoIter&)=0x802D96E0
PetitPorterMediator::__ct(void)=0x802D9760
PetitPorterMediator::initAfterPlacement(void)=0x802D98E0
JointControlDelegator<PetitPorter>::__dt(void)=0x802D9A00
JointControlDelegator<PetitPorter>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802D9A40
JointControlDelegator<PetitPorter>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802D9AB0
PetitPorter::__dt(void)=0x802D9B20
PetitPorterWarpPoint::__dt(void)=0x802D9B80
PetitPorterExitPoint::__dt(void)=0x802D9BE0
PetitPorterMediator::__dt(void)=0x802D9C40
short::(nit_\PetitPorter_cpp)=0x802D9CA0
PhantomTorch::__ct(const char*)=0x802D9E80
PhantomTorch::initFromRisePictureBook(void)=0x802D9EE0
PhantomTorch::init(const JMapInfoIter&)=0x802D9F00
MR::Functor<PhantomTorch>(PhantomTorch*, M12PhantomTorchFPCvPv_v_Q22MR51FunctorV0M<PhantomTorch*,M12PhantomTorchFPCvPv_v>)=0x802DA1E0
PhantomTorch::makeActorAppeared(void)=0x802DA220
PhantomTorch::makeActorDead(void)=0x802DA270
PhantomTorch::kill(void)=0x802DA2C0
PhantomTorch::startClipped(void)=0x802DA360
PhantomTorch::endClipped(void)=0x802DA3A0
PhantomTorch::attackSensor(HitSensor*, HitSensor*)=0x802DA3E0
PhantomTorch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802DA460
PhantomTorch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802DA4E0
PhantomTorch::soundOrder(void)=0x802DA570
PhantomTorch::exeWait(void)=0x802DA6C0
PhantomTorch::exeAttack(void)=0x802DA750
PhantomTorch::exeExtinguish(void)=0x802DA800
MR::FunctorV0M<PhantomTorch*,M12PhantomTorchFPCvPv_v>::__cl(void) const=0x802DA8A0
MR::FunctorV0M<PhantomTorch*,M12PhantomTorchFPCvPv_v>::clone(JKRHeap*) const=0x802DA8D0
PhantomTorch::__dt(void)=0x802DA940
short::(nit_\PhantomTorch_cpp)=0x802DA9A0
NrvPhantomTorch::HostTypeWait::__ct(void)=0x802DA9E0
NrvPhantomTorch::HostTypeAttack::__ct(void)=0x802DA9F0
NrvPhantomTorch::HostTypeExtinguish::__ct(void)=0x802DAA00
NrvPhantomTorch::HostTypeExtinguish::execute(Spine*) const=0x802DAA10
NrvPhantomTorch::HostTypeAttack::execute(Spine*) const=0x802DAA20
NrvPhantomTorch::HostTypeWait::execute(Spine*) const=0x802DAA30
PicketSwitch::__ct(const char*)=0x802DAA40
PicketSwitch::init(const JMapInfoIter&)=0x802DAA80
PicketSwitch::exeFirstDrop(void)=0x802DABA0
PicketSwitch::exeLastDrop(void)=0x802DAC10
PicketSwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802DACD0
PicketSwitch::__dt(void)=0x802DADA0
short::(nit_\PicketSwitch_cpp)=0x802DAE00
NrvPicketSwitch::PicketSwitchNrvWait::__ct(void)=0x802DAE40
NrvPicketSwitch::PicketSwitchNrvFirstDrop::__ct(void)=0x802DAE50
NrvPicketSwitch::PicketSwitchNrvLastDrop::__ct(void)=0x802DAE60
NrvPicketSwitch::PicketSwitchNrvLastDrop::execute(Spine*) const=0x802DAE70
NrvPicketSwitch::PicketSwitchNrvFirstDrop::execute(Spine*) const=0x802DAE80
NrvPicketSwitch::PicketSwitchNrvWait::execute(Spine*) const=0x802DAE90
PlacementObj::__ct(const char*)=0x802DAEF0
PlacementCircleObj::__ct(void)=0x802DAF70
PlacementObj::__dt(void)=0x802DAFE0
PlacementCircleObj::init(const JMapInfoIter&)=0x802DB040
PlacementRailObj::__ct(void)=0x802DB280
PlacementRailObj::init(const JMapInfoIter&)=0x802DB2D0
PlacementCircleObj::__dt(void)=0x802DB450
PlacementRailObj::__dt(void)=0x802DB4B0
PlantGroup::__ct(const char*)=0x802DB560
PlantGroup::init(const JMapInfoIter&)=0x802DB600
PlantGroup::makeActorAppeared(void)=0x802DB860
PlantGroup::makeActorDead(void)=0x802DB8E0
PlantGroup::initMember(long, const JMapInfoIter&)=0x802DBA00
PlantGroup::placeOnCollisionFormCircle(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802DBCD0
PlantGroup::calcBoundingSphereRadius(const JGeometry::TVec3<float>&)=0x802DC3F0
PlantGroup::initAfterPlacement(void)=0x802DC560
PlantGroup::control(void)=0x802DC6F0
PlantGroup::emitHintEffect(void)=0x802DC9F0
PlantGroup::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802DCAF0
PlantGroup::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802DCBD0
PlantGroup::attackSensor(HitSensor*, HitSensor*)=0x802DCC50
PlantGroup::startClipped(void)=0x802DCDB0
PlantGroup::endClipped(void)=0x802DCE30
PlantMember::init(const JMapInfoIter&)=0x802DCF50
PlantMember::makeActorAppeared(void)=0x802DCFE0
PlantMember::appear(void)=0x802DD050
PlantMember::control(void)=0x802DD0E0
PlantMember::tryEmitHint(void)=0x802DD3E0
PlantMember::exeHint(void)=0x802DD450
PlantMember::exeShakeWeak(void)=0x802DD4B0
PlantMember::exeShakeMiddle(void)=0x802DD550
PlantMember::exeShakeStrong(void)=0x802DD5F0
PlantMember::initPosture(bool)=0x802DD690
PlantMember::tryShake(HitSensor*)=0x802DD950
PlantMember::tryPush(const JGeometry::TVec3<float>&, float, long)=0x802DDAB0
PlantMember::animControl(PlantGroup*)=0x802DDD70
PlantMember::generateItem(PlantGroup*)=0x802DDE10
PlantGroup::__dt(void)=0x802DDED0
PlantMember::__dt(void)=0x802DDF30
short::(nit_\PlantGroup_cpp)=0x802DDF90
NrvPlantMember::HostTypeNrvWait::__ct(void)=0x802DDFE0
NrvPlantMember::HostTypeNrvHint::__ct(void)=0x802DDFF0
NrvPlantMember::HostTypeNrvShakeWeak::__ct(void)=0x802DE000
NrvPlantMember::HostTypeNrvShakeMiddle::__ct(void)=0x802DE010
NrvPlantMember::HostTypeNrvShakeStrong::__ct(void)=0x802DE020
NrvPlantMember::HostTypeNrvShakeStrong::execute(Spine*) const=0x802DE030
NrvPlantMember::HostTypeNrvShakeMiddle::execute(Spine*) const=0x802DE040
NrvPlantMember::HostTypeNrvShakeWeak::execute(Spine*) const=0x802DE050
NrvPlantMember::HostTypeNrvHint::execute(Spine*) const=0x802DE060
NrvPlantMember::HostTypeNrvWait::execute(Spine*) const=0x802DE070
PlantPoint::__ct(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x802DE0C0
PlantPoint::setAxisAndPos(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x802DE1B0
PlantRailInfo::__ct(const JMapInfoIter&, float)=0x802DE220
PlantRailInfo::calcPosAndAxisY(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, float) const=0x802DE400
PlantRailInfo::calcNearestPointPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, long) const=0x802DE5B0
PlayerFollowPass::__ct(void)=0x802DE650
PlayerFollowPass::initAfterPlacement(void)=0x802DE710
PlayerFollowPass::movement(void)=0x802DE720
MR::createPlayerFollowPass(void)=0x802DEB80
PlayerFollowPass::__dt(void)=0x802DECE0
PoleObstacleParts::__ct(const char*, long, const char*)=0x802DED40
PoleObstacleParts::init(const JMapInfoIter&)=0x802DEDA0
PoleObstacleParts::initAfterPlacement(void)=0x802DEE30
PoleObstacleParts::calcAndSetBaseMtx(void)=0x802DEF10
PoleObstacleParts::__dt(void)=0x802DEF90
@unnamed@PowerStar_cpp@::setupColor(LiveActor*, bool, int)=0x802DF170
@unnamed@PowerStar_cpp@::setupColorGrandStar(LiveActor*, bool)=0x802DF260
@unnamed@PowerStar_cpp@::requestPointLight(const LiveActor*, int)=0x802DF300
PowerStar::__ct(const char*)=0x802DF4F0
PowerStar::init(const JMapInfoIter&)=0x802DF5C0
PowerStar::initAfterPlacement(void)=0x802DF790
PowerStar::appear(void)=0x802DF7A0
PowerStar::makeActorAppeared(void)=0x802DF7E0
PowerStar::requestAppear(void)=0x802DF830
PowerStar::setDemoAppearPos(const JGeometry::TVec3<float>&)=0x802DF8C0
PowerStar::isEndAppearDemo(void) const=0x802DF930
PowerStar::offAppearDemo(void)=0x802DF990
PowerStar::setupColor(const NameObj*, long)=0x802DFA20
PowerStar::setupColorAtResultSequence(LiveActor*, bool)=0x802DFAC0
PowerStar::requestPointLight(const LiveActor*, const NameObj*, long)=0x802DFB40
PowerStar::requestPointLightAtResultSequence(const LiveActor*)=0x802DFBB0
PowerStar::getPowerStarWaitRotateSpeed(void)=0x802DFBF0
PowerStar::getBtpFrameCurrentStage(long)=0x802DFC00
PowerStar::isCurrentStageKoopaVs3(void)=0x802DFC50
PowerStar::initShadowPowerStar(LiveActor*, bool)=0x802DFC60
PowerStar::control(void)=0x802DFD50
PowerStar::calcAndSetBaseMtx(void)=0x802DFE20
PowerStar::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802DFF90
PowerStar::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802DFFE0
PowerStar::initMapToolInfo(const JMapInfoIter&)=0x802E0120
PowerStar::initModel(void)=0x802E0250
PowerStar::initSensorGrandStar(void)=0x802E0440
PowerStar::initShadow(const JMapInfoIter&)=0x802E0650
PowerStar::initPosture(void)=0x802E06E0
PowerStar::endAppearDemo(void)=0x802E0890
PowerStar::getNearestAppearPoint(const JGeometry::TVec3<float>&) const=0x802E0930
PowerStar::getAppearCameraActor(void)=0x802E09E0
PowerStar::getAppearCameraInfo(void) const=0x802E0A00
PowerStar::requestAppearOrWait(void)=0x802E0A20
PowerStar::calcAppearDemoRiseTrans(JGeometry::TVec3<float>*, float) const=0x802E0B40
PowerStar::processWait(float)=0x802E0DF0
PowerStar::exeAppearDemoRise(void)=0x802E0FD0
PowerStar::exeAppearDemoMove(void)=0x802E1090
PowerStar::exeWait(void)=0x802E14D0
PowerStar::exeStageClearDemo(void)=0x802E1560
PowerStar::__dt(void)=0x802E17C0
short::(nit_\PowerStar_cpp)=0x802E1820
NrvPowerStar::PowerStarNrvWaitStartAppear::__ct(void)=0x802E1880
NrvPowerStar::PowerStarNrvAppearDemoRise::__ct(void)=0x802E1890
NrvPowerStar::PowerStarNrvAppearDemoMove::__ct(void)=0x802E18A0
NrvPowerStar::PowerStarNrvWait::__ct(void)=0x802E18D0
NrvPowerStar::PowerStarNrvStageClearDemo::__ct(void)=0x802E18E0
NrvPowerStar::PowerStarNrvStageClearDemo::execute(Spine*) const=0x802E18F0
NrvPowerStar::PowerStarNrvWait::execute(Spine*) const=0x802E1900
NrvPowerStar::PowerStarNrvAppearDemoMove::execute(Spine*) const=0x802E1930
NrvPowerStar::PowerStarNrvAppearDemoRise::execute(Spine*) const=0x802E1940
NrvPowerStar::PowerStarNrvWaitStartAppear::execute(Spine*) const=0x802E1950
PowerStarAppearPoint::__ct(const char*)=0x802E1960
PowerStarAppearPoint::init(const JMapInfoIter&)=0x802E19B0
PowerStarAppearPoint::__dt(void)=0x802E1A30
PowerStarHolder::__ct(const char*)=0x802E1A90
PowerStarHolder::init(const JMapInfoIter&)=0x802E1AE0
PowerStarHolder::registerPowerStar(PowerStar*, int)=0x802E1AF0
PowerStarHolder::requestAppearPowerStar(int, const JGeometry::TVec3<float>*, bool)=0x802E1B60
PowerStarHolder::appearPowerStarWithoutDemo(int)=0x802E1C00
PowerStarHolder::getAppearedPowerStar(int) const=0x802E1C50
PowerStarHolder::findPowerStarRequestInfo(int) const=0x802E1CA0
MR::registerPowerStar(PowerStar*, int)=0x802E1CE0
PowerStarFunction::isEndPowerStarAppearDemo(int)=0x802E1D30
PowerStarFunction::findPowerStar(int)=0x802E1D70
PowerStarHolder::__dt(void)=0x802E1DB0
PressureMessenger::__ct(MsgSharedGroup*, const char*)=0x802E1E10
PressureMessenger::init(const JMapInfoIter&)=0x802E1E70
PressureMessenger::exeSync(void)=0x802E1EE0
PressureBase::__ct(const char*)=0x802E1F60
PressureBase::init(const JMapInfoIter&)=0x802E1FF0
MR::Functor<PressureBase>(PressureBase*, M12PressureBaseFPCvPv_v_Q22MR51FunctorV0M<PressureBase*,M12PressureBaseFPCvPv_v>)=0x802E23D0
PressureBase::initAfterPlacement(void)=0x802E2410
PressureBase::calcAndSetBaseMtx(void)=0x802E24A0
PressureBase::control(void)=0x802E2510
PressureBase::movement(void)=0x802E2570
PressureBase::exeBound(void)=0x802E25B0
PressureBase::exeRelax(void)=0x802E26D0
PressureBase::exeFirstWait(void)=0x802E2710
PressureBase::exeWait(void)=0x802E2760
PressureBase::exePrepareToShot(void)=0x802E2810
PressureBase::exeShot(void)=0x802E2880
PressureBase::attackSensor(HitSensor*, HitSensor*)=0x802E2990
PressureBase::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802E2A00
PressureBase::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E2A10
PressureBase::startWait(void)=0x802E2AA0
PressureBase::startRelax(void)=0x802E2AF0
PressureBase::initBullet(const JMapInfoIter&)=0x802E2B80
PressureBase::shotBullet(float)=0x802E2B90
PressureBase::calcJointCannonV(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E2BA0
PressureBase::isShotTypeOnGravity(void) const=0x802E2D70
PressureBase::isShotTypeFollow(void) const=0x802E2D80
JointControlDelegator<PressureBase>::__dt(void)=0x802E2DA0
JointControlDelegator<PressureBase>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E2DE0
JointControlDelegator<PressureBase>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E2E50
MR::FunctorV0M<PressureBase*,M12PressureBaseFPCvPv_v>::__cl(void) const=0x802E2EC0
MR::FunctorV0M<PressureBase*,M12PressureBaseFPCvPv_v>::clone(JKRHeap*) const=0x802E2EF0
PressureMessenger::__dt(void)=0x802E2F60
short::(nit_\PressureBase_cpp)=0x802E2FC0
NrvPressureMessenger::PressureMessengerNrvSync::__ct(void)=0x802E3030
NrvPressureBase::PressureBaseNrvRelaxStart::__ct(void)=0x802E3040
NrvPressureBase::PressureBaseNrvWaitStart::__ct(void)=0x802E3050
NrvPressureBase::PressureBaseNrvRelax::__ct(void)=0x802E3060
NrvPressureBase::PressureBaseNrvSyncWait::__ct(void)=0x802E3070
NrvPressureBase::PressureBaseNrvFirstWait::__ct(void)=0x802E3080
NrvPressureBase::PressureBaseNrvWait::__ct(void)=0x802E30A0
NrvPressureBase::PressureBaseNrvPrepareToShot::__ct(void)=0x802E30B0
NrvPressureBase::PressureBaseNrvShot::__ct(void)=0x802E30C0
NrvPressureBase::PressureBaseNrvShot::execute(Spine*) const=0x802E30D0
NrvPressureBase::PressureBaseNrvPrepareToShot::execute(Spine*) const=0x802E30E0
NrvPressureBase::PressureBaseNrvWait::execute(Spine*) const=0x802E30F0
NrvPressureBase::PressureBaseNrvFirstWait::execute(Spine*) const=0x802E3150
NrvPressureBase::PressureBaseNrvSyncWait::execute(Spine*) const=0x802E3160
NrvPressureBase::PressureBaseNrvRelax::execute(Spine*) const=0x802E3170
NrvPressureBase::PressureBaseNrvWaitStart::execute(Spine*) const=0x802E3180
NrvPressureBase::PressureBaseNrvRelaxStart::execute(Spine*) const=0x802E3190
NrvPressureMessenger::PressureMessengerNrvSync::execute(Spine*) const=0x802E31A0
PullTarget::exeWait(void)=0x802E31D0
PullTarget::exePull(void)=0x802E3220
PullTarget::__ct(void)=0x802E32E0
PullTarget::control(void)=0x802E3490
PullTarget::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E34E0
PullTarget::__dt(void)=0x802E3550
PullTargetBridge::__ct(const char*)=0x802E35B0
PullTargetBridge::init(const JMapInfoIter&)=0x802E3610
PullTargetBridge::exePull(void)=0x802E3750
PullTargetBridge::control(void)=0x802E37D0
PullTargetBridge::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E3890
PullTargetBridge::tryPull(void)=0x802E3970
PullTargetBridge::__dt(void)=0x802E3A60
short::(nit_\PullTargetBridge_cpp)=0x802E3AC0
NrvPullTargetBridge::PullTargetBridgeNrvWait::__ct(void)=0x802E3B00
NrvPullTargetBridge::PullTargetBridgeNrvPull::__ct(void)=0x802E3B10
NrvPullTargetBridge::PullTargetBridgeNrvFall::__ct(void)=0x802E3B20
NrvPullTargetBridge::PullTargetBridgeNrvFall::execute(Spine*) const=0x802E3B30
NrvPullTargetBridge::PullTargetBridgeNrvPull::execute(Spine*) const=0x802E3B80
NrvPullTargetBridge::PullTargetBridgeNrvWait::execute(Spine*) const=0x802E3B90
PullTargetDrawer::__ct(const char*)=0x802E3BE0
PullTargetDrawer::init(const JMapInfoIter&)=0x802E3C70
PullTargetDrawer::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E4490
PullTargetDrawer::calcAndSetBaseMtx(void)=0x802E4550
JointControlDelegator<PullTargetDrawer>::__dt(void)=0x802E4B10
JointControlDelegator<PullTargetDrawer>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E4B50
JointControlDelegator<PullTargetDrawer>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E4BC0
PullTargetDrawer::__dt(void)=0x802E4C30
short::(nit_\PullTargetDrawer_cpp)=0x802E4C90
PunchBox::__ct(const char*)=0x802E4D80
PunchBox::init(const JMapInfoIter&)=0x802E4DC0
PunchBox::initAfterPlacement(void)=0x802E4F40
PunchBox::attackSensor(HitSensor*, HitSensor*)=0x802E4F90
PunchBox::control(void)=0x802E5060
PunchBox::calcAndSetBaseMtx(void)=0x802E5090
PunchBox::exeWait(void)=0x802E50F0
PunchBox::exeHit(void)=0x802E5170
PunchBox::makeActorAppeared(void)=0x802E5230
PunchBox::makeActorDead(void)=0x802E5270
PunchBox::kill(void)=0x802E5280
PunchBox::doHit(HitSensor*, HitSensor*)=0x802E52F0
PunchBox::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802E53D0
PunchBox::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802E5520
PunchBox::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E5560
MR::FunctorV0M<PunchBox*,M8PunchBoxFPCvPv_v>::__cl(void) const=0x802E55B0
MR::FunctorV0M<PunchBox*,M8PunchBoxFPCvPv_v>::clone(JKRHeap*) const=0x802E55E0
PunchBox::__dt(void)=0x802E5650
short::(nit_\PunchBox_cpp)=0x802E56B0
NrvPunchBox::PunchBoxNrvWait::__ct(void)=0x802E56F0
NrvPunchBox::PunchBoxNrvHit::__ct(void)=0x802E5700
NrvPunchBox::PunchBoxNrvHidden::__ct(void)=0x802E5710
NrvPunchBox::PunchBoxNrvHidden::execute(Spine*) const=0x802E5720
NrvPunchBox::PunchBoxNrvHit::execute(Spine*) const=0x802E5730
NrvPunchBox::PunchBoxNrvWait::execute(Spine*) const=0x802E5740
PunchingKinoko::__ct(const char*)=0x802E5750
PunchingKinoko::init(const JMapInfoIter&)=0x802E57F0
PunchingKinoko::makeActorAppeared(void)=0x802E5B20
PunchingKinoko::kill(void)=0x802E5B60
PunchingKinoko::makeActorDead(void)=0x802E5B70
PunchingKinoko::control(void)=0x802E5BB0
PunchingKinoko::calcAndSetBaseMtx(void)=0x802E5C30
PunchingKinoko::attackSensor(HitSensor*, HitSensor*)=0x802E5CA0
PunchingKinoko::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802E5F90
PunchingKinoko::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802E6170
PunchingKinoko::receiveMsgPush(HitSensor*, HitSensor*)=0x802E6230
PunchingKinoko::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E6430
PunchingKinoko::exeWait(void)=0x802E6960
PunchingKinoko::exeSwing(void)=0x802E6A00
PunchingKinoko::exePunched(void)=0x802E6B40
PunchingKinoko::exePunchedBrake(void)=0x802E6BF0
PunchingKinoko::exeHitted(void)=0x802E6CC0
PunchingKinoko::exeCrushed(void)=0x802E6D50
PunchingKinoko::exeCrushedEnd(void)=0x802E6E60
PunchingKinoko::addVelocityKeepHeight(void)=0x802E6FC0
JointControlDelegator<PunchingKinoko>::__dt(void)=0x802E7310
JointControlDelegator<PunchingKinoko>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E7350
JointControlDelegator<PunchingKinoko>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x802E73C0
MR::FunctorV0M<PunchingKinoko*,M14PunchingKinokoFPCvPv_v>::__cl(void) const=0x802E7430
MR::FunctorV0M<PunchingKinoko*,M14PunchingKinokoFPCvPv_v>::clone(JKRHeap*) const=0x802E7460
PunchingKinoko::__dt(void)=0x802E74D0
short::(nit_\PunchingKinoko_cpp)=0x802E7530
NrvPunchingKinoko::PunchingKinokoNrvCrushedEnd::execute(Spine*) const=0x802E7660
NrvPunchingKinoko::PunchingKinokoNrvCrushed::execute(Spine*) const=0x802E7670
NrvPunchingKinoko::PunchingKinokoNrvHitted::execute(Spine*) const=0x802E76C0
NrvPunchingKinoko::PunchingKinokoNrvPunchedBrake::execute(Spine*) const=0x802E76D0
NrvPunchingKinoko::PunchingKinokoNrvPunched::execute(Spine*) const=0x802E76E0
NrvPunchingKinoko::PunchingKinokoNrvSwing::execute(Spine*) const=0x802E76F0
NrvPunchingKinoko::PunchingKinokoNrvWait::execute(Spine*) const=0x802E7700
PurpleCoinCompleteWatcher::__ct(const char*)=0x802E7740
PurpleCoinCompleteWatcher::init(const JMapInfoIter&)=0x802E7780
PurpleCoinCompleteWatcher::exeWait(void)=0x802E77F0
PurpleCoinCompleteWatcher::__dt(void)=0x802E7850
short::(nit_\PurpleCoinCompleteWatcher_cpp)=0x802E78B0
NrvPurpleCoinCompleteWatcher::PurpleCoinCompleteWatcherNrvWait::__ct(void)=0x802E78E0
NrvPurpleCoinCompleteWatcher::PurpleCoinCompleteWatcherNrvComplete::__ct(void)=0x802E78F0
NrvPurpleCoinCompleteWatcher::PurpleCoinCompleteWatcherNrvComplete::execute(Spine*) const=0x802E7900
NrvPurpleCoinCompleteWatcher::PurpleCoinCompleteWatcherNrvWait::execute(Spine*) const=0x802E7910
PurpleCoinHolder::__ct(void)=0x802E7920
PurpleCoinHolder::initAfterPlacement(void)=0x802E7980
MR::createPurpleCoinHolder(void)=0x802E7990
MR::addToPurpleCoinHolder(const NameObj*, Coin*)=0x802E79A0
PurpleCoinHolder::__dt(void)=0x802E79E0
QuestionCoin::__ct(const char*)=0x802E7A40
QuestionCoin::init(const JMapInfoIter&)=0x802E7AF0
QuestionCoin::initAfterPlacement(void)=0x802E7D40
QuestionCoin::makeActorAppeared(void)=0x802E8010
QuestionCoin::appear(void)=0x802E8050
QuestionCoin::kill(void)=0x802E80D0
QuestionCoin::calcAndSetBaseMtx(void)=0x802E8130
QuestionCoin::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802E81B0
QuestionCoin::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E81C0
QuestionCoin::startClipped(void)=0x802E8300
QuestionCoin::endClipped(void)=0x802E8340
QuestionCoin::initFromJMapInfoArg(const JMapInfoIter&)=0x802E8380
QuestionCoin::initShadow(void)=0x802E8420
QuestionCoin::updateActorMtx(void)=0x802E8470
QuestionCoin::exeThrowActor(void)=0x802E85F0
QuestionCoin::exeCaught(void)=0x802E87A0
MR::FunctorV0M<QuestionCoin*,M12QuestionCoinFPCvPv_v>::__cl(void) const=0x802E8830
MR::FunctorV0M<QuestionCoin*,M12QuestionCoinFPCvPv_v>::clone(JKRHeap*) const=0x802E8860
QuestionCoin::__dt(void)=0x802E88D0
short::(nit_\QuestionCoin_cpp)=0x802E8930
NrvQuestionCoin::HostTypeWait::__ct(void)=0x802E8970
NrvQuestionCoin::HostTypeThrowActor::__ct(void)=0x802E8980
NrvQuestionCoin::HostTypeCaught::__ct(void)=0x802E8990
NrvQuestionCoin::HostTypeDead::__ct(void)=0x802E89A0
NrvQuestionCoin::HostTypeDead::execute(Spine*) const=0x802E89B0
NrvQuestionCoin::HostTypeCaught::execute(Spine*) const=0x802E89C0
NrvQuestionCoin::HostTypeThrowActor::execute(Spine*) const=0x802E89D0
NrvQuestionCoin::HostTypeWait::execute(Spine*) const=0x802E89E0
QuicksandPlanet::__ct(const char*)=0x802E89F0
QuicksandPlanet::init(const JMapInfoIter&)=0x802E8A40
QuicksandPlanet::makeActorAppeared(void)=0x802E8B20
QuicksandPlanet::startClipped(void)=0x802E8B60
QuicksandPlanet::endClipped(void)=0x802E8BA0
QuicksandPlanet::isPlayerMoveable(void)=0x802E8BE0
QuicksandPlanet::__dt(void)=0x802E8C60
short::(nit_\QuicksandPlanet_cpp)=0x802E8CC0
NrvQuicksandPlanet::QuicksandPlanetNrvMove::__ct(void)=0x802E8CD0
NrvQuicksandPlanet::QuicksandPlanetNrvMove::execute(Spine*) const=0x802E8CE0
RailCoin::__ct(const char*)=0x802E8D40
RailCoin::initCoinArray(const JMapInfoIter&)=0x802E8D80
RailCoin::placementCoin(void)=0x802E8DD0
RailCoin::getCoinName(void) const=0x802E8E30
RailCoin::placementNormalRail(void)=0x802E8E50
RailCoin::placementMercatorRail(void)=0x802E8F50
MR::createRailCoin(const char*)=0x802E8FA0
MR::createRailPurpleCoin(const char*)=0x802E8FE0
@unnamed@RailCoin_cpp@::RailCoinMercatorDivInfo::setPosition(long, const JGeometry::TVec3<float>&)=0x802E9030
RailCoin::__dt(void)=0x802E9040
RailMoveDisappearStep::__ct(const char*)=0x802E90A0
RailMoveDisappearStep::init(const JMapInfoIter&)=0x802E90F0
RailMoveDisappearStep::__dt(void)=0x802E9380
short::(nit_\RailMoveDisappearStep_cpp)=0x802E93E0
RailMoveNormalLift::__ct(const char*)=0x802E9510
RailMoveNormalLift::init(const JMapInfoIter&)=0x802E9570
RailMoveNormalLift::exeMove(void)=0x802E9660
RailMoveNormalLift::__dt(void)=0x802E96E0
short::(nit_\RailMoveNormalLift_cpp)=0x802E9740
NrvRailMoveNormalLift::RailMoveNormalLiftNrvMove::__ct(void)=0x802E9750
NrvRailMoveNormalLift::RailMoveNormalLiftNrvMove::execute(Spine*) const=0x802E9760
RailMoveObj::__ct(const char*)=0x802E9770
RailMoveObj::__ct(const char*, const char*)=0x802E97D0
RailMoveObj::init(const JMapInfoIter&)=0x802E9830
RailMoveObj::setNerveMove(void)=0x802E9A90
RailMoveObj::getSoundCalcPos(void)=0x802E9AA0
RailMoveObj::startClipped(void)=0x802E9AB0
RailMoveObj::endClipped(void)=0x802E9B00
RailMoveObj::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802E9B70
RailMoveObj::initDemoAction(void)=0x802E9BB0
RailMoveObj::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x802E9C10
RailMoveObj::startMoveInner(void)=0x802E9C20
RailMoveObj::move(void)=0x802E9C80
RailMoveObj::doAtEndPoint(void)=0x802E9CC0
RailMoveObj::endMove(void)=0x802E9D30
RailMoveObj::setNerveWait(void)=0x802E9D60
RailMoveObj::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802E9D70
RailMoveObj::exeWait(void)=0x802E9DF0
RailMoveObj::tryStartMove(void)=0x802E9EB0
RailMoveObj::exeMove(void)=0x802E9EE0
RailMoveObjPress::init(const JMapInfoIter&)=0x802E9FD0
RailMoveObjSwitchWarpEnd::tryStartMove(void)=0x802EA010
RailMoveObjSwitchWarpEnd::startMoveInner(void)=0x802EA0A0
RailMoveObjSwitchWarpEnd::move(void)=0x802EA120
RailMoveObjSwitchWarpEnd::doAtEndPoint(void)=0x802EA1B0
RailMoveObjBreakAtEnd::doAtEndPoint(void)=0x802EA1F0
RailMoveObjShakeCamera::__ct(const char*)=0x802EA260
RailMoveObjShakeCamera::doAtEndPoint(void)=0x802EA2A0
RailMoveIndirectObj::connectToScene(const MapObjActorInitInfo&)=0x802EA320
RailMoveWithIndirectModelObj::__ct(const char*)=0x802EA330
RailMoveWithIndirectModelObj::init(const JMapInfoIter&)=0x802EA380
RailMoveObjSwitchShadow::init(const JMapInfoIter&)=0x802EA3D0
RailMoveObjSwitchShadow::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802EA410
RailMoveObjSwitchShadow::startOnShadow(void)=0x802EA460
RailDemoMoveObj::init(const JMapInfoIter&)=0x802EA470
RailDemoMoveObj::tryStartMove(void)=0x802EA4F0
RailDemoMoveObj::startMoveInner(void)=0x802EA540
RailDemoMoveObj::move(void)=0x802EA550
RailDemoMoveObj::endMove(void)=0x802EA560
RailAndRotateMoveObj::__ct(const char*)=0x802EA5B0
RailAndRotateMoveObj::init(const JMapInfoIter&)=0x802EA5F0
RailAndRotateMoveObj::setupInitInfo(const JMapInfoIter&, MapObjActorInitInfo*)=0x802EA600
RailRotateMoveObj::__ct(const char*)=0x802EA610
RailRotateMoveObj::setupInitInfo(const JMapInfoIter&, MapObjActorInitInfo*)=0x802EA650
RailRotateMoveObj::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802EA660
RailRotateMoveObj::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802EA6C0
RailSeesawMoveObj::setupInitInfo(const JMapInfoIter&, MapObjActorInitInfo*)=0x802EA840
RailMoveDemoActionObj::__ct(const char*)=0x802EA850
RailMoveDemoActionObj::initDemoAction(void)=0x802EA890
RailMoveObj::exeDemoMove(void)=0x802EA8E0
RailMoveShadowDropYObj::__ct(const char*)=0x802EA960
RailMoveShadowDropYObj::init(const JMapInfoIter&)=0x802EA9B0
RailMoveShadowDropYObj::control(void)=0x802EAA10
RailMoveWithReverseAnimObj::startMoveInner(void)=0x802EAA60
RailMoveWithReverseAnimObj::doAtEndPoint(void)=0x802EAB00
RailMoveLavaProjmapObj::__ct(const char*)=0x802EABB0
RailMoveLavaProjmapObj::initAfterPlacement(void)=0x802EAC10
RailMoveLavaProjmapObj::updateProjmapMtx(void)=0x802EAD40
MR::FunctorV0M<RailMoveObjSwitchShadow*,M23RailMoveObjSwitchShadowFPCvPv_v>::__cl(void) const=0x802EAD50
MR::FunctorV0M<RailMoveObjSwitchShadow*,M23RailMoveObjSwitchShadowFPCvPv_v>::clone(JKRHeap*) const=0x802EAD80
RailMoveObjPress::__dt(void)=0x802EADF0
RailMoveObjSwitchWarpEnd::__dt(void)=0x802EAE50
RailMoveObjBreakAtEnd::__dt(void)=0x802EAEB0
RailMoveObjShakeCamera::__dt(void)=0x802EAF10
RailMoveIndirectObj::__dt(void)=0x802EAF70
RailMoveWithIndirectModelObj::__dt(void)=0x802EAFD0
RailMoveObjSwitchShadow::__dt(void)=0x802EB030
RailDemoMoveObj::__dt(void)=0x802EB090
RailAndRotateMoveObj::__dt(void)=0x802EB0F0
RailRotateMoveObj::__dt(void)=0x802EB150
RailSeesawMoveObj::__dt(void)=0x802EB1B0
RailMoveDemoActionObj::__dt(void)=0x802EB210
RailMoveShadowDropYObj::__dt(void)=0x802EB270
RailMoveWithReverseAnimObj::__dt(void)=0x802EB2D0
RailMoveLavaProjmapObj::__dt(void)=0x802EB330
short::(nit_\RailMoveObj_cpp)=0x802EB390
NrvRailMoveObj::HostTypeWait::__ct(void)=0x802EB3E0
NrvRailMoveObj::HostTypeWaitForPlayerOn::__ct(void)=0x802EB3F0
NrvRailMoveObj::HostTypeMove::__ct(void)=0x802EB400
NrvRailMoveObj::HostTypeDone::__ct(void)=0x802EB410
NrvRailMoveObj::RailMoveObjHostTypeDemoMove::__ct(void)=0x802EB420
NrvRailMoveObj::RailMoveObjHostTypeDemoMove::execute(Spine*) const=0x802EB430
NrvRailMoveObj::HostTypeDone::execute(Spine*) const=0x802EB440
NrvRailMoveObj::HostTypeMove::execute(Spine*) const=0x802EB450
NrvRailMoveObj::HostTypeWaitForPlayerOn::execute(Spine*) const=0x802EB460
NrvRailMoveObj::HostTypeWait::execute(Spine*) const=0x802EB470
RailMoveObjGenerator::__ct(const char*)=0x802EB480
RailMoveObjGenerator::init(const JMapInfoIter&)=0x802EB4E0
RailMoveObjGenerator::kill(void)=0x802EB5D0
KoopaJrLv2LiftGenerator::initRailMoveObjs(const JMapInfoIter&)=0x802EB7F0
RailMoveObjGenerator::__dt(void)=0x802EB8D0
KoopaJrLv2LiftGenerator::__dt(void)=0x802EB930
short::(nit_\RailMoveObjGenerator_cpp)=0x802EB990
CollapseRailMoveObj::__ct(const char*)=0x802EBAC0
CollapseRailMoveObj::init(const JMapInfoIter&)=0x802EBB00
CollapseRailMoveObj::exeAppear(void)=0x802EBC10
CollapseRailMoveObj::exeMove(void)=0x802EBC90
CollapseRailMoveObj::exeDisappear(void)=0x802EBCF0
CollapseRailMoveObj::__dt(void)=0x802EBD70
short::(nit_\CollapseRailMoveObj_cpp)=0x802EBDD0
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvAppear::__ct(void)=0x802EBE10
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvWait::__ct(void)=0x802EBE20
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvMove::__ct(void)=0x802EBE30
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvDisappear::__ct(void)=0x802EBE40
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvDisappear::execute(Spine*) const=0x802EBE50
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvMove::execute(Spine*) const=0x802EBE60
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvWait::execute(Spine*) const=0x802EBE70
NrvCollapseRailMoveObj::CollapseRailMoveObjNrvAppear::execute(Spine*) const=0x802EBEC0
RailPlacementPoleObstacle::__ct(const char*)=0x802EBED0
RailPlacementPoleObstacle::init(const JMapInfoIter&)=0x802EBF20
RailPlacementPoleObstacle::__dt(void)=0x802EC0B0
PoleObstacleGroup::__dt(void)=0x802EC110
RelayDrill2DPlanet::__ct(const char*)=0x802EC170
RelayDrill2DPlanet::init(const JMapInfoIter&)=0x802EC1B0
RelayDrill2DPlanet::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802EC210
RelayDrill2DPlanet::validateCollision(void)=0x802EC260
MR::FunctorV0M<RelayDrill2DPlanet*,M18RelayDrill2DPlanetFPCvPv_v>::__cl(void) const=0x802EC270
MR::FunctorV0M<RelayDrill2DPlanet*,M18RelayDrill2DPlanetFPCvPv_v>::clone(JKRHeap*) const=0x802EC2A0
RelayDrill2DPlanet::__dt(void)=0x802EC310
RepeatBlockAtom::appear(void)=0x802EC410
RepeatBlockHead::kill(void)=0x802EC7B0
RepeatBlockHead::__dt(void)=0x802ECA70
RepeatBlockTail::appear(void)=0x802ECAD0
RepeatBlockTail::kill(void)=0x802ECB10
RepeatBlock::__ct(const char*)=0x802ED090
RepeatBlock::init(const JMapInfoIter&)=0x802ED1B0
RepeatBlock::makeActorAppeared(void)=0x802ED4E0
RepeatBlock::kill(void)=0x802ED520
RepeatBlock::makeActorDead(void)=0x802ED590
RepeatBlock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802ED6F0
RepeatBlock::__dt(void)=0x802EE5C0
RepeatBlockAtom::__dt(void)=0x802EE620
RepeatBlockTail::__dt(void)=0x802EE680
short::(nit_\RepeatBlock_cpp)=0x802EE6E0
RepeatBlockShadowDrawer::__dt(void)=0x802F0C30
RepeatTimerBlock::__ct(const char*)=0x802F0C90
RepeatTimerBlock::init(const JMapInfoIter&)=0x802F0D10
RepeatTimerBlock::control(void)=0x802F0E80
RepeatTimerBlock::__dt(void)=0x802F1590
short::(nit_\RepeatTimerBlock_cpp)=0x802F15F0
RestartObj::__ct(const char*)=0x802F1700
RestartObj::init(const JMapInfoIter&)=0x802F1750
RestartObj::exeWait(void)=0x802F1890
RestartObj::exeCollect(void)=0x802F1920
RestartObj::exeShake(void)=0x802F19C0
RestartObj::exeAfter(void)=0x802F1A50
RestartObj::initAfterPlacement(void)=0x802F1AC0
RestartObj::calcAndSetBaseMtx(void)=0x802F1AD0
RestartObj::updateHitSensor(HitSensor*)=0x802F1B30
RestartObj::attackSensor(HitSensor*, HitSensor*)=0x802F1BD0
RestartObj::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802F1D00
RestartObj::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802F1E10
RestartObj::changeTexture(bool)=0x802F1F20
RestartObj::__dt(void)=0x802F1F80
short::(nit_\RestartObj_cpp)=0x802F1FE0
NrvRestartObj::RestartObjNrvWait::__ct(void)=0x802F2040
NrvRestartObj::RestartObjNrvCollect::__ct(void)=0x802F2050
NrvRestartObj::RestartObjNrvCollectAfter::__ct(void)=0x802F2060
NrvRestartObj::RestartObjNrvShake::__ct(void)=0x802F2070
NrvRestartObj::RestartObjNrvAfter::__ct(void)=0x802F2080
NrvRestartObj::RestartObjNrvAfter::execute(Spine*) const=0x802F2090
NrvRestartObj::RestartObjNrvShake::execute(Spine*) const=0x802F20A0
NrvRestartObj::RestartObjNrvCollectAfter::execute(Spine*) const=0x802F20B0
NrvRestartObj::RestartObjNrvCollect::execute(Spine*) const=0x802F2100
NrvRestartObj::RestartObjNrvWait::execute(Spine*) const=0x802F2110
RisePictureBookPlanet::__ct(const char*)=0x802F2120
RisePictureBookPlanet::init(const JMapInfoIter&)=0x802F2170
RisePictureBookPlanet::calcAnim(void)=0x802F2300
RisePictureBookPlanet::exeWait(void)=0x802F2360
RisePictureBookPlanet::exeMove(void)=0x802F23C0
RisePictureBookPlanet::exeReverse(void)=0x802F2420
RisePictureBookPlanet::calcFirePos(void)=0x802F2480
RisePictureBookPlanet::__dt(void)=0x802F2550
short::(nit_\RisePictureBookPlanet_cpp)=0x802F25B0
NrvRisePictureBookPlanet::RisePictureBookPlanetNrvWait::__ct(void)=0x802F25F0
NrvRisePictureBookPlanet::RisePictureBookPlanetNrvMove::__ct(void)=0x802F2600
NrvRisePictureBookPlanet::RisePictureBookPlanetNrvReverse::__ct(void)=0x802F2610
NrvRisePictureBookPlanet::RisePictureBookPlanetNrvReverse::execute(Spine*) const=0x802F2620
NrvRisePictureBookPlanet::RisePictureBookPlanetNrvMove::execute(Spine*) const=0x802F2630
NrvRisePictureBookPlanet::RisePictureBookPlanetNrvWait::execute(Spine*) const=0x802F2640
Rock::__ct(float, const char*)=0x802F2650
Rock::init(const JMapInfoIter&)=0x802F2770
Rock::appear(void)=0x802F2970
Rock::kill(void)=0x802F2AC0
Rock::getAppearFrame(void)=0x802F2B30
Rock::getType(const JMapInfoIter&)=0x802F2B40
Rock::getAppearStarPieceNum(Rock::Type)=0x802F2BD0
Rock::control(void)=0x802F2BF0
Rock::calcAndSetBaseMtx(void)=0x802F2E70
Rock::attackSensor(HitSensor*, HitSensor*)=0x802F3040
Rock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802F3200
Rock::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802F3320
Rock::initMapToolInfo(const JMapInfoIter&)=0x802F3420
Rock::initModel(void)=0x802F3520
Rock::initSensor(void)=0x802F3680
Rock::initEffect(void)=0x802F37C0
Rock::isBreakByWall(void) const=0x802F3850
Rock::move(float)=0x802F38D0
Rock::calcBaseMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*) const=0x802F3980
Rock::isInClippingRange(void) const=0x802F3A50
Rock::startSoundWanwanVoice(void)=0x802F3B00
Rock::startRollLevelSound(bool)=0x802F3BB0
Rock::tryFreeze(const Nerve*)=0x802F3CC0
Rock::setBtkForEnvironmentMap(LiveActor*, const char*)=0x802F3D30
Rock::rumblePadAndCamera(void)=0x802F3E30
Rock::setNerveBreak(bool)=0x802F3EA0
Rock::updateRotateX(float)=0x802F3EF0
Rock::appearStarPiece(void)=0x802F3F50
Rock::moveOnRail(float, float, bool)=0x802F3FC0
Rock::isForceInvalidBindSection(void) const=0x802F40A0
Rock::tryBreakReachedGoal(void)=0x802F4120
Rock::exeAppear(void)=0x802F4190
Rock::exeAppearMoveInvalidBind(void)=0x802F43F0
Rock::exeMove(void)=0x802F44D0
Rock::exeMoveInvalidBind(void)=0x802F4800
Rock::exeBreak(void)=0x802F48A0
Rock::exeFreeze(void)=0x802F4BD0
Rock::__dt(void)=0x802F4DF0
short::(nit_\Rock_cpp)=0x802F4E50
NrvRock::RockNrvAppear::__ct(void)=0x802F4EA0
NrvRock::RockNrvAppearMoveInvalidBind::__ct(void)=0x802F4EB0
NrvRock::RockNrvMove::__ct(void)=0x802F4EC0
NrvRock::RockNrvMoveInvalidBind::__ct(void)=0x802F4ED0
NrvRock::RockNrvBreak::__ct(void)=0x802F4EE0
NrvRock::RockNrvFreeze::__ct(void)=0x802F4EF0
NrvRock::RockNrvFreeze::execute(Spine*) const=0x802F4F00
NrvRock::RockNrvBreak::execute(Spine*) const=0x802F4F10
NrvRock::RockNrvMoveInvalidBind::execute(Spine*) const=0x802F4F20
NrvRock::RockNrvMove::execute(Spine*) const=0x802F4F30
NrvRock::RockNrvAppearMoveInvalidBind::execute(Spine*) const=0x802F4F40
NrvRock::RockNrvAppear::execute(Spine*) const=0x802F4F50
RockBreakCage::__ct(const char*)=0x802F4F60
RockBreakCage::init(const JMapInfoIter&)=0x802F4FB0
RockBreakCage::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802F5060
RockBreakCage::kill(void)=0x802F5180
RockBreakCage::exeDamage(void)=0x802F51D0
RockBreakCage::__dt(void)=0x802F5230
short::(nit_\RockBreakCage_cpp)=0x802F5290
NrvRockBreakCage::RockBreakCageNrvWait::__ct(void)=0x802F52D0
NrvRockBreakCage::RockBreakCageNrvDamage::__ct(void)=0x802F52E0
NrvRockBreakCage::RockBreakCageNrvBreak::__ct(void)=0x802F52F0
NrvRockBreakCage::RockBreakCageNrvBreak::execute(Spine*) const=0x802F5300
NrvRockBreakCage::RockBreakCageNrvDamage::execute(Spine*) const=0x802F5350
NrvRockBreakCage::RockBreakCageNrvWait::execute(Spine*) const=0x802F5360
RockCreator::__ct(const char*)=0x802F5370
RockCreator::init(const JMapInfoIter&)=0x802F53E0
Rock::__defctor(void)=0x802F55D0
RockCreator::appear(void)=0x802F55E0
RockCreator::kill(void)=0x802F5640
RockCreator::invalidate(void)=0x802F56D0
RockCreator::initMapToolInfo(const JMapInfoIter&)=0x802F5720
RockCreator::create(void)=0x802F57B0
RockCreator::exeActive(void)=0x802F5830
MR::FunctorV0M<RockCreator*,M11RockCreatorFPCvPv_v>::__cl(void) const=0x802F58C0
MR::FunctorV0M<RockCreator*,M11RockCreatorFPCvPv_v>::clone(JKRHeap*) const=0x802F58F0
RockCreator::__dt(void)=0x802F5960
short::(nit_\RockCreator_cpp)=0x802F59C0
NrvRockCreator::RockCreatorNrvActive::__ct(void)=0x802F59F0
NrvRockCreator::RockCreatorNrvDeactive::__ct(void)=0x802F5A00
NrvRockCreator::RockCreatorNrvDeactive::execute(Spine*) const=0x802F5A10
NrvRockCreator::RockCreatorNrvActive::execute(Spine*) const=0x802F5A20
RockReflector::__ct(const char*)=0x802F5A30
RockReflector::init(const JMapInfoIter&)=0x802F5A70
RockReflector::isNerveWait(void) const=0x802F5AD0
RockReflector::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802F5AE0
RockReflector::exeReflect(void)=0x802F5B80
RockReflector::__dt(void)=0x802F5BE0
short::(nit_\RockReflector_cpp)=0x802F5C40
NrvRockReflector::RockReflectorNrvWait::__ct(void)=0x802F5C70
NrvRockReflector::RockReflectorNrvReflect::__ct(void)=0x802F5C80
NrvRockReflector::RockReflectorNrvReflect::execute(Spine*) const=0x802F5C90
NrvRockReflector::RockReflectorNrvWait::execute(Spine*) const=0x802F5CA0
RollingWater::__ct(const char*)=0x802F5CB0
RollingWater::init(const JMapInfoIter&)=0x802F5DB0
RollingWater::kill(void)=0x802F5EC0
RollingWater::control(void)=0x802F5F10
RollingWater::calcAndSetBaseMtx(void)=0x802F6130
RollingWater::attackSensor(HitSensor*, HitSensor*)=0x802F6140
RollingWater::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802F6190
RollingWater::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802F6260
RollingWater::__dt(void)=0x802F6E40
short::(nit_\RollingWater_cpp)=0x802F6EA0
RollingWaterCreator::__ct(const char*)=0x802F6F60
RollingWaterCreator::init(const JMapInfoIter&)=0x802F6FC0
RollingWaterCreator::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802F71A0
RollingWaterCreator::__dt(void)=0x802F72E0
short::(nit_\RollingWaterCreator_cpp)=0x802F73A0
RotateHammerPressure::__ct(const char*)=0x802F73D0
RotateMoveObj::__dt(void)=0x802F7460
RotateHammerPressure::init(const JMapInfoIter&)=0x802F74C0
RotateHammerPressure::control(void)=0x802F7640
RotateHammerPressure::__dt(void)=0x802F7A20
short::(nit_\RotateHammerPressure_cpp)=0x802F7A80
RotateMoveObj::init(const JMapInfoIter&)=0x802F7B00
MR::Functor<RotateMoveObj>(RotateMoveObj*, M13RotateMoveObjFPCvPv_v_Q22MR53FunctorV0M<RotateMoveObj*,M13RotateMoveObjFPCvPv_v>)=0x802F7C90
RotateMoveObj::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802F7CD0
RotateMoveObj::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x802F7D60
RotateMoveObj::setStateMove(void)=0x802F7D70
RotateMoveObj::exeMove(void)=0x802F7DE0
RotateMoveObj::exeStop(void)=0x802F7ED0
MR::FunctorV0M<RotateMoveObj*,M13RotateMoveObjFPCvPv_v>::__cl(void) const=0x802F7F50
MR::FunctorV0M<RotateMoveObj*,M13RotateMoveObjFPCvPv_v>::clone(JKRHeap*) const=0x802F7F80
short::(nit_\RotateMoveObj_cpp)=0x802F7FF0
NrvRotateMoveObj::HostTypeWaitForPlayerOn::__ct(void)=0x802F8030
NrvRotateMoveObj::HostTypeWait::__ct(void)=0x802F8040
NrvRotateMoveObj::HostTypeMove::__ct(void)=0x802F8050
NrvRotateMoveObj::HostTypeStop::__ct(void)=0x802F8060
NrvRotateMoveObj::HostTypeStop::execute(Spine*) const=0x802F8070
NrvRotateMoveObj::HostTypeMove::execute(Spine*) const=0x802F8080
NrvRotateMoveObj::HostTypeWait::execute(Spine*) const=0x802F8090
NrvRotateMoveObj::HostTypeWaitForPlayerOn::execute(Spine*) const=0x802F80A0
RotateSeesawStep::__ct(const char*)=0x802F80E0
RotateSeesawStep::init(const JMapInfoIter&)=0x802F8130
RotateSeesawStep::exeWait(void)=0x802F8220
RotateSeesawStep::exeMove(void)=0x802F8290
RotateSeesawStep::__dt(void)=0x802F8300
short::(nit_\RotateSeesawStep_cpp)=0x802F8360
NrvRotateSeesawStep::RotateSeesawStepNrvWait::__ct(void)=0x802F8390
NrvRotateSeesawStep::RotateSeesawStepNrvMove::__ct(void)=0x802F83A0
NrvRotateSeesawStep::RotateSeesawStepNrvMove::execute(Spine*) const=0x802F83B0
NrvRotateSeesawStep::RotateSeesawStepNrvWait::execute(Spine*) const=0x802F83C0
SandBird::__ct(const char*)=0x802F83D0
SandBird::init(const JMapInfoIter&)=0x802F84B0
SandBird::control(void)=0x802F8660
SandBird::getBaseMtx(void) const=0x802F8730
SandBird::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802F8740
SandBird::__dt(void)=0x802F8DB0
short::(nit_\SandBird_cpp)=0x802F8E70
SandBirdParts::__ct(const char*, LiveActor*, HitSensor*)=0x802F8F60
SandBirdParts::init(const JMapInfoIter&)=0x802F8FE0
SandBirdParts::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802F90C0
SandBirdParts::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802F9190
SandBirdParts::control(void)=0x802F9200
SandBirdParts::calcAndSetBaseMtx(void)=0x802F9210
SandBirdParts::__dt(void)=0x802F9700
short::(nit_\SandBirdParts_cpp)=0x802F9760
SunakazeKunTrap::__ct(LiveActor*, const JGeometry::TVec3<float>&)=0x802F99F0
SunakazeKunTrap::init(const JMapInfoIter&)=0x802F9A80
SunakazeKunTrap::exeTrap(void)=0x802F9B70
SunakazeKunTrap::attackSensor(HitSensor*, HitSensor*)=0x802F9CC0
Sandstorm::__ct(const char*)=0x802F9D10
Sandstorm::init(const JMapInfoIter&)=0x802F9DC0
Sandstorm::exeNonActive(void)=0x802FA090
Sandstorm::exeWait(void)=0x802FA120
Sandstorm::exeStorm(void)=0x802FA180
Sandstorm::exeStormAdjust(void)=0x802FA230
Sandstorm::exeStormFix(void)=0x802FA2B0
Sandstorm::exeStormEnd(void)=0x802FA370
Sandstorm::control(void)=0x802FA440
Sandstorm::calcAndSetBaseMtx(void)=0x802FA500
Sandstorm::startClipped(void)=0x802FA560
Sandstorm::endClipped(void)=0x802FA5E0
Sandstorm::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802FA660
Sandstorm::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802FA780
Sandstorm::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802FA820
Sandstorm::updateHitSensor(HitSensor*)=0x802FA960
Sandstorm::initSandstormParam(void)=0x802FAA00
Sandstorm::initTrapModel(void)=0x802FAB50
Sandstorm::updateBindActorMtx(void)=0x802FAC60
Sandstorm::endBind(void)=0x802FAED0
Sandstorm::updateSpiral(void)=0x802FAFA0
Sandstorm::tryStartBind(HitSensor*)=0x802FB170
Sandstorm::tryTornadoJumpPlayer(void)=0x802FB2D0
Sandstorm::tryNonActive(void)=0x802FB330
SunakazeKunTrap::__dt(void)=0x802FB380
Sandstorm::__dt(void)=0x802FB3E0
short::(nit_\Sandstorm_cpp)=0x802FB440
NrvSunakazeKunTrap::SunakazeKunTrapNrvTrap::__ct(void)=0x802FB4A0
NrvSandstorm::SandstormNrvNonActive::__ct(void)=0x802FB4B0
NrvSandstorm::SandstormNrvWait::__ct(void)=0x802FB4C0
NrvSandstorm::SandstormNrvStorm::__ct(void)=0x802FB4D0
NrvSandstorm::SandstormNrvStormAdjust::__ct(void)=0x802FB4E0
NrvSandstorm::SandstormNrvStormFix::__ct(void)=0x802FB4F0
NrvSandstorm::SandstormNrvStormEnd::__ct(void)=0x802FB500
NrvSandstorm::SandstormNrvStormEnd::execute(Spine*) const=0x802FB510
NrvSandstorm::SandstormNrvStormFix::execute(Spine*) const=0x802FB520
NrvSandstorm::SandstormNrvStormAdjust::execute(Spine*) const=0x802FB530
NrvSandstorm::SandstormNrvStorm::execute(Spine*) const=0x802FB540
NrvSandstorm::SandstormNrvWait::execute(Spine*) const=0x802FB550
NrvSandstorm::SandstormNrvNonActive::execute(Spine*) const=0x802FB560
NrvSunakazeKunTrap::SunakazeKunTrapNrvTrap::execute(Spine*) const=0x802FB570
SecretGate::__ct(const char*)=0x802FB580
SecretGate::init(const JMapInfoIter&)=0x802FB5F0
SecretGate::attackSensor(HitSensor*, HitSensor*)=0x802FB730
SecretGate::exePass(void)=0x802FB830
SecretGate::isNerveWaitAfterPass(void) const=0x802FB8C0
SecretGate::__dt(void)=0x802FB8D0
short::(nit_\SecretGate_cpp)=0x802FB930
NrvSecretGate::SecretGateNrvWait::__ct(void)=0x802FB970
NrvSecretGate::SecretGateNrvPass::__ct(void)=0x802FB980
NrvSecretGate::SecretGateNrvWaitAfterPass::__ct(void)=0x802FB990
NrvSecretGate::SecretGateNrvWaitAfterPass::execute(Spine*) const=0x802FB9A0
NrvSecretGate::SecretGateNrvPass::execute(Spine*) const=0x802FB9B0
NrvSecretGate::SecretGateNrvWait::execute(Spine*) const=0x802FB9C0
SecretGateCounter::__ct(const char*)=0x802FB9D0
SecretGateCounter::init(const JMapInfoIter&)=0x802FBA20
SecretGateCounter::__dt(void)=0x802FBCB0
SecretGateGroup::__dt(void)=0x802FBD10
short::(nit_\SecretGateCounter_cpp)=0x802FBD70
Shellfish::__ct(const char*)=0x802FBDE0
Shellfish::init(const JMapInfoIter&)=0x802FBE40
Shellfish::initAfterPlacement(void)=0x802FC070
Shellfish::calcAndSetBaseMtx(void)=0x802FC080
Shellfish::control(void)=0x802FC0C0
Shellfish::exeWait(void)=0x802FC160
Shellfish::exeOpen(void)=0x802FC1D0
Shellfish::exeCloseSignal(void)=0x802FC330
Shellfish::exeClose(void)=0x802FC3B0
Shellfish::exeShock(void)=0x802FC4C0
Shellfish::attackSensor(HitSensor*, HitSensor*)=0x802FC560
Shellfish::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802FC640
Shellfish::initItem(const JMapInfoIter&)=0x802FC740
Shellfish::initCoin(const JMapInfoIter&)=0x802FC8A0
Shellfish::initYellowChip(const JMapInfoIter&)=0x802FC8E0
Shellfish::initKinokoOneUp(const JMapInfoIter&)=0x802FC970
Shellfish::startBindItem(void)=0x802FC9E0
Shellfish::endBindItem(void)=0x802FCA40
Shellfish::putItem(void)=0x802FCAD0
Shellfish::__dt(void)=0x802FCB70
short::(nit_\Shellfish_cpp)=0x802FCBD0
NrvShellfish::ShellfishNrvWait::__ct(void)=0x802FCC30
NrvShellfish::ShellfishNrvOpen::__ct(void)=0x802FCC40
NrvShellfish::ShellfishNrvOpenWait::__ct(void)=0x802FCC50
NrvShellfish::ShellfishNrvCloseSignal::__ct(void)=0x802FCC60
NrvShellfish::ShellfishNrvClose::__ct(void)=0x802FCC70
NrvShellfish::ShellfishNrvShock::__ct(void)=0x802FCC80
NrvShellfish::ShellfishNrvDPDOpen::__ct(void)=0x802FCC90
NrvShellfish::ShellfishNrvDPDOpen::execute(Spine*) const=0x802FCCA0
NrvShellfish::ShellfishNrvShock::execute(Spine*) const=0x802FCCB0
NrvShellfish::ShellfishNrvClose::execute(Spine*) const=0x802FCCC0
NrvShellfish::ShellfishNrvCloseSignal::execute(Spine*) const=0x802FCCD0
NrvShellfish::ShellfishNrvOpenWait::execute(Spine*) const=0x802FCCE0
NrvShellfish::ShellfishNrvOpen::execute(Spine*) const=0x802FCD30
NrvShellfish::ShellfishNrvWait::execute(Spine*) const=0x802FCD40
ShootingStar::__ct(const char*)=0x802FCD50
ShootingStar::init(const JMapInfoIter&)=0x802FCDE0
ShootingStar::appearPreShooting(void)=0x802FD100
ShootingStar::control(void)=0x802FD150
ShootingStar::exePreShooting(void)=0x802FD1B0
ShootingStar::exeShooting(void)=0x802FD2E0
ShootingStar::exeWaitForNextShoot(void)=0x802FD420
MR::FunctorV0M<ShootingStar*,M12ShootingStarFPCvPv_v>::__cl(void) const=0x802FD500
MR::FunctorV0M<ShootingStar*,M12ShootingStarFPCvPv_v>::clone(JKRHeap*) const=0x802FD530
ShootingStar::__dt(void)=0x802FD5A0
short::(nit_\ShootingStar_cpp)=0x802FD600
NrvShootingStar::HostTypeNrvPreShooting::__ct(void)=0x802FD640
NrvShootingStar::HostTypeNrvShooting::__ct(void)=0x802FD650
NrvShootingStar::HostTypeNrvWaitForNextShoot::__ct(void)=0x802FD660
NrvShootingStar::HostTypeNrvWaitForNextShoot::execute(Spine*) const=0x802FD670
NrvShootingStar::HostTypeNrvShooting::execute(Spine*) const=0x802FD680
NrvShootingStar::HostTypeNrvPreShooting::execute(Spine*) const=0x802FD690
SimpleBreakableObj::__ct(const char*)=0x802FD6A0
SimpleBreakableObj::init(const JMapInfoIter&)=0x802FD720
MR::Functor<SimpleBreakableObj>(SimpleBreakableObj*, M18SimpleBreakableObjFPCvPv_v_Q22MR63FunctorV0M<SimpleBreakableObj*,M18SimpleBreakableObjFPCvPv_v>)=0x802FDB20
SimpleBreakableObj::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x802FDB60
SimpleBreakableObj::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x802FDCC0
SimpleBreakableObj::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802FDD80
SimpleBreakableObj::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802FDE20
SimpleBreakableObj::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802FDE30
SimpleBreakableObj::control(void)=0x802FDE90
SimpleBreakableObj::setStateBreak(void)=0x802FDF70
SimpleBreakableObj::startBreak(void)=0x802FE000
SimpleBreakableObj::controlBreak(void)=0x802FE0B0
SimpleBreakableObj::endBreak(void)=0x802FE0C0
SimpleBreakableObj::isStateBreaking(void) const=0x802FE140
SimpleBreakableObj::appearItem(void)=0x802FE1A0
SimpleBreakableObj::exeTryStartDemo(void)=0x802FE250
SimpleBreakableObj::exeDemo(void)=0x802FE2D0
SimpleBreakableStrongLightObj::connectToScene(const MapObjActorInitInfo&)=0x802FE360
SimpleBreakableIndirectObj::connectToScene(const MapObjActorInitInfo&)=0x802FE370
SimpleBreakableCollisionObj::init(const JMapInfoIter&)=0x802FE380
SimpleBreakableCollisionObj::controlBreak(void)=0x802FE3E0
SimpleBreakableDeleteShadowObj::controlBreak(void)=0x802FE3F0
SimpleBreakableObj::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x802FE400
SimpleBreakableObj::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x802FE410
MR::FunctorV0M<SimpleBreakableObj*,M18SimpleBreakableObjFPCvPv_v>::__cl(void) const=0x802FE420
MR::FunctorV0M<SimpleBreakableObj*,M18SimpleBreakableObjFPCvPv_v>::clone(JKRHeap*) const=0x802FE450
SimpleBreakableStrongLightObj::__dt(void)=0x802FE4C0
SimpleBreakableIndirectObj::__dt(void)=0x802FE520
SimpleBreakableCollisionObj::__dt(void)=0x802FE580
SimpleBreakableDeleteShadowObj::__dt(void)=0x802FE5E0
short::(nit_\SimpleBreakableObj_cpp)=0x802FE640
NrvSimpleBreakableObj::HostTypeWait::__ct(void)=0x802FE680
NrvSimpleBreakableObj::HostTypeTryStartDemo::__ct(void)=0x802FE690
NrvSimpleBreakableObj::HostTypeDemo::__ct(void)=0x802FE6A0
NrvSimpleBreakableObj::HostTypeDemo::execute(Spine*) const=0x802FE6B0
NrvSimpleBreakableObj::HostTypeTryStartDemo::execute(Spine*) const=0x802FE6C0
NrvSimpleBreakableObj::HostTypeWait::execute(Spine*) const=0x802FE6D0
SimpleClipPartsObj::__ct(const char*)=0x802FE720
SimpleClipPartsObj::init(const JMapInfoIter&)=0x802FE770
SimpleClipPartsObj::setupInitInfo(const MapObjActorInitInfo&)=0x802FE830
SimpleClipPartsObj::control(void)=0x802FE840
SimpleClipPartsObj::connectToScene(const MapObjActorInitInfo&)=0x802FE8B0
SimpleClipPartsObj::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802FE8D0
SimpleClipPartsObj::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x802FE8E0
SimpleClipPartsObj::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802FE8F0
SimpleClipPartsObj::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x802FE990
RailMoveObjClipParts::__ct(const char*)=0x802FE9A0
SimpleClipPartsObj::__dt(void)=0x802FE9F0
RailMoveObjClipParts::init(const JMapInfoIter&)=0x802FEA50
RailMoveObjClipParts::setupInitInfo(const MapObjActorInitInfo&)=0x802FEAE0
RailMoveObjClipParts::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x802FEB60
RailMoveObjClipParts::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x802FEC10
RotateMoveObjClipParts::__ct(const char*)=0x802FEC70
RotateMoveObjClipParts::init(const JMapInfoIter&)=0x802FECB0
RotateMoveObjClipParts::setupInitInfo(const MapObjActorInitInfo&)=0x802FECC0
RailMoveObjClipParts::__dt(void)=0x802FED10
RotateMoveObjClipParts::__dt(void)=0x802FED70
short::(nit_\SimpleClipPartsObj_cpp)=0x802FEDD0
NrvSimpleClipPartsObj::HostTypeWait::__ct(void)=0x802FEE10
NrvSimpleClipPartsObj::HostTypeWait::execute(Spine*) const=0x802FEF20
SimpleDemoExecutor::__ct(const char*)=0x802FEF30
SimpleDemoExecutor::init(const JMapInfoIter&)=0x802FEF90
SimpleDemoExecutor::initAfterPlacement(void)=0x802FF0C0
SimpleDemoExecutor::exeWait(void)=0x802FF130
SimpleDemoExecutor::exeDemo(void)=0x802FF1A0
SimpleDemoExecutor::__dt(void)=0x802FF240
short::(nit_\SimpleDemoExecutor_cpp)=0x802FF2A0
NrvSimpleDemoExecutor::SimpleDemoExecutorNrvWait::__ct(void)=0x802FF2D0
NrvSimpleDemoExecutor::SimpleDemoExecutorNrvDemo::__ct(void)=0x802FF2E0
NrvSimpleDemoExecutor::SimpleDemoExecutorNrvDemo::execute(Spine*) const=0x802FF2F0
NrvSimpleDemoExecutor::SimpleDemoExecutorNrvWait::execute(Spine*) const=0x802FF300
SimpleFloaterObj::__ct(const char*)=0x802FF310
SimpleFloaterObj::init(const JMapInfoIter&)=0x802FF370
SimpleFloaterObj::exeWait(void)=0x802FF510
SimpleFloaterObj::__dt(void)=0x802FF5F0
short::(nit_\SimpleFloaterObj_cpp)=0x802FF650
NrvSimpleFloaterObj::SimpleFloaterObjNrvWait::__ct(void)=0x802FF660
NrvSimpleFloaterObj::SimpleFloaterObjNrvWait::execute(Spine*) const=0x802FF670
SimpleMapObj::init(const JMapInfoIter&)=0x802FF680
SimpleEnvironmentObj::init(const JMapInfoIter&)=0x802FF710
SimpleEnvironmentObj::connectToScene(const MapObjActorInitInfo&)=0x802FF780
SimpleMapObjWithEffect::init(const JMapInfoIter&)=0x802FF7B0
SimpleMapObjFarMax::init(const JMapInfoIter&)=0x802FF980
SimpleTextureSwitchChangeObj::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x802FF9C0
SimpleTextureSwitchChangeObj::changeTexture(void)=0x802FFA10
SimpleTextureSwitchChangeObj::getChangedTextureNo(void) const=0x802FFA80
GlaringLight::connectToScene(const MapObjActorInitInfo&)=0x802FFA90
@unnamed@SimpleMapObj_cpp@::getSeParam(const char*)=0x802FFAC0
SimpleSeesawObj::__ct(const char*)=0x802FFB30
SimpleSeesawObj::init(const JMapInfoIter&)=0x802FFB80
SimpleSeesawObj::control(void)=0x802FFC90
SimpleMapObjPush::attackSensor(HitSensor*, HitSensor*)=0x802FFD50
PictureJoinPlanet::init(const JMapInfoIter&)=0x802FFDA0
MR::FunctorV0M<SimpleTextureSwitchChangeObj*,M28SimpleTextureSwitchChangeObjFPCvPv_v>::__cl(void) const=0x802FFE30
MR::FunctorV0M<SimpleTextureSwitchChangeObj*,M28SimpleTextureSwitchChangeObjFPCvPv_v>::clone(JKRHeap*) const=0x802FFE60
SimpleEnvironmentObj::__dt(void)=0x802FFED0
SimpleMapObjWithEffect::__dt(void)=0x802FFF30
SimpleMapObjFarMax::__dt(void)=0x802FFF90
SimpleTextureSwitchChangeObj::__dt(void)=0x802FFFF0
GlaringLight::__dt(void)=0x80300050
SimpleMapObjPush::__dt(void)=0x803000B0
PictureJoinPlanet::__dt(void)=0x80300110
SmallStone::__ct(const char*)=0x80300170
SmallStone::__dt(void)=0x803001D0
SmallStone::init(const JMapInfoIter&)=0x80300250
SmallStone::initMember(const char*, bool)=0x803004C0
SmallStone::initAfterPlacement(void)=0x803007B0
SmallStone::control(void)=0x80300EC0
SmallStone::isAllMemberBreak(void)=0x80300F20
SmallStone::tryBreak(void)=0x80300F90
SmallStone::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x803010A0
SmallStone::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80301120
SmallStone::attackSensor(HitSensor*, HitSensor*)=0x80301170
SmallStone::startClipped(void)=0x80301210
SmallStone::endClipped(void)=0x80301280
SmallStoneMember::__ct(const char*)=0x803012F0
SmallStoneMember::tryShake(void)=0x80301380
SmallStoneMember::tryPush(HitSensor*, HitSensor*)=0x80301490
SmallStoneMember::animControl(void)=0x803015A0
SmallStoneMember::doBreak(SmallStone*)=0x80301690
SmallStoneMember::movementByHost(SmallStone*)=0x80301770
SmallStoneMember::__dt(void)=0x803017F0
SnowBall::__ct(const char*)=0x80301850
SnowBall::init(const JMapInfoIter&)=0x80301900
SnowBall::control(void)=0x80301BE0
SnowBall::calcAndSetBaseMtx(void)=0x80301C90
SnowBall::attackSensor(HitSensor*, HitSensor*)=0x80301CA0
SnowBall::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80301DB0
SnowBall::receiveMsgPush(HitSensor*, HitSensor*)=0x80301F10
SnowBall::__dt(void)=0x80302AD0
short::(nit_\SnowBall_cpp)=0x80302B30
SnowMan::__ct(const char*)=0x80302C70
SnowMan::init(const JMapInfoIter&)=0x80302CD0
SnowMan::exeMeltHead(void)=0x80302E40
SnowMan::exeMeltBody(void)=0x80302EE0
SnowMan::exeDownHead(void)=0x80302F80
SnowMan::exeDownBody(void)=0x80303000
SnowMan::calcAndSetBaseMtx(void)=0x803030A0
SnowMan::control(void)=0x80303100
SnowMan::attackSensor(HitSensor*, HitSensor*)=0x80303160
SnowMan::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803031D0
SnowMan::damageHead(void)=0x803032F0
SnowMan::damageBody(void)=0x80303360
SnowMan::__dt(void)=0x80303400
short::(nit_\SnowMan_cpp)=0x80303460
NrvSnowMan::SnowManNrvWait::__ct(void)=0x803034C0
NrvSnowMan::SnowManNrvWaitBody::__ct(void)=0x803034D0
NrvSnowMan::SnowManNrvWaitHead::__ct(void)=0x803034E0
NrvSnowMan::SnowManNrvMeltHead::__ct(void)=0x803034F0
NrvSnowMan::SnowManNrvMeltBody::__ct(void)=0x80303500
NrvSnowMan::SnowManNrvDownHead::__ct(void)=0x80303510
NrvSnowMan::SnowManNrvDownBody::__ct(void)=0x80303520
NrvSnowMan::SnowManNrvDownBody::execute(Spine*) const=0x80303530
NrvSnowMan::SnowManNrvDownHead::execute(Spine*) const=0x80303540
NrvSnowMan::SnowManNrvMeltBody::execute(Spine*) const=0x80303550
NrvSnowMan::SnowManNrvMeltHead::execute(Spine*) const=0x80303560
NrvSnowMan::SnowManNrvWaitHead::execute(Spine*) const=0x80303570
NrvSnowMan::SnowManNrvWaitBody::execute(Spine*) const=0x80303580
NrvSnowMan::SnowManNrvWait::execute(Spine*) const=0x80303590
SnowMound::__ct(const char*)=0x803035A0
SnowMound::init(const JMapInfoIter&)=0x80303610
SnowMound::kill(void)=0x80303920
SnowMound::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80303970
SnowMound::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x803039C0
SnowMound::exeMelt(void)=0x80303A50
SnowMound::exeHide(void)=0x80303B30
SnowMound::exeHidden(void)=0x80303C00
SnowMound::afterKill(void)=0x80303E70
SnowMound::__dt(void)=0x80303F20
short::(nit_\SnowMound_cpp)=0x80303F80
NrvSnowMound::SnowMoundNrvWait::__ct(void)=0x80303FC0
NrvSnowMound::SnowMoundNrvMelt::__ct(void)=0x80303FD0
NrvSnowMound::SnowMoundNrvHide::__ct(void)=0x80303FE0
NrvSnowMound::SnowMoundNrvHidden::__ct(void)=0x80303FF0
NrvSnowMound::SnowMoundNrvHidden::execute(Spine*) const=0x80304000
NrvSnowMound::SnowMoundNrvHide::execute(Spine*) const=0x80304010
NrvSnowMound::SnowMoundNrvMelt::execute(Spine*) const=0x80304020
NrvSnowMound::SnowMoundNrvWait::execute(Spine*) const=0x80304030
SnowStep::__ct(const char*)=0x80304040
SnowStep::init(const JMapInfoIter&)=0x803040C0
SnowStep::appearSnowStep(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, long, long, float)=0x80304150
SnowStep::control(void)=0x80304240
SnowStep::calcAndSetBaseMtx(void)=0x80304250
SnowStep::exeExtend(void)=0x803042E0
SnowStep::exeWait(void)=0x803043A0
SnowStep::exeShrink(void)=0x80304430
SnowStep::__dt(void)=0x80304520
short::(nit_\SnowStep_cpp)=0x80304580
NrvSnowStep::SnowStepNrvExtend::__ct(void)=0x803045C0
NrvSnowStep::SnowStepNrvWait::__ct(void)=0x803045D0
NrvSnowStep::SnowStepNrvShrink::__ct(void)=0x803045E0
NrvSnowStep::SnowStepNrvShrink::execute(Spine*) const=0x803045F0
NrvSnowStep::SnowStepNrvWait::execute(Spine*) const=0x80304600
NrvSnowStep::SnowStepNrvExtend::execute(Spine*) const=0x80304610
SnowStepHolder::__ct(void)=0x80304620
MR::createSnowStepHolder(void)=0x80304720
MR::tryAppearSnowStep(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, long, long, float)=0x80304730
SnowStepHolder::__dt(void)=0x803047E0
SoundEmitter::__ct(const char*)=0x80304840
SoundEmitter::init(const JMapInfoIter&)=0x803048A0
SoundEmitter::control(void)=0x80304A80
SoundEmitter::exePlaySound(void)=0x80304B00
SoundEmitter::__dt(void)=0x80304BD0
short::(nit_\SoundEmitter_cpp)=0x80304C30
NrvSoundEmitter::SoundEmitterNrvStandBy::__ct(void)=0x80304C60
NrvSoundEmitter::SoundEmitterNrvPlaySound::__ct(void)=0x80304C70
NrvSoundEmitter::SoundEmitterNrvPlaySound::execute(Spine*) const=0x80304C80
NrvSoundEmitter::SoundEmitterNrvStandBy::execute(Spine*) const=0x80304C90
SpaceMine::__ct(const char*)=0x80304CF0
SpaceMine::init(const JMapInfoIter&)=0x80304D80
SpaceMine::isCalcShadowAlways(void) const=0x80304FE0
SpaceMine::kill(void)=0x80305060
SpaceMine::initAfterPlacement(void)=0x803050D0
SpaceMine::appearItem(void)=0x80305150
SpaceMine::attackSensor(HitSensor*, HitSensor*)=0x803051E0
SpaceMine::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80305270
SpaceMine::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x803053A0
SpaceMine::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80305410
SpaceMine::exeWait(void)=0x803055C0
SpaceMine::exeAppear(void)=0x80305750
SpaceMine::exeReaction(void)=0x80305800
SpaceMine::exePause(void)=0x80305880
SpaceMine::__dt(void)=0x803058F0
short::(nit_\SpaceMine_cpp)=0x80305950
NrvSpaceMine::HostTypeWait::__ct(void)=0x80305990
NrvSpaceMine::HostTypeAppear::__ct(void)=0x803059A0
NrvSpaceMine::HostTypeReaction::__ct(void)=0x803059B0
NrvSpaceMine::HostTypePause::__ct(void)=0x803059C0
NrvSpaceMine::HostTypePause::executeOnEnd(Spine*) const=0x803059D0
NrvSpaceMine::HostTypePause::execute(Spine*) const=0x80305A20
NrvSpaceMine::HostTypeReaction::execute(Spine*) const=0x80305A30
NrvSpaceMine::HostTypeAppear::execute(Spine*) const=0x80305A40
NrvSpaceMine::HostTypeWait::execute(Spine*) const=0x80305A50
SpaceShipStep::__ct(const char*)=0x80305A60
SpaceShipStep::init(const JMapInfoIter&)=0x80305AC0
SpaceShipStep::exeWait(void)=0x80305BC0
SpaceShipStep::exeMoveSign(void)=0x80305C30
SpaceShipStep::exeMove(void)=0x80305CC0
SpaceShipStep::exeBreak(void)=0x80305D30
SpaceShipStep::control(void)=0x80305DB0
SpaceShipStep::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80305DF0
SpaceShipStep::updateResetToInitPosCheck(void)=0x80305E70
SpaceShipStep::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x80305FA0
SpaceShipStep::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x80305FB0
SpaceShipStep::initCaseNoUseSwitchA(const MapObjActorInitInfo&)=0x80305FC0
SpaceShipStep::initCaseUseSwitchA(const MapObjActorInitInfo&)=0x80305FD0
SpaceShipStep::__dt(void)=0x80305FE0
short::(nit_\SpaceShipStep_cpp)=0x80306040
NrvSpaceShipStep::SpaceShipStepNrvWait::__ct(void)=0x80306080
NrvSpaceShipStep::SpaceShipStepNrvMoveSign::__ct(void)=0x80306090
NrvSpaceShipStep::SpaceShipStepNrvMove::__ct(void)=0x803060A0
NrvSpaceShipStep::SpaceShipStepNrvBreak::__ct(void)=0x803060B0
NrvSpaceShipStep::SpaceShipStepNrvBreak::execute(Spine*) const=0x803060C0
NrvSpaceShipStep::SpaceShipStepNrvMove::execute(Spine*) const=0x803060D0
NrvSpaceShipStep::SpaceShipStepNrvMoveSign::execute(Spine*) const=0x803060E0
NrvSpaceShipStep::SpaceShipStepNrvWait::execute(Spine*) const=0x803060F0
SphereRailDash::__ct(const char*)=0x80306100
SphereRailDash::init(const JMapInfoIter&)=0x803061A0
SphereRailDash::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80306280
SphereRailDash::exeWait(void)=0x80306380
SphereRailDash::exeRailMove(void)=0x803065C0
SphereRailDash::__dt(void)=0x80306850
short::(nit_\SphereRailDash_cpp)=0x803068B0
NrvSphereRailDash::SphereRailDashNrvWait::__ct(void)=0x803068F0
NrvSphereRailDash::SphereRailDashNrvRailMove::__ct(void)=0x80306900
NrvSphereRailDash::SphereRailDashNrvAfterRailMove::__ct(void)=0x80306910
NrvSphereRailDash::SphereRailDashNrvAfterRailMove::execute(Spine*) const=0x80306920
NrvSphereRailDash::SphereRailDashNrvRailMove::execute(Spine*) const=0x80306930
NrvSphereRailDash::SphereRailDashNrvWait::execute(Spine*) const=0x80306940
SpiderThread::__ct(const char*)=0x80306950
SpiderThread::init(const JMapInfoIter&)=0x80306A80
SpiderThread::movement(void)=0x80306A90
SpiderThread::draw(void) const=0x80306C10
SpiderThread::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80306CB0
SpiderThread::updatePointerInfo(void)=0x80306DE0
SpiderThread::updateHangedPoint(void)=0x80306E40
SpiderThread::tryTouchPoint(long)=0x80306E80
SpiderThread::findHangInfo(LiveActor*) const=0x80306F80
SpiderThread::initDraw(void) const=0x80306FD0
MR::drawSpiderThreadBloom(void)=0x80307280
SpiderThread::__dt(void)=0x803072F0
SpiderThreadHangInfo::endBind(void)=0x80307350
SpiderThreadHangInfo::startHang(void)=0x803073B0
SpiderThreadHangInfo::endHang(bool)=0x803073D0
SpiderThreadHangInfo::copyInfo(const SpiderThreadHangInfo*)=0x80307440
SpiderThreadPointNearInfo::setInfo(float, SpiderThreadPart*, const JGeometry::TVec3<float>&)=0x80307480
SpiderThreadPointNearInfo::clear(void)=0x80307500
SpiderThreadPointNearInfo::getPos(void) const=0x80307520
SpiderThreadMainPoint::addNearPartPoint(SpiderThreadPoint*, float)=0x80307550
SpiderThreadMainPoint::removeNearPoint(const SpiderThreadPoint*)=0x803075C0
SpiderThreadMainPoint::addNearPointToRadial(SpiderThreadPoint*)=0x80307690
SpiderThreadMainPoint::removeNearPointFromRadial(const SpiderThreadPoint*)=0x80307730
SpiderThreadMainPoint::updateVelocity(void)=0x803077B0
SpiderThreadMainPoint::closeToNearPoint(const SpiderThreadPointNearInfo*)=0x80307870
SpiderThreadPart::updatePointerPos(void)=0x80307930
SpiderThreadPart::update(void)=0x80307A20
SpiderThreadPart::draw(void) const=0x80307B50
SpiderThreadPart::startHang(long)=0x80307B80
SpiderThreadPart::updateHang(const JGeometry::TVec3<float>&, long)=0x80307C10
SpiderThreadPart::endHang(long)=0x80307C60
SpiderThreadPart::updatePointPosToLine(void)=0x80307F70
SpiderThreadPart::updatePointPosAndBasePosToLine(void)=0x803080A0
SpiderThreadPart::tryTouch(float, const JGeometry::TVec3<float>&, long)=0x80308110
SpiderThreadPart::findTouchPoint(float, const JGeometry::TVec3<float>&, long)=0x80308250
SpiderThreadPart::updatePointPosHanging(long)=0x803082F0
SpiderThreadPart::updatePointVelocityTouch(long, const JGeometry::TVec3<float>&)=0x803084E0
SpiderThreadPart::updateBasePos(void)=0x80308670
SpiderThreadPart::updateForceAttach(void)=0x803087B0
SpiderThreadPart::updateCutPoints(void)=0x80308910
SpiderThreadPart::updateDrawVec(void)=0x80308A80
@unnamed@SpiderThreadPart_cpp@::sendPointsUpper(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x80308B20
@unnamed@SpiderThreadPart_cpp@::sendPointsRightLower(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x80308CB0
@unnamed@SpiderThreadPart_cpp@::sendPointsLeftLower(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x80308E10
SpiderThreadPart::drawLine(void) const=0x80308F70
SpiderThreadPart::drawPoints(void) const=0x803090B0
short::(nit_\SpiderThreadPart_cpp)=0x803093D0
SpiderThreadPoint::updateSpring(void)=0x80309440
SpiderThreadPoint::updateDrawVec(const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*)=0x80309540
SpiderThreadPoint::updateWind(float)=0x803095D0
SpiderThreadPoint::updatePos(void)=0x80309690
SpiderThreadPoint::restrict(const JGeometry::TVec3<float>*, float)=0x803096A0
SpiderThreadPoint::updateHang(const JGeometry::TVec3<float>&)=0x803097C0
SpiderThreadPoint::tryTouch(float, const JGeometry::TVec3<float>&, long)=0x803097E0
SpiderThreadPoint::startThreadLevelSound(void)=0x80309850
SpiderThreadRadialLine::updateVelocity(void)=0x80309900
SpiderThreadRadialLine::updatePos(void)=0x80309960
SpiderThreadWindCtrl::update(void)=0x803099C0
SpiderThreadWindCtrl::getTimeToStartWind(void) const=0x80309A30
SpiderThreadWindCtrl::getWindTime(void) const=0x80309A60
SpinCloudBlock::__ct(const char*)=0x80309A70
SpinCloudBlock::init(const JMapInfoIter&)=0x80309B30
SpinCloudBlock::control(void)=0x80309BC0
SpinCloudBlock::calcAndSetBaseMtx(void)=0x80309C50
SpinCloudBlock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80309E50
SpinCloudBlock::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80309EE0
SpinCloudBlock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80309FD0
SpinCloudBlock::__dt(void)=0x8030AAF0
short::(nit_\SpinCloudBlock_cpp)=0x8030AB50
SpinCloudBlockGroup::__ct(void)=0x8030ACC0
SpinCloudBlockGroup::movement(void)=0x8030AE10
MR::createSpinCloudBlockGroup(void)=0x8030B1F0
SpinCloudBlockGroup::__dt(void)=0x8030B2F0
SpinCloudItem::__ct(const char*)=0x8030B350
SpinCloudItem::init(const JMapInfoIter&)=0x8030B390
SpinCloudItem::control(void)=0x8030B4A0
SpinCloudItem::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8030B4B0
SpinCloudItem::updatePlayerPowerUp(void)=0x8030B500
SpinCloudItem::__dt(void)=0x8030B710
short::(nit_\SpinCloudItem_cpp)=0x8030B770
SpinDriver::__ct(const char*)=0x8030B880
SpinDriver::init(const JMapInfoIter&)=0x8030BA00
SpinDriver::initAfterPlacement(void)=0x8030BC10
SpinDriver::initParamFromJMapInfo(const JMapInfoIter&)=0x8030BC30
SpinDriver::initShootPath(const JMapInfoIter&)=0x8030BD00
SpinDriver::initEventCamera(const JMapInfoIter&)=0x8030BDF0
SpinDriver::appear(void)=0x8030BE50
SpinDriver::makeActorAppeared(void)=0x8030BEC0
SpinDriver::makeActorDead(void)=0x8030BF00
SpinDriver::control(void)=0x8030BF40
SpinDriver::calcAndSetBaseMtx(void)=0x8030C010
SpinDriver::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8030C0E0
SpinDriver::tryStartShoot(void)=0x8030C230
SpinDriver::tryEndCapture(void)=0x8030C2F0
SpinDriver::tryShoot(void)=0x8030C370
SpinDriver::tryEndShoot(void)=0x8030C3C0
SpinDriver::tryForceCancel(void)=0x8030C440
SpinDriver::tryEndCoolDown(void)=0x8030C480
SpinDriver::trySwitchOff(void)=0x8030C4D0
SpinDriver::exeNonActive(void)=0x8030C540
SpinDriver::exeAppear(void)=0x8030C5F0
SpinDriver::exeWait(void)=0x8030C700
SpinDriver::exeCapture(void)=0x8030C820
SpinDriver::exeShootStart(void)=0x8030C940
SpinDriver::exeShoot(void)=0x8030CBA0
SpinDriver::exeCoolDown(void)=0x8030CDD0
SpinDriver::startBind(HitSensor*)=0x8030CE30
SpinDriver::cancelBind(void)=0x8030D060
SpinDriver::updateBindPosition(void)=0x8030D0B0
SpinDriver::moveBindPosToCenter(void)=0x8030D170
SpinDriver::updateBindActorMatrix(float)=0x8030D250
SpinDriver::calcBindActorMatrix(void)=0x8030D2F0
SpinDriver::calcParabolicBindPose(void)=0x8030D400
SpinDriver::turnBindHead(const JGeometry::TVec3<float>&, float)=0x8030D620
SpinDriver::calcShootMotionTime(void)=0x8030D7D0
SpinDriver::startCamera(void)=0x8030D820
SpinDriver::updateCamera(void)=0x8030D850
SpinDriver::cancelCamera(void)=0x8030D880
SpinDriver::endCamera(void)=0x8030D8A0
SpinDriver::canStartBind(void) const=0x8030D8C0
SpinDriver::canBind(HitSensor*) const=0x8030D8D0
SpinDriver::__dt(void)=0x8030DA20
short::(nit_\SpinDriver_cpp)=0x8030DA80
NrvSpinDriver::SpinDriverNrvTryDemo::__ct(void)=0x8030DAE0
NrvSpinDriver::SpinDriverNrvNonActive::__ct(void)=0x8030DAF0
NrvSpinDriver::SpinDriverNrvAppear::__ct(void)=0x8030DB00
NrvSpinDriver::SpinDriverNrvWait::__ct(void)=0x8030DB10
NrvSpinDriver::SpinDriverNrvCapture::__ct(void)=0x8030DB20
NrvSpinDriver::SpinDriverNrvShootStart::__ct(void)=0x8030DB30
NrvSpinDriver::SpinDriverNrvShoot::__ct(void)=0x8030DB40
NrvSpinDriver::SpinDriverNrvCoolDown::__ct(void)=0x8030DB50
NrvSpinDriver::SpinDriverNrvCoolDown::execute(Spine*) const=0x8030DB60
NrvSpinDriver::SpinDriverNrvShoot::execute(Spine*) const=0x8030DB70
NrvSpinDriver::SpinDriverNrvShootStart::execute(Spine*) const=0x8030DB80
NrvSpinDriver::SpinDriverNrvCapture::execute(Spine*) const=0x8030DB90
NrvSpinDriver::SpinDriverNrvWait::execute(Spine*) const=0x8030DBA0
NrvSpinDriver::SpinDriverNrvAppear::execute(Spine*) const=0x8030DBB0
NrvSpinDriver::SpinDriverNrvNonActive::execute(Spine*) const=0x8030DBC0
NrvSpinDriver::SpinDriverNrvTryDemo::execute(Spine*) const=0x8030DBD0
SpinDriverCamera::__ct(void)=0x8030DBE0
SpinDriverCamera::init(const JMapInfoIter&, LiveActor*)=0x8030DC00
SpinDriverCamera::initAppearCamera(const JMapInfoIter&, LiveActor*)=0x8030DCD0
SpinDriverCamera::startAppearCamera(LiveActor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8030DD50
SpinDriverCamera::endAppearCamera(LiveActor*)=0x8030DE00
SpinDriverCamera::getAppearCameraFrames(void) const=0x8030DE40
SpinDriverCamera::start(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8030DE50
SpinDriverCamera::update(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8030DEE0
SpinDriverCamera::cancel(void)=0x8030DF50
SpinDriverCamera::end(void)=0x8030DF70
CameraTargetMtx::setMtx(A4_f)=0x8030DFC0
SpinDriverCamera::updateTargetMatrix(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8030E000
SpinDriverCamera::isUseAppearCamera(LiveActor*) const=0x8030E180
SpinDriverPathDrawInit::__ct(void)=0x8030E1D0
SpinDriverPathDrawInit::initDraw(void)=0x8030E360
MR::setSpinDriverPathColorNormal(void)=0x8030E570
MR::setSpinDriverPathColorGreen(void)=0x8030E5B0
MR::setSpinDriverPathColorPink(void)=0x8030E5F0
MR::isDrawSpinDriverPathAtOpa(void)=0x8030E630
MR::onDrawSpinDriverPathAtOpa(void)=0x8030E680
MR::offDrawSpinDriverPathAtOpa(void)=0x8030E6B0
SpinDriverPathDrawer::__ct(SpinDriverShootPath*)=0x8030E6E0
SpinDriverPathDrawer::init(const JMapInfoIter&)=0x8030E790
SpinDriverPathDrawer::calcPositionCount(float, float) const=0x8030E800
SpinDriverPathDrawer::initPositionList(float, float)=0x8030E970
SpinDriverPathDrawer::initClipping(void)=0x8030ECB0
SpinDriverPathDrawer::initPathEnd(void)=0x8030ED20
SpinDriverPathDrawer::calcDrawCode(void) const=0x8030EDB0
SpinDriverPathDrawer::calcDrawBaseCode(void) const=0x8030EDF0
SpinDriverPathDrawer::setCoord(float)=0x8030EE30
SpinDriverPathDrawer::setColorNormal(void)=0x8030EE50
SpinDriverPathDrawer::setColorPink(void)=0x8030EE60
SpinDriverPathDrawer::setMaskLength(float)=0x8030EE70
SpinDriverPathDrawer::setFadeScale(float)=0x8030EE90
SpinDriverPathDrawer::draw(void) const=0x8030EEB0
SpinDriverPathDrawer::sendPoint(const JGeometry::TVec3<float>&, float, float) const=0x8030F250
MR::FunctorV0M<SpinDriverPathDrawInit*,M22SpinDriverPathDrawInitFPCvPv_v>::__cl(void) const=0x8030F280
MR::FunctorV0M<SpinDriverPathDrawInit*,M22SpinDriverPathDrawInitFPCvPv_v>::clone(JKRHeap*) const=0x8030F2B0
SpinDriverPathDrawer::__dt(void)=0x8030F320
SpinDriverPathDrawInit::__dt(void)=0x8030F380
SpinDriverShootPath::__ct(void)=0x8030F3E0
SpinDriverShootPath::init(const JMapInfoIter&)=0x8030F410
SpinDriverShootPath::initUsingParabolic(const JMapInfoIter&, const JGeometry::TVec3<float>&)=0x8030F470
SpinDriverShootPath::setStartPosition(const JGeometry::TVec3<float>&)=0x8030F510
SpinDriverShootPath::calcPosition(JGeometry::TVec3<float>*, float) const=0x8030F5D0
SpinDriverShootPath::calcDirection(JGeometry::TVec3<float>*, float, float) const=0x8030F6B0
SpinDriverShootPath::calcInitPose(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, float) const=0x8030F780
SpinDriverShootPath::getTotalLength(void) const=0x8030F930
SpinDriverShootPath::calcClippingInfo(JGeometry::TVec3<float>*, float*, float, float)=0x8030F950
SpinDriverUtil::setShadowAndClipping(LiveActor*, JGeometry::TVec3<float>*, float, float, float*)=0x8030FB40
SpinLeverSwitch::__ct(const char*)=0x8030FD20
SpinLeverSwitch::init(const JMapInfoIter&)=0x8030FD90
SpinLeverSwitch::exeWait(void)=0x8030FEB0
SpinLeverSwitch::exeSwitchOn(void)=0x8030FFC0
SpinLeverSwitch::initAfterPlacement(void)=0x80310130
SpinLeverSwitch::calcAndSetBaseMtx(void)=0x80310140
SpinLeverSwitch::attackSensor(HitSensor*, HitSensor*)=0x80310180
SpinLeverSwitch::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80310210
SpinLeverSwitch::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x803102F0
SpinLeverSwitch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x803103F0
SpinLeverSwitch::__dt(void)=0x803104A0
short::(nit_\SpinLeverSwitch_cpp)=0x80310500
NrvSpinLeverSwitch::SpinLeverSwitchNrvWait::__ct(void)=0x80310540
NrvSpinLeverSwitch::SpinLeverSwitchNrvSwitchOn::__ct(void)=0x80310550
NrvSpinLeverSwitch::SpinLeverSwitchNrvEnd::__ct(void)=0x80310560
NrvSpinLeverSwitch::SpinLeverSwitchNrvEnd::execute(Spine*) const=0x80310570
NrvSpinLeverSwitch::SpinLeverSwitchNrvSwitchOn::execute(Spine*) const=0x80310580
NrvSpinLeverSwitch::SpinLeverSwitchNrvWait::execute(Spine*) const=0x80310590
MR::StageEffect::shakeStopCamera(LiveActor*, const char*)=0x803107C0
MR::StageEffect::shakeCameraMoving(NameObj*, const char*)=0x80310810
MR::StageEffect::stopShakingCameraMoving(NameObj*, const char*)=0x80310840
MR::StageEffect::rumblePadStart(LiveActor*, const char*)=0x80310870
MR::StageEffect::rumblePadStop(LiveActor*, const char*)=0x803108C0
MR::StageEffect::rumblePadMoving(LiveActor*, const char*)=0x80310910
MR::StageEffect::tryStageEffectStart(LiveActor*, const char*)=0x80310960
MR::StageEffect::tryStageEffectMoving(LiveActor*, const char*)=0x803109D0
MR::StageEffect::tryStageEffectStop(LiveActor*, const char*)=0x80310B70
StarLightAreaHolder::__ct(const char*)=0x80310BE0
StarLightAreaHolder::init(const JMapInfoIter&)=0x80310C50
StarLightAreaHolder::movement(void)=0x80310C60
StarLightAreaHolder::__dt(void)=0x80310F40
StarPiece::__ct(const char*)=0x80310FB0
StarPiece::initAndSetFloatingFromGroup(const JMapInfoIter&)=0x803110A0
StarPiece::initAndSetRailMoveFromGroup(const JMapInfoIter&)=0x80311110
StarPiece::init(const JMapInfoIter&)=0x80311180
J3DGXColor::__as(_GXColor)=0x803115B0
StarPiece::initAfterPlacement(void)=0x803115E0
StarPiece::appear(void)=0x80311670
StarPiece::setColor(long)=0x803116C0
StarPiece::getNumColor(void)=0x80311700
StarPiece::appearFromGroup(void)=0x80311710
StarPiece::makeActorAppeared(void)=0x80311780
StarPiece::kill(void)=0x803117D0
StarPiece::makeActorDead(void)=0x803118E0
StarPiece::startClipped(void)=0x80311980
StarPiece::changeScale(float)=0x803119F0
StarPiece::control(void)=0x80311AC0
StarPiece::exeFloating(void)=0x80311C50
StarPiece::appearHop(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80311D50
StarPiece::exeHop(void)=0x80311E20
StarPiece::exeFall(void)=0x80311EC0
StarPiece::isTouchToTarget(JGeometry::TVec3<float>*, float)=0x80312210
StarPiece::isEffectLight(void)=0x80312310
StarPiece::isNerveToPlayerEnd(void)=0x80312360
StarPiece::exeToTarget(void)=0x80312370
StarPiece::exeSpinDrained(void)=0x80312960
StarPiece::exeToPlayerEnd(void)=0x80312A40
StarPiece::exeThrow(void)=0x80312BA0
StarPiece::exeThrowFall(void)=0x80312FA0
StarPiece::exeFollowPlayer(void)=0x80313140
StarPiece::exeRailMove(void)=0x803131C0
StarPiece::setFollowPlayerAndAppear(void)=0x80313270
StarPiece::tryCalcGravity(void)=0x803132C0
StarPiece::trySetGravityAndFront(const JGeometry::TVec3<float>&)=0x80313330
StarPiece::throwToTarget(HitSensor*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x803133E0
StarPiece::throwToTargetCore(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, bool)=0x80313460
StarPiece::giftToTarget(StarPieceReceiverInfo*, unsigned long, HitSensor*, const JGeometry::TVec3<float>&)=0x80313550
StarPiece::goToPlayer(JGeometry::TVec3<float>)=0x80313640
StarPiece::launch(const JGeometry::TVec3<float>&, float, float, bool, bool)=0x803137C0
StarPiece::launch(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, bool, bool)=0x803139E0
StarPiece::launch(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, bool, bool)=0x80313BD0
StarPiece::calcEffectScale(float, float, bool)=0x80313D10
StarPiece::calcNearCameraScale(void)=0x80313D90
StarPiece::emitTouchEffect(long, float)=0x80313DD0
StarPiece::emitGettableEffect(float)=0x80313EB0
StarPiece::tryGotJudge(void)=0x80314010
StarPiece::isFollowing(void)=0x80314110
StarPiece::setFall(void)=0x80314120
StarPiece::isOnRailMove(void)=0x803141B0
StarPiece::isFloat(void)=0x80314200
StarPiece::attackSensor(HitSensor*, HitSensor*)=0x80314250
StarPiece::setReflect(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803143C0
StarPiece::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80314510
StarPiece::isIgnoreTriOnThrow(const Triangle*)=0x80314730
StarPiece::touchPlayer(void)=0x80314780
StarPiece::calcAndSetBaseMtx(void)=0x80314890
StarPiece::setHostInfo(StarPieceHostInfo*)=0x80314AC0
TriangleFilterDelegator<StarPiece>::isInvalidTriangle(const Triangle*) const=0x80314AD0
StarPiece::__dt(void)=0x80314B00
short::(nit_\StarPiece_cpp)=0x80314B60
NrvStarPiece::HostTypeNrvFloating::__ct(void)=0x80314BE0
NrvStarPiece::HostTypeNrvHop::__ct(void)=0x80314BF0
NrvStarPiece::HostTypeNrvFall::__ct(void)=0x80314C00
NrvStarPiece::HostTypeNrvFallAfterReflect::__ct(void)=0x80314C10
NrvStarPiece::HostTypeNrvToTarget::__ct(void)=0x80314C20
NrvStarPiece::HostTypeNrvSpinDrained::__ct(void)=0x80314C30
NrvStarPiece::HostTypeNrvToPlayerEnd::__ct(void)=0x80314C40
NrvStarPiece::HostTypeNrvThrow::__ct(void)=0x80314C50
NrvStarPiece::HostTypeNrvThrowNoFall::__ct(void)=0x80314C60
NrvStarPiece::HostTypeNrvThrowFall::__ct(void)=0x80314C70
NrvStarPiece::HostTypeNrvFollowPlayer::__ct(void)=0x80314C80
NrvStarPiece::HostTypeNrvRailMove::__ct(void)=0x80314C90
NrvStarPiece::HostTypeNrvRailMove::execute(Spine*) const=0x80314CA0
NrvStarPiece::HostTypeNrvFollowPlayer::execute(Spine*) const=0x80314CB0
NrvStarPiece::HostTypeNrvThrowFall::executeOnEnd(Spine*) const=0x80314CC0
NrvStarPiece::HostTypeNrvThrowFall::execute(Spine*) const=0x80314D20
NrvStarPiece::HostTypeNrvThrowNoFall::executeOnEnd(Spine*) const=0x80314D30
NrvStarPiece::HostTypeNrvThrowNoFall::execute(Spine*) const=0x80314D90
NrvStarPiece::HostTypeNrvThrow::executeOnEnd(Spine*) const=0x80314DA0
NrvStarPiece::HostTypeNrvThrow::execute(Spine*) const=0x80314E00
NrvStarPiece::HostTypeNrvToPlayerEnd::execute(Spine*) const=0x80314E10
NrvStarPiece::HostTypeNrvSpinDrained::execute(Spine*) const=0x80314E20
NrvStarPiece::HostTypeNrvToTarget::execute(Spine*) const=0x80314E30
NrvStarPiece::HostTypeNrvFallAfterReflect::execute(Spine*) const=0x80314E40
NrvStarPiece::HostTypeNrvFall::execute(Spine*) const=0x80314E50
NrvStarPiece::HostTypeNrvHop::execute(Spine*) const=0x80314E60
NrvStarPiece::HostTypeNrvFloating::execute(Spine*) const=0x80314E70
StarPieceCluster::__ct(const char*)=0x80314E80
StarPieceCluster::init(const JMapInfoIter&)=0x80314EC0
StarPieceCluster::exeBreak(void)=0x80314F40
StarPieceCluster::attackSensor(HitSensor*, HitSensor*)=0x80314FD0
StarPieceCluster::__dt(void)=0x80315020
short::(nit_\StarPieceCluster_cpp)=0x80315080
NrvStarPieceCluster::StarPieceClusterNrvWait::__ct(void)=0x803150B0
NrvStarPieceCluster::StarPieceClusterNrvBreak::__ct(void)=0x803150C0
NrvStarPieceCluster::StarPieceClusterNrvBreak::execute(Spine*) const=0x803150D0
NrvStarPieceCluster::StarPieceClusterNrvWait::execute(Spine*) const=0x803150E0
StarPieceClusterRock::__ct(const char*)=0x803150F0
StarPieceClusterRock::init(const JMapInfoIter&)=0x80315150
StarPieceClusterRock::attackSensor(HitSensor*, HitSensor*)=0x80315290
StarPieceClusterRock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803152F0
StarPieceTracking::calcStarPieceDirection(void)=0x803153B0
StarPieceClusterRock::__dt(void)=0x80315560
short::(nit_\StarPieceClusterRock_cpp)=0x803155C0
NrvStarPieceClusterRock::StarPieceClusterRockNrvWait::__ct(void)=0x803155F0
NrvStarPieceClusterRock::StarPieceClusterRockNrvBreak::__ct(void)=0x80315600
NrvStarPieceClusterRock::StarPieceClusterRockNrvBreak::execute(Spine*) const=0x80315610
NrvStarPieceClusterRock::StarPieceClusterRockNrvWait::execute(Spine*) const=0x80315670
MR::getStarPieceDirector(void)=0x80315680
MR::createStarPiece(void)=0x803156B0
MR::getDeadStarPiece(void)=0x80315770
MR::resetChasingStarPiece(void)=0x803157A0
MR::isResetChasingStarPiece(void)=0x803157D0
MR::gotByPlayer(void)=0x80315800
MR::giftStarPieceToTarget(HitSensor*, unsigned long)=0x80315830
MR::incNumStarPieceGettable(long)=0x80315880
MR::incNumStarPieceNewed(void)=0x80315920
StarPieceDirector::__ct(const char*)=0x80315960
StarPieceDirector::declare(const NameObj*, long)=0x80315AB0
StarPieceDirector::declareReceiveNum(const NameObj*, long)=0x80315B60
StarPieceDirector::getDeclareRemnantStarPieceCount(const NameObj*)=0x80315BF0
StarPieceDirector::getDeclareRemnantStarPieceCountNotExist(const NameObj*)=0x80315C20
StarPieceDirector::hopPiece(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80315C60
StarPieceHostInfo::isAppearable(void)=0x80315D60
StarPieceDirector::appearPiece(const NameObj*, const JGeometry::TVec3<float>&, long, float, float, bool, bool)=0x80315D90
StarPieceDirector::appearPieceToDirection(const NameObj*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long, float, float, bool, bool, bool)=0x80315ED0
StarPieceDirector::gotByPlayer(void)=0x80316290
StarPieceDirector::movement(void)=0x80316300
StarPieceDirector::initCSDelay(void)=0x803163C0
StarPieceDirector::initCSSound(void)=0x803163F0
StarPieceDirector::giftToTarget(HitSensor*, unsigned long)=0x80316430
StarPieceDirector::getDeadStarPiece(void)=0x80316540
StarPieceDirector::calcPosCameraShoot(long)=0x803165C0
StarPieceDirector::clearGotCountReceiver(const NameObj*)=0x803166B0
StarPieceDirector::findHostInfo(const NameObj*)=0x803166E0
StarPieceDirector::findReceiverInfo(const NameObj*)=0x80316720
StarPieceShooter::__ct(long, const char*)=0x80316760
StarPieceShooter::init(const JMapInfoIter&)=0x80316800
StarPieceShooter::exeWait(void)=0x803168E0
StarPieceShooter::exeLockOn(void)=0x80316910
StarPieceShooter::attackSensor(HitSensor*, HitSensor*)=0x80316990
StarPieceShooter::control(void)=0x80316A40
StarPieceShooter::shoot(void)=0x80316B00
StarPieceShooter::tryShoot(void)=0x80316D00
StarPieceShooter::calcShootGoalUsingPointingDepth(void)=0x80316FA0
StarPieceDirector::__dt(void)=0x80317120
StarPieceShooter::__dt(void)=0x80317180
short::(nit_\StarPieceDirector_cpp)=0x803171E0
NrvStarPieceShooter::HostTypeNrvWait::__ct(void)=0x80317210
NrvStarPieceShooter::HostTypeNrvLockOn::__ct(void)=0x80317220
NrvStarPieceShooter::HostTypeNrvLockOn::execute(Spine*) const=0x80317230
NrvStarPieceShooter::HostTypeNrvWait::execute(Spine*) const=0x80317240
StarPieceFlower::__ct(const char*)=0x80317250
StarPieceFlower::init(const JMapInfoIter&)=0x803172B0
StarPieceFlower::exeCloseWait(void)=0x803173B0
StarPieceFlower::exeOpen(void)=0x80317420
StarPieceFlower::exeSpinReaction(void)=0x80317480
StarPieceFlower::control(void)=0x803174E0
StarPieceFlower::calcAndSetBaseMtx(void)=0x80317580
StarPieceFlower::attackSensor(HitSensor*, HitSensor*)=0x80317610
StarPieceFlower::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80317780
StarPieceFlower::__dt(void)=0x80317850
short::(nit_\StarPieceFlower_cpp)=0x803178B0
NrvStarPieceFlower::StarPieceFlowerNrvCloseWait::__ct(void)=0x803178F0
NrvStarPieceFlower::StarPieceFlowerNrvOpen::__ct(void)=0x80317900
NrvStarPieceFlower::StarPieceFlowerNrvOpenWait::__ct(void)=0x80317910
NrvStarPieceFlower::StarPieceFlowerNrvSpinReaction::__ct(void)=0x80317920
NrvStarPieceFlower::StarPieceFlowerNrvSpinReaction::execute(Spine*) const=0x80317930
NrvStarPieceFlower::StarPieceFlowerNrvOpenWait::execute(Spine*) const=0x80317940
NrvStarPieceFlower::StarPieceFlowerNrvOpen::execute(Spine*) const=0x80317950
NrvStarPieceFlower::StarPieceFlowerNrvCloseWait::execute(Spine*) const=0x80317960
StarPieceFollowGroup::__ct(const char*)=0x80317970
StarPieceFollowGroup::init(const JMapInfoIter&)=0x803179F0
StarPieceFollowGroup::beginFollowPieces(void)=0x80317BA0
StarPieceFollowGroup::placementPiece(long)=0x80317C80
StarPieceFollowGroup::updateAxises(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x80317E20
StarPieceFollowGroup::followPieces(void)=0x80317EC0
StarPieceFollowGroup::allKillPieces(void)=0x80318240
StarPieceFollowGroup::onSwitchA(void)=0x803182C0
StarPieceFollowGroup::exeFollowToPlayer(void)=0x80318330
StarPieceFollowGroup::exeFollowEnd(void)=0x803183C0
MR::FunctorV0M<StarPieceFollowGroup*,M20StarPieceFollowGroupFPCvPv_v>::__cl(void) const=0x80318520
MR::FunctorV0M<StarPieceFollowGroup*,M20StarPieceFollowGroupFPCvPv_v>::clone(JKRHeap*) const=0x80318550
StarPieceFollowGroup::__dt(void)=0x803185C0
short::(nit_\StarPieceFollowGroup_cpp)=0x80318620
NrvStarPieceFollowGroup::HostTypeNrvFollowToPlayer::__ct(void)=0x80318650
NrvStarPieceFollowGroup::HostTypeNrvFollowEnd::__ct(void)=0x80318660
NrvStarPieceFollowGroup::HostTypeNrvFollowEnd::execute(Spine*) const=0x80318670
NrvStarPieceFollowGroup::HostTypeNrvFollowToPlayer::execute(Spine*) const=0x80318680
StarPieceFlowerController::__ct(const char*)=0x80318690
StarPieceFlowerController::init(const JMapInfoIter&)=0x803186E0
StarPieceFlowerController::movement(void)=0x803186F0
StarPieceFlowerController::__dt(void)=0x803187B0
StarPieceGroup::__ct(const char*)=0x80318810
StarPieceGroup::forceReplaceStarPieceAll(void)=0x803188A0
StarPieceGroup::forceKillStarPieceAll(bool)=0x80318950
StarPieceGroup::init(const JMapInfoIter&)=0x80318A30
MR::Functor<StarPieceGroup>(StarPieceGroup*, M14StarPieceGroupFPCvPv_v_Q22MR55FunctorV0M<StarPieceGroup*,M14StarPieceGroupFPCvPv_v>)=0x80318E60
StarPieceGroup::makeActorAppeared(void)=0x80318EA0
StarPieceGroup::appear(void)=0x80318F00
StarPieceGroup::makeActorDead(void)=0x80318F60
StarPieceGroup::control(void)=0x80318FC0
StarPieceGroup::placementAllPiece(void)=0x80319020
StarPieceGroup::placementPieceOnCircle(void)=0x80319050
StarPieceGroup::placementPieceOnRail(void)=0x803192A0
StarPieceGroup::placementPieceOnRailPoint(void)=0x80319450
StarPieceGroup::onSwitchA(void)=0x803194D0
StarPieceGroup::offSwitchA(void)=0x80319510
StarPieceGroup::onSwitchB(void)=0x80319550
StarPieceGroup::startClipped(void)=0x803195B0
StarPieceGroup::endClipped(void)=0x80319650
StarPieceGroup::exeFlow(void)=0x803196F0
MR::FunctorV0M<StarPieceGroup*,M14StarPieceGroupFPCvPv_v>::__cl(void) const=0x803197E0
MR::FunctorV0M<StarPieceGroup*,M14StarPieceGroupFPCvPv_v>::clone(JKRHeap*) const=0x80319810
StarPieceGroup::__dt(void)=0x80319880
short::(nit_\StarPieceGroup_cpp)=0x803198E0
NrvStarPieceGroup::HostTypeNrvGroup::__ct(void)=0x80319910
NrvStarPieceGroup::HostTypeNrvFlow::__ct(void)=0x80319920
NrvStarPieceGroup::HostTypeNrvFlow::execute(Spine*) const=0x80319930
NrvStarPieceGroup::HostTypeNrvGroup::execute(Spine*) const=0x80319940
StarPieceMother::__ct(const char*)=0x8031A720
StarPieceMother::init(const JMapInfoIter&)=0x8031A780
MR::Functor<StarPieceMother>(StarPieceMother*, M15StarPieceMotherFPCvPv_v_Q22MR57FunctorV0M<StarPieceMother*,M15StarPieceMotherFPCvPv_v>)=0x8031AB10
StarPieceMother::kill(void)=0x8031AB50
StarPieceMother::control(void)=0x8031ABD0
StarPieceMother::exeMoveOnRail(void)=0x8031ABF0
StarPieceMother::placementPieceOnRail(float)=0x8031AD00
StarPieceMother::onSwitchA(void)=0x8031AE50
StarPieceMother::offSwitchA(void)=0x8031AE90
StarPieceMother::attackSensor(HitSensor*, HitSensor*)=0x8031AED0
StarPieceMother::emitStarPieces(void)=0x8031AF50
MR::FunctorV0M<StarPieceMother*,M15StarPieceMotherFPCvPv_v>::__cl(void) const=0x8031B080
MR::FunctorV0M<StarPieceMother*,M15StarPieceMotherFPCvPv_v>::clone(JKRHeap*) const=0x8031B0B0
StarPieceMother::__dt(void)=0x8031B120
short::(nit_\StarPieceMother_cpp)=0x8031B180
NrvStarPieceMother::HostTypeNrvMoveOnRail::__ct(void)=0x8031B1B0
NrvStarPieceMother::HostTypeNrvWait::__ct(void)=0x8031B1C0
NrvStarPieceMother::HostTypeNrvWait::execute(Spine*) const=0x8031B1D0
NrvStarPieceMother::HostTypeNrvMoveOnRail::execute(Spine*) const=0x8031B1E0
StarPieceSpot::__ct(const char*)=0x8031B5E0
StarPieceSpot::init(const JMapInfoIter&)=0x8031B620
StarPieceSpot::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8031B750
StarPieceSpot::emit(void)=0x8031B7D0
MR::FunctorV0M<StarPieceSpot*,M13StarPieceSpotFPCvPv_v>::__cl(void) const=0x8031B820
MR::FunctorV0M<StarPieceSpot*,M13StarPieceSpotFPCvPv_v>::clone(JKRHeap*) const=0x8031B850
StarPieceSpot::__dt(void)=0x8031B8C0
StarPieceSpotEruption::__ct(const char*)=0x8031B920
StarPieceSpotEruption::init(const JMapInfoIter&)=0x8031B970
StarPieceSpotEruption::exeRest(void)=0x8031BA70
StarPieceSpotEruption::emit(void)=0x8031BAE0
StarPieceSpotEruption::__dt(void)=0x8031BB80
short::(nit_\StarPieceSpotEruption_cpp)=0x8031BBE0
NrvStarPieceSpotEruption::StarPieceSpotEruptionNrvRest::__ct(void)=0x8031BC10
NrvStarPieceSpotEruption::StarPieceSpotEruptionNrvEruption::__ct(void)=0x8031BC20
NrvStarPieceSpotEruption::StarPieceSpotEruptionNrvEruption::execute(Spine*) const=0x8031BC30
NrvStarPieceSpotEruption::StarPieceSpotEruptionNrvRest::execute(Spine*) const=0x8031BC70
StemFruit::__ct(const char*)=0x8031BC80
StemFruit::init(const JMapInfoIter&)=0x8031BCD0
StemFruit::onEat(void)=0x8031C490
StemFruit::control(void)=0x8031C6A0
short::(nit_\StemFruit_cpp)=0x8031DB10
Sun::__ct(const char*)=0x8031DE20
Sun::init(const JMapInfoIter&)=0x8031DE60
Sun::__dt(void)=0x8031DEC0
SuperSpinDriver::__ct(const char*, long)=0x8031DF20
SuperSpinDriver::init(const JMapInfoIter&)=0x8031E0F0
MR::Functor<SuperSpinDriver>(SuperSpinDriver*, M15SuperSpinDriverFPCvPv_v_Q22MR57FunctorV0M<SuperSpinDriver*,M15SuperSpinDriverFPCvPv_v>)=0x8031E3B0
SuperSpinDriver::initAfterPlacement(void)=0x8031E3F0
SuperSpinDriver::initParamFromJMapInfo(const JMapInfoIter&)=0x8031E450
SuperSpinDriver::initGravityAxis(void)=0x8031E500
SuperSpinDriver::initSensor(void)=0x8031E580
SuperSpinDriver::initEmptyModel(void)=0x8031E630
SuperSpinDriver::initEventCamera(const JMapInfoIter&)=0x8031E710
SuperSpinDriver::initShootPath(const JMapInfoIter&)=0x8031E770
SuperSpinDriver::initShootPathDraw(const JMapInfoIter&)=0x8031E800
SuperSpinDriver::initColor(void)=0x8031E8A0
SuperSpinDriver::initAppearState(const JMapInfoIter&)=0x8031E950
SuperSpinDriver::makeActorAppeared(void)=0x8031EAB0
SuperSpinDriver::makeActorDead(void)=0x8031EB00
SuperSpinDriver::appear(void)=0x8031EB50
SuperSpinDriver::control(void)=0x8031EBD0
SuperSpinDriver::calcAndSetBaseMtx(void)=0x8031ECB0
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setEulerY(float)=0x8031ED20
SuperSpinDriver::startClipped(void)=0x8031EDB0
SuperSpinDriver::endClipped(void)=0x8031EDF0
SuperSpinDriver::attackSensor(HitSensor*, HitSensor*)=0x8031EE30
SuperSpinDriver::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8031EE90
SuperSpinDriver::canBind(HitSensor*, HitSensor*) const=0x8031F010
SuperSpinDriver::tryBind(HitSensor*, HitSensor*)=0x8031F0F0
SuperSpinDriver::tryEndCapture(void)=0x8031F310
SuperSpinDriver::tryForceCancel(void)=0x8031F390
SuperSpinDriver::tryShootStart(void)=0x8031F3D0
SuperSpinDriver::tryShoot(void)=0x8031F460
SuperSpinDriver::tryEndShoot(void)=0x8031F4B0
SuperSpinDriver::tryEndCoolDown(void)=0x8031F510
SuperSpinDriver::trySwitchOff(void)=0x8031F570
SuperSpinDriver::requestAppear(void)=0x8031F5E0
SuperSpinDriver::requestEmptyAppear(void)=0x8031F650
SuperSpinDriver::requestActive(void)=0x8031F6C0
SuperSpinDriver::requestHide(void)=0x8031F720
SuperSpinDriver::requestShow(void)=0x8031F780
SuperSpinDriver::exeEmptyNonActive(void)=0x8031F7D0
SuperSpinDriver::exeEmptyAppear(void)=0x8031F820
SuperSpinDriver::exeEmptyWait(void)=0x8031F920
SuperSpinDriver::exeNonActive(void)=0x8031F970
SuperSpinDriver::exeAppear(void)=0x8031F9E0
SuperSpinDriver::exeWait(void)=0x8031FB00
SuperSpinDriver::exeCapture(void)=0x8031FBF0
SuperSpinDriver::exeShootStart(void)=0x8031FD10
SuperSpinDriver::exeShoot(void)=0x8031FEC0
SuperSpinDriver::updateShootMotion(void)=0x8031FFD0
SuperSpinDriver::cancelBind(void)=0x80320380
SuperSpinDriver::endBind(void)=0x803203D0
SuperSpinDriver::updateBindActorMatrix(void)=0x80320410
SuperSpinDriver::updateBindActorPoseToShoot(float)=0x803205F0
SuperSpinDriver::turnBindHead(const JGeometry::TVec3<float>&, float)=0x80320680
SuperSpinDriver::moveBindPosToCenter(void)=0x80320830
SuperSpinDriver::startPathDraw(void)=0x80320910
SuperSpinDriver::endPathDraw(void)=0x80320980
SuperSpinDriver::updatePathDraw(float)=0x803209E0
SuperSpinDriver::calcShootMotionTime(void)=0x80320AF0
SuperSpinDriver::addSwingSignRotateY(void)=0x80320C30
SuperSpinDriver::onUse(void)=0x80320CB0
SuperSpinDriver::isNeedEmptyModel(void) const=0x80320D00
MR::createSuperSpinDriverYellow(const char*)=0x80320D80
MR::createSuperSpinDriverPink(const char*)=0x80320DD0
MR::FunctorV0M<SuperSpinDriver*,M15SuperSpinDriverFPCvPv_v>::__cl(void) const=0x80320EA0
MR::FunctorV0M<SuperSpinDriver*,M15SuperSpinDriverFPCvPv_v>::clone(JKRHeap*) const=0x80320ED0
SuperSpinDriver::__dt(void)=0x80320F40
short::(nit_\SuperSpinDriver_cpp)=0x80320FA0
NrvSuperSpinDriver::SuperSpinDriverNrvTryDemo::__ct(void)=0x80321020
NrvSuperSpinDriver::SuperSpinDriverNrvEmptyNonActive::__ct(void)=0x80321030
NrvSuperSpinDriver::SuperSpinDriverNrvEmptyAppear::__ct(void)=0x80321040
NrvSuperSpinDriver::SuperSpinDriverNrvEmptyWait::__ct(void)=0x80321050
NrvSuperSpinDriver::SuperSpinDriverNrvNonActive::__ct(void)=0x80321060
NrvSuperSpinDriver::SuperSpinDriverNrvAppear::__ct(void)=0x80321070
NrvSuperSpinDriver::SuperSpinDriverNrvWait::__ct(void)=0x80321080
NrvSuperSpinDriver::SuperSpinDriverNrvCapture::__ct(void)=0x80321090
NrvSuperSpinDriver::SuperSpinDriverNrvShootStart::__ct(void)=0x803210A0
NrvSuperSpinDriver::SuperSpinDriverNrvShoot::__ct(void)=0x803210B0
NrvSuperSpinDriver::SuperSpinDriverNrvCoolDown::__ct(void)=0x803210C0
NrvSuperSpinDriver::SuperSpinDriverNrvCoolDown::execute(Spine*) const=0x803210D0
NrvSuperSpinDriver::SuperSpinDriverNrvShoot::executeOnEnd(Spine*) const=0x80321120
NrvSuperSpinDriver::SuperSpinDriverNrvShoot::execute(Spine*) const=0x80321130
NrvSuperSpinDriver::SuperSpinDriverNrvShootStart::execute(Spine*) const=0x80321140
NrvSuperSpinDriver::SuperSpinDriverNrvCapture::execute(Spine*) const=0x80321150
NrvSuperSpinDriver::SuperSpinDriverNrvWait::execute(Spine*) const=0x80321160
NrvSuperSpinDriver::SuperSpinDriverNrvAppear::execute(Spine*) const=0x80321170
NrvSuperSpinDriver::SuperSpinDriverNrvNonActive::execute(Spine*) const=0x80321180
NrvSuperSpinDriver::SuperSpinDriverNrvEmptyWait::execute(Spine*) const=0x80321190
NrvSuperSpinDriver::SuperSpinDriverNrvEmptyAppear::execute(Spine*) const=0x803211A0
NrvSuperSpinDriver::SuperSpinDriverNrvEmptyNonActive::execute(Spine*) const=0x803211B0
NrvSuperSpinDriver::SuperSpinDriverNrvTryDemo::execute(Spine*) const=0x803211C0
SupportFlushPoint::__ct(const char*)=0x803211D0
SupportFlushPoint::init(const JMapInfoIter&)=0x80321220
SupportFlushPoint::control(void)=0x803212C0
SupportFlushPoint::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803212D0
SupportFlushPoint::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80321340
SupportFlushPoint::exeAppear(void)=0x80321400
SupportFlushPoint::exeHide(void)=0x80321460
SupportFlushPoint::exeGenerateItem(void)=0x803214D0
SupportFlushPoint::__dt(void)=0x80321590
short::(nit_\SupportFlushPoint_cpp)=0x803215F0
NrvSupportFlushPoint::SupportFlushPointNrvAppear::__ct(void)=0x80321640
NrvSupportFlushPoint::SupportFlushPointNrvHide::__ct(void)=0x80321650
NrvSupportFlushPoint::SupportFlushPointNrvWait::__ct(void)=0x80321660
NrvSupportFlushPoint::SupportFlushPointNrvGenerateItem::__ct(void)=0x80321670
NrvSupportFlushPoint::SupportFlushPointNrvDisappear::__ct(void)=0x80321680
NrvSupportFlushPoint::SupportFlushPointNrvDisappear::execute(Spine*) const=0x80321690
NrvSupportFlushPoint::SupportFlushPointNrvGenerateItem::execute(Spine*) const=0x803216A0
NrvSupportFlushPoint::SupportFlushPointNrvWait::execute(Spine*) const=0x803216B0
NrvSupportFlushPoint::SupportFlushPointNrvHide::execute(Spine*) const=0x80321700
NrvSupportFlushPoint::SupportFlushPointNrvAppear::execute(Spine*) const=0x80321710
SupportPlayDirector::__ct(void)=0x80321720
SupportPlayDirector::init(const JMapInfoIter&)=0x80321780
SupportPlayDirector::movement(void)=0x803217F0
SupportPlayDirector::__dt(void)=0x80321A50
SwingActionWatcher::__ct(const char*)=0x80321AB0
SwingActionWatcher::movement(void)=0x80321B00
MR::createSwingActionWatcher(void)=0x80321B50
MR::getSwingActionWatcher(void)=0x80321B60
SwingActionWatcher::__dt(void)=0x80321B90
SwitchFreezePlanet::__ct(const char*)=0x80321BF0
SwitchFreezePlanet::init(const JMapInfoIter&)=0x80321C50
SwitchFreezePlanet::startClipped(void)=0x80321EA0
SwitchFreezePlanet::endClipped(void)=0x80321EE0
SwitchFreezePlanet::control(void)=0x80321F40
MR::FunctorV0M<SwitchFreezePlanet*,M18SwitchFreezePlanetFPCvPv_v>::__cl(void) const=0x80322490
MR::FunctorV0M<SwitchFreezePlanet*,M18SwitchFreezePlanetFPCvPv_v>::clone(JKRHeap*) const=0x803224C0
SwitchFreezePlanet::__dt(void)=0x80322530
short::(nit_\SwitchFreezePlanet_cpp)=0x80322590
SwitchingMoveBlock::__ct(const char*)=0x80322680
SwitchingMoveBlock::init(const JMapInfoIter&)=0x803226D0
MR::Functor<SwitchingMoveBlock>(SwitchingMoveBlock*, M18SwitchingMoveBlockFPCvPv_v_Q22MR63FunctorV0M<SwitchingMoveBlock*,M18SwitchingMoveBlockFPCvPv_v>)=0x803229B0
SwitchingMoveBlock::control(void)=0x803229F0
SwitchingMoveBlock::calcAndSetBaseMtx(void)=0x80322A10
SwitchingMoveBlock::listenSwitchOnA(void)=0x80322A20
SwitchingMoveBlock::listenSwitchOffA(void)=0x80322A90
SwitchingMoveBlock::exeMove(void)=0x80322B00
MR::FunctorV0M<SwitchingMoveBlock*,M18SwitchingMoveBlockFPCvPv_v>::__cl(void) const=0x80322B80
MR::FunctorV0M<SwitchingMoveBlock*,M18SwitchingMoveBlockFPCvPv_v>::clone(JKRHeap*) const=0x80322BB0
SwitchingMoveBlock::__dt(void)=0x80322C20
short::(nit_\SwitchingMoveBlock_cpp)=0x80322C80
NrvSwitchingMoveBlock::SwitchingMoveBlockNrvWait::__ct(void)=0x80322CB0
NrvSwitchingMoveBlock::SwitchingMoveBlockNrvMove::__ct(void)=0x80322CC0
NrvSwitchingMoveBlock::SwitchingMoveBlockNrvMove::execute(Spine*) const=0x80322CD0
NrvSwitchingMoveBlock::SwitchingMoveBlockNrvWait::execute(Spine*) const=0x80322CE0
TicoCoin::__ct(const char*)=0x80322D20
TicoCoin::init(const JMapInfoIter&)=0x80322D70
TicoCoin::initAfterPlacement(void)=0x80322E90
TicoCoin::makeActorAppeared(void)=0x80322EA0
TicoCoin::control(void)=0x80322EE0
TicoCoin::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80322EF0
TicoCoin::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80322F00
TicoCoin::tryCollect(void)=0x80322F50
TicoCoin::exeCollect(void)=0x80322FA0
TicoCoin::isCollectedInStage(void) const=0x80323040
TicoCoin::__dt(void)=0x80323080
short::(nit_\TicoCoin_cpp)=0x803230E0
NrvTicoCoin::TicoCoinNrvAppear::__ct(void)=0x80323120
NrvTicoCoin::TicoCoinNrvRotate::__ct(void)=0x80323130
NrvTicoCoin::TicoCoinNrvCollect::__ct(void)=0x80323140
NrvTicoCoin::TicoCoinNrvDisappear::__ct(void)=0x80323150
NrvTicoCoin::TicoCoinNrvDisappear::execute(Spine*) const=0x80323160
NrvTicoCoin::TicoCoinNrvCollect::execute(Spine*) const=0x80323170
NrvTicoCoin::TicoCoinNrvRotate::execute(Spine*) const=0x80323180
NrvTicoCoin::TicoCoinNrvAppear::execute(Spine*) const=0x803231D0
TimeAttackClock::__ct(const char*)=0x803231E0
TimeAttackClock::init(const JMapInfoIter&)=0x80323240
TimeAttackClock::appear(void)=0x80323370
TimeAttackClock::calcAndSetBaseMtx(void)=0x80323380
TimeAttackClock::exeCollect(void)=0x803233E0
TimeAttackClock::addTimer(void)=0x80323450
TimeAttackClock::attackSensor(HitSensor*, HitSensor*)=0x803234F0
TimeAttackClock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80323570
MR::FunctorV0M<TimeAttackClock*,M15TimeAttackClockFPCvPv_v>::__cl(void) const=0x80323580
MR::FunctorV0M<TimeAttackClock*,M15TimeAttackClockFPCvPv_v>::clone(JKRHeap*) const=0x803235B0
TimeAttackClock::__dt(void)=0x80323620
short::(nit_\TimeAttackClock_cpp)=0x80323680
NrvTimeAttackClock::TimeAttackClockNrvWait::__ct(void)=0x803236B0
NrvTimeAttackClock::TimeAttackClockNrvCollect::__ct(void)=0x803236C0
NrvTimeAttackClock::TimeAttackClockNrvCollect::execute(Spine*) const=0x803236D0
NrvTimeAttackClock::TimeAttackClockNrvWait::execute(Spine*) const=0x803236E0
TogepinHole::__ct(const char*, LiveActor*)=0x80323730
TogepinHole::init(const JMapInfoIter&)=0x80323780
TogepinHole::calcAndSetBaseMtx(void)=0x803237D0
Togepin::__ct(const char*, LiveActor*)=0x80323810
Togepin::init(const JMapInfoIter&)=0x80323880
Togepin::initAfterPlacement(void)=0x80323980
Togepin::control(void)=0x80323990
Togepin::calcAndSetBaseMtx(void)=0x80323A20
Togepin::attackSensor(HitSensor*, HitSensor*)=0x80323A70
Togepin::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80323AD0
Togepin::tryHide(void)=0x80323C50
Togepin::tryAppear(void)=0x80323CC0
Togepin::exeAppear(void)=0x80323D70
Togepin::exeWait(void)=0x80323E00
Togepin::exeReaction(void)=0x80323E70
Togepin::exePanic(void)=0x80323F00
Togepin::exeHide(void)=0x80323F60
Togepin::exeBlow(void)=0x80323FE0
Togepin::isNerveTypeHittable(void) const=0x803240F0
Togepin::isNerveTypeBlow(void) const=0x80324150
Togepin::__dt(void)=0x80324180
TogepinHole::__dt(void)=0x803241E0
short::(nit_\Togepin_cpp)=0x80324240
NrvTogepin::TogepinNrvAppear::__ct(void)=0x803242A0
NrvTogepin::TogepinNrvPanic::__ct(void)=0x803242B0
NrvTogepin::TogepinNrvWait::__ct(void)=0x803242C0
NrvTogepin::TogepinNrvReaction::__ct(void)=0x803242D0
NrvTogepin::TogepinNrvHide::__ct(void)=0x803242E0
NrvTogepin::TogepinNrvHidden::__ct(void)=0x803242F0
NrvTogepin::TogepinNrvBlow::__ct(void)=0x80324300
NrvTogepin::TogepinNrvBlow::execute(Spine*) const=0x80324310
NrvTogepin::TogepinNrvHidden::execute(Spine*) const=0x80324320
NrvTogepin::TogepinNrvHide::execute(Spine*) const=0x80324330
NrvTogepin::TogepinNrvReaction::execute(Spine*) const=0x80324340
NrvTogepin::TogepinNrvWait::execute(Spine*) const=0x80324350
NrvTogepin::TogepinNrvPanic::execute(Spine*) const=0x80324360
NrvTogepin::TogepinNrvAppear::execute(Spine*) const=0x80324370
TogepinScorer::__ct(const char*)=0x80324380
TogepinScorer::init(const JMapInfoIter&)=0x803243E0
TogepinScorer::__dt(void)=0x80324C10
TogepinGroup::__dt(void)=0x80324C70
short::(nit_\TogepinScorer_cpp)=0x80324CD0
TreasureBoxCracked::__ct(const char*)=0x80324D90
TreasureBoxCracked::makeActorAppeared(void)=0x80324E00
TreasureBoxCracked::makeActorDead(void)=0x80324E40
TreasureBoxCracked::init(const JMapInfoIter&)=0x80324E80
TreasureBoxCracked::exeWait(void)=0x80325010
TreasureBoxCracked::exeOpenWait(void)=0x803250D0
TreasureBoxCracked::exeAlwaysOpen(void)=0x80325160
TreasureBoxCracked::control(void)=0x80325210
TreasureBoxCracked::attackSensor(HitSensor*, HitSensor*)=0x80325310
TreasureBoxCracked::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803253E0
TreasureBoxCracked::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x803254F0
TreasureBoxCracked::initItem(const JMapInfoIter&)=0x803255C0
TreasureBoxCracked::makeOpen(void)=0x803256A0
TreasureBoxCracked::isHalfOpen(void) const=0x80325820
TreasureBoxCracked::__dt(void)=0x80325890
short::(nit_\TreasureBoxCracked_cpp)=0x803258F0
NrvTreasureBoxCracked::TreasureBoxCrackedNrvWait::__ct(void)=0x80325940
NrvTreasureBoxCracked::TreasureBoxCrackedNrvOpenWait::__ct(void)=0x80325950
NrvTreasureBoxCracked::TreasureBoxCrackedNrvAlwaysOpen::__ct(void)=0x80325960
NrvTreasureBoxCracked::TreasureBoxCrackedNrvAlwaysOpen::execute(Spine*) const=0x80325970
NrvTreasureBoxCracked::TreasureBoxCrackedNrvOpenWait::execute(Spine*) const=0x80325980
NrvTreasureBoxCracked::TreasureBoxCrackedNrvWait::execute(Spine*) const=0x80325990
TreasureSpot::__ct(const char*)=0x803259A0
TreasureSpot::init(const JMapInfoIter&)=0x803259F0
TreasureSpot::exeSpout(void)=0x80325AE0
TreasureSpot::control(void)=0x80325BD0
TreasureSpot::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80325C30
TreasureSpot::switchEmitGlow(void)=0x80325D00
TreasureSpot::__dt(void)=0x80325D90
short::(nit_\TreasureSpot_cpp)=0x80325DF0
NrvTreasureSpot::TreasureSpotNrvWait::__ct(void)=0x80325E30
NrvTreasureSpot::TreasureSpotNrvEnd::__ct(void)=0x80325E40
NrvTreasureSpot::TreasureSpotNrvSpout::__ct(void)=0x80325E50
NrvTreasureSpot::TreasureSpotNrvSpout::execute(Spine*) const=0x80325E60
NrvTreasureSpot::TreasureSpotNrvEnd::execute(Spine*) const=0x80325E70
NrvTreasureSpot::TreasureSpotNrvWait::execute(Spine*) const=0x80325E80
Tsukidashikun::__ct(const char*)=0x80325E90
Tsukidashikun::init(const JMapInfoIter&)=0x80325EE0
Tsukidashikun::exeWait(void)=0x80325FD0
Tsukidashikun::exeSign(void)=0x80326080
Tsukidashikun::exeMove(void)=0x803261C0
Tsukidashikun::connectToScene(const MapObjActorInitInfo&)=0x803262A0
Tsukidashikun::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x803262B0
Tsukidashikun::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x80326300
Tsukidashikun::startMove(void)=0x80326310
MR::FunctorV0M<Tsukidashikun*,M13TsukidashikunFPCvPv_v>::__cl(void) const=0x80326320
MR::FunctorV0M<Tsukidashikun*,M13TsukidashikunFPCvPv_v>::clone(JKRHeap*) const=0x80326350
Tsukidashikun::__dt(void)=0x803263C0
short::(nit_\Tsukidashikun_cpp)=0x80326420
NrvTsukidashikun::TsukidashikunNrvRelax::__ct(void)=0x80326480
NrvTsukidashikun::TsukidashikunNrvWaitBack::__ct(void)=0x80326490
NrvTsukidashikun::TsukidashikunNrvWaitForward::__ct(void)=0x803264A0
NrvTsukidashikun::TsukidashikunNrvSignBack::__ct(void)=0x803264B0
NrvTsukidashikun::TsukidashikunNrvSignForward::__ct(void)=0x803264C0
NrvTsukidashikun::TsukidashikunNrvMoveBack::__ct(void)=0x803264D0
NrvTsukidashikun::TsukidashikunNrvMoveForward::__ct(void)=0x803264E0
NrvTsukidashikun::TsukidashikunNrvMoveForward::execute(Spine*) const=0x803264F0
NrvTsukidashikun::TsukidashikunNrvMoveBack::execute(Spine*) const=0x80326500
NrvTsukidashikun::TsukidashikunNrvSignForward::execute(Spine*) const=0x80326510
NrvTsukidashikun::TsukidashikunNrvSignBack::execute(Spine*) const=0x80326520
NrvTsukidashikun::TsukidashikunNrvWaitForward::execute(Spine*) const=0x80326530
NrvTsukidashikun::TsukidashikunNrvWaitBack::execute(Spine*) const=0x80326540
NrvTsukidashikun::TsukidashikunNrvRelax::execute(Spine*) const=0x80326550
TypicalDoor::__ct(const char*)=0x803265A0
TypicalDoor::init(const JMapInfoIter&)=0x803265F0
TypicalDoor::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x80326770
MR::Functor<TypicalDoor>(TypicalDoor*, M11TypicalDoorFPCvPv_v_Q22MR49FunctorV0M<TypicalDoor*,M11TypicalDoorFPCvPv_v>)=0x803267D0
TypicalDoor::open(void)=0x80326810
TypicalDoor::close(void)=0x80326820
TypicalDoor::exeClose(void)=0x80326830
TypicalDoor::exeOpen(void)=0x803268B0
TypicalDoorOpen::init(const JMapInfoIter&)=0x80326930
TypicalDoorOpen::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x80326970
DarknessRoomDoor::__ct(const char*)=0x803269D0
TypicalDoor::__dt(void)=0x80326A20
DarknessRoomDoor::init(const JMapInfoIter&)=0x80326A80
DarknessRoomDoor::control(void)=0x80326AF0
DarknessRoomDoor::connectToScene(const MapObjActorInitInfo&)=0x80326B60
DarknessRoomDoor::validateCollision(void)=0x80326B80
DarknessRoomDoor::invalidateCollision(void)=0x80326C10
MR::FunctorV0M<TypicalDoor*,M11TypicalDoorFPCvPv_v>::__cl(void) const=0x80326CA0
MR::FunctorV0M<TypicalDoor*,M11TypicalDoorFPCvPv_v>::clone(JKRHeap*) const=0x80326CD0
TypicalDoorOpen::__dt(void)=0x80326D40
DarknessRoomDoor::__dt(void)=0x80326DA0
short::(nit_\TypicalDoor_cpp)=0x80326E00
NrvTypicalDoor::HostTypeClose::__ct(void)=0x80326E40
NrvTypicalDoor::HostTypeCloseForDemo::__ct(void)=0x80326E50
NrvTypicalDoor::HostTypeOpen::__ct(void)=0x80326E60
NrvTypicalDoor::HostTypeOpen::execute(Spine*) const=0x80326E70
NrvTypicalDoor::HostTypeCloseForDemo::execute(Spine*) const=0x80326E80
NrvTypicalDoor::HostTypeClose::execute(Spine*) const=0x80326E90
UFOKinoko::__ct(const char*)=0x80326EA0
UFOKinoko::init(const JMapInfoIter&)=0x80326EE0
MR::Functor<UFOKinoko>(UFOKinoko*, M9UFOKinokoFPCvPv_v_Q22MR43FunctorV0M<UFOKinoko*,M9UFOKinokoFPCvPv_v>)=0x80327070
UFOKinoko::control(void)=0x803270B0
UFOKinoko::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x803270F0
UFOKinoko::initCaseNoUseSwitchB(const MapObjActorInitInfo&)=0x80327150
UFOKinoko::startMove(void)=0x80327160
UFOKinoko::exeMove(void)=0x803271B0
UFOKinoko::exeStop(void)=0x80327250
MR::FunctorV0M<UFOKinoko*,M9UFOKinokoFPCvPv_v>::__cl(void) const=0x803272B0
MR::FunctorV0M<UFOKinoko*,M9UFOKinokoFPCvPv_v>::clone(JKRHeap*) const=0x803272E0
UFOKinoko::__dt(void)=0x80327350
short::(nit_\UFOKinoko_cpp)=0x803273B0
NrvUFOKinoko::HostTypeWait::__ct(void)=0x803273F0
NrvUFOKinoko::HostTypeMove::__ct(void)=0x80327400
NrvUFOKinoko::HostTypeStop::__ct(void)=0x80327410
NrvUFOKinoko::HostTypeStop::execute(Spine*) const=0x80327420
NrvUFOKinoko::HostTypeMove::execute(Spine*) const=0x80327430
NrvUFOKinoko::HostTypeWait::execute(Spine*) const=0x80327440
VsOtaRockTankIcePlanetFence::__ct(const char*)=0x80327450
VsOtaRockTankIcePlanetFence::init(const JMapInfoIter&)=0x80327490
VsOtaRockTankIcePlanetFence::__dt(void)=0x803274E0
WanwanGoal::__ct(const char*)=0x80327540
WanwanGoal::init(const JMapInfoIter&)=0x80327590
WanwanGoal::attackSensor(HitSensor*, HitSensor*)=0x803275F0
WanwanGoal::__dt(void)=0x80327690
short::(nit_\WanwanGoal_cpp)=0x803276F0
NrvWanwanGoal::WanwanGoalNrvWait::__ct(void)=0x80327700
NrvWanwanGoal::WanwanGoalNrvWait::execute(Spine*) const=0x80327710
WanwanLiftUpStep::__ct(const char*)=0x80327720
WanwanLiftUpStep::init(const JMapInfoIter&)=0x80327770
WanwanLiftUpStep::initCaseUseSwitchB(const MapObjActorInitInfo&)=0x803277C0
MR::Functor<WanwanLiftUpStep>(WanwanLiftUpStep*, M16WanwanLiftUpStepFPCvPv_v_Q22MR59FunctorV0M<WanwanLiftUpStep*,M16WanwanLiftUpStepFPCvPv_v>)=0x80327860
WanwanLiftUpStep::listenSwitchOnB(void)=0x803278A0
WanwanLiftUpStep::listenSwitchOffB(void)=0x803278F0
MR::FunctorV0M<WanwanLiftUpStep*,M16WanwanLiftUpStepFPCvPv_v>::__cl(void) const=0x80327940
MR::FunctorV0M<WanwanLiftUpStep*,M16WanwanLiftUpStepFPCvPv_v>::clone(JKRHeap*) const=0x80327970
WanwanLiftUpStep::__dt(void)=0x803279E0
MR::getWarpPodManager(void)=0x80327A40
WarpPodMgr::__ct(const char*)=0x80327A80
WarpPodMgr::getPairPod(const LiveActor*)=0x80327B10
WarpPodMgr::startEventCamera(const LiveActor*)=0x80327BD0
WarpPodMgr::endEventCamera(void)=0x80327C10
WarpPodMgr::notifyWarpEnd(WarpPod*)=0x80327C70
WarpPodMgr::draw(void) const=0x80327CC0
WarpPod::init(const JMapInfoIter&)=0x80327CD0
WarpPod::initAfterPlacement(void)=0x80328070
WarpPod::glowEffect(void)=0x803280C0
WarpPod::initPair(void)=0x80328140
WarpPod::appear(void)=0x803282A0
WarpPod::appearWithDemo(void)=0x80328370
WarpPod::control(void)=0x803283F0
WarpPod::movement(void)=0x803284E0
WarpPod::startEventCamera(void) const=0x80328600
WarpPod::endEventCamera(void)=0x80328640
WarpPod::attackSensor(HitSensor*, HitSensor*)=0x803286D0
WarpPod::initDraw(void)=0x80328790
WarpPod::draw(void) const=0x80328B80
WarpPodMgr::__dt(void)=0x80328C70
WarpPod::__dt(void)=0x80328CD0
WaterPressure::__ct(const char*)=0x80328D30
WaterPressure::init(const JMapInfoIter&)=0x80328D80
WaterPressure::initBullet(const JMapInfoIter&)=0x80328DE0
WaterPressure::shotBullet(float)=0x80328DF0
WaterPressure::calcGunPointFromCannon(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x80328EA0
WaterPressure::__dt(void)=0x80328F70
WaterPressureBullet::__ct(const char*)=0x80328FD0
WaterPressureBullet::init(const JMapInfoIter&)=0x80329050
WaterPressureBullet::kill(void)=0x803291E0
WaterPressureBullet::movement(void)=0x80329290
WaterPressureBullet::control(void)=0x803292D0
WaterPressureBullet::calcAndSetBaseMtx(void)=0x803293F0
WaterPressureBullet::shotWaterBullet(LiveActor*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&, float, bool, bool, bool, ActorCameraInfo*)=0x80329440
WaterPressureBullet::exeFly(void)=0x803295A0
WaterPressureBullet::exeSpinKill(void)=0x803297E0
WaterPressureBullet::attackSensor(HitSensor*, HitSensor*)=0x80329890
WaterPressureBullet::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803298F0
WaterPressureBullet::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80329950
WaterPressureBullet::startHostCamera(void) const=0x80329AC0
WaterPressureBullet::endHostCamera(void) const=0x80329B10
WaterPressureBullet::inviteMario(HitSensor*)=0x80329B70
WaterPressureBullet::updateSuffererMtx(void)=0x80329CA0
WaterPressureBullet::__dt(void)=0x80329D60
short::(nit_\WaterPressureBullet_cpp)=0x80329DC0
NrvWaterPressureBullet::WaterPressureBulletNrvFly::__ct(void)=0x80329DF0
NrvWaterPressureBullet::WaterPressureBulletNrvSpinKill::__ct(void)=0x80329E00
NrvWaterPressureBullet::WaterPressureBulletNrvSpinKill::execute(Spine*) const=0x80329E10
NrvWaterPressureBullet::WaterPressureBulletNrvFly::execute(Spine*) const=0x80329E20
WaterPressureBulletHolder::__ct(const char*)=0x80329E30
WaterPressureBulletHolder::init(const JMapInfoIter&)=0x80329E70
WaterPressureBulletHolder::callEmptyBullet(void)=0x80329EE0
WaterPressureBulletHolder::__dt(void)=0x80329F50
WhiteSnowTree::__ct(const char*)=0x80329FB0
WhiteSnowTree::init(const JMapInfoIter&)=0x80329FF0
WhiteSnowTree::__dt(void)=0x8032A040
WingBlock::__ct(const char*)=0x8032A0A0
WingBlock::init(const JMapInfoIter&)=0x8032A110
WingBlock::initItem(const JMapInfoIter&)=0x8032A210
WingBlock::appearItem(void)=0x8032A2A0
WingBlock::control(void)=0x8032A350
WingBlock::calcAndSetBaseMtx(void)=0x8032A480
WingBlock::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8032A490
WingBlock::exeFly(void)=0x8032A550
WingBlock::exeHit(void)=0x8032A640
WingBlock::__dt(void)=0x8032A6C0
short::(nit_\WingBlock_cpp)=0x8032A720
NrvWingBlock::WingBlockNrvFly::__ct(void)=0x8032A750
NrvWingBlock::WingBlockNrvHit::__ct(void)=0x8032A760
NrvWingBlock::WingBlockNrvHit::execute(Spine*) const=0x8032A770
NrvWingBlock::WingBlockNrvFly::execute(Spine*) const=0x8032A780
WireCoverCage::init(const JMapInfoIter&)=0x8032A790
WireCoverCage::__dt(void)=0x8032A850
WoodBox::__ct(const char*)=0x8032A8B0
WoodBox::init(const JMapInfoIter&)=0x8032A8F0
WoodBox::control(void)=0x8032AB10
WoodBox::exeHit(void)=0x8032AB30
WoodBox::appear(void)=0x8032ACF0
WoodBox::kill(void)=0x8032AD80
WoodBox::doHit(HitSensor*, HitSensor*)=0x8032AE00
WoodBox::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8032AF80
WoodBox::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8032B090
WoodBox::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8032B0D0
WoodBox::forceReappear(void)=0x8032B120
WoodBox::registerBreakModelDemoCast(void)=0x8032B1C0
WoodBox::__dt(void)=0x8032B1D0
short::(nit_\WoodBox_cpp)=0x8032B230
NrvWoodBox::WoodBoxNrvWait::__ct(void)=0x8032B270
NrvWoodBox::WoodBoxNrvHit::__ct(void)=0x8032B280
NrvWoodBox::WoodBoxNrvKilled::__ct(void)=0x8032B290
NrvWoodBox::WoodBoxNrvKilled::execute(Spine*) const=0x8032B2A0
NrvWoodBox::WoodBoxNrvHit::execute(Spine*) const=0x8032B2B0
NrvWoodBox::WoodBoxNrvWait::execute(Spine*) const=0x8032B2C0
WoodLogBridgeParts::__ct(const char*)=0x8032B2D0
WoodLogBridgeParts::init(const JMapInfoIter&)=0x8032B350
WoodLogBridgeParts::control(void)=0x8032B480
WoodLogBridgeParts::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8032B5A0
WoodLogBridge::__ct(const char*)=0x8032B5C0
WoodLogBridge::init(const JMapInfoIter&)=0x8032B650
WoodLogBridge::makeActorAppeared(void)=0x8032BA20
WoodLogBridge::makeActorDead(void)=0x8032BA90
WoodLogBridge::startClipped(void)=0x8032BD30
WoodLogBridge::endClipped(void)=0x8032BDA0
WoodLogBridge::control(void)=0x8032BE10
WoodLogBridge::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8032BEE0
WoodLogBridge::draw(void) const=0x8032C380
WoodLogBridge::getBaseMtx(void) const=0x8032C960
WoodLogBridgeParts::__dt(void)=0x8032C970
WoodLogBridge::__dt(void)=0x8032C9D0
WorldMapAccessPanel::__ct(const char*)=0x8032CA30
WorldMapAccessPanel::init(const JMapInfoIter&)=0x8032CAA0
WorldMapAccessPanel::calcAndSetBaseMtx(void)=0x8032CCA0
MR::FunctorV0M<WorldMapAccessPanel*,M19WorldMapAccessPanelFPCvPv_v>::__cl(void) const=0x8032D7C0
MR::FunctorV0M<WorldMapAccessPanel*,M19WorldMapAccessPanelFPCvPv_v>::clone(JKRHeap*) const=0x8032D7F0
WorldMapAccessPanel::__dt(void)=0x8032D860
short::(nit_\WorldMapAccessPanel_cpp)=0x8032D8C0
YellowChip::__ct(const char*)=0x8032DA60
YellowChip::__dt(void)=0x8032DAB0
YoshiBlockCollision::__ct(YoshiBlock*)=0x8032DB10
YoshiBlockCollision::init(const JMapInfoIter&)=0x8032DB70
YoshiBlockCollision::appear(void)=0x8032DE90
YoshiBlockCollision::kill(void)=0x8032DED0
YoshiBlockCollision::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8032DF10
YoshiBlock::__ct(const char*)=0x8032DF90
YoshiBlock::init(const JMapInfoIter&)=0x8032DFE0
YoshiBlock::draw(void) const=0x8032E320
YoshiBlock::appear(void)=0x8032E7C0
YoshiBlock::exeDashed(void)=0x8032E850
YoshiBlock::control(void)=0x8032EAC0
YoshiBlock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8032EAD0
YoshiBlock::doYoshiDashed(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8032EC50
YoshiBlock::__dt(void)=0x8032ECB0
short::(nit_\YoshiBlock_cpp)=0x8032ED70
NrvYoshiBlock::YoshiBlockNrvWait::__ct(void)=0x8032EDA0
NrvYoshiBlock::YoshiBlockNrvDashed::__ct(void)=0x8032EDB0
NrvYoshiBlock::YoshiBlockNrvDashed::execute(Spine*) const=0x8032EDC0
NrvYoshiBlock::YoshiBlockNrvWait::execute(Spine*) const=0x8032EDD0
YoshiCapture::__ct(const char*)=0x8032EDE0
YoshiCapture::init(const JMapInfoIter&)=0x8032EE50
YoshiCapture::initAfterPlaceent(void)=0x8032EF40
YoshiCapture::appear(void)=0x8032F010
YoshiCapture::kill(void)=0x8032F050
YoshiCapture::exeWait(void)=0x8032F060
YoshiCapture::exeCatch(void)=0x8032F0D0
YoshiCapture::exeRelease(void)=0x8032F130
YoshiCapture::control(void)=0x8032F190
YoshiCapture::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8032F200
YoshiCapture::__dt(void)=0x8032F620
short::(nit_\YoshiCapture_cpp)=0x8032F680
NrvYoshiCapture::YoshiCaptureNrvWait::__ct(void)=0x8032F6C0
NrvYoshiCapture::YoshiCaptureNrvCatch::__ct(void)=0x8032F6D0
NrvYoshiCapture::YoshiCaptureNrvRelease::__ct(void)=0x8032F6E0
NrvYoshiCapture::YoshiCaptureNrvRelease::execute(Spine*) const=0x8032F6F0
NrvYoshiCapture::YoshiCaptureNrvCatch::execute(Spine*) const=0x8032F700
NrvYoshiCapture::YoshiCaptureNrvWait::execute(Spine*) const=0x8032F710
YoshiFruit::onEat(void)=0x8032F740
YoshiFruit::__dt(void)=0x8032F760
short::(nit_\YoshiFruit_cpp)=0x8032F7C0
YoshiFruitBig::__dt(void)=0x8032F870
short::(nit_\YoshiFruitBig_cpp)=0x8032F8D0
MapParts::getMoveStartSignalTime(void)=0x8032F950
GeneralMapParts::broadcastMsgToAllFunctions(unsigned long)=0x8032F960
MapPartsFunction::receiveMsg(unsigned long)=0x8032FA00
GeneralMapParts::startMove(void)=0x8032FA10
GeneralMapParts::exeWait(void)=0x8032FAE0
GeneralMapParts::exeMoveStart(void)=0x8032FB70
short::(nit_\GeneralMapParts_cpp)=0x8032FC70
NrvGeneralMapParts::HostTypeWait::__ct(void)=0x8032FCB0
NrvGeneralMapParts::HostTypeWaitForPlayerOn::__ct(void)=0x8032FCC0
NrvGeneralMapParts::HostTypeMoveStart::__ct(void)=0x8032FCD0
NrvGeneralMapParts::HostTypeMove::__ct(void)=0x8032FCE0
NrvGeneralMapParts::HostTypeMove::execute(Spine*) const=0x8032FCF0
NrvGeneralMapParts::HostTypeMoveStart::execute(Spine*) const=0x8032FD00
NrvGeneralMapParts::HostTypeWaitForPlayerOn::execute(Spine*) const=0x8032FD10
NrvGeneralMapParts::HostTypeWait::execute(Spine*) const=0x8032FD60
FloaterFloatingForce::__ct(LiveActor*, const char*)=0x8032FD70
MapPartsFunction::__dt(void)=0x8032FE10
FloaterFloatingForce::init(const JMapInfoIter&)=0x8032FE70
FloaterFloatingForce::start(void)=0x8032FED0
MapPartsFunction::control(void)=0x8032FF80
FloaterFloatingForce::getCurrentVelocity(void) const=0x8032FF90
FloaterFloatingForce::__dt(void)=0x8032FFC0
FloaterFloatingForceTypeNormal::__ct(LiveActor*, const char*)=0x80330020
FloaterFloatingForceTypeNormal::init(const JMapInfoIter&)=0x80330070
FloaterFloatingForceTypeNormal::start(void)=0x803300E0
FloaterFloatingForceTypeNormal::updateHostTrans(JGeometry::TVec3<float>*) const=0x80330120
FloaterFloatingForceTypeNormal::updateVelocity(bool)=0x803301B0
FloaterFloatingForceTypeNormal::soundMoveSE(void)=0x80330470
FloaterFloatingForceTypeNormal::setStateMove(void)=0x80330520
FloaterFloatingForceTypeNormal::exeMoveFirst(void)=0x80330580
FloaterFloatingForceTypeNormal::exeMove(void)=0x80330620
FloaterFloatingForceTypeNormal::getCurrentVelocity(void) const=0x80330700
FloaterFloatingForceTypeNormal::__dt(void)=0x80330710
short::(nit_\FloaterFloatingForceTypeNormal_cpp)=0x80330770
NrvFloaterFloatingForceTypeNormal::HostTypeWait::__ct(void)=0x803307B0
NrvFloaterFloatingForceTypeNormal::HostTypeMoveFirst::__ct(void)=0x803307C0
NrvFloaterFloatingForceTypeNormal::HostTypeMoveOffPlayer::__ct(void)=0x803307D0
NrvFloaterFloatingForceTypeNormal::HostTypeMoveOnPlayer::__ct(void)=0x803307E0
NrvFloaterFloatingForceTypeNormal::HostTypeMoveOnPlayer::execute(Spine*) const=0x803307F0
NrvFloaterFloatingForceTypeNormal::HostTypeMoveOffPlayer::execute(Spine*) const=0x80330800
NrvFloaterFloatingForceTypeNormal::HostTypeMoveFirst::execute(Spine*) const=0x80330810
NrvFloaterFloatingForceTypeNormal::HostTypeWait::execute(Spine*) const=0x80330820
FloaterFunction::isExistImpactOnRide(const char*)=0x80330860
FloaterFunction::isExistSpeedUpLanding(const char*)=0x80330920
MapPartsRotatorBase::__dt(void)=0x80330930
LavaHomeSeesawRotator::exeMoveStart(void)=0x80330990
LavaHomeSeesawRotator::exeStay(void)=0x80330A60
LavaHomeSeesawRotator::exeHipDrop(void)=0x80330AC0
LavaHomeSeesawRotator::updateRotateMtx(void)=0x80330B30
LavaHomeSeesawRotator::updateVelocity(void)=0x80330D40
LavaHomeSeesawRotator::updateRestoreForce(void)=0x80330E60
LavaHomeSeesawRotator::clampAngularSpeed(void)=0x80330F10
LavaHomeSeesawRotator::getDistanceFromRotAxis(void) const=0x80330F50
LavaHomeSeesawRotator::addForceHipDrop(void)=0x80331000
LavaHomeSeesawRotator::isGoingToReachTargetAngle(void) const=0x803310D0
LavaHomeSeesawRotator::calcRotatedAngle(float*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x80331180
LavaHomeSeesawRotator::tryStay(void)=0x803312D0
LavaHomeSeesawRotator::tryRebound(void)=0x803313C0
LavaHomeSeesawRotator::soundMoveSE(void)=0x80331410
MapPartsRotatorBase::getRotateSpeed(void) const=0x80331450
MapPartsRotatorBase::isOnReverse(void) const=0x80331460
short::(nit_\LavaHomeSeesawRotator_cpp)=0x80331470
NrvLavaHomeSeesawRotator::HostTypeWait::__ct(void)=0x803314C0
NrvLavaHomeSeesawRotator::HostTypeMoveStart::__ct(void)=0x803314D0
NrvLavaHomeSeesawRotator::HostTypeMove::__ct(void)=0x803314E0
NrvLavaHomeSeesawRotator::HostTypeStay::__ct(void)=0x803314F0
NrvLavaHomeSeesawRotator::HostTypeHipDrop::__ct(void)=0x80331500
NrvLavaHomeSeesawRotator::HostTypeHipDrop::execute(Spine*) const=0x80331510
NrvLavaHomeSeesawRotator::HostTypeStay::execute(Spine*) const=0x80331520
NrvLavaHomeSeesawRotator::HostTypeMove::execute(Spine*) const=0x80331530
NrvLavaHomeSeesawRotator::HostTypeMoveStart::execute(Spine*) const=0x80331570
NrvLavaHomeSeesawRotator::HostTypeWait::execute(Spine*) const=0x80331580
LavaHomeVolcanoFlow::__ct(const char*)=0x80331590
LavaHomeVolcanoFlow::init(const JMapInfoIter&)=0x803315D0
LavaHomeVolcanoFlow::startClipped(void)=0x803316B0
LavaHomeVolcanoFlow::endClipped(void)=0x80331720
LavaHomeVolcanoFlow::exeWait(void)=0x80331790
LavaHomeVolcanoFlow::exeMove(void)=0x80331820
LavaHomeVolcanoFlow::__dt(void)=0x803318F0
short::(nit_\LavaHomeVolcanoFlow_cpp)=0x80331950
NrvLavaHomeVolcanoFlow::HostTypeWait::__ct(void)=0x80331990
NrvLavaHomeVolcanoFlow::HostTypeMove::__ct(void)=0x803319A0
NrvLavaHomeVolcanoFlow::HostTypeDone::__ct(void)=0x803319B0
NrvLavaHomeVolcanoFlow::HostTypeDone::execute(Spine*) const=0x803319C0
NrvLavaHomeVolcanoFlow::HostTypeMove::execute(Spine*) const=0x803319D0
NrvLavaHomeVolcanoFlow::HostTypeWait::execute(Spine*) const=0x803319E0
JGeometry::TVec2<float>::squared(const JGeometry::TVec2<float>&) const=0x803319F0
MapPartsBreaker::exeReactToTornado(void)=0x80331A20
MapPartsBreaker::exeBreak(void)=0x80331B40
short::(nit_\MapPartsBreaker_cpp)=0x80331BE0
NrvMapPartsBreaker::HostTypeWait::__ct(void)=0x80331C20
NrvMapPartsBreaker::HostTypeReactToTornado::__ct(void)=0x80331C30
NrvMapPartsBreaker::HostTypeBreak::__ct(void)=0x80331C40
NrvMapPartsBreaker::HostTypeBreak::execute(Spine*) const=0x80331C50
NrvMapPartsBreaker::HostTypeReactToTornado::execute(Spine*) const=0x80331C60
NrvMapPartsBreaker::HostTypeWait::execute(Spine*) const=0x80331C70
SpringStep::__ct(float, float, float)=0x80331C80
SpringStep::addSpringVelocity(float)=0x80331D30
SpringStep::setSpringBaseValue(float)=0x80331D50
MapPartsFloatingForce::__ct(LiveActor*)=0x80331D80
MapPartsFloatingForce::init(const JMapInfoIter&)=0x80331E20
MapPartsFloatingForce::setObjectName(const char*)=0x80331EA0
MapPartsFloatingForce::initForNormalMotion(const JMapInfoIter&)=0x80331EB0
MapPartsFloatingForce::initForSpringMotion(const JMapInfoIter&)=0x80331F40
MapPartsFloatingForce::start(void)=0x80332070
MapPartsFloatingForce::updateVelocity(void)=0x80332130
MapPartsFloatingForce::updateVelocitySpring(void)=0x80332240
MapPartsFloatingForce::tryOn(void)=0x80332310
MapPartsFloatingForce::tryReturn(void)=0x803323C0
MapPartsFloatingForce::exeWait(void)=0x80332450
MapPartsFloatingForce::exeMove(void)=0x803324A0
MapPartsFloatingForce::exeMoveSpring(void)=0x80332610
MapPartsFloatingForce::exeMoveReturn(void)=0x80332690
MapPartsFloatingForce::__dt(void)=0x80332930
short::(nit_\MapPartsFloatingForce_cpp)=0x80332990
NrvMapPartsFloatingForce::HostTypeWait::__ct(void)=0x803329E0
NrvMapPartsFloatingForce::HostTypeMove::__ct(void)=0x803329F0
NrvMapPartsFloatingForce::HostTypeMoveSpring::__ct(void)=0x80332A00
NrvMapPartsFloatingForce::HostTypeMoveReturn::__ct(void)=0x80332A10
NrvMapPartsFloatingForce::HostTypeMoveReturn::execute(Spine*) const=0x80332A40
NrvMapPartsFloatingForce::HostTypeMoveSpring::execute(Spine*) const=0x80332A50
NrvMapPartsFloatingForce::HostTypeMove::execute(Spine*) const=0x80332A60
NrvMapPartsFloatingForce::HostTypeWait::execute(Spine*) const=0x80332A70
MapPartsFunction::__ct(LiveActor*, const char*)=0x80332A80
MapPartsFunction::init(const JMapInfoIter&)=0x80332B10
MapPartsFunction::movement(void)=0x80332B60
MapPartsFunction::initNerve(const Nerve*)=0x80332BC0
MapPartsFunction::setNerve(const Nerve*)=0x80332C20
MapPartsFunction::getStep(void) const=0x80332C30
MapPartsFunction::isStep(long) const=0x80332C40
MapPartsFunction::isNerve(const Nerve*) const=0x80332C60
MapPartsFunction::isFirstStep(void) const=0x80332CA0
MapPartsFunction::sendMsgToHost(unsigned long)=0x80332CC0
MapPartsFunction::getSpeed(void) const=0x80332D60
MapPartsRailGuideDrawer::__ct(LiveActor*, const char*)=0x80332DC0
MapPartsRailGuideDrawer::init(const JMapInfoIter&)=0x80332E30
MapPartsRailGuideDrawer::start(void)=0x80332F20
MapPartsRailGuideDrawer::end(void)=0x80332F30
MapPartsRailGuideDrawer::isWorking(void) const=0x80332F40
MapPartsRailGuideDrawer::show(void)=0x80332FB0
std::for_each<MapPartsRailGuidePoint*,std::mem_fun_t<void,LiveActor>>(MapPartsRailGuidePoint*, MapPartsRailGuidePoint*, std::mem_fun_t<void,LiveActor>, _Q23std23mem_fun_t<void,LiveActor>)=0x80333020
MapPartsRailGuideDrawer::hide(void)=0x803330A0
MapPartsRailGuideDrawer::initGuidePoints(const JMapInfoIter&)=0x80333110
MapPartsRailGuideDrawer::exeDrawForward(void)=0x80333260
MR::Vector<MR::FixedArray<MapPartsRailGuidePoint*,256>>::push_back(const MapPartsRailGuidePoint*)=0x80333300
MapPartsRailGuideDrawer::__dt(void)=0x80333320
short::(nit_\MapPartsRailGuideDrawer_cpp)=0x80333380
NrvMapPartsRailGuideDrawer::HostTypeHideAll::__ct(void)=0x803333C0
NrvMapPartsRailGuideDrawer::HostTypeDrawAll::__ct(void)=0x803333D0
NrvMapPartsRailGuideDrawer::HostTypeDrawForward::__ct(void)=0x803333E0
NrvMapPartsRailGuideDrawer::HostTypeDrawForward::execute(Spine*) const=0x803333F0
NrvMapPartsRailGuideDrawer::HostTypeDrawAll::execute(Spine*) const=0x80333400
NrvMapPartsRailGuideDrawer::HostTypeHideAll::execute(Spine*) const=0x80333410
MapPartsRailGuideHolder::__ct(void)=0x80333420
MapPartsRailGuideHolder::init(const JMapInfoIter&)=0x80333470
MapPartsRailGuideHolder::createRailGuide(LiveActor*, const char*, const JMapInfoIter&)=0x80333480
MapPartsRailGuideHolder::find(long)=0x80333570
MapPartsRailGuideHolder::__dt(void)=0x803335B0
MapPartsRailGuidePoint::__ct(const LiveActor*, const char*, float, bool)=0x80333610
MapPartsRailGuidePoint::__ct(const LiveActor*, const char*, int, bool)=0x803336B0
MapPartsRailGuidePoint::init(const JMapInfoIter&)=0x80333750
MapPartsRailGuidePoint::__dt(void)=0x803337D0
MapPartsRailMover::__ct(LiveActor*)=0x80333830
MapPartsRailMover::init(const JMapInfoIter&)=0x803338F0
MapPartsRailMover::movement(void)=0x80333AD0
MapPartsRailMover::start(void)=0x80333BD0
MapPartsRailMover::end(void)=0x80333CB0
MapPartsRailPointPassChecker::end(void)=0x80333D00
MapPartsRailMover::isWorking(void) const=0x80333D10
MapPartsRailMover::receiveMsg(unsigned long)=0x80333D90
MapPartsRailMover::moveToInitPos(void)=0x80333DF0
MapPartsRailMover::cancelSignalMotion(void)=0x80333E70
MapPartsRailMover::tryResetPositionRepeat(void)=0x80333EC0
MapPartsRailMover::resetToInitPos(void)=0x80333F40
MapPartsRailMover::passPoint(void)=0x80334100
MapPartsRailMover::reachedEnd(void)=0x803341A0
MapPartsRailMover::reachedEndPlayerOn(void)=0x80334200
MapPartsRailMover::isStarting(void) const=0x80334260
MapPartsRailMover::isReachedEnd(void) const=0x80334270
MapPartsRailMover::isDone(void) const=0x803342E0
MapPartsRailMover::setStateStopAtEndBeforeRotate(void)=0x80334310
MapPartsRailMover::calcTimeToNextRailPoint(float*) const=0x803343B0
MapPartsRailMover::endRotateAtPoint(void)=0x80334540
MapPartsRailMover::calcMoveSpeed(float*) const=0x803345B0
MapPartsRailMover::calcMoveSpeedDirect(float*) const=0x80334650
MapPartsRailMover::calcMoveSpeedTime(float*) const=0x803346A0
MapPartsRailMover::updateAccel(void)=0x80334750
MapPartsRailMover::tryPassPoint(void)=0x80334810
MapPartsRailMover::tryRestartAtEnd(void)=0x803348C0
MapPartsRailMover::restartAtEnd(void)=0x80334990
MapPartsRailMover::exeWaitForRestart(void)=0x80334A70
MapPartsRailMover::exeMove(void)=0x80334AE0
MapPartsRailMover::exeMoveStart(void)=0x80334BF0
MapPartsRailMover::exeStopAtPoint(void)=0x80334E20
MapPartsRailMover::exeStopAtEnd(void)=0x80334F60
MapPartsRailMover::exeStopAtEndWithPlayerOn(void)=0x80335080
MapPartsRailMover::__dt(void)=0x803350F0
short::(nit_\MapPartsRailMover_cpp)=0x80335150
NrvMapPartsRailMover::HostTypeWait::__ct(void)=0x803351D0
NrvMapPartsRailMover::HostTypeMove::__ct(void)=0x803351E0
NrvMapPartsRailMover::HostTypeMoveStart::__ct(void)=0x803351F0
NrvMapPartsRailMover::HostTypeStopAtPointBeforeRotate::__ct(void)=0x80335200
NrvMapPartsRailMover::HostTypeStopAtPointAfterRotate::__ct(void)=0x80335210
NrvMapPartsRailMover::HostTypeStopAtEndBeforeRotate::__ct(void)=0x80335220
NrvMapPartsRailMover::HostTypeStopAtEndAfterRotate::__ct(void)=0x80335230
NrvMapPartsRailMover::HostTypeStopAtEndWithPlayerOn::__ct(void)=0x80335240
NrvMapPartsRailMover::HostTypeWaitForRestartByPlayerOn::__ct(void)=0x80335250
NrvMapPartsRailMover::HostTypeRotateAtPoint::__ct(void)=0x80335260
NrvMapPartsRailMover::HostTypeRotateAtEndPoint::__ct(void)=0x80335270
NrvMapPartsRailMover::HostTypeVanish::__ct(void)=0x80335280
NrvMapPartsRailMover::HostTypeVanish::execute(Spine*) const=0x80335290
NrvMapPartsRailMover::HostTypeRotateAtEndPoint::execute(Spine*) const=0x803352E0
NrvMapPartsRailMover::HostTypeRotateAtPoint::execute(Spine*) const=0x803352F0
NrvMapPartsRailMover::HostTypeWaitForRestartByPlayerOn::execute(Spine*) const=0x80335300
NrvMapPartsRailMover::HostTypeStopAtEndWithPlayerOn::execute(Spine*) const=0x80335310
NrvMapPartsRailMover::HostTypeStopAtEndAfterRotate::execute(Spine*) const=0x80335320
NrvMapPartsRailMover::HostTypeStopAtEndBeforeRotate::execute(Spine*) const=0x80335330
NrvMapPartsRailMover::HostTypeStopAtPointAfterRotate::execute(Spine*) const=0x80335340
NrvMapPartsRailMover::HostTypeStopAtPointBeforeRotate::execute(Spine*) const=0x80335350
NrvMapPartsRailMover::HostTypeMoveStart::execute(Spine*) const=0x80335360
NrvMapPartsRailMover::HostTypeMove::execute(Spine*) const=0x80335370
NrvMapPartsRailMover::HostTypeWait::execute(Spine*) const=0x80335380
MapPartsRailPointPassChecker::__ct(LiveActor*)=0x80335390
MapPartsRailPointPassChecker::movement(void)=0x803353E0
MapPartsRailPointPassChecker::start(void)=0x80335420
MapPartsRailPointPassChecker::isPassed(void) const=0x80335460
MapPartsRailPointPassChecker::isReachedEnd(void) const=0x803354A0
MapPartsRailPointPassChecker::isWorking(void) const=0x803354B0
MapPartsRailPointPassChecker::__dt(void)=0x803354C0
MapPartsRailPosture::__ct(LiveActor*)=0x80335520
MapPartsRailPosture::init(const JMapInfoIter&)=0x80335580
MapPartsRailPosture::start(void)=0x803355E0
MapPartsRailPosture::end(void)=0x803355F0
MapPartsRailPosture::isWorking(void) const=0x80335630
MapPartsRailPosture::isPostureTypeRailDirRailUseShadowGravity(void) const=0x80335640
MapPartsRailPosture::exeMove(void)=0x80335660
MapPartsRailPosture::__dt(void)=0x80335890
short::(nit_\MapPartsRailPosture_cpp)=0x803358F0
NrvMapPartsRailPosture::HostTypeDoNothing::__ct(void)=0x80335920
NrvMapPartsRailPosture::HostTypeMove::__ct(void)=0x80335930
NrvMapPartsRailPosture::HostTypeMove::execute(Spine*) const=0x80335940
NrvMapPartsRailPosture::HostTypeDoNothing::execute(Spine*) const=0x80335950
MapPartsRailRotator::__ct(LiveActor*)=0x80335960
MapPartsRailRotator::init(const JMapInfoIter&)=0x803359E0
MapPartsRailRotator::start(void)=0x80335A20
MapPartsRailRotator::end(void)=0x80335A30
MapPartsRailRotator::isWorking(void) const=0x80335A80
MapPartsRailRotator::hasRotation(long) const=0x80335AB0
MapPartsRailRotator::rotateAtPoint(long)=0x80335B40
MapPartsRailRotator::hasRotationBetweenPoints(long) const=0x80335BB0
MapPartsRailRotator::rotateBetweenPoints(long, float)=0x80335C20
MapPartsRailRotator::updateHostRotateMtx(void)=0x80335CB0
MapPartsRailRotator::updateInfo(long)=0x80335EC0
MapPartsRailRotator::getJMapArgAngleFactor(void) const=0x80336030
MapPartsRailRotator::isReachedTargetAngle(void) const=0x80336040
MapPartsRailRotator::calcRotateAxisDir(MapPartsRailRotator::AxisType, JGeometry::TVec3<float>*) const=0x80336060
MapPartsRailRotator::updateRotateMtx(MapPartsRailRotator::AxisType, float)=0x803360C0
MapPartsRailRotator::exeRotate(void)=0x80336220
MapPartsRailRotator::__dt(void)=0x80336310
short::(nit_\MapPartsRailRotator_cpp)=0x80336370
NrvMapPartsRailRotator::HostTypeWait::__ct(void)=0x803363B0
NrvMapPartsRailRotator::HostTypeRotateAtPoint::__ct(void)=0x803363C0
NrvMapPartsRailRotator::HostTypeRotateBetweenPoints::__ct(void)=0x803363D0
NrvMapPartsRailRotator::HostTypeDone::__ct(void)=0x803363E0
NrvMapPartsRailRotator::HostTypeDone::execute(Spine*) const=0x803363F0
NrvMapPartsRailRotator::HostTypeRotateBetweenPoints::execute(Spine*) const=0x80336400
NrvMapPartsRailRotator::HostTypeRotateAtPoint::execute(Spine*) const=0x80336410
NrvMapPartsRailRotator::HostTypeWait::execute(Spine*) const=0x80336420
MapPartsRotator::__ct(LiveActor*)=0x80336430
MapPartsRotator::init(const JMapInfoIter&)=0x80336500
MapPartsRotator::start(void)=0x80336610
MapPartsRotator::end(void)=0x80336660
MapPartsRotator::isWorking(void) const=0x80336670
MapPartsRotator::startWithSignalMotion(void)=0x803366D0
MapPartsRotator::cancelSignalMotion(void)=0x80336710
MapPartsRotator::updateBaseHostMtx(void)=0x80336760
MapPartsRotator::isMoving(void) const=0x803368F0
MapPartsRotator::updateVelocity(void)=0x80336900
MapPartsRotator::updateAngle(void)=0x80336AA0
MapPartsRotator::updateTargetAngle(void)=0x80336B30
MapPartsRotator::restartAtEnd(void)=0x80336BB0
MapPartsRotator::initRotateSpeed(const JMapInfoIter&)=0x80336C30
MapPartsRotator::isReachedTargetAngle(void) const=0x80336C90
MapPartsRotator::updateRotateMtx(MapPartsRotator::AxisType, float)=0x80336D20
MapPartsRotator::calcRotateAxisDir(MapPartsRotator::AxisType, JGeometry::TVec3<float>*) const=0x80336E80
MapPartsRotator::exeRotate(void)=0x80336EE0
MapPartsRotator::exeStopAtEnd(void)=0x80337040
MapPartsRotator::exeRotateStart(void)=0x803370D0
MapPartsRotator::isOnReverse(void) const=0x803371D0
MapPartsRotator::getRotateSpeed(void) const=0x803371E0
MapPartsRotator::__dt(void)=0x803371F0
short::(nit_\MapPartsRotator_cpp)=0x80337250
NrvMapPartsRotator::HostTypeNeverMove::__ct(void)=0x803372A0
NrvMapPartsRotator::HostTypeWait::__ct(void)=0x803372B0
NrvMapPartsRotator::HostTypeRotateStart::__ct(void)=0x803372C0
NrvMapPartsRotator::HostTypeRotate::__ct(void)=0x803372D0
NrvMapPartsRotator::HostTypeStopAtEnd::__ct(void)=0x803372E0
NrvMapPartsRotator::HostTypeStopAtEnd::execute(Spine*) const=0x803372F0
NrvMapPartsRotator::HostTypeRotate::execute(Spine*) const=0x80337300
NrvMapPartsRotator::HostTypeRotateStart::execute(Spine*) const=0x80337310
NrvMapPartsRotator::HostTypeWait::execute(Spine*) const=0x80337320
NrvMapPartsRotator::HostTypeNeverMove::execute(Spine*) const=0x80337330
MapPartsSeesaw1AxisRotator::__ct(LiveActor*, const char*, float)=0x80337340
MapPartsSeesaw1AxisRotator::init(const JMapInfoIter&)=0x80337400
MapPartsSeesaw1AxisRotator::start(void)=0x80337520
MapPartsSeesaw1AxisRotator::end(void)=0x80337770
MapPartsSeesaw1AxisRotator::receiveMsg(unsigned long)=0x80337790
MapPartsSeesaw1AxisRotator::exeMove(void)=0x80337810
MapPartsSeesaw1AxisRotator::exeStay(void)=0x803378B0
MapPartsSeesaw1AxisRotator::exeHipDrop(void)=0x80337920
MapPartsSeesaw1AxisRotator::rotate(void)=0x80337990
MapPartsSeesaw1AxisRotator::updateVelocity(void)=0x80337C00
MapPartsSeesaw1AxisRotator::updateRestoreForce(void)=0x80337D10
MapPartsSeesaw1AxisRotator::clampAngularSpeed(void)=0x80337E10
MapPartsSeesaw1AxisRotator::getDistanceFromRotAxis(void) const=0x80337E50
MapPartsSeesaw1AxisRotator::addForceHipDrop(void)=0x80337F00
MapPartsSeesaw1AxisRotator::isGoingToReachTargetAngle(void) const=0x80337FD0
MapPartsSeesaw1AxisRotator::calcRotatedAngle(float*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&) const=0x80338080
MapPartsSeesaw1AxisRotator::tryHipDrop(void)=0x803381D0
MapPartsSeesaw1AxisRotator::isMoving(void) const=0x80338250
MapPartsSeesaw1AxisRotator::isWorking(void) const=0x80338260
MapPartsSeesaw1AxisRotator::getRotateMtx(void) const=0x80338270
MapPartsSeesaw1AxisRotator::__dt(void)=0x80338280
short::(nit_\MapPartsSeesaw1AxisRotator_cpp)=0x803382E0
NrvMapPartsSeesaw1AxisRotator::HostTypeWait::__ct(void)=0x80338330
NrvMapPartsSeesaw1AxisRotator::HostTypeMoveStart::__ct(void)=0x80338340
NrvMapPartsSeesaw1AxisRotator::HostTypeMove::__ct(void)=0x80338350
NrvMapPartsSeesaw1AxisRotator::HostTypeStay::__ct(void)=0x80338360
NrvMapPartsSeesaw1AxisRotator::HostTypeHipDrop::__ct(void)=0x80338370
NrvMapPartsSeesaw1AxisRotator::HostTypeHipDrop::execute(Spine*) const=0x80338380
NrvMapPartsSeesaw1AxisRotator::HostTypeStay::execute(Spine*) const=0x80338390
NrvMapPartsSeesaw1AxisRotator::HostTypeMove::execute(Spine*) const=0x803383A0
NrvMapPartsSeesaw1AxisRotator::HostTypeMoveStart::execute(Spine*) const=0x803383B0
NrvMapPartsSeesaw1AxisRotator::HostTypeWait::execute(Spine*) const=0x803383C0
MapPartsSeesaw2AxisRotator::__ct(LiveActor*, const char*, float)=0x803383D0
MapPartsSeesaw2AxisRotator::init(const JMapInfoIter&)=0x80338490
MapPartsSeesaw2AxisRotator::start(void)=0x80338560
MapPartsSeesaw2AxisRotator::end(void)=0x803385F0
MapPartsSeesaw2AxisRotator::isWorking(void) const=0x80338600
MapPartsSeesaw2AxisRotator::receiveMsg(unsigned long)=0x80338630
MapPartsSeesaw2AxisRotator::rotate(void)=0x803386D0
MapPartsSeesaw2AxisRotator::restoreMove(void)=0x803389B0
MapPartsSeesaw2AxisRotator::getInertiaConst(void) const=0x80338A30
MapPartsSeesaw2AxisRotator::exeMove(void)=0x80338A80
MapPartsSeesaw2AxisRotator::exeHipDrop(void)=0x80338AD0
MapPartsSeesaw2AxisRotator::isMoving(void) const=0x80338B30
MapPartsSeesaw2AxisRotator::getRotateMtx(void) const=0x80338B40
MapPartsSeesaw2AxisRotator::__dt(void)=0x80338B50
short::(nit_\MapPartsSeesaw2AxisRotator_cpp)=0x80338BB0
NrvMapPartsSeesaw2AxisRotator::HostTypeWait::__ct(void)=0x80338BF0
NrvMapPartsSeesaw2AxisRotator::HostTypeStay::__ct(void)=0x80338C00
NrvMapPartsSeesaw2AxisRotator::HostTypeMove::__ct(void)=0x80338C10
NrvMapPartsSeesaw2AxisRotator::HostTypeHipDrop::__ct(void)=0x80338C20
NrvMapPartsSeesaw2AxisRotator::HostTypeHipDrop::execute(Spine*) const=0x80338C30
NrvMapPartsSeesaw2AxisRotator::HostTypeMove::execute(Spine*) const=0x80338C40
NrvMapPartsSeesaw2AxisRotator::HostTypeStay::execute(Spine*) const=0x80338C50
NrvMapPartsSeesaw2AxisRotator::HostTypeWait::execute(Spine*) const=0x80338CA0
MapPartsSeesaw2AxisRollerRotator::__ct(LiveActor*, const char*, float)=0x80338CB0
MapPartsSeesaw2AxisRollerRotator::init(const JMapInfoIter&)=0x80338D70
MapPartsSeesaw2AxisRollerRotator::start(void)=0x80338E20
MapPartsSeesaw2AxisRollerRotator::end(void)=0x80338F10
MapPartsSeesaw2AxisRollerRotator::isWorking(void) const=0x80338F20
MapPartsSeesaw2AxisRollerRotator::isMoving(void) const=0x80338F50
MapPartsSeesaw2AxisRollerRotator::getRotateMtx(void) const=0x80339240
MapPartsSeesaw2AxisRollerRotator::__dt(void)=0x80339250
short::(nit_\MapPartsSeesaw2AxisRollerRotator_cpp)=0x803392B0
MovementOnOffGroupHolder::__ct(const char*)=0x80339560
MovementOnOffGroupHolder::__dt(void)=0x803395B0
NameObj::__ct(const char*)=0x80339610
NameObj::__dt(void)=0x80339680
NameObj::init(const JMapInfoIter&)=0x803396C0
NameObj::initAfterPlacement(void)=0x803396D0
NameObj::movement(void)=0x803396E0
NameObj::draw(void) const=0x803396F0
NameObj::calcAnim(void)=0x80339700
NameObj::calcViewAndEntry(void)=0x80339710
NameObj::initWithoutIter(void)=0x80339720
NameObj::setName(const char*)=0x80339760
NameObj::setLinkedInfo(const JMapInfoIter&)=0x80339770
NameObj::executeMovement(void)=0x80339780
NameObj::requestSuspend(void)=0x803397B0
NameObj::requestResume(void)=0x803397E0
NameObj::syncWithFlags(void)=0x80339810
NameObjFunction::requestMovementOn(NameObj*)=0x80339860
NameObjFunction::requestMovementOff(NameObj*)=0x803398B0
NameObjAdaptor::__ct(const char*)=0x80339900
NameObjAdaptor::__dt(void)=0x80339950
NameObjAdaptor::movement(void)=0x803399E0
NameObjAdaptor::calcAnim(void)=0x80339A00
NameObjAdaptor::calcViewAndEntry(void)=0x80339A20
NameObjAdaptor::draw(void) const=0x80339A40
NameObjAdaptor::connectToMovement(const MR::FunctorBase&)=0x80339A60
NameObjAdaptor::connectToCalcAnim(const MR::FunctorBase&)=0x80339AB0
NameObjAdaptor::connectToDraw(const MR::FunctorBase&)=0x80339B00
NameObjCategoryList::__ct(unsigned long, const CategoryListInitialTable*, M7NameObjFPCvPv_vbPCc)=0x80339B50
NameObjCategoryList::__ct(unsigned long, const CategoryListInitialTable*, M7NameObjFPCvPCv_vbPCc)=0x80339C10
NameObjCategoryList::__dt(void)=0x80339CD0
NameObjCategoryList::execute(int)=0x80339D40
NameObjCategoryList::incrementCheck(NameObj*, int)=0x80339DE0
NameObjCategoryList::allocateBuffer(void)=0x80339E00
NameObjCategoryList::add(NameObj*, int)=0x80339E90
NameObjCategoryList::remove(NameObj*, int)=0x80339EC0
NameObjCategoryList::registerExecuteBeforeFunction(const MR::FunctorBase&, int)=0x80339F30
NameObjCategoryList::initTable(unsigned long, const CategoryListInitialTable*)=0x80339FA0
NameObjCategoryList::CategoryInfo::__ct(void)=0x8033A0A0
NameObjCategoryList::CategoryInfo::__dt(void)=0x8033A0C0
@unnamed@NameObjCategoryList_cpp@::NameObjRealDelegator<M7NameObjFPCvPCv_v>::__cl(NameObj*)=0x8033A120
@unnamed@NameObjCategoryList_cpp@::NameObjRealDelegator<M7NameObjFPCvPv_v>::__cl(NameObj*)=0x8033A150
MR::AssignableArray<NameObjCategoryList::CategoryInfo>::__dt(void)=0x8033A180
NameObjExecuteInfo::__ct(void)=0x8033A1F0
NameObjExecuteInfo::setConnectInfo(NameObj*, int, int, int, int)=0x8033A220
NameObjExecuteInfo::initConnectting(void)=0x8033A300
NameObjExecuteInfo::requestConnect(unsigned char*)=0x8033A380
NameObjExecuteInfo::requestDisconnect(unsigned char*, bool)=0x8033A3E0
NameObjExecuteInfo::executeRequirementConnectMovement(void)=0x8033A450
NameObjExecuteInfo::executeRequirementDisconnectMovement(void)=0x8033A470
NameObjExecuteInfo::executeRequirementConnectDraw(void)=0x8033A490
NameObjExecuteInfo::executeRequirementDisconnectDraw(void)=0x8033A4B0
NameObjExecuteInfo::executeRequirementDisconnectDrawDelay(void)=0x8033A4D0
NameObjExecuteInfo::requestMovementOn(int)=0x8033A4F0
NameObjExecuteInfo::requestMovementOff(int)=0x8033A510
NameObjExecuteInfo::findLightInfo(void) const=0x8033A530
NameObjExecuteInfo::connectToScene(void)=0x8033A580
NameObjExecuteInfo::disconnectToScene(void)=0x8033A600
NameObjExecuteInfo::connectToDraw(void)=0x8033A680
NameObjExecuteInfo::disconnectToDraw(void)=0x8033A700
NameObjExecuteHolder::__ct(int)=0x8033A780
NameObjExecuteHolder::registerActor(NameObj*, int, int, int, int)=0x8033A820
NameObjExecuteHolder::initConnectting(void)=0x8033A880
NameObjExecuteHolder::connectToScene(NameObj*)=0x8033A8E0
NameObjExecuteHolder::connectToDraw(NameObj*)=0x8033A930
NameObjExecuteHolder::disconnectToScene(NameObj*)=0x8033A980
NameObjExecuteHolder::disconnectToDraw(NameObj*)=0x8033A9D0
NameObjExecuteHolder::isConnectToDraw(const NameObj*) const=0x8033AA20
NameObjExecuteHolder::executeRequirementConnectMovement(void)=0x8033AA60
NameObjExecuteHolder::executeRequirementDisconnectMovement(void)=0x8033AAD0
NameObjExecuteHolder::executeRequirementConnectDraw(void)=0x8033AB40
NameObjExecuteHolder::executeRequirementDisconnectDraw(void)=0x8033ABB0
NameObjExecuteHolder::executeRequirementDisconnectDrawDelay(void)=0x8033AC20
NameObjExecuteHolder::requestMovementOn(int)=0x8033AC90
NameObjExecuteHolder::requestMovementOff(int)=0x8033AD00
NameObjExecuteHolder::getConnectToSceneInfo(const NameObj*) const=0x8033AD70
MR::registerNameObjToExecuteHolder(NameObj*, int, int, int, int)=0x8033ADA0
MR::initConnectting(void)=0x8033AE10
MR::connectToSceneTemporarily(NameObj*)=0x8033AE40
MR::disconnectToSceneTemporarily(NameObj*)=0x8033AE80
MR::connectToDrawTemporarily(NameObj*)=0x8033AEC0
MR::disconnectToDrawTemporarily(NameObj*)=0x8033AF00
MR::isConnectToDrawTemporarily(const NameObj*)=0x8033AF40
MR::executeRequirementConnectMovement(void)=0x8033AF80
MR::executeRequirementDisconnectMovement(void)=0x8033AFB0
MR::executeRequirementConnectDraw(void)=0x8033AFE0
MR::executeRequirementDisconnectDraw(void)=0x8033B010
MR::executeRequirementDisconnectDrawDelay(void)=0x8033B040
MR::requestMovementOnWithCategory(int)=0x8033B070
MR::requestMovementOffWithCategory(int)=0x8033B0B0
MR::findActorLightInfo(const LiveActor*)=0x8033B0F0
NameObjExecuteHolder::__dt(void)=0x8033B130
NameObjFactory::createNameObj<AudioEffectArea>(const char*, _P7NameObj)=0x8033B190
NameObjFactory::createNameObj<BgmChangeArea>(const char*, _P7NameObj)=0x8033B1D0
NameObjFactory::createNameObj<BgmVolumeFadeArea>(const char*, _P7NameObj)=0x8033B210
NameObjFactory::createNameObj<BloomArea>(const char*, _P7NameObj)=0x8033B250
NameObjFactory::createNameObj<CancelBeeMorphArea>(const char*, _P7NameObj)=0x8033B290
NameObjFactory::createNameObj<ClipDrawArea>(const char*, _P7NameObj)=0x8033B2D0
NameObjFactory::createNameObj<CumulativeTimerSwitchArea>(const char*, _P7NameObj)=0x8033B310
NameObjFactory::createNameObj<DeathArea>(const char*, _P7NameObj)=0x8033B350
NameObjFactory::createNameObj<DepthOfFieldArea>(const char*, _P7NameObj)=0x8033B390
NameObjFactory::createNameObj<MessageArea>(const char*, _P7NameObj)=0x8033B3D0
NameObjFactory::createNameObj<MorphSwitchArea>(const char*, _P7NameObj)=0x8033B410
NameObjFactory::createNameObj<PostFogArea>(const char*, _P7NameObj)=0x8033B450
NameObjFactory::createNameObj<PostOutlineArea>(const char*, _P7NameObj)=0x8033B490
NameObjFactory::createNameObj<ShadowColorArea>(const char*, _P7NameObj)=0x8033B4D0
NameObjFactory::createNameObj<SoundPlayArea>(const char*, _P7NameObj)=0x8033B510
NameObjFactory::createNameObj<SpinSwitchArea>(const char*, _P7NameObj)=0x8033B550
NameObjFactory::createNameObj<SunLightArea>(const char*, _P7NameObj)=0x8033B590
NameObjFactory::createNameObj<SwitchArea>(const char*, _P7NameObj)=0x8033B5D0
NameObjFactory::createNameObj<ViewGroupCtrlArea>(const char*, _P7NameObj)=0x8033B610
NameObjFactory::createNameObj<WaterArea>(const char*, _P7NameObj)=0x8033B650
NameObjFactory::createNameObj<YoshiEatGuidanceArea>(const char*, _P7NameObj)=0x8033B690
NameObjFactory::createNameObj<AreaObj>(const char*, _P7NameObj)=0x8033B6D0
NameObjFactory::createNameObj<CubeCameraArea>(const char*, _P7NameObj)=0x8033B710
NameObjFactory::createNameObj<LightArea>(const char*, _P7NameObj)=0x8033B750
NameObjFactory::createNameObj<SceneChangeArea>(const char*, _P7NameObj)=0x8033B790
NameObjFactory::createNameObj<SpinGuidanceArea>(const char*, _P7NameObj)=0x8033B7D0
NameObjFactory::createCenterOriginCube<CollisionArea>(const char*, _P7NameObj)=0x8033B810
NameObjFactory::createBaseOriginCube<AreaObj>(const char*, _P7NameObj)=0x8033B860
NameObjFactory::createBaseOriginCube<HazeCube>(const char*, _P7NameObj)=0x8033B8B0
NameObjFactory::createBaseOriginCube<MercatorTransformCube>(const char*, _P7NameObj)=0x8033B900
NameObjFactory::createBaseOriginCube<SoundEmitterCube>(const char*, _P7NameObj)=0x8033B950
NameObjFactory::createSphere<SoundEmitterSphere>(const char*, _P7NameObj)=0x8033B9A0
NameObjFactory::createBaseOriginCylinder<AreaObj>(const char*, _P7NameObj)=0x8033B9F0
NameObjFactory::createBaseOriginCube<WarpCube>(const char*, _P7NameObj)=0x8033BA40
NameObjFactory::createBaseOriginCube<SoundEmitterCubeWorldMapSync>(const char*, _P7NameObj)=0x8033BAB0
NameObjFactory::createNameObj<MarioActor>(const char*, _P7NameObj)=0x8033BB00
NameObjFactory::createNameObj<BombHeiRed>(const char*, _P7NameObj)=0x8033BB40
NameObjFactory::createNameObj<BringEnemy>(const char*, _P7NameObj)=0x8033BB80
NameObjFactory::createNameObj<Caretaker>(const char*, _P7NameObj)=0x8033BBC0
NameObjFactory::createNameObj<CareTakerHunter>(const char*, _P7NameObj)=0x8033BC00
NameObjFactory::createNameObj<CollectTico>(const char*, _P7NameObj)=0x8033BC40
NameObjFactory::createNameObj<Dreamer>(const char*, _P7NameObj)=0x8033BC80
NameObjFactory::createNameObj<GhostAttackGhost>(const char*, _P7NameObj)=0x8033BCC0
NameObjFactory::createNameObj<GliBirdNpc>(const char*, _P7NameObj)=0x8033BD00
NameObjFactory::createNameObj<HoneyBee>(const char*, _P7NameObj)=0x8033BD40
NameObjFactory::createNameObj<HoneyQueen>(const char*, _P7NameObj)=0x8033BD80
NameObjFactory::createNameObj<Kinopio>(const char*, _P7NameObj)=0x8033BDC0
NameObjFactory::createNameObj<KinopioBank>(const char*, _P7NameObj)=0x8033BE00
NameObjFactory::createNameObj<KinopioPostman>(const char*, _P7NameObj)=0x8033BE40
NameObjFactory::createNameObj<KoopaNpc>(const char*, _P7NameObj)=0x8033BE80
NameObjFactory::createNameObj<LuigiTalkNpc>(const char*, _P7NameObj)=0x8033BEC0
NameObjFactory::createNameObj<MameMuimuiAttackMan>(const char*, _P7NameObj)=0x8033BF00
NameObjFactory::createNameObj<Meister>(const char*, _P7NameObj)=0x8033BF40
NameObjFactory::createNameObj<Moc>(const char*, _P7NameObj)=0x8033BF80
NameObjFactory::createNameObj<Monte>(const char*, _P7NameObj)=0x8033BFC0
NameObjFactory::createNameObj<Peach>(const char*, _P7NameObj)=0x8033C000
NameObjFactory::createNameObj<Penguin>(const char*, _P7NameObj)=0x8033C040
NameObjFactory::createNameObj<PenguinCoach>(const char*, _P7NameObj)=0x8033C080
NameObjFactory::createNameObj<PenguinMaster>(const char*, _P7NameObj)=0x8033C0C0
NameObjFactory::createNameObj<Pichan>(const char*, _P7NameObj)=0x8033C100
NameObjFactory::createNameObj<PichanRacer>(const char*, _P7NameObj)=0x8033C140
NameObjFactory::createNameObj<PlayAttackMan>(const char*, _P7NameObj)=0x8033C180
NameObjFactory::createNameObj<Rabbit>(const char*, _P7NameObj)=0x8033C1C0
NameObjFactory::createNameObj<Rosetta>(const char*, _P7NameObj)=0x8033C200
NameObjFactory::createNameObj<ScoreAttackCounter>(const char*, _P7NameObj)=0x8033C240
NameObjFactory::createNameObj<ScoreAttackMan>(const char*, _P7NameObj)=0x8033C280
NameObjFactory::createNameObj<SignBoard>(const char*, _P7NameObj)=0x8033C2C0
NameObjFactory::createNameObj<StarListBoard>(const char*, _P7NameObj)=0x8033C300
NameObjFactory::createNameObj<SuperDreamer>(const char*, _P7NameObj)=0x8033C340
NameObjFactory::createNameObj<Tico>(const char*, _P7NameObj)=0x8033C380
NameObjFactory::createNameObj<TicoBaby>(const char*, _P7NameObj)=0x8033C3C0
NameObjFactory::createNameObj<TicoBig>(const char*, _P7NameObj)=0x8033C400
NameObjFactory::createNameObj<TicoFatCoin>(const char*, _P7NameObj)=0x8033C440
NameObjFactory::createNameObj<TicoFatStarPiece>(const char*, _P7NameObj)=0x8033C480
NameObjFactory::createNameObj<TicoRail>(const char*, _P7NameObj)=0x8033C4C0
NameObjFactory::createNameObj<TicoShop>(const char*, _P7NameObj)=0x8033C500
NameObjFactory::createNameObj<TicoShopDice>(const char*, _P7NameObj)=0x8033C540
NameObjFactory::createNameObj<TogepinAttackMan>(const char*, _P7NameObj)=0x8033C580
NameObjFactory::createNameObj<TrickRabbit>(const char*, _P7NameObj)=0x8033C5C0
NameObjFactory::createNameObj<WarpPod>(const char*, _P7NameObj)=0x8033C600
NameObjFactory::createNameObj<Creeper>(const char*, _P7NameObj)=0x8033C670
NameObjFactory::createNameObj<Fluff>(const char*, _P7NameObj)=0x8033C6B0
NameObjFactory::createNameObj<FluffWind>(const char*, _P7NameObj)=0x8033C6F0
NameObjFactory::createNameObj<GliBird>(const char*, _P7NameObj)=0x8033C730
NameObjFactory::createNameObj<JetTurtle>(const char*, _P7NameObj)=0x8033C770
NameObjFactory::createNameObj<JumpBranch>(const char*, _P7NameObj)=0x8033C7B0
NameObjFactory::createNameObj<Plant>(const char*, _P7NameObj)=0x8033C7F0
NameObjFactory::createNameObj<PlantSlider>(const char*, _P7NameObj)=0x8033C830
NameObjFactory::createNameObj<Pole>(const char*, _P7NameObj)=0x8033C870
NameObjFactory::createNameObj<Tamakoro>(const char*, _P7NameObj)=0x8033C8B0
NameObjFactory::createNameObj<Trapeze>(const char*, _P7NameObj)=0x8033C8F0
NameObjFactory::createNameObj<TubeSlider>(const char*, _P7NameObj)=0x8033C930
NameObjFactory::createNameObj<BakuBaku>(const char*, _P7NameObj)=0x8033C970
NameObjFactory::createNameObj<Balloonfish>(const char*, _P7NameObj)=0x8033C9B0
NameObjFactory::createNameObj<BasaBasa>(const char*, _P7NameObj)=0x8033C9F0
NameObjFactory::createNameObj<Battan>(const char*, _P7NameObj)=0x8033CA30
NameObjFactory::createNameObj<BeeEater>(const char*, _P7NameObj)=0x8033CA70
NameObjFactory::createNameObj<BegomanBaby>(const char*, _P7NameObj)=0x8033CAB0
NameObjFactory::createNameObj<BegomanLauncher>(const char*, _P7NameObj)=0x8033CAF0
NameObjFactory::createNameObj<BegomanSpike>(const char*, _P7NameObj)=0x8033CB30
NameObjFactory::createNameObj<BegomanSpring>(const char*, _P7NameObj)=0x8033CB70
NameObjFactory::createNameObj<BombBird>(const char*, _P7NameObj)=0x8033CBB0
NameObjFactory::createNameObj<BombHei>(const char*, _P7NameObj)=0x8033CBF0
NameObjFactory::createNameObj<BombHeiLauncher>(const char*, _P7NameObj)=0x8033CC30
NameObjFactory::createNameObj<BombTeresa>(const char*, _P7NameObj)=0x8033CC70
NameObjFactory::createNameObj<BoomerangBros>(const char*, _P7NameObj)=0x8033CCB0
NameObjFactory::createNameObj<Bussun>(const char*, _P7NameObj)=0x8033CCF0
NameObjFactory::createNameObj<Buzz>(const char*, _P7NameObj)=0x8033CD30
NameObjFactory::createNameObj<Cactus>(const char*, _P7NameObj)=0x8033CD70
NameObjFactory::createNameObj<Chorobon>(const char*, _P7NameObj)=0x8033CDB0
NameObjFactory::createNameObj<DanceFlower>(const char*, _P7NameObj)=0x8033CDF0
NameObjFactory::createNameObj<Dossun>(const char*, _P7NameObj)=0x8033CE30
NameObjFactory::createNameObj<DrillBullet>(const char*, _P7NameObj)=0x8033CE70
NameObjFactory::createNameObj<FireBubble>(const char*, _P7NameObj)=0x8033CEB0
NameObjFactory::createNameObj<FlowerMimic>(const char*, _P7NameObj)=0x8033CEF0
NameObjFactory::createNameObj<Foomin>(const char*, _P7NameObj)=0x8033CF30
NameObjFactory::createNameObj<Garigari>(const char*, _P7NameObj)=0x8033CF70
NameObjFactory::createNameObj<Gesso>(const char*, _P7NameObj)=0x8033CFB0
NameObjFactory::createNameObj<Grapyon>(const char*, _P7NameObj)=0x8033CFF0
NameObjFactory::createNameObj<MogucchiShooter>(const char*, _P7NameObj)=0x8033D030
NameObjFactory::createNameObj<HammerBros>(const char*, _P7NameObj)=0x8033D070
NameObjFactory::createNameObj<HammerHeadPackun>(const char*, _P7NameObj)=0x8033D0B0
NameObjFactory::createNameObj<Hanachan>(const char*, _P7NameObj)=0x8033D0F0
NameObjFactory::createNameObj<HanachanBig>(const char*, _P7NameObj)=0x8033D130
NameObjFactory::createNameObj<Jellyfish>(const char*, _P7NameObj)=0x8033D170
NameObjFactory::createNameObj<JellyfishElectric>(const char*, _P7NameObj)=0x8033D1B0
NameObjFactory::createNameObj<Jugem>(const char*, _P7NameObj)=0x8033D1F0
NameObjFactory::createNameObj<JumpBeamer>(const char*, _P7NameObj)=0x8033D230
NameObjFactory::createNameObj<JumpSpider>(const char*, _P7NameObj)=0x8033D270
NameObjFactory::createNameObj<Kabokuri>(const char*, _P7NameObj)=0x8033D2B0
NameObjFactory::createNameObj<Kameck>(const char*, _P7NameObj)=0x8033D2F0
NameObjFactory::createNameObj<Kanina>(const char*, _P7NameObj)=0x8033D330
NameObjFactory::createNameObj<Karikari>(const char*, _P7NameObj)=0x8033D370
NameObjFactory::createNameObj<Karon>(const char*, _P7NameObj)=0x8033D3B0
NameObjFactory::createNameObj<KickStone>(const char*, _P7NameObj)=0x8033D3F0
NameObjFactory::createNameObj<Kiraira>(const char*, _P7NameObj)=0x8033D430
NameObjFactory::createNameObj<KoteBug>(const char*, _P7NameObj)=0x8033D470
NameObjFactory::createNameObj<Kuribo>(const char*, _P7NameObj)=0x8033D4B0
NameObjFactory::createNameObj<KuriboChief>(const char*, _P7NameObj)=0x8033D4F0
NameObjFactory::createNameObj<KuriboMini>(const char*, _P7NameObj)=0x8033D530
NameObjFactory::createNameObj<LavaBubble>(const char*, _P7NameObj)=0x8033D570
NameObjFactory::createNameObj<MameMuimuiScorer>(const char*, _P7NameObj)=0x8033D5B0
NameObjFactory::createNameObj<MechanicKoopaMini>(const char*, _P7NameObj)=0x8033D5F0
NameObjFactory::createNameObj<Menbo>(const char*, _P7NameObj)=0x8033D630
NameObjFactory::createNameObj<Meramera>(const char*, _P7NameObj)=0x8033D670
NameObjFactory::createNameObj<Metbo>(const char*, _P7NameObj)=0x8033D6B0
NameObjFactory::createNameObj<Mogucchi>(const char*, _P7NameObj)=0x8033D6F0
NameObjFactory::createNameObj<Nigero>(const char*, _P7NameObj)=0x8033D730
NameObjFactory::createNameObj<NokonokoLand>(const char*, _P7NameObj)=0x8033D770
NameObjFactory::createNameObj<NokonokoLandBig>(const char*, _P7NameObj)=0x8033D7B0
NameObjFactory::createNameObj<Nyoropon>(const char*, _P7NameObj)=0x8033D7F0
NameObjFactory::createNameObj<OtaKing>(const char*, _P7NameObj)=0x8033D830
NameObjFactory::createNameObj<OtaRock>(const char*, _P7NameObj)=0x8033D870
NameObjFactory::createNameObj<OtaRockTank>(const char*, _P7NameObj)=0x8033D8B0
NameObjFactory::createNameObj<PackunFlowerBig>(const char*, _P7NameObj)=0x8033D8F0
NameObjFactory::createNameObj<PackunPetit>(const char*, _P7NameObj)=0x8033D930
NameObjFactory::createNameObj<Patakuri>(const char*, _P7NameObj)=0x8033D970
NameObjFactory::createNameObj<PatakuriBig>(const char*, _P7NameObj)=0x8033D9B0
NameObjFactory::createNameObj<Petari>(const char*, _P7NameObj)=0x8033D9F0
NameObjFactory::createNameObj<Peto>(const char*, _P7NameObj)=0x8033DA30
NameObjFactory::createNameObj<OnimasuJump>(const char*, _P7NameObj)=0x8033DA70
NameObjFactory::createNameObj<Popo>(const char*, _P7NameObj)=0x8033DAB0
NameObjFactory::createNameObj<Pukupuku>(const char*, _P7NameObj)=0x8033DAF0
NameObjFactory::createNameObj<PukupukuWaterSurface>(const char*, _P7NameObj)=0x8033DB30
NameObjFactory::createNameObj<PunchBox>(const char*, _P7NameObj)=0x8033DB70
NameObjFactory::createNameObj<Pyudon>(const char*, _P7NameObj)=0x8033DBB0
NameObjFactory::createNameObj<RingBeamer>(const char*, _P7NameObj)=0x8033DBF0
NameObjFactory::createNameObj<SamboHead>(const char*, _P7NameObj)=0x8033DC30
NameObjFactory::createNameObj<SearchBeamer>(const char*, _P7NameObj)=0x8033DC70
NameObjFactory::createNameObj<Snakehead>(const char*, _P7NameObj)=0x8033DCB0
NameObjFactory::createNameObj<SpinDriver>(const char*, _P7NameObj)=0x8033DCF0
NameObjFactory::createNameObj<StinkBugParent>(const char*, _P7NameObj)=0x8033DD30
NameObjFactory::createNameObj<StinkBugSmall>(const char*, _P7NameObj)=0x8033DD70
NameObjFactory::createNameObj<StringSpider>(const char*, _P7NameObj)=0x8033DDB0
NameObjFactory::createNameObj<Takobo>(const char*, _P7NameObj)=0x8033DDF0
NameObjFactory::createNameObj<TakoHei>(const char*, _P7NameObj)=0x8033DE30
NameObjFactory::createNameObj<TakoSho>(const char*, _P7NameObj)=0x8033DE70
NameObjFactory::createNameObj<Terebo>(const char*, _P7NameObj)=0x8033DEB0
NameObjFactory::createNameObj<TereboGroup>(const char*, _P7NameObj)=0x8033DEF0
NameObjFactory::createNameObj<Teresa>(const char*, _P7NameObj)=0x8033DF30
NameObjFactory::createNameObj<TeresaAtomic>(const char*, _P7NameObj)=0x8033DF70
NameObjFactory::createNameObj<TeresaWater>(const char*, _P7NameObj)=0x8033DFB0
NameObjFactory::createNameObj<Togezo>(const char*, _P7NameObj)=0x8033DFF0
NameObjFactory::createNameObj<Tongari>(const char*, _P7NameObj)=0x8033E030
NameObjFactory::createNameObj<Togepin>(const char*, _P7NameObj)=0x8033E070
NameObjFactory::createNameObj<Unbaba>(const char*, _P7NameObj)=0x8033E0C0
NameObjFactory::createNameObj<UnbabaSlim>(const char*, _P7NameObj)=0x8033E100
NameObjFactory::createNameObj<Unizo>(const char*, _P7NameObj)=0x8033E140
NameObjFactory::createNameObj<WanwanGoal>(const char*, _P7NameObj)=0x8033E180
NameObjFactory::createNameObj<WanwanSearch>(const char*, _P7NameObj)=0x8033E1C0
NameObjFactory::createNameObj<Yukkina>(const char*, _P7NameObj)=0x8033E200
NameObjFactory::createNameObj<YukkinaGroundSnow>(const char*, _P7NameObj)=0x8033E240
NameObjFactory::createNameObj<Birikyu>(const char*, _P7NameObj)=0x8033E280
NameObjFactory::createNameObj<BirikyuWithFace>(const char*, _P7NameObj)=0x8033E2C0
NameObjFactory::createNameObj<HomingKillerLauncher>(const char*, _P7NameObj)=0x8033E300
NameObjFactory::createNameObj<InfernoMario>(const char*, _P7NameObj)=0x8033E340
NameObjFactory::createNameObj<InfernoMarioGenerator>(const char*, _P7NameObj)=0x8033E380
NameObjFactory::createNameObj<BattanKing>(const char*, _P7NameObj)=0x8033E3C0
NameObjFactory::createNameObj<BellyDragon>(const char*, _P7NameObj)=0x8033E400
NameObjFactory::createNameObj<BossBussun>(const char*, _P7NameObj)=0x8033E440
NameObjFactory::createNameObj<BossJugem>(const char*, _P7NameObj)=0x8033E480
NameObjFactory::createNameObj<BossStinkBug>(const char*, _P7NameObj)=0x8033E4C0
NameObjFactory::createNameObj<DinoPackunBaby>(const char*, _P7NameObj)=0x8033E500
NameObjFactory::createNameObj<Dodoryu>(const char*, _P7NameObj)=0x8033E540
NameObjFactory::createNameObj<KingTossin>(const char*, _P7NameObj)=0x8033E580
NameObjFactory::createNameObj<Koopa>(const char*, _P7NameObj)=0x8033E5C0
NameObjFactory::createNameObj<KoopaJrCastle>(const char*, _P7NameObj)=0x8033E600
NameObjFactory::createNameObj<KoopaJrRobot>(const char*, _P7NameObj)=0x8033E640
NameObjFactory::createNameObj<Polta>(const char*, _P7NameObj)=0x8033E680
NameObjFactory::createNameObj<Sandy>(const char*, _P7NameObj)=0x8033E6C0
NameObjFactory::createNameObj<TwoLegs>(const char*, _P7NameObj)=0x8033E700
NameObjFactory::createNameObj<KoopaDemoChamber>(const char*, _P7NameObj)=0x8033E740
NameObjFactory::createNameObj<KoopaFinalBattlePos>(const char*, _P7NameObj)=0x8033E780
NameObjFactory::createNameObj<AirBubble>(const char*, _P7NameObj)=0x8033E7C0
NameObjFactory::createNameObj<AirBubbleGenerator>(const char*, _P7NameObj)=0x8033E800
NameObjFactory::createNameObj<ArrowSwitch>(const char*, _P7NameObj)=0x8033E840
NameObjFactory::createNameObj<AttackRock>(const char*, _P7NameObj)=0x8033E880
NameObjFactory::createNameObj<AttackRockTutorial>(const char*, _P7NameObj)=0x8033E8C0
NameObjFactory::createNameObj<AttackRockFinal>(const char*, _P7NameObj)=0x8033E900
NameObjFactory::createNameObj<BalloonFruit>(const char*, _P7NameObj)=0x8033E940
NameObjFactory::createNameObj<BallOpener>(const char*, _P7NameObj)=0x8033E980
NameObjFactory::createNameObj<BallRail>(const char*, _P7NameObj)=0x8033E9C0
NameObjFactory::createNameObj<BeeFlowerHover>(const char*, _P7NameObj)=0x8033EA00
NameObjFactory::createNameObj<BeeJumpBall>(const char*, _P7NameObj)=0x8033EA40
NameObjFactory::createNameObj<BenefitItemInvincible>(const char*, _P7NameObj)=0x8033EA80
NameObjFactory::createNameObj<BenefitItemLifeUp>(const char*, _P7NameObj)=0x8033EAC0
NameObjFactory::createNameObj<BenefitItemOneUp>(const char*, _P7NameObj)=0x8033EB00
NameObjFactory::createNameObj<BigFan>(const char*, _P7NameObj)=0x8033EB70
NameObjFactory::createNameObj<BigFanCloud>(const char*, _P7NameObj)=0x8033EBB0
NameObjFactory::createNameObj<BlackHole>(const char*, _P7NameObj)=0x8033EBF0
NameObjFactory::createNameObj<BloomFlower>(const char*, _P7NameObj)=0x8033EC30
NameObjFactory::createNameObj<BlueStarCupsulePlanet>(const char*, _P7NameObj)=0x8033EC70
NameObjFactory::createNameObj<BossJugemPlanetCloud>(const char*, _P7NameObj)=0x8033ECB0
NameObjFactory::createNameObj<BreakableCage>(const char*, _P7NameObj)=0x8033ECF0
NameObjFactory::createNameObj<BrightSun>(const char*, _P7NameObj)=0x8033ED30
NameObjFactory::createNameObj<Butterfly>(const char*, _P7NameObj)=0x8033ED70
NameObjFactory::createNameObj<ChangeRoom>(const char*, _P7NameObj)=0x8033EDB0
NameObjFactory::createNameObj<CloudStep>(const char*, _P7NameObj)=0x8033EDF0
NameObjFactory::createNameObj<CountFlower>(const char*, _P7NameObj)=0x8033EE30
NameObjFactory::createNameObj<CocoNut>(const char*, _P7NameObj)=0x8033EE70
NameObjFactory::createNameObj<CoinAppearSpot>(const char*, _P7NameObj)=0x8033EEB0
NameObjFactory::createNameObj<CollapsePlane>(const char*, _P7NameObj)=0x8033EEF0
NameObjFactory::createNameObj<DashRing>(const char*, _P7NameObj)=0x8033EF30
NameObjFactory::createNameObj<EarthenPipe>(const char*, _P7NameObj)=0x8033EF70
NameObjFactory::createNameObj<ElectricPressure>(const char*, _P7NameObj)=0x8033EFB0
NameObjFactory::createNameObj<ElectricRail>(const char*, _P7NameObj)=0x8033EFF0
NameObjFactory::createNameObj<ElectricRailMoving>(const char*, _P7NameObj)=0x8033F030
NameObjFactory::createNameObj<ElectricRail2Point>(const char*, _P7NameObj)=0x8033F070
NameObjFactory::createNameObj<ExterminationCheckerWoodBox>(const char*, _P7NameObj)=0x8033F0B0
NameObjFactory::createNameObj<FirePressure>(const char*, _P7NameObj)=0x8033F0F0
NameObjFactory::createNameObj<FlipPanel>(const char*, _P7NameObj)=0x8033F130
NameObjFactory::createNameObj<FlipPanelObserver>(const char*, _P7NameObj)=0x8033F170
NameObjFactory::createNameObj<WorldWarpPoint>(const char*, _P7NameObj)=0x8033F1B0
NameObjFactory::createNameObj<GCaptureTarget>(const char*, _P7NameObj)=0x8033F1F0
NameObjFactory::createNameObj<GravityArrow>(const char*, _P7NameObj)=0x8033F230
NameObjFactory::createNameObj<GravityBgmCtrl>(const char*, _P7NameObj)=0x8033F270
NameObjFactory::createNameObj<GravityFallBlock>(const char*, _P7NameObj)=0x8033F2B0
NameObjFactory::createNameObj<GravityLightRoad>(const char*, _P7NameObj)=0x8033F2F0
NameObjFactory::createNameObj<ItemDice>(const char*, _P7NameObj)=0x8033F330
NameObjFactory::createNameObj<ItemDrill>(const char*, _P7NameObj)=0x8033F370
NameObjFactory::createNameObj<JumpHole>(const char*, _P7NameObj)=0x8033F3B0
NameObjFactory::createNameObj<JumpStand>(const char*, _P7NameObj)=0x8033F3F0
NameObjFactory::createNameObj<JumpStandAuto>(const char*, _P7NameObj)=0x8033F430
NameObjFactory::createNameObj<KoopaAssaultFallObj>(const char*, _P7NameObj)=0x8033F470
NameObjFactory::createNameObj<KoopaSealField>(const char*, _P7NameObj)=0x8033F4B0
NameObjFactory::createNameObj<KoopaStatueVomit>(const char*, _P7NameObj)=0x8033F4F0
NameObjFactory::createNameObj<KoopaJrCastleCloudStep>(const char*, _P7NameObj)=0x8033F530
NameObjFactory::createNameObj<KoopaJrCastleWindUp>(const char*, _P7NameObj)=0x8033F570
NameObjFactory::createNameObj<LavaGeyser>(const char*, _P7NameObj)=0x8033F5B0
NameObjFactory::createNameObj<LavaHomeVolcanoFlow>(const char*, _P7NameObj)=0x8033F5F0
NameObjFactory::createNameObj<LavaProminence>(const char*, _P7NameObj)=0x8033F630
NameObjFactory::createNameObj<LeafBoard>(const char*, _P7NameObj)=0x8033F670
NameObjFactory::createNameObj<LiftFlower>(const char*, _P7NameObj)=0x8033F6B0
NameObjFactory::createNameObj<LightFruit>(const char*, _P7NameObj)=0x8033F6F0
NameObjFactory::createNameObj<LotusLeaf>(const char*, _P7NameObj)=0x8033F730
NameObjFactory::createNameObj<LuckyDice>(const char*, _P7NameObj)=0x8033F770
NameObjFactory::createNameObj<MarioLauncher>(const char*, _P7NameObj)=0x8033F7B0
NameObjFactory::createNameObj<MorphItemBee>(const char*, _P7NameObj)=0x8033F7F0
NameObjFactory::createNameObj<MorphItemFire>(const char*, _P7NameObj)=0x8033F850
NameObjFactory::createNameObj<MorphItemHopper>(const char*, _P7NameObj)=0x8033F8B0
NameObjFactory::createNameObj<MorphItemTeresaa>(const char*, _P7NameObj)=0x8033F910
NameObjFactory::createNameObj<MorphItemRock>(const char*, _P7NameObj)=0x8033F970
NameObjFactory::createNameObj<MorphItemCollection>(const char*, _P7NameObj)=0x8033F9B0
NameObjFactory::createNameObj<NoteFairy>(const char*, _P7NameObj)=0x8033F9F0
NameObjFactory::createNameObj<PetitPorter>(const char*, _P7NameObj)=0x8033FA30
NameObjFactory::createNameObj<PetitPorterExitPoint>(const char*, _P7NameObj)=0x8033FA70
NameObjFactory::createNameObj<PetitPorterWarpPoint>(const char*, _P7NameObj)=0x8033FAB0
NameObjFactory::createNameObj<PositiveDice>(const char*, _P7NameObj)=0x8033FAF0
NameObjFactory::createNameObj<PowerStar>(const char*, _P7NameObj)=0x8033FB30
NameObjFactory::createNameObj<PowerStarAppearPoint>(const char*, _P7NameObj)=0x8033FB70
NameObjFactory::createNameObj<PunchingKinoko>(const char*, _P7NameObj)=0x8033FBB0
NameObjFactory::createNameObj<RepeatBlock>(const char*, _P7NameObj)=0x8033FBF0
NameObjFactory::createNameObj<RestartObj>(const char*, _P7NameObj)=0x8033FC30
NameObjFactory::createNameObj<RockCreator>(const char*, _P7NameObj)=0x8033FC70
NameObjFactory::createNameObj<RockReflector>(const char*, _P7NameObj)=0x8033FCB0
NameObjFactory::createNameObj<SandBird>(const char*, _P7NameObj)=0x8033FCF0
NameObjFactory::createNameObj<ShootingStar>(const char*, _P7NameObj)=0x8033FD30
NameObjFactory::createNameObj<SmallStone>(const char*, _P7NameObj)=0x8033FD70
NameObjFactory::createNameObj<SnowBall>(const char*, _P7NameObj)=0x8033FDB0
NameObjFactory::createNameObj<SnowMan>(const char*, _P7NameObj)=0x8033FDF0
NameObjFactory::createNameObj<SoundEmitter>(const char*, _P7NameObj)=0x8033FE30
NameObjFactory::createNameObj<SpaceMine>(const char*, _P7NameObj)=0x8033FE70
NameObjFactory::createNameObj<SphereRailDash>(const char*, _P7NameObj)=0x8033FEB0
NameObjFactory::createNameObj<SpinCloudBlock>(const char*, _P7NameObj)=0x8033FEF0
NameObjFactory::createNameObj<SpinCloudItem>(const char*, _P7NameObj)=0x8033FF30
NameObjFactory::createNameObj<SupportFlushPoint>(const char*, _P7NameObj)=0x8033FF70
NameObjFactory::createNameObj<TimeAttackClock>(const char*, _P7NameObj)=0x8033FFB0
NameObjFactory::createNameObj<TogepinScorer>(const char*, _P7NameObj)=0x8033FFF0
NameObjFactory::createNameObj<Tsukidashikun>(const char*, _P7NameObj)=0x80340030
NameObjFactory::createNameObj<WaterPressure>(const char*, _P7NameObj)=0x80340070
NameObjFactory::createNameObj<WoodBox>(const char*, _P7NameObj)=0x803400B0
NameObjFactory::createNameObj<WoodLogBridge>(const char*, _P7NameObj)=0x803400F0
NameObjFactory::createNameObj<SimpleEnvironmentObj>(const char*, _P7NameObj)=0x80340130
NameObjFactory::createNameObj<Candlestand>(const char*, _P7NameObj)=0x80340190
NameObjFactory::createNameObj<SimpleMapObj>(const char*, _P7NameObj)=0x803401D0
NameObjFactory::createNameObj<CoconutTreeLeafGroup>(const char*, _P7NameObj)=0x80340210
NameObjFactory::createNameObj<ItemBlock>(const char*, _P7NameObj)=0x80340250
NameObjFactory::createNameObj<CrystalCage>(const char*, _P7NameObj)=0x80340290
NameObjFactory::createNameObj<CrystalCageOpa>(const char*, _P7NameObj)=0x803402D0
NameObjFactory::createNameObj<PlantGroup>(const char*, _P7NameObj)=0x80340310
NameObjFactory::createNameObj<SimpleMapObjPush>(const char*, _P7NameObj)=0x80340350
NameObjFactory::createNameObj<ExterminationSwitch>(const char*, _P7NameObj)=0x803403B0
NameObjFactory::createNameObj<GemCageS>(const char*, _P7NameObj)=0x803403F0
NameObjFactory::createNameObj<AnmModelSwitchMoveEndKill>(const char*, _P7NameObj)=0x80340430
NameObjFactory::createNameObj<AnmModelSwitchMove>(const char*, _P7NameObj)=0x80340490
NameObjFactory::createNameObj<RailMoveObj>(const char*, _P7NameObj)=0x803404D0
NameObjFactory::createNameObj<RotateMoveObj>(const char*, _P7NameObj)=0x80340510
NameObjFactory::createNameObj<SimpleBreakableObj>(const char*, _P7NameObj)=0x80340570
NameObjFactory::createNameObj<KoopaJrRobotBreakableStep>(const char*, _P7NameObj)=0x803405B0
NameObjFactory::createNameObj<MeteorStrikeLauncher>(const char*, _P7NameObj)=0x803405F0
NameObjFactory::createNameObj<SwitchingMoveBlock>(const char*, _P7NameObj)=0x80340630
NameObjFactory::createNameObj<RollingWaterCreator>(const char*, _P7NameObj)=0x80340670
NameObjFactory::createNameObj<SimpleMapObjFarMax>(const char*, _P7NameObj)=0x803406B0
NameObjFactory::createNameObj<Shellfish>(const char*, _P7NameObj)=0x80340710
NameObjFactory::createNameObj<SnowMound>(const char*, _P7NameObj)=0x80340750
NameObjFactory::createNameObj<WanwanCreator>(const char*, _P7NameObj)=0x80340790
NameObjFactory::createNameObj<WingBlock>(const char*, _P7NameObj)=0x803407D0
NameObjFactory::createNameObj<WorldMapModel>(const char*, _P7NameObj)=0x80340810
NameObjFactory::createNameObj<CapsuleCage>(const char*, _P7NameObj)=0x80340850
NameObjFactory::createNameObj<FireBar>(const char*, _P7NameObj)=0x80340890
NameObjFactory::createNameObj<FireRing>(const char*, _P7NameObj)=0x803408D0
NameObjFactory::createNameObj<HipDropRock>(const char*, _P7NameObj)=0x80340910
NameObjFactory::createNameObj<NeedlePlant>(const char*, _P7NameObj)=0x80340950
NameObjFactory::createNameObj<NeedleTrap>(const char*, _P7NameObj)=0x80340990
NameObjFactory::createNameObj<StarPieceCluster>(const char*, _P7NameObj)=0x803409D0
NameObjFactory::createNameObj<StarPieceFlower>(const char*, _P7NameObj)=0x80340A10
NameObjFactory::createNameObj<TreasureSpot>(const char*, _P7NameObj)=0x80340A50
NameObjFactory::createNameObj<SimpleClipPartsObj>(const char*, _P7NameObj)=0x80340A90
NameObjFactory::createNameObj<DarknessRoomDoor>(const char*, _P7NameObj)=0x80340AD0
NameObjFactory::createNameObj<SimpleSeesawObj>(const char*, _P7NameObj)=0x80340B10
NameObjFactory::createNameObj<SimpleTextureSwitchChangeObj>(const char*, _P7NameObj)=0x80340B50
NameObjFactory::createNameObj<ManholeCover>(const char*, _P7NameObj)=0x80340BB0
NameObjFactory::createNameObj<LavaFloater>(const char*, _P7NameObj)=0x80340BF0
NameObjFactory::createNameObj<RailRotateMoveObj>(const char*, _P7NameObj)=0x80340C30
NameObjFactory::createNameObj<Sandstorm>(const char*, _P7NameObj)=0x80340C70
NameObjFactory::createNameObj<GlaringLight>(const char*, _P7NameObj)=0x80340CB0
NameObjFactory::createNameObj<MarioFacePlanetPrevious>(const char*, _P7NameObj)=0x80340D10
NameObjFactory::createNameObj<WorldMapAccessPanel>(const char*, _P7NameObj)=0x80340D50
NameObjFactory::createNameObj<ItemRoomDoor>(const char*, _P7NameObj)=0x80340D90
NameObjFactory::createNameObj<ChimneyEntryObj>(const char*, _P7NameObj)=0x80340DD0
NameObjFactory::createNameObj<ItemCollectionPlanetWall>(const char*, _P7NameObj)=0x80340E10
NameObjFactory::createNameObj<CymbalsStep>(const char*, _P7NameObj)=0x80340E50
NameObjFactory::createNameObj<DrumTrampoline>(const char*, _P7NameObj)=0x80340E90
NameObjFactory::createNameObj<RailMoveObjShakeCamera>(const char*, _P7NameObj)=0x80340ED0
NameObjFactory::createNameObj<AnmModelSwitchMoveInvalidateCollision>(const char*, _P7NameObj)=0x80340F10
NameObjFactory::createNameObj<RockBreakCage>(const char*, _P7NameObj)=0x80340F70
NameObjFactory::createNameObj<FallDownBridge>(const char*, _P7NameObj)=0x80340FB0
NameObjFactory::createNameObj<ConstructionLight>(const char*, _P7NameObj)=0x80340FF0
NameObjFactory::createNameObj<WireCoverCage>(const char*, _P7NameObj)=0x80341030
NameObjFactory::createNameObj<RailMoveNormalLift>(const char*, _P7NameObj)=0x803410A0
NameObjFactory::createNameObj<SecretGate>(const char*, _P7NameObj)=0x803410E0
NameObjFactory::createNameObj<SecretGateCounter>(const char*, _P7NameObj)=0x80341120
NameObjFactory::createNameObj<GliderBalloon>(const char*, _P7NameObj)=0x80341160
NameObjFactory::createNameObj<GliderTree>(const char*, _P7NameObj)=0x803411A0
NameObjFactory::createNameObj<MagmaMeteor>(const char*, _P7NameObj)=0x803411E0
NameObjFactory::createNameObj<IceMeteor>(const char*, _P7NameObj)=0x80341220
NameObjFactory::createNameObj<VsOtaRockTankIcePlanetFence>(const char*, _P7NameObj)=0x80341260
NameObjFactory::createNameObj<MagmaSeaWave>(const char*, _P7NameObj)=0x803412A0
NameObjFactory::createNameObj<StarPieceClusterRock>(const char*, _P7NameObj)=0x803412E0
NameObjFactory::createNameObj<GoroRockLaneParts>(const char*, _P7NameObj)=0x80341320
NameObjFactory::createNameObj<KoopaJrCastleGate>(const char*, _P7NameObj)=0x80341360
NameObjFactory::createNameObj<RailMoveObjGenerator>(const char*, _P7NameObj)=0x803413A0
NameObjFactory::createNameObj<MarioLauncherTarget>(const char*, _P7NameObj)=0x80341400
NameObjFactory::createNameObj<LavaSeparateWaterfall>(const char*, _P7NameObj)=0x80341440
NameObjFactory::createNameObj<GliderCometMedalCage>(const char*, _P7NameObj)=0x80341480
NameObjFactory::createNameObj<CaveInCube>(const char*, _P7NameObj)=0x803414C0
NameObjFactory::createNameObj<FallDownWall>(const char*, _P7NameObj)=0x80341500
NameObjFactory::createNameObj<ChangeAlphaObj>(const char*, _P7NameObj)=0x80341540
NameObjFactory::createNameObj<MemoryRoadStep>(const char*, _P7NameObj)=0x80341580
NameObjFactory::createNameObj<MemoryRoadDoor>(const char*, _P7NameObj)=0x803415C0
NameObjFactory::createNameObj<RepeatTimerBlock>(const char*, _P7NameObj)=0x80341600
NameObjFactory::createNameObj<RailPlacementPoleObstacle>(const char*, _P7NameObj)=0x80341640
NameObjFactory::createNameObj<PoleObstacleParts>(const char*, _P7NameObj)=0x80341680
NameObjFactory::createNameObj<CollapseRailMoveObj>(const char*, _P7NameObj)=0x803416D0
NameObjFactory::createNameObj<RotateSeesawStep>(const char*, _P7NameObj)=0x80341710
NameObjFactory::createNameObj<RotateHammerPressure>(const char*, _P7NameObj)=0x80341750
NameObjFactory::createNameObj<WanwanLiftUpStep>(const char*, _P7NameObj)=0x80341790
NameObjFactory::createNameObj<GravityTimerChangeWall>(const char*, _P7NameObj)=0x803417D0
NameObjFactory::createNameObj<Gorogoro>(const char*, _P7NameObj)=0x80341810
NameObjFactory::createNameObj<AncientCage>(const char*, _P7NameObj)=0x80341850
NameObjFactory::createNameObj<RailMoveDisappearStep>(const char*, _P7NameObj)=0x80341890
NameObjFactory::createNameObj<OldFortressCover>(const char*, _P7NameObj)=0x803418D0
NameObjFactory::createNameObj<BigRepeatWarpLift>(const char*, _P7NameObj)=0x80341910
NameObjFactory::createNameObj<WhiteSnowTree>(const char*, _P7NameObj)=0x80341950
NameObjFactory::createNameObj<GhostMazePlanetMask>(const char*, _P7NameObj)=0x80341990
NameObjFactory::createNameObj<AssemblyBlock>(const char*, _P7NameObj)=0x803419D0
NameObjFactory::createNameObj<TreasureBoxCracked>(const char*, _P7NameObj)=0x80341A10
NameObjFactory::createNameObj<SpaceShipStep>(const char*, _P7NameObj)=0x80341A50
NameObjFactory::createNameObj<UFOKinoko>(const char*, _P7NameObj)=0x80341A90
NameObjFactory::createNameObj<Sky>(const char*, _P7NameObj)=0x80341AD0
NameObjFactory::createNameObj<ProjectionMapSky>(const char*, _P7NameObj)=0x80341B10
NameObjFactory::createNameObj<OmoteuLandSky>(const char*, _P7NameObj)=0x80341B50
NameObjFactory::createNameObj<WorldMapSky>(const char*, _P7NameObj)=0x80341B90
NameObjFactory::createNameObj<Air>(const char*, _P7NameObj)=0x80341BD0
NameObjFactory::createNameObj<AirFar100m>(const char*, _P7NameObj)=0x80341C10
NameObjFactory::createNameObj<ProjectionMapAir>(const char*, _P7NameObj)=0x80341C50
NameObjFactory::createNameObj<PriorDrawAir>(const char*, _P7NameObj)=0x80341C90
NameObjFactory::createNameObj<PowerStarHalo>(const char*, _P7NameObj)=0x80341CD0
NameObjFactory::createNameObj<QuestionCoin>(const char*, _P7NameObj)=0x80341D10
NameObjFactory::createNameObj<TicoCoin>(const char*, _P7NameObj)=0x80341D50
NameObjFactory::createNameObj<CoinLinkGroup>(const char*, _P7NameObj)=0x80341D90
NameObjFactory::createNameObj<YellowChip>(const char*, _P7NameObj)=0x80341DD0
NameObjFactory::createNameObj<YellowChipGroup>(const char*, _P7NameObj)=0x80341E10
NameObjFactory::createNameObj<StarPiece>(const char*, _P7NameObj)=0x80341E50
NameObjFactory::createNameObj<StarPieceFollowGroup>(const char*, _P7NameObj)=0x80341E90
NameObjFactory::createNameObj<StarPieceGroup>(const char*, _P7NameObj)=0x80341ED0
NameObjFactory::createNameObj<StarPieceMother>(const char*, _P7NameObj)=0x80341F10
NameObjFactory::createNameObj<StarPieceSpot>(const char*, _P7NameObj)=0x80341F50
NameObjFactory::createNameObj<StarPieceSpotEruption>(const char*, _P7NameObj)=0x80341F90
NameObjFactory::createNameObj<OceanSphere>(const char*, _P7NameObj)=0x80341FD0
NameObjFactory::createNameObj<WaterStream>(const char*, _P7NameObj)=0x80342010
NameObjFactory::createNameObj<Flag>(const char*, _P7NameObj)=0x80342050
NameObjFactory::createNameObj<SeaGullGroup>(const char*, _P7NameObj)=0x80342090
NameObjFactory::createNameObj<WaterPlant>(const char*, _P7NameObj)=0x803420D0
NameObjFactory::createNameObj<FishGroup>(const char*, _P7NameObj)=0x80342110
NameObjFactory::createNameObj<HipDropSwitch>(const char*, _P7NameObj)=0x80342150
NameObjFactory::createNameObj<HipDropTimerSwitch>(const char*, _P7NameObj)=0x80342190
NameObjFactory::createNameObj<KeySwitch>(const char*, _P7NameObj)=0x803421D0
NameObjFactory::createNameObj<PicketSwitch>(const char*, _P7NameObj)=0x80342210
NameObjFactory::createNameObj<PurpleCoinCompleteWatcher>(const char*, _P7NameObj)=0x80342250
NameObjFactory::createNameObj<SpinLeverSwitch>(const char*, _P7NameObj)=0x80342290
NameObjFactory::createNameObj<Fountain>(const char*, _P7NameObj)=0x803422D0
NameObjFactory::createNameObj<FountainBig>(const char*, _P7NameObj)=0x80342310
NameObjFactory::createNameObj<HeadLight>(const char*, _P7NameObj)=0x80342350
NameObjFactory::createNameObj<EffectObjR500F50>(const char*, _P7NameObj)=0x80342390
NameObjFactory::createNameObj<EffectObj50x50x10SyncClipping>(const char*, _P7NameObj)=0x803423F0
NameObjFactory::createNameObj<EffectObj20x20x10SyncClipping>(const char*, _P7NameObj)=0x80342450
NameObjFactory::createNameObj<EffectObjR1000F50>(const char*, _P7NameObj)=0x803424B0
NameObjFactory::createNameObj<EffectObj10x10x10SyncClipping>(const char*, _P7NameObj)=0x80342510
NameObjFactory::createNameObj<RandomEffectObj>(const char*, _P7NameObj)=0x80342570
NameObjFactory::createNameObj<CaveStream>(const char*, _P7NameObj)=0x803425B0
NameObjFactory::createNameObj<PhantomTorch>(const char*, _P7NameObj)=0x803425F0
NameObjFactory::createNameObj<WaterFortressRain>(const char*, _P7NameObj)=0x80342630
NameObjFactory::createNameObj<InvisiblePolygonObj>(const char*, _P7NameObj)=0x80342670
NameObjFactory::createNameObj<YoshiEgg>(const char*, _P7NameObj)=0x803426B0
NameObjFactory::createNameObj<PullTargetBridge>(const char*, _P7NameObj)=0x803426F0
NameObjFactory::createNameObj<PullTargetDrawer>(const char*, _P7NameObj)=0x80342730
NameObjFactory::createNameObj<DashFruit>(const char*, _P7NameObj)=0x80342770
NameObjFactory::createNameObj<YoshiFruit>(const char*, _P7NameObj)=0x803427D0
NameObjFactory::createNameObj<YoshiFruitBig>(const char*, _P7NameObj)=0x80342830
NameObjFactory::createNameObj<YoshiBlock>(const char*, _P7NameObj)=0x80342890
NameObjFactory::createNameObj<YoshiCapture>(const char*, _P7NameObj)=0x803428D0
NameObjFactory::createNameObj<StarReturnDemoStarter>(const char*, _P7NameObj)=0x80342910
NameObjFactory::createNameObj<GrandStarReturnDemoStarter>(const char*, _P7NameObj)=0x80342950
NameObjFactory::createNameObj<ScenarioStarter>(const char*, _P7NameObj)=0x80342990
NameObjFactory::createNameObj<FileSelector>(const char*, _P7NameObj)=0x803429D0
NameObjFactory::createNameObj<ClipFieldSwitch>(const char*, _P7NameObj)=0x80342A10
NameObjFactory::createNameObj<GroupSwitchWatcher>(const char*, _P7NameObj)=0x80342A50
NameObjFactory::createNameObj<SoundSyncSwitch>(const char*, _P7NameObj)=0x80342A90
NameObjFactory::createNameObj<RaceRail>(const char*, _P7NameObj)=0x80342AD0
NameObjFactory::createNameObj<TimerSwitch>(const char*, _P7NameObj)=0x80342B10
NameObjFactory::createNameObj<SwitchSynchronizer>(const char*, _P7NameObj)=0x80342B50
NameObjFactory::createNameObj<RepeatTimerSwitch>(const char*, _P7NameObj)=0x80342B90
NameObjFactory::createNameObj<DemoExecutor>(const char*, _P7NameObj)=0x80342BD0
NameObjFactory::createNameObj<DemoCastSubGroup>(const char*, _P7NameObj)=0x80342C10
NameObjFactory::createNameObj<DemoEndStartPosCameraSetter>(const char*, _P7NameObj)=0x80342C50
NameObjFactory::createNameObj<CompleteEndingDemoObj>(const char*, _P7NameObj)=0x80342C90
NameObjFactory::createNameObj<DemoTitleAnim>(const char*, _P7NameObj)=0x80342CD0
NameObjFactory::createNameObj<MarioFaceAfterGrandStarTakeOffDemoObj>(const char*, _P7NameObj)=0x80342D10
NameObjFactory::createNameObj<MarioFacePlanetTakeOffDemoObj>(const char*, _P7NameObj)=0x80342D50
NameObjFactory::createNameObj<MeetKoopaDemoObj>(const char*, _P7NameObj)=0x80342D90
NameObjFactory::createNameObj<NormalEndingDemoObj>(const char*, _P7NameObj)=0x80342DD0
NameObjFactory::createNameObj<OpeningDemoObj>(const char*, _P7NameObj)=0x80342E10
NameObjFactory::createNameObj<PrepareKoopaFinalDemoObj>(const char*, _P7NameObj)=0x80342E50
NameObjFactory::createNameObj<SimpleDemoExecutor>(const char*, _P7NameObj)=0x80342E90
NameObjFactory::createNameObj<StaffRollDemoObj>(const char*, _P7NameObj)=0x80342ED0
NameObjFactory::createNameObj<TransformFaceTicoBabyDemoObj>(const char*, _P7NameObj)=0x80342F10
NameObjFactory::getCreator(const char*)=0x80342F50
NameObjFactory::callPostCreation(const char*, const JMapInfoIter&)=0x80343010
NameObjFactory::initChildObj(const JMapInfoIter&, int)=0x80343090
MorphItemNeoTeresa::getPowerUp(void)=0x80343110
MorphItemNeoBee::getPowerUp(void)=0x80343120
MorphItemNeoBee::__dt(void)=0x80343130
MorphItemNeoTeresa::__dt(void)=0x80343190
NameObjFinder::find(const char*)=0x803431F0
NameObjGroup::__ct(const char*, int)=0x80343210
NameObjGroup::__dt(void)=0x80343280
NameObjGroup::registerObj(NameObj*)=0x803432F0
NameObjGroup::pauseOffAll(void) const=0x80343370
NameObjGroup::initObjArray(int)=0x803433D0
NameObjHolder::__ct(int)=0x80343440
NameObjHolder::add(NameObj*)=0x803434A0
NameObjHolder::suspendAllObj(void)=0x803434C0
NameObjHolder::resumeAllObj(void)=0x80343520
NameObjHolder::syncWithFlags(void)=0x80343580
NameObjHolder::callMethodAllObj(M7NameObjFPCvPv_v)=0x803435C0
NameObjHolder::clearArray(void)=0x80343640
NameObjHolder::find(const char*)=0x80343650
std::find_if<NameObj*,@unnamed@NameObjHolder_cpp@::equal_fullname>(NameObj*, NameObj*, @unnamed@NameObjHolder_cpp@::equal_fullname, _PP7NameObj)=0x803437D0
MR::Vector<MR::FixedArray<NameObj*,16>>::insert(NameObj*, const NameObj*)=0x80343840
NameObjListExecutor::__ct(void)=0x80343880
NameObjListExecutor::__dt(void)=0x803438B0
MR::Vector<MR::AssignableArray<DrawBufferGroup*>>::__dt(void)=0x80343970
NameObjListExecutor::init(void)=0x803439D0
NameObjListExecutor::registerDrawBuffer(LiveActor*, int)=0x80343A50
NameObjListExecutor::allocateDrawBufferActorList(void)=0x80343A60
NameObjListExecutor::registerPreDrawFunction(const MR::FunctorBase&, int)=0x80343AB0
NameObjListExecutor::findLightInfo(LiveActor*, int, int) const=0x80343AD0
NameObjListExecutor::incrementCheckMovement(NameObj*, int)=0x80343AE0
NameObjListExecutor::incrementCheckCalcAnim(NameObj*, int)=0x80343AF0
NameObjListExecutor::incrementCheckDraw(NameObj*, int)=0x80343B00
NameObjListExecutor::addToMovement(NameObj*, int)=0x80343B10
NameObjListExecutor::addToCalcAnim(NameObj*, int)=0x80343B20
NameObjListExecutor::addToDrawBuffer(LiveActor*, int, int)=0x80343B30
NameObjListExecutor::addToDraw(NameObj*, int)=0x80343B40
NameObjListExecutor::removeToMovement(NameObj*, int)=0x80343B50
NameObjListExecutor::removeToCalcAnim(NameObj*, int)=0x80343B60
NameObjListExecutor::removeToDrawBuffer(LiveActor*, int, int)=0x80343B70
NameObjListExecutor::removeToDraw(NameObj*, int)=0x80343B80
NameObjListExecutor::executeMovement(int)=0x80343B90
NameObjListExecutor::executeCalcAnim(int)=0x80343BA0
NameObjListExecutor::entryDrawBuffer2D(void)=0x80343BB0
NameObjListExecutor::entryDrawBuffer3D(void)=0x80343BC0
NameObjListExecutor::entryDrawBufferMirror(void)=0x80343BD0
NameObjListExecutor::drawOpa(int)=0x80343C00
NameObjListExecutor::drawXlu(int)=0x80343C10
NameObjListExecutor::executeDraw(int)=0x80343C20
NameObjListExecutor::initMovementList(void)=0x80343C30
NameObjListExecutor::initCalcAnimList(void)=0x80343C40
NameObjListExecutor::initCalcViewAndEntryList(void)=0x80343C50
NameObjListExecutor::initDrawList(void)=0x80343C60
NameObjRegister::setCurrentHolder(NameObjHolder*)=0x80343E20
NameObjRegister::add(NameObj*)=0x80343E30
NameObjRegister::__ct(void)=0x80343E40
BombHeiRed::__ct(const char*)=0x80343E50
NPCActor::__dt(void)=0x80343EA0
BombHeiRed::init(const JMapInfoIter&)=0x80343F00
BombHeiRed::calcAndSetBaseMtx(void)=0x80344080
BombHeiRed::control(void)=0x803440C0
JointControlDelegator<BombHeiRed>::__dt(void)=0x80344130
JointControlDelegator<BombHeiRed>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80344170
JointControlDelegator<BombHeiRed>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x803441E0
BombHeiRed::__dt(void)=0x80344250
BringEnemy::__ct(const char*)=0x803442B0
BringEnemy::init(JMapInfoIter&)=0x80344310
BringEnemy::receiveMessage(unsigned long, HitSensor*, HitSensor*)=0x80344790
BringEnemy::__dt(void)=0x80344860
short::(nit_\BringEnemy_cpp)=0x803448C0
Caretaker::__ct(const char*)=0x80344930
Caretaker::init(const JMapInfoIter&)=0x80344990
Caretaker::initAfterPlacement(void)=0x80344E90
Caretaker::kill(void)=0x80344ED0
Caretaker::control(void)=0x80344F20
Caretaker::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80344F30
Caretaker::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80344FA0
Caretaker::branchFuncStar(unsigned long)=0x80345060
Caretaker::branchFuncComet(unsigned long)=0x80345080
Caretaker::eventFuncComet(unsigned long)=0x803451B0
Caretaker::animeFunc(unsigned long)=0x80345260
Caretaker::setAnim(long)=0x803452D0
Caretaker::exeReaction(void)=0x803454B0
Caretaker::exeWait(void)=0x803455D0
Caretaker::exePreTalk(void)=0x80345680
Caretaker::exePreWipeOut(void)=0x80345770
Caretaker::exePreWipeIn(void)=0x80345880
Caretaker::exePreWait(void)=0x80345900
Caretaker::exeCountDown(void)=0x803459A0
Caretaker::exeTidy(void)=0x80345A20
Caretaker::exeRunaway(void)=0x80345BE0
Caretaker::exePstWipeOut(void)=0x80345C70
Caretaker::exePstWipeIn(void)=0x80345D40
Caretaker::exePstTalk(void)=0x80345DE0
TalkMessageFuncM<Caretaker*,M9CaretakerFPCvPvUl_b>::__cl(unsigned long) const=0x80345E70
TalkMessageFuncM<Caretaker*,M9CaretakerFPCvPvUl_b>::clone(void) const=0x80345EA0
TalkMessageFuncM<Caretaker*,M9CaretakerFPCvPvUl_b>::clone(JKRHeap*) const=0x80345EE0
TalkMessageFuncM<Caretaker*,M9CaretakerFPCvPvUl_b>::__ct(const TalkMessageFuncM<Caretaker*,M9CaretakerFPCvPvUl_b>&)=0x80345F30
Caretaker::__dt(void)=0x80345F60
short::(nit_\Caretaker_cpp)=0x80345FC0
NrvCaretaker::CaretakerNrvTakeOutStar::__ct(void)=0x80346070
NrvCaretaker::CaretakerNrvReaction::__ct(void)=0x80346080
NrvCaretaker::CaretakerNrvTalk::__ct(void)=0x80346090
NrvCaretaker::CaretakerNrvWait::__ct(void)=0x803460A0
NrvCaretaker::CaretakerNrvPreTalk::__ct(void)=0x803460B0
NrvCaretaker::CaretakerNrvPreWipeOut::__ct(void)=0x803460C0
NrvCaretaker::CaretakerNrvPreWipeIn::__ct(void)=0x803460D0
NrvCaretaker::CaretakerNrvPreWait::__ct(void)=0x803460E0
NrvCaretaker::CaretakerNrvCountDown::__ct(void)=0x803460F0
NrvCaretaker::CaretakerNrvTidy::__ct(void)=0x80346100
NrvCaretaker::CaretakerNrvRunaway::__ct(void)=0x80346120
NrvCaretaker::CaretakerNrvPstWipeOut::__ct(void)=0x80346130
NrvCaretaker::CaretakerNrvPstWipeIn::__ct(void)=0x80346140
NrvCaretaker::CaretakerNrvPstWait::__ct(void)=0x80346150
NrvCaretaker::CaretakerNrvPstTalk::__ct(void)=0x80346160
NrvCaretaker::CaretakerNrvAppearedStar::__ct(void)=0x80346170
NrvCaretaker::CaretakerNrvAppearedStar::execute(Spine*) const=0x80346180
NrvCaretaker::CaretakerNrvPstTalk::execute(Spine*) const=0x803461C0
NrvCaretaker::CaretakerNrvPstWait::execute(Spine*) const=0x803461D0
NrvCaretaker::CaretakerNrvPstWipeIn::execute(Spine*) const=0x80346220
NrvCaretaker::CaretakerNrvPstWipeOut::execute(Spine*) const=0x80346230
NrvCaretaker::CaretakerNrvRunaway::execute(Spine*) const=0x80346240
NrvCaretaker::CaretakerNrvTidy::execute(Spine*) const=0x80346260
NrvCaretaker::CaretakerNrvCountDown::execute(Spine*) const=0x80346270
NrvCaretaker::CaretakerNrvPreWait::execute(Spine*) const=0x80346280
NrvCaretaker::CaretakerNrvPreWipeIn::execute(Spine*) const=0x80346290
NrvCaretaker::CaretakerNrvPreWipeOut::execute(Spine*) const=0x803462A0
NrvCaretaker::CaretakerNrvPreTalk::execute(Spine*) const=0x803462B0
NrvCaretaker::CaretakerNrvWait::execute(Spine*) const=0x803462C0
NrvCaretaker::CaretakerNrvTalk::execute(Spine*) const=0x803462D0
NrvCaretaker::CaretakerNrvReaction::execute(Spine*) const=0x80346310
NrvCaretaker::CaretakerNrvTakeOutStar::execute(Spine*) const=0x80346320
CareTakerHunter::__ct(const char*)=0x80346330
CareTakerHunter::init(const JMapInfoIter&)=0x803463C0
CareTakerHunter::control(void)=0x803468F0
CareTakerHunter::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80346A80
TalkMessageFuncM<CareTakerHunter*,M15CareTakerHunterFPCvPvUl_b>::__cl(unsigned long) const=0x80347770
TalkMessageFuncM<CareTakerHunter*,M15CareTakerHunterFPCvPvUl_b>::clone(void) const=0x803477A0
TalkMessageFuncM<CareTakerHunter*,M15CareTakerHunterFPCvPvUl_b>::clone(JKRHeap*) const=0x803477E0
TalkMessageFuncM<CareTakerHunter*,M15CareTakerHunterFPCvPvUl_b>::__ct(const TalkMessageFuncM<CareTakerHunter*,M15CareTakerHunterFPCvPvUl_b>&)=0x80347830
CareTakerHunter::__dt(void)=0x80347860
short::(nit_\CareTakerHunter_cpp)=0x803478C0
CollectTico::__ct(const char*)=0x80347C70
CollectTico::init(const JMapInfoIter&)=0x80347CD0
CollectTico::exeWait(void)=0x80347E90
CollectTico::exeCompleteDemo(void)=0x80347F30
CollectTico::exeFlash(void)=0x80348140
CollectTico::exeAppearPowerStar(void)=0x80348250
CollectTico::calcNoRescuedCount(void) const=0x80348330
CollectTico::startAppearPowerStar(void)=0x80348410
MR::FunctorV0M<CollectTico*,M11CollectTicoFPCvPv_v>::__cl(void) const=0x80348470
MR::FunctorV0M<CollectTico*,M11CollectTicoFPCvPv_v>::clone(JKRHeap*) const=0x803484A0
CollectTico::__dt(void)=0x80348510
short::(nit_\CollectTico_cpp)=0x80348570
NrvCollectTico::CollectTicoNrvWait::__ct(void)=0x803485C0
NrvCollectTico::CollectTicoNrvTryStartDemo::__ct(void)=0x803485D0
NrvCollectTico::CollectTicoNrvCompleteDemo::__ct(void)=0x803485E0
NrvCollectTico::CollectTicoNrvFlash::__ct(void)=0x803485F0
NrvCollectTico::CollectTicoNrvAppearPowerStar::__ct(void)=0x80348600
NrvCollectTico::CollectTicoNrvAppearPowerStar::execute(Spine*) const=0x80348610
NrvCollectTico::CollectTicoNrvFlash::execute(Spine*) const=0x80348620
NrvCollectTico::CollectTicoNrvCompleteDemo::execute(Spine*) const=0x80348630
NrvCollectTico::CollectTicoNrvTryStartDemo::execute(Spine*) const=0x80348640
NrvCollectTico::CollectTicoNrvWait::execute(Spine*) const=0x80348650
Dreamer::__ct(const char*)=0x80348660
Dreamer::init(const JMapInfoIter&)=0x803486C0
Dreamer::appear(void)=0x80348830
Dreamer::makeActorAppeared(void)=0x803488A0
Dreamer::control(void)=0x803488C0
TalkMessageFuncM<Dreamer*,M7DreamerFPCvPvUl_b>::__cl(unsigned long) const=0x80348F70
TalkMessageFuncM<Dreamer*,M7DreamerFPCvPvUl_b>::clone(void) const=0x80348FA0
TalkMessageFuncM<Dreamer*,M7DreamerFPCvPvUl_b>::clone(JKRHeap*) const=0x80348FE0
TalkMessageFuncM<Dreamer*,M7DreamerFPCvPvUl_b>::__ct(const TalkMessageFuncM<Dreamer*,M7DreamerFPCvPvUl_b>&)=0x80349030
Dreamer::__dt(void)=0x80349060
short::(nit_\Dreamer_cpp)=0x803490C0
GhostAttackGhost::__ct(const char*)=0x803492B0
GhostAttackGhost::init(const JMapInfoIter&)=0x80349360
GhostAttackGhost::makeActorAppeared(void)=0x80349650
GhostAttackGhost::attackSensor(HitSensor*, HitSensor*)=0x80349690
GhostAttackGhost::getBaseMtx(void) const=0x80349790
GhostAttackGhost::calcAndSetBaseMtx(void)=0x803498D0
GhostAttackGhost::control(void)=0x80349B40
JointControlDelegator<GhostAttackGhost>::__dt(void)=0x8034A4F0
JointControlDelegator<GhostAttackGhost>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8034A530
JointControlDelegator<GhostAttackGhost>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8034A5A0
GhostAttackGhost::__dt(void)=0x8034A610
short::(nit_\GhostAttackGhost_cpp)=0x8034A670
GhostAttackGhostFootprint::__ct(LiveActor*)=0x8034A860
GhostAttackGhostFootprint::appear(void)=0x8034A9B0
GhostAttackGhostFootprint::control(void)=0x8034AAA0
GhostAttackGhostFootprint::getBaseMtx(void) const=0x8034B200
GhostAttackGhostFootprint::__dt(void)=0x8034B210
short::(nit_\GhostAttackGhostFootprint_cpp)=0x8034B270
GhostAttackManager::__ct(void)=0x8034B2E0
GhostAttackManager::__dt(void)=0x8034B380
GliBirdNpc::__ct(const char*)=0x8034B3E0
GliBirdNpc::init(const JMapInfoIter&)=0x8034B420
GliBirdNpc::__dt(void)=0x8034B510
HoneyBee::__ct(const char*)=0x8034B570
HoneyBee::init(const JMapInfoIter&)=0x8034B5E0
MR::ActorTalkParam::setNoTurnAction(const char*)=0x8034B7D0
HoneyBee::calcAndSetBaseMtx(void)=0x8034B7F0
HoneyBee::control(void)=0x8034B800
HoneyBee::exeFly(void)=0x8034B9A0
HoneyBee::exeJumpLecture(void)=0x8034BAB0
HoneyBee::__dt(void)=0x8034BB80
short::(nit_\HoneyBee_cpp)=0x8034BBE0
NrvHoneyBee::HoneyBeeNrvWait::__ct(void)=0x8034BC20
NrvHoneyBee::HoneyBeeNrvReaction::__ct(void)=0x8034BC30
NrvHoneyBee::HoneyBeeNrvFly::__ct(void)=0x8034BC40
NrvHoneyBee::HoneyBeeNrvJumpLecture::__ct(void)=0x8034BC50
NrvHoneyBee::HoneyBeeNrvJumpLecture::execute(Spine*) const=0x8034BC60
NrvHoneyBee::HoneyBeeNrvFly::execute(Spine*) const=0x8034BC70
NrvHoneyBee::HoneyBeeNrvReaction::execute(Spine*) const=0x8034BC80
NrvHoneyBee::HoneyBeeNrvWait::execute(Spine*) const=0x8034BC90
HoneyQueen::__ct(const char*)=0x8034BCE0
HoneyQueen::init(const JMapInfoIter&)=0x8034BD40
HoneyQueen::control(void)=0x8034C0F0
HoneyQueen::calcAnim(void)=0x8034C140
HoneyQueen::attackSensor(HitSensor*, HitSensor*)=0x8034C1A0
HoneyQueen::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8034C210
HoneyQueen::exeWait(void)=0x8034C280
HoneyQueen::__dt(void)=0x8034C300
short::(nit_\HoneyQueen_cpp)=0x8034C360
NrvHoneyQueen::HoneyQueenNrvWait::__ct(void)=0x8034C390
NrvHoneyQueen::HoneyQueenNrvReady::__ct(void)=0x8034C3A0
NrvHoneyQueen::HoneyQueenNrvReady::execute(Spine*) const=0x8034C3B0
NrvHoneyQueen::HoneyQueenNrvWait::execute(Spine*) const=0x8034C400
@unnamed@Kinopio_cpp@::Param::__ct(void)=0x8034C410
Kinopio::__ct(const char*)=0x8034C460
Kinopio::init(const JMapInfoIter&)=0x8034C4E0
MR::ActorTalkParam::setSingleAction(const char*)=0x8034CBF0
Kinopio::exeReaction(void)=0x8034CC50
Kinopio::exeJump(void)=0x8034CE10
Kinopio::exeStop(void)=0x8034CFC0
Kinopio::exeAction(void)=0x8034D070
Kinopio::exeWait(void)=0x8034D110
Kinopio::exeAppear(void)=0x8034D1D0
Kinopio::exeEscape(void)=0x8034D2D0
Kinopio::exeMount(void)=0x8034D380
Kinopio::exeStarWait(void)=0x8034D450
Kinopio::exeEventAndTalk(void)=0x8034D4A0
Kinopio::exeEventFall(void)=0x8034D4F0
Kinopio::calcAndSetBaseMtx(void)=0x8034D650
Kinopio::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8034D790
Kinopio::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8034D810
Kinopio::faceToVector(const JGeometry::TVec3<float>&, float)=0x8034D920
Kinopio::faceToPlayer(float)=0x8034DA50
Kinopio::faceToDefault(float)=0x8034DAE0
Kinopio::setDefaultNerve(void)=0x8034DB70
Kinopio::tryStartArgs(void)=0x8034DC10
Kinopio::tryCancelEvent(void)=0x8034DCE0
TalkMessageFuncM<Kinopio*,M7KinopioFPCvPvUl_b>::__cl(unsigned long) const=0x8034DD60
TalkMessageFuncM<Kinopio*,M7KinopioFPCvPvUl_b>::clone(void) const=0x8034DD90
TalkMessageFuncM<Kinopio*,M7KinopioFPCvPvUl_b>::clone(JKRHeap*) const=0x8034DDD0
JointControlDelegator<Kinopio>::__dt(void)=0x8034DE20
JointControlDelegator<Kinopio>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8034DE60
JointControlDelegator<Kinopio>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8034DED0
TalkMessageFuncM<Kinopio*,M7KinopioFPCvPvUl_b>::__ct(const TalkMessageFuncM<Kinopio*,M7KinopioFPCvPvUl_b>&)=0x8034DF40
Kinopio::__dt(void)=0x8034DF70
short::(nit_\Kinopio_cpp)=0x8034DFD0
NrvKinopio::KinopioNrvReaction::__ct(void)=0x8034E080
NrvKinopio::KinopioNrvTakeOutStar::__ct(void)=0x8034E090
NrvKinopio::KinopioNrvFar::__ct(void)=0x8034E0A0
NrvKinopio::KinopioNrvNear::__ct(void)=0x8034E0B0
NrvKinopio::KinopioNrvWait::__ct(void)=0x8034E0C0
NrvKinopio::KinopioNrvStop0::__ct(void)=0x8034E0D0
NrvKinopio::KinopioNrvStop1::__ct(void)=0x8034E0E0
NrvKinopio::KinopioNrvAction::__ct(void)=0x8034E0F0
NrvKinopio::KinopioNrvAppear::__ct(void)=0x8034E100
NrvKinopio::KinopioNrvEscape::__ct(void)=0x8034E110
NrvKinopio::KinopioNrvStarWait::__ct(void)=0x8034E120
NrvKinopio::KinopioNrvMount::__ct(void)=0x8034E130
NrvKinopio::KinopioNrvEvent::__ct(void)=0x8034E140
NrvKinopio::KinopioNrvEventAndTalk::__ct(void)=0x8034E150
NrvKinopio::KinopioNrvEventTalking::__ct(void)=0x8034E160
NrvKinopio::KinopioNrvEventFall::__ct(void)=0x8034E170
NrvKinopio::KinopioNrvEventFall::execute(Spine*) const=0x8034E180
NrvKinopio::KinopioNrvEventTalking::execute(Spine*) const=0x8034E190
NrvKinopio::KinopioNrvEventAndTalk::execute(Spine*) const=0x8034E1A0
NrvKinopio::KinopioNrvEvent::execute(Spine*) const=0x8034E1B0
NrvKinopio::KinopioNrvMount::execute(Spine*) const=0x8034E1C0
NrvKinopio::KinopioNrvStarWait::execute(Spine*) const=0x8034E1D0
NrvKinopio::KinopioNrvEscape::execute(Spine*) const=0x8034E1E0
NrvKinopio::KinopioNrvAppear::execute(Spine*) const=0x8034E1F0
NrvKinopio::KinopioNrvAction::execute(Spine*) const=0x8034E200
NrvKinopio::KinopioNrvStop1::execute(Spine*) const=0x8034E210
NrvKinopio::KinopioNrvStop0::execute(Spine*) const=0x8034E220
NrvKinopio::KinopioNrvWait::execute(Spine*) const=0x8034E230
NrvKinopio::KinopioNrvNear::execute(Spine*) const=0x8034E240
NrvKinopio::KinopioNrvFar::execute(Spine*) const=0x8034E250
NrvKinopio::KinopioNrvTakeOutStar::execute(Spine*) const=0x8034E260
NrvKinopio::KinopioNrvReaction::execute(Spine*) const=0x8034E270
KinopioBank::__ct(const char*)=0x8034E280
KinopioBank::init(const JMapInfoIter&)=0x8034E2E0
KinopioBank::control(void)=0x8034E630
TalkMessageFuncM<KinopioBank*,M11KinopioBankFPCvPvUl_b>::__cl(unsigned long) const=0x8034F000
TalkMessageFuncM<KinopioBank*,M11KinopioBankFPCvPvUl_b>::clone(void) const=0x8034F030
TalkMessageFuncM<KinopioBank*,M11KinopioBankFPCvPvUl_b>::clone(JKRHeap*) const=0x8034F070
TalkMessageFuncM<KinopioBank*,M11KinopioBankFPCvPvUl_b>::__ct(const TalkMessageFuncM<KinopioBank*,M11KinopioBankFPCvPvUl_b>&)=0x8034F0C0
KinopioBank::__dt(void)=0x8034F0F0
short::(nit_\KinopioBank_cpp)=0x8034F150
KinopioPostman::__ct(const char*)=0x8034F290
KinopioPostman::init(const JMapInfoIter&)=0x8034F300
KinopioPostman::initAfterPlacement(void)=0x8034FD80
KinopioPostman::control(void)=0x8034FD90
TalkMessageFuncM<KinopioPostman*,M14KinopioPostmanFPCvPvUl_b>::__cl(unsigned long) const=0x80350610
TalkMessageFuncM<KinopioPostman*,M14KinopioPostmanFPCvPvUl_b>::clone(void) const=0x80350640
TalkMessageFuncM<KinopioPostman*,M14KinopioPostmanFPCvPvUl_b>::clone(JKRHeap*) const=0x80350680
MR::FunctorV0M<KinopioPostman*,M14KinopioPostmanFPCvPv_v>::__cl(void) const=0x803506D0
MR::FunctorV0M<KinopioPostman*,M14KinopioPostmanFPCvPv_v>::clone(JKRHeap*) const=0x80350700
TalkMessageFuncM<KinopioPostman*,M14KinopioPostmanFPCvPvUl_b>::__ct(const TalkMessageFuncM<KinopioPostman*,M14KinopioPostmanFPCvPvUl_b>&)=0x80350770
KinopioPostman::__dt(void)=0x803507A0
short::(nit_\KinopioPostman_cpp)=0x80350800
KoopaNpc::__ct(const char*)=0x80350910
KoopaNpc::init(const JMapInfoIter&)=0x80350950
KoopaNpc::appear(void)=0x80350A20
KoopaNpc::control(void)=0x80350A60
KoopaNpc::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80350AC0
KoopaNpc::receiveMsgPush(HitSensor*, HitSensor*)=0x80350B40
KoopaNpc::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80350BB0
KoopaNpc::__dt(void)=0x80350FB0
short::(nit_\KoopaNpc_cpp)=0x80351010
LuigiTalkNpc::__ct(const char*)=0x80351120
LuigiTalkNpc::init(const JMapInfoIter&)=0x80351170
LuigiTalkNpc::makeActorAppeared(void)=0x80351560
LuigiTalkNpc::control(void)=0x803515B0
TalkMessageFuncM<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPvUl_b>::__cl(unsigned long) const=0x803518A0
TalkMessageFuncM<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPvUl_b>::clone(void) const=0x803518D0
TalkMessageFuncM<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPvUl_b>::clone(JKRHeap*) const=0x80351910
MR::FunctorV0M<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPv_v>::__cl(void) const=0x80351960
MR::FunctorV0M<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPv_v>::clone(JKRHeap*) const=0x80351990
TalkMessageFuncM<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPvUl_b>::__ct(const TalkMessageFuncM<LuigiTalkNpc*,M12LuigiTalkNpcFPCvPvUl_b>&)=0x80351A00
LuigiTalkNpc::__dt(void)=0x80351A30
short::(nit_\LuigiTalkNpc_cpp)=0x80351A90
MameMuimuiAttackMan::__ct(const char*)=0x80351B00
MameMuimuiAttackMan::init(const JMapInfoIter&)=0x80351B50
TalkMessageFuncM<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPvUl_b>::__cl(unsigned long) const=0x80351FE0
TalkMessageFuncM<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPvUl_b>::clone(void) const=0x80352010
TalkMessageFuncM<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPvUl_b>::clone(JKRHeap*) const=0x80352050
MR::FunctorV0M<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPv_v>::__cl(void) const=0x803520A0
MR::FunctorV0M<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPv_v>::clone(JKRHeap*) const=0x803520D0
TalkMessageFuncM<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPvUl_b>::__ct(const TalkMessageFuncM<MameMuimuiAttackMan*,M19MameMuimuiAttackManFPCvPvUl_b>&)=0x80352140
MameMuimuiAttackMan::__dt(void)=0x80352170
short::(nit_\MameMuimuiAttackMan_cpp)=0x803521D0
NrvMameMuimuiAttackMan::MameMuimuiAttackManNrvWait::__ct(void)=0x803521E0
NrvMameMuimuiAttackMan::MameMuimuiAttackManNrvWait::execute(Spine*) const=0x803521F0
Meister::__ct(const char*)=0x80352200
Meister::init(const JMapInfoIter&)=0x80352270
Meister::makeActorAppeared(void)=0x80352610
Meister::makeActorDead(void)=0x80352650
Meister::control(void)=0x80352880
Meister::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80352900
Meister::__dt(void)=0x80352AF0
short::(nit_\Meister_cpp)=0x80352B50
GameSystem::isExecuteLoadSystemArchive(void, _0) const=0x80354308
MiiDatabase::__dt(void)=0x80354580
JKRFileFinder::__dt(void)=0x80354610
MR::AssignableArray<RFLStoreData*>::__dt(void)=0x80354650
MiiFaceIcon::__ct(unsigned short, unsigned short, const MiiFaceRecipe&, const char*)=0x803546B0
MiiFaceIcon::init(const JMapInfoIter&)=0x80354780
MiiFaceIcon::movement(void)=0x80354790
MiiFaceIcon::drawIcon(void)=0x803547A0
MiiFaceIcon::requestToMakeIcon(void)=0x80354860
MiiFaceIcon::setIndex(unsigned short)=0x80354870
MiiFaceIcon::createImageBuffer(void)=0x80354890
MiiFaceIcon::__dt(void)=0x80354960
MiiFaceIconHolder::__ct(unsigned long, const char*)=0x803549C0
MiiFaceIconHolder::drawIcons(void)=0x80354A70
MiiFaceIconHolder::registerIcon(MiiFaceIcon*)=0x80354AB0
MR::registerMiiFaceIcon(MiiFaceIcon*)=0x80354AD0
MR::FunctorV0M<MiiFaceIconHolder*,M17MiiFaceIconHolderFPCvPv_v>::__cl(void) const=0x80354B20
MR::FunctorV0M<MiiFaceIconHolder*,M17MiiFaceIconHolderFPCvPv_v>::clone(JKRHeap*) const=0x80354B50
MiiFaceIconHolder::__dt(void)=0x80354BC0
MiiFaceParts::__ct(const char*, const MiiFaceRecipe&)=0x80354C20
MiiFaceParts::__dt(void)=0x80354CD0
MiiFaceParts::init(const JMapInfoIter&)=0x80354D30
MiiFaceParts::calcAnim(void)=0x80354D80
MiiFaceParts::calcViewAndEntry(void)=0x80354E00
MiiFaceParts::drawOpa(const RFLDrawCoreSetting*) const=0x80354E60
MiiFaceParts::drawXlu(const RFLDrawCoreSetting*) const=0x80354E90
MiiFaceParts::initFixedPosition(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80354EC0
MiiFaceParts::changeExpressionNormal(void)=0x80354F30
MiiFaceParts::changeExpressionBlink(void)=0x80354F40
MiiFaceParts::changeFaceModel(const MiiFaceRecipe&)=0x80354F50
MiiFaceParts::initFaceModel(void)=0x80354FB0
MiiFaceParts::tryChangeExpression(unsigned long)=0x80355000
MiiFacePartsHolder::__ct(int)=0x80355070
MiiFacePartsHolder::__dt(void)=0x803550E0
MiiFacePartsHolder::init(const JMapInfoIter&)=0x80355180
MiiFacePartsHolder::calcAnim(void)=0x80355290
MiiFacePartsHolder::calcViewAndEntry(void)=0x80355330
MiiFacePartsHolder::reinitCharModel(void)=0x803553C0
MiiFacePartsHolder::isInitEnd(void) const=0x80355470
MiiFacePartsHolder::isError(void) const=0x80355510
MiiFacePartsHolder::createPartsFromReceipe(const char*, const MiiFaceRecipe&)=0x80355530
MiiFacePartsHolder::createPartsFromDefault(const char*, unsigned short)=0x803555F0
MiiFacePartsHolder::drawEachActor(M12MiiFacePartsFPCvPCvPC18RFLDrawCoreSetting_vPC18RFLDrawCoreSetting) const=0x80355640
MiiFacePartsHolder::drawExtra(void) const=0x803556C0
MiiFacePartsHolder::setTevOpa(void) const=0x80355800
MiiFacePartsHolder::setTevXlu(void) const=0x80355A00
MR::FunctorV0M<NameObj*,M7NameObjFPCvPv_v>::__cl(void) const=0x80355BD0
MR::FunctorV0M<NameObj*,M7NameObjFPCvPv_v>::clone(JKRHeap*) const=0x80355C00
MR::FunctorV0M<MiiFacePartsHolder*,M18MiiFacePartsHolderFPCvPv_v>::__cl(void) const=0x80355C70
MR::FunctorV0M<MiiFacePartsHolder*,M18MiiFacePartsHolderFPCvPv_v>::clone(JKRHeap*) const=0x80355CA0
MiiFaceRecipe::__ct(RFLDataSource, int, RFLResolution, unsigned long)=0x80355D20
MiiFaceRecipe::setDatabase(RFLMiddleDB*)=0x80355D40
MiiFaceRecipe::hasExpression(RFLExpression) const=0x80355D50
MiiFaceRecipe::getModelBufferSize(void) const=0x80355D70
MiiFaceRecipe::initFaceModel(RFLCharModel*, void*) const=0x80355D80
MiiFaceRecipe::makeIcon(void*, int, int, _GXColor) const=0x80355DB0
MiiFaceRecipe::makeIconWithFavoriteColor(void*, int, int) const=0x80355E40
Moc::__ct(const char*)=0x80355E90
Moc::init(const JMapInfoIter&)=0x80355EE0
TalkMessageFuncM<Moc*,M3MocFPCvPvUl_b>::__cl(unsigned long) const=0x80356250
TalkMessageFuncM<Moc*,M3MocFPCvPvUl_b>::clone(void) const=0x80356280
TalkMessageFuncM<Moc*,M3MocFPCvPvUl_b>::clone(JKRHeap*) const=0x803562C0
TalkMessageFuncM<Moc*,M3MocFPCvPvUl_b>::__ct(const TalkMessageFuncM<Moc*,M3MocFPCvPvUl_b>&)=0x80356310
Moc::__dt(void)=0x80356340
short::(nit_\Moc_cpp)=0x803563A0
NrvMoc::MocNrvWait::__ct(void)=0x803563B0
NrvMoc::MocNrvWait::execute(Spine*) const=0x803563C0
Monte::__ct(const char*)=0x803563D0
Monte::init(const JMapInfoIter&)=0x80356430
Monte::initAfterPlacement(void)=0x80356600
Monte::control(void)=0x80356610
Monte::attackSensor(HitSensor*, HitSensor*)=0x80356660
Monte::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803566E0
Monte::__dt(void)=0x803569D0
short::(nit_\Monte_cpp)=0x80356A30
MonteThrow::__ct(Monte*)=0x80356AA0
MonteThrow::init(const JMapInfoIter&)=0x80356B90
MonteThrow::initAfterPlacement(void)=0x80356DD0
MonteThrow::control(void)=0x80356E20
MonteThrow::attackSensor(HitSensor*, HitSensor*)=0x80356E70
MonteThrow::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80356EE0
MonteThrow::__dt(void)=0x80357610
short::(nit_\MonteThrow_cpp)=0x80357670
Peach::__ct(const char*)=0x80357770
Peach::init(const JMapInfoIter&)=0x803577B0
Peach::control(void)=0x803578A0
Peach::__dt(void)=0x803578E0
RemovableTurtle::__ct(LiveActor*, bool)=0x80357940
RemovableTurtle::tryRemove(void)=0x80357AF0
RemovableTurtle::tryAttach(void)=0x80357B70
Penguin::__ct(const char*)=0x80357BD0
Penguin::init(const JMapInfoIter&)=0x80357C20
Penguin::initAfterPlacement(void)=0x80357F60
Penguin::exeReaction(void)=0x80358070
Penguin::exeWait(void)=0x80358160
Penguin::exeDive(void)=0x80358260
Penguin::exeFlow(void)=0x803582F0
Penguin::control(void)=0x80358390
Penguin::attackSensor(HitSensor*, HitSensor*)=0x803583D0
Penguin::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80358430
Penguin::tryReleaseTurtle(void)=0x803584B0
TurtlePartsModel::init(const JMapInfoIter&)=0x80358540
TurtlePartsModel::appear(void)=0x803585C0
Penguin::__dt(void)=0x80358610
TurtlePartsModel::__dt(void)=0x80358670
short::(nit_\Penguin_cpp)=0x803586D0
NrvPenguin::PenguinNrvWait::__ct(void)=0x80358710
NrvPenguin::PenguinNrvReaction::__ct(void)=0x80358720
NrvPenguin::PenguinNrvDive::__ct(void)=0x80358730
NrvPenguin::PenguinNrvFlow::__ct(void)=0x80358740
NrvPenguin::PenguinNrvFlow::execute(Spine*) const=0x80358750
NrvPenguin::PenguinNrvDive::execute(Spine*) const=0x80358760
NrvPenguin::PenguinNrvReaction::execute(Spine*) const=0x80358770
NrvPenguin::PenguinNrvWait::execute(Spine*) const=0x80358780
PenguinCoach::__ct(const char*)=0x80358790
PenguinCoach::init(const JMapInfoIter&)=0x803587E0
PenguinCoach::calcAndSetBaseMtx(void)=0x80358990
PenguinCoach::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803589E0
PenguinCoach::control(void)=0x80358A70
PenguinCoach::exeReaction(void)=0x80358AF0
MR::FunctorV0M<PenguinCoach*,M12PenguinCoachFPCvPv_v>::__cl(void) const=0x80358C40
MR::FunctorV0M<PenguinCoach*,M12PenguinCoachFPCvPv_v>::clone(JKRHeap*) const=0x80358C70
PenguinCoach::__dt(void)=0x80358CE0
short::(nit_\PenguinCoach_cpp)=0x80358D40
NrvPenguinCoach::PenguinCoachNrvReaction::__ct(void)=0x80358D50
NrvPenguinCoach::PenguinCoachNrvReaction::execute(Spine*) const=0x80358D60
PenguinMaster::__ct(const char*)=0x80358D70
PenguinMaster::init(const JMapInfoIter&)=0x80358DB0
PenguinMaster::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80358EA0
PenguinMaster::exeReaction(void)=0x80358F20
PenguinMaster::__dt(void)=0x80359010
short::(nit_\PenguinMaster_cpp)=0x80359070
NrvPenguinMaster::PenguinMasterNrvReaction::__ct(void)=0x80359080
NrvPenguinMaster::PenguinMasterNrvReaction::execute(Spine*) const=0x80359090
Pichan::__ct(const char*)=0x803590A0
Pichan::init(const JMapInfoIter&)=0x80359100
Pichan::__dt(void)=0x80359790
short::(nit_\Pichan_cpp)=0x803597F0
PichanRacer::__ct(const char*)=0x80359A50
PichanRacer::init(const JMapInfoIter&)=0x80359AD0
TalkMessageFuncM<PichanRacer*,M11PichanRacerFPCvPvUl_b>::__cl(unsigned long) const=0x8035A320
TalkMessageFuncM<PichanRacer*,M11PichanRacerFPCvPvUl_b>::clone(void) const=0x8035A350
TalkMessageFuncM<PichanRacer*,M11PichanRacerFPCvPvUl_b>::clone(JKRHeap*) const=0x8035A390
TalkMessageFuncM<PichanRacer*,M11PichanRacerFPCvPvUl_b>::__ct(const TalkMessageFuncM<PichanRacer*,M11PichanRacerFPCvPvUl_b>&)=0x8035A3E0
PichanRacer::__dt(void)=0x8035A410
PlayAttackMan::__ct(const char*)=0x8035A720
PlayAttackMan::init(const JMapInfoIter&)=0x8035A770
TalkMessageFuncM<PlayAttackMan*,M13PlayAttackManFPCvPvUl_b>::__cl(unsigned long) const=0x8035A920
TalkMessageFuncM<PlayAttackMan*,M13PlayAttackManFPCvPvUl_b>::clone(void) const=0x8035A950
TalkMessageFuncM<PlayAttackMan*,M13PlayAttackManFPCvPvUl_b>::clone(JKRHeap*) const=0x8035A990
TalkMessageFuncM<PlayAttackMan*,M13PlayAttackManFPCvPvUl_b>::__ct(const TalkMessageFuncM<PlayAttackMan*,M13PlayAttackManFPCvPvUl_b>&)=0x8035A9E0
PlayAttackMan::__dt(void)=0x8035AA10
short::(nit_\PlayAttackMan_cpp)=0x8035AA70
NrvPlayAttackMan::PlayAttackManNrvWait::__ct(void)=0x8035AA80
NrvPlayAttackMan::PlayAttackManNrvWait::execute(Spine*) const=0x8035AA90
PowerStarEventKeeper::declareStar(const char*, const char*, long)=0x8035BA00
PowerStarEventKeeper::isSuccess(const char*, long) const=0x8035BA60
PowerStarEventKeeper::isGreen(const char*, long) const=0x8035BAA0
PowerStarEventKeeper::isBronze(const char*, long) const=0x8035BAE0
PowerStarEventKeeper::isGrand(const char*, long) const=0x8035BB20
PowerStarEventKeeper::initStarInfoTableAfterPlacement(void)=0x8035BB60
PowerStarEventKeeper::requestAppearPowerStar(const char*, long, const JGeometry::TVec3<float>*, bool, bool)=0x8035BC70
PowerStarEventKeeper::findStarID(const char*) const=0x8035BD20
Rabbit::__ct(const char*)=0x8035BF10
Rabbit::init(const JMapInfoIter&)=0x8035BF50
Rabbit::makeActorAppeared(void)=0x8035C170
Rabbit::control(void)=0x8035C1B0
Rabbit::exeAppear(void)=0x8035C220
Rabbit::exeAppearLand(void)=0x8035C360
Rabbit::calcAndSetBaseMtx(void)=0x8035C3C0
Rabbit::exeReaction(void)=0x8035C480
Rabbit::exeTalk(void)=0x8035C5B0
Rabbit::exeJumpV(void)=0x8035C670
Rabbit::exeJumpH(void)=0x8035C6D0
Rabbit::__dt(void)=0x8035C730
short::(nit_\Rabbit_cpp)=0x8035C790
NrvRabbit::RabbitNrvAppear::__ct(void)=0x8035C7E0
NrvRabbit::RabbitNrvAppearLand::__ct(void)=0x8035C7F0
NrvRabbit::RabbitNrvReaction::__ct(void)=0x8035C800
NrvRabbit::RabbitNrvTalk::__ct(void)=0x8035C810
NrvRabbit::RabbitNrvJumpV::__ct(void)=0x8035C820
NrvRabbit::RabbitNrvJumpH::__ct(void)=0x8035C830
NrvRabbit::RabbitNrvJumpH::execute(Spine*) const=0x8035C840
NrvRabbit::RabbitNrvJumpV::execute(Spine*) const=0x8035C850
NrvRabbit::RabbitNrvTalk::execute(Spine*) const=0x8035C860
NrvRabbit::RabbitNrvReaction::execute(Spine*) const=0x8035C870
NrvRabbit::RabbitNrvAppearLand::execute(Spine*) const=0x8035C880
NrvRabbit::RabbitNrvAppear::execute(Spine*) const=0x8035C890
RabbitStateCaught::__ct(LiveActor*, TalkMessageCtrl*)=0x8035C8A0
RabbitStateCaught::init(void)=0x8035C940
RabbitStateCaught::appear(void)=0x8035C9C0
RabbitStateCaught::control(void)=0x8035C9E0
RabbitStateCaught::exeCaught(void)=0x8035C9F0
RabbitStateCaught::exeCaughtLand(void)=0x8035CB10
RabbitStateCaught::exeCaughtEvent(void)=0x8035CC30
RabbitStateCaught::setCaughtStartMarioPose(void)=0x8035CD00
RabbitStateCaught::blendBaseMatrixToMario(float) const=0x8035CD70
RabbitStateCaught::__dt(void)=0x8035CE30
short::(nit_\RabbitStateCaught_cpp)=0x8035CE90
NrvRabbitStateCaught::RabbitStateCaughtNrvTryStartDemo::__ct(void)=0x8035CED0
NrvRabbitStateCaught::RabbitStateCaughtNrvCaught::__ct(void)=0x8035CEE0
NrvRabbitStateCaught::RabbitStateCaughtNrvCaughtLand::__ct(void)=0x8035CEF0
NrvRabbitStateCaught::RabbitStateCaughtNrvCaughtEvent::__ct(void)=0x8035CF00
NrvRabbitStateCaught::RabbitStateCaughtNrvCaughtEvent::execute(Spine*) const=0x8035CF10
NrvRabbitStateCaught::RabbitStateCaughtNrvCaughtLand::execute(Spine*) const=0x8035CF20
NrvRabbitStateCaught::RabbitStateCaughtNrvCaught::execute(Spine*) const=0x8035CF30
NrvRabbitStateCaught::RabbitStateCaughtNrvTryStartDemo::execute(Spine*) const=0x8035CF40
RabbitStateWaitStart::__ct(LiveActor*, JGeometry::TVec3<float>*, TalkMessageCtrl*)=0x8035CF50
RabbitStateWaitStart::setTalkActionName(const char*)=0x8035CFE0
RabbitStateWaitStart::init(void)=0x8035CFF0
RabbitStateWaitStart::appear(void)=0x8035D000
RabbitStateWaitStart::control(void)=0x8035D010
RabbitStateWaitStart::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8035D020
RabbitStateWaitStart::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8035D0D0
RabbitStateWaitStart::requestTrample(void)=0x8035D120
RabbitStateWaitStart::requestSpin(void)=0x8035D170
RabbitStateWaitStart::requestHitReaction(void)=0x8035D1C0
RabbitStateWaitStart::isEnableReaction(void) const=0x8035D210
RabbitStateWaitStart::trySmallTurn(void)=0x8035D2A0
RabbitStateWaitStart::tryTalk(void)=0x8035D310
RabbitStateWaitStart::tryPointing(void)=0x8035D380
RabbitStateWaitStart::exeWait(void)=0x8035D400
RabbitStateWaitStart::exeSmallTurn(void)=0x8035D4C0
RabbitStateWaitStart::exeHitReaction(void)=0x8035D550
RabbitStateWaitStart::exeTrample(void)=0x8035D600
RabbitStateWaitStart::exeSpin(void)=0x8035D6B0
RabbitStateWaitStart::exePointing(void)=0x8035D770
RabbitStateWaitStart::exeTalk(void)=0x8035D820
RabbitStateWaitStart::__dt(void)=0x8035D8C0
short::(nit_\RabbitStateWaitStart_cpp)=0x8035D920
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvWait::__ct(void)=0x8035D980
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvSmallTurn::__ct(void)=0x8035D990
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvHitReaction::__ct(void)=0x8035D9A0
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvTrample::__ct(void)=0x8035D9B0
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvSpin::__ct(void)=0x8035D9C0
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvPointing::__ct(void)=0x8035D9D0
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvTalk::__ct(void)=0x8035D9E0
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvTalk::execute(Spine*) const=0x8035D9F0
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvPointing::execute(Spine*) const=0x8035DA00
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvSpin::execute(Spine*) const=0x8035DA10
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvTrample::execute(Spine*) const=0x8035DA20
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvHitReaction::execute(Spine*) const=0x8035DA30
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvSmallTurn::execute(Spine*) const=0x8035DA40
NrvRabbitStateWaitStart::RabbitStateWaitStartNrvWait::execute(Spine*) const=0x8035DA50
Rosetta::__ct(const char*)=0x8035DA60
Rosetta::init(const JMapInfoIter&)=0x8035DAB0
Rosetta::calcAndSetBaseMtx(void)=0x8035DC80
Rosetta::control(void)=0x8035DCC0
Rosetta::canUpdateStarePos(void) const=0x8035DD50
Rosetta::__dt(void)=0x8035DE10
short::(nit_\Rosetta_cpp)=0x8035DE70
NrvRosetta::RosettaNrvWait::__ct(void)=0x8035DE80
NrvRosetta::RosettaNrvWait::execute(Spine*) const=0x8035DE90
ScoreAttackMan::__ct(const char*)=0x8035DEA0
ScoreAttackMan::init(const JMapInfoIter&)=0x8035DF00
ScoreAttackMan::control(void)=0x8035E570
TalkMessageFuncM<ScoreAttackMan*,M14ScoreAttackManFPCvPvUl_b>::__cl(unsigned long) const=0x8035E930
TalkMessageFuncM<ScoreAttackMan*,M14ScoreAttackManFPCvPvUl_b>::clone(void) const=0x8035E960
TalkMessageFuncM<ScoreAttackMan*,M14ScoreAttackManFPCvPvUl_b>::clone(JKRHeap*) const=0x8035E9A0
TalkMessageFuncM<ScoreAttackMan*,M14ScoreAttackManFPCvPvUl_b>::__ct(const TalkMessageFuncM<ScoreAttackMan*,M14ScoreAttackManFPCvPvUl_b>&)=0x8035E9F0
ScoreAttackMan::__dt(void)=0x8035EA20
short::(nit_\ScoreAttackMan_cpp)=0x8035EA80
SignBoard::__ct(const char*)=0x8035EC70
SignBoard::init(const JMapInfoIter&)=0x8035ECC0
SignBoard::appear(void)=0x8035EE50
SignBoard::kill(void)=0x8035EEC0
SignBoard::makeActorDead(void)=0x8035EF00
SignBoard::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8035EF80
SignBoard::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8035EF90
SignBoard::__dt(void)=0x8035F080
short::(nit_\SignBoard_cpp)=0x8035F0E0
NrvSignBoard::SignBoardNrvWait::__ct(void)=0x8035F0F0
NrvSignBoard::SignBoardNrvWait::execute(Spine*) const=0x8035F100
StarListBoard::__ct(const char*)=0x8035F110
StarListBoard::init(const JMapInfoIter&)=0x8035F160
StarListBoard::exeWait(void)=0x8035F390
StarListBoard::exeOpen(void)=0x8035F3F0
StarListBoard::__dt(void)=0x8035F550
short::(nit_\StarListBoard_cpp)=0x8035F5B0
NrvStarListBoard::StarListBoardNrvWait::__ct(void)=0x8035F5E0
NrvStarListBoard::StarListBoardNrvOpen::__ct(void)=0x8035F5F0
NrvStarListBoard::StarListBoardNrvOpen::execute(Spine*) const=0x8035F600
NrvStarListBoard::StarListBoardNrvWait::execute(Spine*) const=0x8035F610
StrayTico::__ct(const char*, CollectTico*)=0x8035F620
StrayTico::init(const JMapInfoIter&)=0x8035F6D0
StrayTico::initSensor(void)=0x8035F8A0
StrayTico::initShadow(void)=0x8035F950
StrayTico::appear(void)=0x8035F9D0
StrayTico::control(void)=0x8035FA10
StrayTico::calcAndSetBaseMtx(void)=0x8035FAD0
StrayTico::startGlad(void)=0x8035FAE0
StrayTico::updateWarp(void)=0x8035FC10
StrayTico::updateChase(void)=0x8035FCB0
StrayTico::attackSensor(HitSensor*, HitSensor*)=0x8035FDD0
StrayTico::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8035FEC0
StrayTico::receiveMsgPush(HitSensor*, HitSensor*)=0x8035FFA0
StrayTico::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80360020
StrayTico::requestCompleteDemo(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x80360260
StrayTico::exeWait(void)=0x80360380
StrayTico::exeGlad(void)=0x80360400
StrayTico::exeChase(void)=0x80360500
StrayTico::exeLauncherCamera(void)=0x803605C0
StrayTico::exeCompleteDemo(void)=0x80360790
StrayTico::isEnableSpin(void) const=0x80360930
StrayTico::isRescued(void) const=0x803609B0
StrayTico::isCompleteDemoEnd(void) const=0x80360A10
StrayTico::noticeEnd(void)=0x80360A70
StrayTico::__dt(void)=0x80360AB0
short::(nit_\StrayTico_cpp)=0x80360B10
NrvStrayTico::StrayTicoNrvWait::__ct(void)=0x80360B70
NrvStrayTico::StrayTicoNrvGlad::__ct(void)=0x80360B80
NrvStrayTico::StrayTicoNrvChase::__ct(void)=0x80360B90
NrvStrayTico::StrayTicoNrvLauncherCamera::__ct(void)=0x80360BA0
NrvStrayTico::StrayTicoNrvCompleteDemo::__ct(void)=0x80360BB0
NrvStrayTico::StrayTicoNrvCompleteDemo::execute(Spine*) const=0x80360C00
NrvStrayTico::StrayTicoNrvLauncherCamera::execute(Spine*) const=0x80360C10
NrvStrayTico::StrayTicoNrvChase::execute(Spine*) const=0x80360C20
NrvStrayTico::StrayTicoNrvGlad::execute(Spine*) const=0x80360C30
NrvStrayTico::StrayTicoNrvWait::execute(Spine*) const=0x80360C40
SuperDreamer::__ct(const char*)=0x80360C50
SuperDreamer::init(const JMapInfoIter&)=0x80360CC0
SuperDreamer::appear(void)=0x80360DE0
SuperDreamer::kill(void)=0x80360E40
SuperDreamer::makeActorAppeared(void)=0x80360E80
SuperDreamer::control(void)=0x80361450
SuperDreamer::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80361460
TalkMessageFuncM<SuperDreamer*,M12SuperDreamerFPCvPvUl_b>::__cl(unsigned long) const=0x80361FB0
TalkMessageFuncM<SuperDreamer*,M12SuperDreamerFPCvPvUl_b>::clone(void) const=0x80361FE0
TalkMessageFuncM<SuperDreamer*,M12SuperDreamerFPCvPvUl_b>::clone(JKRHeap*) const=0x80362020
TalkMessageFuncM<SuperDreamer*,M12SuperDreamerFPCvPvUl_b>::__ct(const TalkMessageFuncM<SuperDreamer*,M12SuperDreamerFPCvPvUl_b>&)=0x80362070
SuperDreamer::__dt(void)=0x803620A0
short::(nit_\SuperDreamer_cpp)=0x80362100
SupportTico::__ct(const char*)=0x80362380
SupportTico::makeActorAppeared(void)=0x80362460
SupportTico::makeActorDead(void)=0x803624B0
SupportTico::init(const JMapInfoIter&)=0x80362500
SupportTico::control(void)=0x803625D0
SupportTico::calcAndSetBaseMtx(void)=0x80362720
SupportTico::attackSensor(HitSensor*, HitSensor*)=0x80362730
SupportTico::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x803627A0
SupportTico::__dt(void)=0x80363010
short::(nit_\SupportTico_cpp)=0x80363070
TombSpiderActionBase::init(void, _0)=0x80364024
Tico::__ct(const char*)=0x803659C0
Tico::initMessage(const char*)=0x80365E10
Tico::init(const JMapInfoIter&)=0x80366060
Tico::isReactionNerve(void) const=0x80366340
Tico::initAfterPlacement(void)=0x803663A0
Tico::calcAndSetBaseMtx(void)=0x80366420
Tico::control(void)=0x80366430
Tico::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803665E0
Tico::tryReaction(void)=0x80366670
Tico::killFunc(unsigned long)=0x80366710
Tico::exeReaction(void)=0x80366760
Tico::exeDelight(void)=0x803668B0
Tico::exeAppear(void)=0x80366930
Tico::exeNoReaction(void)=0x80366AA0
TalkMessageFuncM<Tico*,M4TicoFPCvPvUl_b>::__cl(unsigned long) const=0x80367260
TalkMessageFuncM<Tico*,M4TicoFPCvPvUl_b>::clone(void) const=0x80367290
TalkMessageFuncM<Tico*,M4TicoFPCvPvUl_b>::clone(JKRHeap*) const=0x803672D0
TalkMessageFuncM<Tico*,M4TicoFPCvPvUl_b>::__ct(const TalkMessageFuncM<Tico*,M4TicoFPCvPvUl_b>&)=0x80367320
Tico::__dt(void)=0x80367350
short::(nit_\Tico_cpp)=0x803673C0
NrvTico::TicoNrvNoReaction::__ct(void)=0x80367530
NrvTico::TicoNrvReaction::__ct(void)=0x80367540
NrvTico::TicoNrvDelight::__ct(void)=0x80367550
NrvTico::TicoNrvAppear::__ct(void)=0x80367560
NrvTico::TicoNrvAppear::execute(Spine*) const=0x803677A0
NrvTico::TicoNrvDelight::execute(Spine*) const=0x803677B0
NrvTico::TicoNrvReaction::execute(Spine*) const=0x803677C0
NrvTico::TicoNrvNoReaction::execute(Spine*) const=0x803677D0
TicoBaby::__ct(const char*)=0x803677E0
TicoBaby::init(const JMapInfoIter&)=0x80367820
TicoBaby::exeWait(void)=0x803678C0
TicoBaby::exeDemo(void)=0x80367950
TicoBaby::kill(void)=0x80367A00
TicoBaby::__dt(void)=0x80367A50
short::(nit_\TicoBaby_cpp)=0x80367AB0
NrvTicoBaby::TicoBabyNrvWait::__ct(void)=0x80367AE0
NrvTicoBaby::TicoBabyNrvDemo::__ct(void)=0x80367AF0
NrvTicoBaby::TicoBabyNrvDemo::execute(Spine*) const=0x80367B00
NrvTicoBaby::TicoBabyNrvWait::execute(Spine*) const=0x80367B10
TicoBig::__ct(const char*)=0x80367B20
TicoBig::init(const JMapInfoIter&)=0x80367B60
TicoBig::control(void)=0x80367C60
TicoBig::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80367D10
TicoBig::__dt(void)=0x80367D80
@unnamed@TicoEat_cpp@::TicoEatParam::__ct(void)=0x80367DE0
TicoEat::__ct(const char*)=0x80367E30
TicoEat::init(const JMapInfoIter&)=0x80367E80
TicoEat::control(void)=0x80367F50
TicoEat::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80367FB0
TicoEat::initStarPiece(long)=0x80368170
TicoEat::tryEat(void)=0x803681C0
TicoEat::hasEnoughStarPiece(void) const=0x80368230
TicoEat::eventFunc(unsigned long)=0x80368270
TicoEat::exeReaction(void)=0x803682D0
TicoEat::startReactionSound(void)=0x80368340
TicoEat::exeEatPre(void)=0x80368350
TicoEat::exeEatNow(void)=0x803683F0
TicoEat::exeEatPst(void)=0x803684D0
TicoEat::__dt(void)=0x80368530
short::(nit_\TicoEat_cpp)=0x80368590
NrvTicoEat::TicoEatNrvEatPre::__ct(void)=0x803685E0
NrvTicoEat::TicoEatNrvEatNow::__ct(void)=0x803685F0
NrvTicoEat::TicoEatNrvEatPst::__ct(void)=0x80368600
NrvTicoEat::TicoEatNrvEatEnd::__ct(void)=0x80368610
NrvTicoEat::TicoEatNrvReaction::__ct(void)=0x80368620
NrvTicoEat::TicoEatNrvReaction::execute(Spine*) const=0x80368630
NrvTicoEat::TicoEatNrvEatEnd::execute(Spine*) const=0x80368640
NrvTicoEat::TicoEatNrvEatPst::execute(Spine*) const=0x80368650
NrvTicoEat::TicoEatNrvEatNow::execute(Spine*) const=0x80368660
NrvTicoEat::TicoEatNrvEatPre::execute(Spine*) const=0x80368670
TicoFatCoin::__ct(const char*)=0x80368680
TicoFatCoin::init(const JMapInfoIter&)=0x803686E0
TicoFatCoin::control(void)=0x803689D0
TicoFatCoin::initAfterPlacement(void)=0x80369020
TalkMessageFuncM<TicoFatCoin*,M11TicoFatCoinFPCvPvUl_b>::__cl(unsigned long) const=0x80369240
TalkMessageFuncM<TicoFatCoin*,M11TicoFatCoinFPCvPvUl_b>::clone(void) const=0x80369270
TalkMessageFuncM<TicoFatCoin*,M11TicoFatCoinFPCvPvUl_b>::clone(JKRHeap*) const=0x803692B0
TalkMessageFuncM<TicoFatCoin*,M11TicoFatCoinFPCvPvUl_b>::__ct(const TalkMessageFuncM<TicoFatCoin*,M11TicoFatCoinFPCvPvUl_b>&)=0x80369300
TicoFatCoin::__dt(void)=0x80369330
short::(nit_\TicoFatCoin_cpp)=0x80369390
TicoFatStarPiece::__ct(const char*)=0x803695B0
TicoFatStarPiece::init(const JMapInfoIter&)=0x80369630
TicoFatStarPiece::control(void)=0x8036A1B0
TicoFatStarPiece::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8036A2E0
TicoFatStarPiece::__dt(void)=0x8036AE60
short::(nit_\TicoFatStarPiece_cpp)=0x8036AEC0
TicoRail::__ct(const char*)=0x8036B8B0
TicoRail::init(const JMapInfoIter&)=0x8036B920
TicoRail::exeWait(void)=0x8036BB50
TicoRail::exeLookAround(void)=0x8036BBC0
TicoRail::exeMoveSign(void)=0x8036BCD0
TicoRail::exeMove(void)=0x8036BDD0
TicoRail::exeStop(void)=0x8036BE70
TicoRail::exeTalkStart(void)=0x8036BF00
TicoRail::exeTalk(void)=0x8036C030
TicoRail::exeTalkCancel(void)=0x8036C100
TicoRail::exeGoodBye(void)=0x8036C180
TicoRail::isGreaterEqualStepAndRandom(long) const=0x8036C230
TicoRail::kill(void)=0x8036C2B0
TicoRail::calcAndSetBaseMtx(void)=0x8036C2F0
TicoRail::control(void)=0x8036C340
TicoRail::attackSensor(HitSensor*, HitSensor*)=0x8036C3A0
TicoRail::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8036C4D0
TicoRail::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8036C5F0
TicoRail::isSameRailActor(const LiveActor*) const=0x8036C660
TicoRail::__dt(void)=0x8036C700
short::(nit_\TicoRail_cpp)=0x8036C760
NrvTicoRail::TicoRailNrvWait::__ct(void)=0x8036C7D0
NrvTicoRail::TicoRailNrvLookAround::__ct(void)=0x8036C7E0
NrvTicoRail::TicoRailNrvMoveSign::__ct(void)=0x8036C7F0
NrvTicoRail::TicoRailNrvMoveSignAndTurn::__ct(void)=0x8036C800
NrvTicoRail::TicoRailNrvMove::__ct(void)=0x8036C810
NrvTicoRail::TicoRailNrvStop::__ct(void)=0x8036C820
NrvTicoRail::TicoRailNrvTalkStart::__ct(void)=0x8036C830
NrvTicoRail::TicoRailNrvTalk::__ct(void)=0x8036C840
NrvTicoRail::TicoRailNrvTalkCancel::__ct(void)=0x8036C850
NrvTicoRail::TicoRailNrvGoodBye::__ct(void)=0x8036C860
NrvTicoRail::TicoRailNrvGoodBye::execute(Spine*) const=0x8036C870
NrvTicoRail::TicoRailNrvTalkCancel::execute(Spine*) const=0x8036C880
NrvTicoRail::TicoRailNrvTalk::execute(Spine*) const=0x8036C890
NrvTicoRail::TicoRailNrvTalkStart::execute(Spine*) const=0x8036C8A0
NrvTicoRail::TicoRailNrvStop::execute(Spine*) const=0x8036C8B0
NrvTicoRail::TicoRailNrvMove::execute(Spine*) const=0x8036C8C0
NrvTicoRail::TicoRailNrvMoveSignAndTurn::execute(Spine*) const=0x8036C8D0
NrvTicoRail::TicoRailNrvMoveSign::execute(Spine*) const=0x8036C8E0
NrvTicoRail::TicoRailNrvLookAround::execute(Spine*) const=0x8036C8F0
NrvTicoRail::TicoRailNrvWait::execute(Spine*) const=0x8036C900
TicoShop::__ct(const char*)=0x8036C910
TicoShop::kill(void)=0x8036C960
TicoShop::init(const JMapInfoIter&)=0x8036CA00
TicoShop::branchFunc(unsigned long)=0x8036CCB0
TicoShop::eventFunc(unsigned long)=0x8036CCC0
TicoShop::startReactionSound(void)=0x8036CCF0
TicoShop::exeDemo(void)=0x8036CDE0
TalkMessageFuncM<TicoShop*,M8TicoShopFPCvPvUl_b>::__cl(unsigned long) const=0x8036CEA0
TalkMessageFuncM<TicoShop*,M8TicoShopFPCvPvUl_b>::clone(void) const=0x8036CED0
TalkMessageFuncM<TicoShop*,M8TicoShopFPCvPvUl_b>::clone(JKRHeap*) const=0x8036CF10
TalkMessageFuncM<TicoShop*,M8TicoShopFPCvPvUl_b>::__ct(const TalkMessageFuncM<TicoShop*,M8TicoShopFPCvPvUl_b>&)=0x8036CF60
TicoShop::__dt(void)=0x8036CF90
short::(nit_\TicoShop_cpp)=0x8036CFF0
NrvTicoShop::TicoShopNrvDemo::__ct(void)=0x8036D000
NrvTicoShop::TicoShopNrvDemo::execute(Spine*) const=0x8036D010
TicoShopDice::__ct(const char*)=0x8036D020
TicoShopDice::init(const JMapInfoIter&)=0x8036D080
TalkMessageFuncM<TicoShopDice*,M12TicoShopDiceFPCvPvUl_b>::__cl(unsigned long) const=0x8036D820
TalkMessageFuncM<TicoShopDice*,M12TicoShopDiceFPCvPvUl_b>::clone(void) const=0x8036D850
TalkMessageFuncM<TicoShopDice*,M12TicoShopDiceFPCvPvUl_b>::clone(JKRHeap*) const=0x8036D890
TalkMessageFuncM<TicoShopDice*,M12TicoShopDiceFPCvPvUl_b>::__ct(const TalkMessageFuncM<TicoShopDice*,M12TicoShopDiceFPCvPvUl_b>&)=0x8036D8E0
TicoShopDice::__dt(void)=0x8036D910
short::(nit_\TicoShopDice_cpp)=0x8036D970
TogepinAttackMan::__ct(const char*)=0x8036E740
TogepinAttackMan::init(const JMapInfoIter&)=0x8036E790
TogepinAttackMan::control(void)=0x8036E9C0
TalkMessageFuncM<TogepinAttackMan*,M16TogepinAttackManFPCvPvUl_b>::__cl(unsigned long) const=0x8036EC30
TalkMessageFuncM<TogepinAttackMan*,M16TogepinAttackManFPCvPvUl_b>::clone(void) const=0x8036EC60
TalkMessageFuncM<TogepinAttackMan*,M16TogepinAttackManFPCvPvUl_b>::clone(JKRHeap*) const=0x8036ECA0
TalkMessageFuncM<TogepinAttackMan*,M16TogepinAttackManFPCvPvUl_b>::__ct(const TalkMessageFuncM<TogepinAttackMan*,M16TogepinAttackManFPCvPvUl_b>&)=0x8036ECF0
TogepinAttackMan::__dt(void)=0x8036ED20
short::(nit_\TogepinAttackMan_cpp)=0x8036ED80
NrvTogepinAttackMan::TogepinAttackManNrvWait::__ct(void)=0x8036ED90
NrvTogepinAttackMan::TogepinAttackManNrvWait::execute(Spine*) const=0x8036EDA0
TrickRabbit::__ct(const char*)=0x8036EDB0
TrickRabbit::init(const JMapInfoIter&)=0x8036EE70
TrickRabbit::initAfterPlacement(void)=0x8036EFF0
TrickRabbit::initModel(void)=0x8036F000
TrickRabbit::initSensor(void)=0x8036F0A0
TrickRabbit::initBind(void)=0x8036F170
TrickRabbit::initRoute(const JMapInfoIter&)=0x8036F1C0
TrickRabbit::initDemoCamera(const JMapInfoIter&)=0x8036F200
TrickRabbit::initState(void)=0x8036F290
TrickRabbit::control(void)=0x8036F350
TrickRabbit::calcAndSetBaseMtx(void)=0x8036F3B0
TrickRabbit::attackSensor(HitSensor*, HitSensor*)=0x8036F3C0
TrickRabbit::receiveMsgPush(HitSensor*, HitSensor*)=0x8036F450
TrickRabbit::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8036F4B0
TrickRabbit::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8036F630
TrickRabbit::receiveMsgTrample(void)=0x8036F6C0
TrickRabbit::requestCaught(void)=0x8036F760
TrickRabbit::tryStartDemoRunnaway(void)=0x8036F7E0
TrickRabbit::endDemoRunnaway(void)=0x8036F8D0
TrickRabbit::tryRunaway(void)=0x8036F940
TrickRabbit::tryBrakeTurn(void)=0x8036F9E0
TrickRabbit::tryBrakeTurnEnd(void)=0x8036FAC0
TrickRabbit::tryStop(void)=0x8036FB10
TrickRabbit::tryJumpStart(void)=0x8036FB70
TrickRabbit::tryJump(void)=0x8036FBC0
TrickRabbit::tryJumpEnd(void)=0x8036FC20
TrickRabbit::tryEndFallDown(void)=0x8036FC70
TrickRabbit::tryEndFallDownLand(void)=0x8036FCE0
TrickRabbit::tryComebackRouteStart(void)=0x8036FD30
TrickRabbit::tryComebackRoute(void)=0x8036FD80
TrickRabbit::tryEndTumble(void)=0x8036FDE0
TrickRabbit::tryEndGetUp(void)=0x8036FE40
TrickRabbit::tryDemoJumpStart(void)=0x8036FE90
TrickRabbit::tryDemoJump(void)=0x8036FEE0
TrickRabbit::tryDemoJumpEnd(void)=0x8036FF40
TrickRabbit::tryEndPowerStarDemo(void)=0x8036FF90
TrickRabbit::exeWaitStart(void)=0x8036FFE0
TrickRabbit::exeDemoRunaway(void)=0x80370060
TrickRabbit::exeDemoJumpStart(void)=0x803700E0
TrickRabbit::exeDemoJump(void)=0x80370130
TrickRabbit::exeDemoEnd(void)=0x803701B0
TrickRabbit::exeWait(void)=0x80370240
TrickRabbit::exeRunaway(void)=0x803702C0
TrickRabbit::exeBrakeTurn(void)=0x80370360
TrickRabbit::exeJumpStart(void)=0x80370420
TrickRabbit::exeJump(void)=0x80370470
TrickRabbit::exeFallDown(void)=0x803704F0
TrickRabbit::exeGetUpFromFallDown(void)=0x803705A0
TrickRabbit::exeComebackRouteStart(void)=0x80370600
TrickRabbit::exeComebackRoute(void)=0x80370650
TrickRabbit::exeTumble(void)=0x803706D0
TrickRabbit::exeGetUp(void)=0x80370780
TrickRabbit::exeCaught(void)=0x803707E0
TrickRabbit::exeWaitPowerStarDemo(void)=0x80370850
TrickRabbit::exeGiveUp(void)=0x80370970
TrickRabbit::doWait(void)=0x803709D0
TrickRabbit::doRunaway(void)=0x80370A40
TrickRabbit::doJumpStart(void)=0x80370BB0
TrickRabbit::doJump(void)=0x80370C90
TrickRabbit::tearDownWait(void)=0x80370DD0
TrickRabbit::checkDivingThicket(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80370E20
TrickRabbit::selectEdgeStartEvent(RailGraphIter*)=0x80370EE0
TrickRabbit::selectEdgeRunnaway(RailGraphIter*, const JGeometry::TVec3<float>&, float)=0x80370F70
TrickRabbit::startRouteLevelControl(long, long)=0x80371140
TrickRabbit::controlRouteLevel(void)=0x80371160
TrickRabbit::addMovingAccel(const JGeometry::TVec3<float>&, float)=0x803711B0
TrickRabbit::addKeepRouteRange(float, float, float)=0x80371280
TrickRabbit::updateFootPrint(void)=0x803713E0
TrickRabbit::isCaughtable(void) const=0x80371440
TrickRabbit::isTumbable(void) const=0x80371550
TrickRabbit::isNextEdgeJump(void) const=0x80371610
TrickRabbit::setUpJumpParam(void)=0x80371670
TrickRabbit::setUpJumpParamFromJMap(void)=0x803716D0
TrickRabbit::calcDefaultJumpTime(void) const=0x80371740
TrickRabbit::calcJumpStartTime(void) const=0x803717A0
TrickRabbit::calcJumpTime(void) const=0x803717E0
TrickRabbit::calcJumpHeight(void) const=0x80371820
TrickRabbit::initTimer(void)=0x80371880
TrickRabbit::updateTime(void)=0x803718A0
RunnawayNodeSelecter::isSatisfy(RailGraphIter&)=0x803719C0
TrickRabbit::__dt(void)=0x80371A30
short::(nit_\TrickRabbit_cpp)=0x80371A90
NrvTrickRabbit::TrickRabbitNrvWaitStart::__ct(void)=0x80371B60
NrvTrickRabbit::TrickRabbitNrvTryStartDemoRunnaway::__ct(void)=0x80371B70
NrvTrickRabbit::TrickRabbitNrvDemoRunaway::__ct(void)=0x80371B80
NrvTrickRabbit::TrickRabbitNrvDemoJumpStart::__ct(void)=0x80371B90
NrvTrickRabbit::TrickRabbitNrvDemoJump::__ct(void)=0x80371BA0
NrvTrickRabbit::TrickRabbitNrvDemoEnd::__ct(void)=0x80371BB0
NrvTrickRabbit::TrickRabbitNrvWait::__ct(void)=0x80371BC0
NrvTrickRabbit::TrickRabbitNrvRunaway::__ct(void)=0x80371BD0
NrvTrickRabbit::TrickRabbitNrvJumpStart::__ct(void)=0x80371BE0
NrvTrickRabbit::TrickRabbitNrvJump::__ct(void)=0x80371BF0
NrvTrickRabbit::TrickRabbitNrvBrakeTurn::__ct(void)=0x80371C00
NrvTrickRabbit::TrickRabbitNrvFallDown::__ct(void)=0x80371C10
NrvTrickRabbit::TrickRabbitNrvFallDownLand::__ct(void)=0x80371C20
NrvTrickRabbit::TrickRabbitNrvGetUpFromFallDown::__ct(void)=0x80371C30
NrvTrickRabbit::TrickRabbitNrvComebackRouteStart::__ct(void)=0x80371C40
NrvTrickRabbit::TrickRabbitNrvComebackRoute::__ct(void)=0x80371C50
NrvTrickRabbit::TrickRabbitNrvTumble::__ct(void)=0x80371C60
NrvTrickRabbit::TrickRabbitNrvGetUp::__ct(void)=0x80371C70
NrvTrickRabbit::TrickRabbitNrvCaught::__ct(void)=0x80371C80
NrvTrickRabbit::TrickRabbitNrvWaitPowerStarDemo::__ct(void)=0x80371C90
NrvTrickRabbit::TrickRabbitNrvGiveUp::__ct(void)=0x80371CA0
NrvTrickRabbit::TrickRabbitNrvGiveUp::execute(Spine*) const=0x80371CB0
NrvTrickRabbit::TrickRabbitNrvWaitPowerStarDemo::execute(Spine*) const=0x80371CC0
NrvTrickRabbit::TrickRabbitNrvCaught::execute(Spine*) const=0x80371CD0
NrvTrickRabbit::TrickRabbitNrvGetUp::execute(Spine*) const=0x80371CE0
NrvTrickRabbit::TrickRabbitNrvTumble::execute(Spine*) const=0x80371CF0
NrvTrickRabbit::TrickRabbitNrvComebackRoute::executeOnEnd(Spine*) const=0x80371D00
NrvTrickRabbit::TrickRabbitNrvComebackRoute::execute(Spine*) const=0x80371D10
NrvTrickRabbit::TrickRabbitNrvComebackRouteStart::execute(Spine*) const=0x80371D20
NrvTrickRabbit::TrickRabbitNrvGetUpFromFallDown::execute(Spine*) const=0x80371D30
NrvTrickRabbit::TrickRabbitNrvFallDownLand::execute(Spine*) const=0x80371D40
NrvTrickRabbit::TrickRabbitNrvFallDown::execute(Spine*) const=0x80371D90
NrvTrickRabbit::TrickRabbitNrvBrakeTurn::execute(Spine*) const=0x80371DA0
NrvTrickRabbit::TrickRabbitNrvJump::executeOnEnd(Spine*) const=0x80371DB0
NrvTrickRabbit::TrickRabbitNrvJump::execute(Spine*) const=0x80371DC0
NrvTrickRabbit::TrickRabbitNrvJumpStart::execute(Spine*) const=0x80371DD0
NrvTrickRabbit::TrickRabbitNrvRunaway::execute(Spine*) const=0x80371DE0
NrvTrickRabbit::TrickRabbitNrvWait::executeOnEnd(Spine*) const=0x80371DF0
NrvTrickRabbit::TrickRabbitNrvWait::execute(Spine*) const=0x80371E00
NrvTrickRabbit::TrickRabbitNrvDemoEnd::execute(Spine*) const=0x80371E10
NrvTrickRabbit::TrickRabbitNrvDemoJump::executeOnEnd(Spine*) const=0x80371E20
NrvTrickRabbit::TrickRabbitNrvDemoJump::execute(Spine*) const=0x80371E30
NrvTrickRabbit::TrickRabbitNrvDemoJumpStart::execute(Spine*) const=0x80371E40
NrvTrickRabbit::TrickRabbitNrvDemoRunaway::execute(Spine*) const=0x80371E50
NrvTrickRabbit::TrickRabbitNrvTryStartDemoRunnaway::execute(Spine*) const=0x80371E60
NrvTrickRabbit::TrickRabbitNrvWaitStart::execute(Spine*) const=0x80371E70
TrickRabbitUtil::createRabbitFootPrint(LiveActor*)=0x80371E80
CometEventExecutorTimeLimit::__ct(unsigned long)=0x80371F20
CometEventExecutorTimeLimit::init(const JMapInfoIter&)=0x80371F80
CometEventExecutorTimeLimit::exeStartEvent(void)=0x80372110
CometEventExecutorTimeLimit::getTimeLimit(void) const=0x80372220
CometEventExecutorTimeLimit::__dt(void)=0x80372250
short::(nit_\CometEventExecutorTimeLimit_cpp)=0x803722B0
NrvCometEventExecutorTimeLimit::CometEventExecutorTimeLimitStartEvent::__ct(void)=0x803722C0
NrvCometEventExecutorTimeLimit::CometEventExecutorTimeLimitStartEvent::execute(Spine*) const=0x803722D0
CometEventKeeper::__ct(void)=0x80372800
CometEventKeeper::init(void)=0x80372820
CometEventKeeper::isStartEvent(const char*) const=0x80372980
CometEventKeeper::getTimeLimitFromScenarioData(void)=0x80372AE0
CometEventKeeper::initCometStatus(void)=0x80372B40
EventDirector::__ct(void)=0x80372B90
EventDirector::init(const JMapInfoIter&)=0x80372BF0
EventFunction::getPowerStarHolder(void)=0x80372C70
EventFunction::isStartCometEvent(const char*)=0x80372CA0
MR::initEventSystemAfterPlacement(void)=0x80372DB0
MR::declareEventPowerStar(const NameObj*, long)=0x80372DE0
MR::declareEventPowerStar(const char*, long)=0x80372E40
MR::isSuccessEventPowerStar(const char*, long)=0x80372EA0
MR::isGreenEventPowerStar(const char*, long)=0x80372EF0
MR::isBronzeEventPowerStar(const char*, long)=0x80372F40
MR::isGrandEventPowerStar(const char*, long)=0x80372F90
MR::appearEventPowerStar(const char*, long, const JGeometry::TVec3<float>*, bool, bool, long)=0x80372FE0
MR::isEndEventPowerStarAppearDemo(const char*)=0x80373050
MR::pauseCometTimer(void)=0x803730E0
MR::resumeCometTimer(void)=0x80373110
MR::addCometTimer(long)=0x803731A0
EventDirector::__dt(void)=0x80373220
@unnamed@NPCActor_cpp@::NPCParam::__ct(void)=0x80373280
NPCActorCaps::__ct(const char*)=0x803732E0
NPCActorCaps::setDefault(void)=0x80373420
NPCActor::__ct(const char*)=0x80373480
NPCActor::setBaseMtx(const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>&)=0x80373600
NPCActor::setInitPose(void)=0x80373780
NPCActor::init(const JMapInfoIter&)=0x803737B0
NPCActor::initAfterPlacement(void)=0x803737C0
NPCActor::initialize(const JMapInfoIter&, const NPCActorCaps&, const char*, const char*, bool)=0x80373840
NPCActor::equipment(const NPCActorItem&, bool)=0x80373F00
NPCActor::calcAndSetBaseMtx(void)=0x80373FB0
NPCActor::makeActorAppeared(void)=0x803740A0
NPCActor::makeActorDead(void)=0x80374120
NPCActor::kill(void)=0x803741A0
NPCActor::control(void)=0x803741F0
NPCActor::isReactionNerve(void) const=0x80374340
NPCActor::isSensorSpinCloudBlock(const HitSensor*) const=0x80374370
NPCActor::initTalkCtrl(const JMapInfoIter&, const char*, const JGeometry::TVec3<float>&, A4_f)=0x80374380
NPCActor::initTalkCtrlDirect(const JMapInfoIter&, const char*, const JGeometry::TVec3<float>&, A4_f)=0x803743D0
NPCActor::calcJointScale(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80374420
NPCActor::turnToPlayer(void)=0x80374460
NPCActor::turnToPlayer(float)=0x80374470
NPCActor::turnToPlayer(float, float, float)=0x803745B0
NPCActor::turnToDefault(float)=0x803746C0
NPCActor::setToDefault(void)=0x803747B0
NPCActor::attackSensor(HitSensor*, HitSensor*)=0x80374850
NPCActor::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803748C0
NPCActor::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80374A80
NPCActor::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80374B40
NPCActor::pushNerve(const Nerve*)=0x80374BE0
NPCActor::popAndPushNerve(const Nerve*)=0x80374C30
NPCActor::popNerve(void)=0x80374C90
NPCActor::tryPushNullNerve(void)=0x80374CF0
NPCActor::isEmptyNerve(void) const=0x80374D50
NPCActor::isScaleAnim(void) const=0x80374D60
NPCActor::isPointingSe(void) const=0x80374E00
NPCActor::updateReaction(void)=0x80374E30
NPCActor::updateScaleCtrl(void)=0x80374F40
NPCActor::exeWait(void)=0x803750B0
NPCActor::exeTalk(void)=0x80375120
TriangleFilterDelegator<NPCActor>::isInvalidTriangle(const Triangle*) const=0x80375180
JointControlDelegator<NPCActor>::__dt(void)=0x803751B0
JointControlDelegator<NPCActor>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x803751F0
JointControlDelegator<NPCActor>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80375260
short::(nit_\NPCActor_cpp)=0x803752D0
NrvNPCActor::NPCActorNrvReaction::__ct(void)=0x80375340
NrvNPCActor::NPCActorNrvWait::__ct(void)=0x80375350
NrvNPCActor::NPCActorNrvTalk::__ct(void)=0x80375360
NrvNPCActor::NPCActorNrvNull::__ct(void)=0x80375370
NrvNPCActor::NPCActorNrvNull::execute(Spine*) const=0x80375380
NrvNPCActor::NPCActorNrvTalk::execute(Spine*) const=0x80375390
NrvNPCActor::NPCActorNrvWait::execute(Spine*) const=0x803753A0
NrvNPCActor::NPCActorNrvReaction::execute(Spine*) const=0x803753B0
NPCDirector::__ct(void)=0x803753C0
NPCDirector::init(const JMapInfoIter&)=0x80375410
NPCDirector::__dt(void)=0x80375490
NPCFunction::getNPCItemData(NPCActorItem*, long)=0x803754F0
NPCParameterEdit::__ct(const char*, const char*, bool)=0x803755F0
NPCParameterEdit::read(JMapInfo*, long)=0x80375610
NPCParameterBool::__ct(const char*, bool*)=0x80375630
NPCParameterBool::read(JMapInfo*, long)=0x80375650
NPCParameterV3f::__ct(const char*, JGeometry::TVec3<float>*, float, float)=0x803756E0
NPCParameterV3f::read(JMapInfo*, long)=0x80375700
NPCParameterJoint::__ct(const char*, const char*, const char*)=0x803757E0
NPCParameterJoint::read(JMapInfo*, long)=0x80375810
NPCParameterReader::__ct(const char*)=0x80375870
NPCParameterReader::read(JMapInfo*, long)=0x80375890
NPCParameterBase::read(JMapInfo*, long)=0x80375940
NPCCapsParameterReader::__ct(const char*)=0x80375950
NPCCapsParameterReader::init(void)=0x803759C0
NPCItemParameterReader::__ct(const char*)=0x80375F10
NPCItemParameterReader::copy(const NPCActorItem*)=0x80376050
NPCParameterRange<long>::__ct(const char*, long*, long, long)=0x80376080
NPCParameterRange<long>::read(JMapInfo*, long)=0x803760A0
NPCParameterRange<float>::__ct(const char*, float*, float, float)=0x80376100
NPCParameterRange<float>::read(JMapInfo*, long)=0x80376120
MR::Vector<MR::FixedArray<NPCParameterBase*,48>>::push_back(const NPCParameterBase*)=0x80376140
ScoreAttackCounter::__ct(const char*)=0x80376560
ScoreAttackCounter::init(const JMapInfoIter&)=0x803765D0
ScoreAttackCounter::control(void)=0x80376930
ScoreAttackAccessor::__ct(void)=0x80376B80
ScoreAttackFunction::score100Points(const LiveActor*)=0x80376DA0
ScoreAttackFunction::score10PointsMultiply(const LiveActor*, long)=0x80376DF0
ScoreAttackFunction::score10PointsMultiply(long)=0x80376E60
ScoreAttackFunction::score1000Points(const LiveActor*)=0x80376ED0
ScoreAttackFunction::score300Points(const LiveActor*)=0x80376F20
ScoreAttackCounter::__dt(void)=0x803772C0
ScoreAttackAccessor::__dt(void)=0x80377320
short::(nit_\ScoreAttackCounter_cpp)=0x80377380
TalkBalloon::__ct(const char*)=0x803774B0
TalkBalloon::create(const char*, bool, bool)=0x80377510
TalkBalloon::init(const JMapInfoIter&)=0x803775C0
TalkBalloon::kill(void)=0x803775D0
TalkBalloon::open(TalkMessageCtrl*)=0x80377610
TalkBalloon::close(void)=0x803776B0
TalkBalloon::updateBalloon(void)=0x803776C0
TalkBalloon::updateTalking(void)=0x80377950
TalkBalloon::isTextAppearedAll(void)=0x803779D0
TalkBalloon::turnPage(void)=0x803779E0
TalkBalloon::hasNextPage(void)=0x803779F0
TalkBalloon::skipMessage(void)=0x80377A00
TalkBalloon::pauseOff(void)=0x80377A10
TalkBalloonShort::__ct(const char*)=0x80377A20
TalkBalloon::__dt(void)=0x80377A70
TalkBalloonShort::init(const JMapInfoIter&)=0x80377AD0
TalkBalloonShort::open(TalkMessageCtrl*)=0x80377AF0
TalkBalloonShort::close(void)=0x80377BE0
TalkBalloonShort::updateBalloon(void)=0x80377C20
TalkBalloonEvent::__ct(const char*)=0x80377CA0
TalkBalloonEvent::init(const JMapInfoIter&)=0x80377D00
TalkBalloonEvent::open(TalkMessageCtrl*)=0x80377D50
TalkBalloonEvent::close(void)=0x80377E00
TalkBalloonEvent::updateBeak(void)=0x80377EA0
TalkBalloonEvent::turnPage(void)=0x80377FF0
TalkBalloonEvent::skipMessage(void)=0x80378070
TalkBalloonEvent::isTextAppearedAll(void)=0x803780B0
TalkBalloonEvent::exeWait(void)=0x80378110
TalkBalloonEvent::exeOpen(void)=0x80378190
TalkBalloonEvent::exeTalk(void)=0x80378250
TalkBalloonSign::__ct(const char*)=0x803782F0
TalkBalloonEvent::__dt(void)=0x80378340
TalkBalloonSign::init(const JMapInfoIter&)=0x803783A0
TalkBalloonSign::turnPage(void)=0x803783F0
TalkBalloonIcon::__ct(const char*)=0x80378500
TalkBalloonShort::__dt(void)=0x80378540
TalkBalloonIcon::init(const JMapInfoIter&)=0x803785A0
TalkBalloonIcon::open(TalkMessageCtrl*)=0x803785C0
TalkBalloonHolder::__ct(void)=0x80378640
TalkBalloonHolder::getBalloon(const TalkMessageCtrl*)=0x803787C0
TalkBalloonHolder::pauseOff(void)=0x803788D0
TalkBalloonHolder::update(void)=0x80378980
TalkBalloonHolder::isActiveBalloonShort(void) const=0x80378990
TalkBalloonSign::__dt(void)=0x80378A00
TalkBalloonIcon::__dt(void)=0x80378A60
short::(nit_\TalkBalloon_cpp)=0x80378AC0
NrvTalkBalloonShort::TalkBalloonShortNrvOpen::__ct(void)=0x80378B20
NrvTalkBalloonShort::TalkBalloonShortNrvTalk::__ct(void)=0x80378B30
NrvTalkBalloonShort::TalkBalloonShortNrvClose::__ct(void)=0x80378B40
NrvTalkBalloonEvent::TalkBalloonEventNrvWait::__ct(void)=0x80378B50
NrvTalkBalloonEvent::TalkBalloonEventNrvOpen::__ct(void)=0x80378B60
NrvTalkBalloonEvent::TalkBalloonEventNrvTalk::__ct(void)=0x80378B70
NrvTalkBalloonEvent::TalkBalloonEventNrvClose::__ct(void)=0x80378B80
NrvTalkBalloonEvent::TalkBalloonEventNrvClose::execute(Spine*) const=0x80378BB0
NrvTalkBalloonEvent::TalkBalloonEventNrvTalk::execute(Spine*) const=0x80378C00
NrvTalkBalloonEvent::TalkBalloonEventNrvOpen::execute(Spine*) const=0x80378C10
NrvTalkBalloonEvent::TalkBalloonEventNrvWait::execute(Spine*) const=0x80378C20
NrvTalkBalloonShort::TalkBalloonShortNrvClose::execute(Spine*) const=0x80378C30
NrvTalkBalloonShort::TalkBalloonShortNrvTalk::execute(Spine*) const=0x80378CA0
NrvTalkBalloonShort::TalkBalloonShortNrvOpen::execute(Spine*) const=0x80378CC0
TalkPeekZ::__ct(void)=0x80378D20
TalkPeekZ::setDrawSyncToken(void)=0x80378D70
TalkPeekZ::drawSyncCallback(unsigned short)=0x80378DC0
TalkDirector::__ct(const char*)=0x80378F00
TalkDirector::init(const JMapInfoIter&)=0x80378F90
TalkDirector::movement(void)=0x80379050
TalkDirector::request(TalkMessageCtrl*, bool)=0x80379110
TalkDirector::test(TalkMessageCtrl*, bool, bool)=0x803793A0
TalkState::test(void)=0x803794B0
TalkDirector::start(TalkMessageCtrl*, bool, bool, bool)=0x803794C0
TalkState::open(void)=0x803795C0
TalkDirector::updateMessage(void)=0x803795D0
TalkDirector::prepTalk(TalkMessageCtrl*, bool, bool, bool)=0x80379700
TalkDirector::termTalk(void)=0x80379820
TalkDirector::initState(TalkMessageCtrl*)=0x803798E0
TalkDirector::isInvalidTalk(void) const=0x803799D0
TalkDirector::appearYesNoSelector(const TalkMessageCtrl*) const=0x80379A60
TalkDirector::getDemoType(const TalkMessageCtrl*, bool) const=0x80379B20
TalkDirector::pauseOff(void)=0x80379BA0
TalkDirector::isSystemTalking(void) const=0x80379BE0
TalkDirector::isNormalTalking(void) const=0x80379C70
TalkDirector::getTalkingActor(void) const=0x80379CD0
TalkDirector::exePrep(void)=0x80379D20
TalkState::prep(const TalkMessageCtrl*)=0x80379DA0
TalkDirector::exeTalk(void)=0x80379DB0
TalkState::talk(const TalkMessageCtrl*)=0x80379E80
TalkState::clos(void)=0x80379F40
TalkDirector::exeSlct(void)=0x80379F50
TalkDirector::exeNext(void)=0x8037A040
TalkDirector::exeTerm(void)=0x8037A140
TalkState::term(const TalkMessageCtrl*)=0x8037A1C0
TalkFunction::requestTalkSystem(TalkMessageCtrl*, bool)=0x8037A1D0
TalkFunction::startTalkSystem(TalkMessageCtrl*, bool, bool, bool)=0x8037A220
TalkFunction::endTalkSystem(TalkMessageCtrl*)=0x8037A280
TalkFunction::isTalkSystemStart(const TalkMessageCtrl*)=0x8037A2C0
TalkFunction::registerTalkSystem(TalkMessageCtrl*)=0x8037A320
MR::pauseOffTalkDirector(void)=0x8037A370
MR::invalidateTalkDirector(void)=0x8037A3A0
MR::validateTalkDirector(void)=0x8037A3D0
MR::setTalkDirectorDrawSyncToken(void)=0x8037A400
MR::isActiveTalkBalloonShort(void)=0x8037A450
TalkDirector::__dt(void)=0x8037A4A0
short::(nit_\TalkDirector_cpp)=0x8037A520
NrvTalkDirector::TalkDirectorNrvWait::__ct(void)=0x8037A580
NrvTalkDirector::TalkDirectorNrvPrep::__ct(void)=0x8037A590
NrvTalkDirector::TalkDirectorNrvTalk::__ct(void)=0x8037A5A0
NrvTalkDirector::TalkDirectorNrvSlct::__ct(void)=0x8037A5C0
NrvTalkDirector::TalkDirectorNrvNext::__ct(void)=0x8037A5D0
NrvTalkDirector::TalkDirectorNrvTerm::__ct(void)=0x8037A5E0
NrvTalkDirector::TalkDirectorNrvTerm::execute(Spine*) const=0x8037A5F0
NrvTalkDirector::TalkDirectorNrvNext::execute(Spine*) const=0x8037A600
NrvTalkDirector::TalkDirectorNrvSlct::execute(Spine*) const=0x8037A610
NrvTalkDirector::TalkDirectorNrvTalk::execute(Spine*) const=0x8037A630
NrvTalkDirector::TalkDirectorNrvPrep::execute(Spine*) const=0x8037A640
NrvTalkDirector::TalkDirectorNrvWait::execute(Spine*) const=0x8037A650
TalkMessageCtrl::__ct(LiveActor*, const JGeometry::TVec3<float>&, A4_f)=0x8037A660
TalkMessageCtrl::createMessage(const JMapInfoIter&, const char*)=0x8037A770
TalkMessageCtrl::createMessageDirect(const JMapInfoIter&, const char*)=0x8037A830
TalkMessageCtrl::getMessageID(void) const=0x8037A900
TalkMessageCtrl::requestTalk(void)=0x8037A950
TalkMessageCtrl::requestTalkForce(void)=0x8037A960
TalkMessageCtrl::startTalk(void)=0x8037A970
TalkMessageCtrl::startTalkForce(void)=0x8037A980
TalkMessageCtrl::startTalkForcePuppetable(void)=0x8037A990
TalkMessageCtrl::startTalkForceWithoutDemo(void)=0x8037A9A0
TalkMessageCtrl::startTalkForceWithoutDemoPuppetable(void)=0x8037A9B0
TalkMessageCtrl::endTalk(void)=0x8037A9C0
TalkMessageCtrl::updateBalloonPos(void)=0x8037A9D0
TalkMessageCtrl::isNearPlayer(const TalkMessageCtrl*)=0x8037AAE0
TalkMessageCtrl::isNearPlayer(float) const=0x8037AB70
TalkMessageCtrl::startCamera(long)=0x8037AE00
TalkMessageCtrl::rootNodePre(bool)=0x8037AFB0
TalkMessageCtrl::rootNodePst(void)=0x8037B180
TalkMessageCtrl::isCurrentNodeContinue(void) const=0x8037B1E0
TalkMessageCtrl::rootNodeEve(void)=0x8037B240
TalkMessageCtrl::rootNodeSel(bool)=0x8037B3E0
TalkMessageCtrl::registerBranchFunc(const TalkMessageFuncBase&)=0x8037B450
TalkMessageCtrl::registerEventFunc(const TalkMessageFuncBase&)=0x8037B490
TalkMessageCtrl::registerAnimeFunc(const TalkMessageFuncBase&)=0x8037B4D0
TalkMessageCtrl::registerKillFunc(const TalkMessageFuncBase&)=0x8037B510
TalkMessageCtrl::readMessage(void)=0x8037B550
TalkMessageCtrl::isSelectYesNo(void) const=0x8037B5A0
TalkMessageCtrl::getBranchID(void) const=0x8037B630
TalkFunction::isShortTalk(const TalkMessageCtrl*)=0x8037B740
TalkFunction::isComposeTalk(const TalkMessageCtrl*)=0x8037B750
TalkFunction::isSelectTalk(const TalkMessageCtrl*)=0x8037B760
TalkFunction::isEventNode(const TalkMessageCtrl*)=0x8037B780
TalkFunction::onTalkStateNone(TalkMessageCtrl*)=0x8037B7A0
TalkFunction::onTalkStateEntry(TalkMessageCtrl*)=0x8037B7B0
TalkFunction::onTalkStateEnableStart(TalkMessageCtrl*)=0x8037B7C0
TalkFunction::onTalkStateTalking(TalkMessageCtrl*)=0x8037B7D0
TalkFunction::onTalkStateEnableEnd(TalkMessageCtrl*)=0x8037B7E0
TalkFunction::getMessageInfo(const TalkMessageCtrl*)=0x8037B7F0
TalkFunction::getMessage(const TalkMessageCtrl*)=0x8037B800
TalkMessageCtrl::__dt(void)=0x8037B810
TalkMessageInfo::__ct(void)=0x8037B870
TalkMessageInfo::isNormalTalk(void) const=0x8037B8A0
TalkMessageInfo::isShortTalk(void) const=0x8037B8B0
TalkMessageInfo::isEventTalk(void) const=0x8037B8D0
TalkMessageInfo::isEventTalk(void, _0) const=0x8037B8F0
TalkMessageInfo::isComposeTalk(void) const=0x8037B910
TalkMessageInfo::isBalloonCall(void) const=0x8037B930
TalkMessageInfo::isBalloonFix(void) const=0x8037B950
TalkMessageInfo::isBalloonSign(void) const=0x8037B970
TalkMessageInfo::isCameraNormal(void) const=0x8037B990
TalkMessageInfo::isCameraEvent(void) const=0x8037B9A0
TalkMessageHistory::entry(unsigned short)=0x8037BA00
TalkMessageHistory::search(unsigned short) const=0x8037BA20
TalkNodeCtrl::__ct(void)=0x8037BA60
TalkNodeCtrl::createFlowNode(TalkMessageCtrl*, const JMapInfoIter&, const char*, ActorCameraInfo*)=0x8037BAD0
TalkNodeCtrl::resetFlowNode(void)=0x8037BD30
TalkNodeCtrl::resetTempFlowNode(void)=0x8037BD50
TalkNodeCtrl::recordTempFlowNode(void)=0x8037BD70
TalkNodeCtrl::forwardFlowNode(void)=0x8037BD80
TalkNodeCtrl::isExistNextNode(void) const=0x8037BE00
TalkNodeCtrl::isNextNodeMessage(void) const=0x8037BE30
TalkNodeCtrl::isCurrentNodeEvent(void) const=0x8037BE70
TalkNodeCtrl::initNodeRecursive(TalkMessageCtrl*, const JMapInfoIter&, ActorCameraInfo*, RecursiveHelper*)=0x8037BEE0
TalkNodeCtrl::getNextNode(void) const=0x8037C150
TalkNodeCtrl::getNextNodeBranch(void) const=0x8037C1D0
TalkNodeCtrl::getCurrentNodeBranch(void) const=0x8037C210
TalkNodeCtrl::getCurrentNodeMessage(void) const=0x8037C230
TalkNodeCtrl::getCurrentNodeEvent(void) const=0x8037C250
TalkNodeCtrl::getNextNodeEvent(void) const=0x8037C270
TalkNodeCtrl::updateMessage(void)=0x8037C2B0
TalkNodeCtrl::readMessage(void)=0x8037C3D0
TalkNodeCtrl::forwardCurrentBranchNode(bool)=0x8037C450
TalkState::init(TalkMessageCtrl*, TalkBalloon*)=0x8037C500
TalkState::isLostMessage(const TalkMessageCtrl*) const=0x8037C540
TalkState::isSelfInterrupt(const TalkMessageCtrl*) const=0x8037C5A0
TalkStateShort::open(void)=0x8037C610
TalkStateShort::prep(const TalkMessageCtrl*)=0x8037C670
TalkStateShort::talk(const TalkMessageCtrl*)=0x8037C6A0
TalkStateShort::clos(void)=0x8037C6B0
TalkStateEvent::test(void)=0x8037C6D0
TalkStateEvent::open(void)=0x8037C6E0
TalkStateEvent::prep(const TalkMessageCtrl*)=0x8037C780
TalkStateEvent::talk(const TalkMessageCtrl*)=0x8037C7B0
TalkStateEvent::clos(void)=0x8037C970
TalkStateEvent::term(const TalkMessageCtrl*)=0x8037C9C0
TalkStateNormal::prep(const TalkMessageCtrl*)=0x8037C9F0
TalkStateNormal::test(void)=0x8037CB30
TalkStateNormal::clos(void)=0x8037CB90
TalkStateNormal::term(const TalkMessageCtrl*)=0x8037CBE0
TalkStateNormal::updateButton(void)=0x8037CC80
TalkStateHolder::__ct(void)=0x8037CE90
TalkState::__ct(void)=0x8037CFB0
TalkStateEvent::__ct(void)=0x8037CFD0
TalkStateHolder::getState(const TalkMessageCtrl*)=0x8037D030
TalkStateHolder::update(void)=0x8037D0C0
TalkStateHolder::pauseOff(void)=0x8037D0D0
TalkStateEvent::getPageCount(void) const=0x8037D0E0
TalkState::getPageCount(void) const=0x8037D0F0
TalkSupportPlayerWatcher::__ct(void)=0x8037D100
TalkSupportPlayerWatcher::update(void)=0x8037D110
TalkSupportPlayerWatcher::isEnableTalkPlayerStateNormal(void) const=0x8037D170
TalkSupportPlayerWatcher::isEnableTalkPlayerStateEvent(void) const=0x8037D200
TalkSupportPlayerWatcher::isEnableTalkPlayerSpeed(void) const=0x8037D2A0
@unnamed@TalkTextFormer_cpp@::getTextBoxPane(LayoutActor*, const char*)=0x8037D2E0
MR::initTagProcessorRecursive(LayoutActor*, const char*, long)=0x8037D350
MR::nextStepTagProcessorRecursive(LayoutActor*, const char*)=0x8037D4A0
MR::isEndStepTagProcessorRecursive(const LayoutActor*, const char*, bool)=0x8037D570
TalkTextFormer::__ct(LayoutActor*, const char*)=0x8037D690
TalkTextFormer::formMessage(const wchar_t*, long)=0x8037D6B0
TalkTextFormer::setArg(const CustomTagArg&, long)=0x8037D710
TalkTextFormer::nextPage(void)=0x8037D790
TalkTextFormer::hasNextPage(void) const=0x8037D7F0
TalkTextFormer::updateTalking(void)=0x8037D830
TalkTextFormer::isTextAppearedAll(void) const=0x8037D840
@unnamed@TurnJointCtrl_cpp@::makeMtxRotVecDegree(A4_fRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>f)=0x8037D870
TurnJointCtrl::__ct(LiveActor*)=0x8037D950
TurnJointCtrl::init(float, float, float)=0x8037DA50
TurnJointCtrl::addFace(const char*, float, TurnJointCtrl::AXIS, TurnJointCtrl::AXIS, TurnJointCtrl::AXIS)=0x8037DA60
MR::createJointController<TurnJointCtrl>(TurnJointCtrl*, const LiveActor*, const char*, M13TurnJointCtrlFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_bM13TurnJointCtrlFPCvPvPQ29JGeometry64TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>RC19JointControllerInfo_b_P15JointController)=0x8037DB10
TurnJointCtrl::addWaist(const char*, float, TurnJointCtrl::AXIS, TurnJointCtrl::AXIS, TurnJointCtrl::AXIS)=0x8037DBF0
TurnJointCtrl::startCtrl(long)=0x8037DCA0
TurnJointCtrl::endCtrl(long)=0x8037DCE0
TurnJointCtrl::setStarePos(const JGeometry::TVec3<float>&)=0x8037DD20
TurnJointCtrl::update(void)=0x8037DE00
TurnJointCtrl::setCallBackFunction(void)=0x8037DE10
TurnJointCtrl::updateJointMtxCallBackFace(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8037DE90
TurnJointCtrl::updateJointMtxCallBackWaist(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8037DEA0
TurnJointCtrl::getMtxDir(JGeometry::TVec3<float>*, const JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, TurnJointCtrl::AXIS)=0x8037DEB0
TurnJointCtrl::updateJointMtxCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const TurnJointCtrl::Ctrl&)=0x8037DF40
JointControlDelegator<TurnJointCtrl>::__dt(void)=0x8037E1F0
JointControlDelegator<TurnJointCtrl>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8037E230
JointControlDelegator<TurnJointCtrl>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x8037E2A0
DrawAdaptor::__ct(const MR::FunctorBase&, int)=0x8037E310
DrawAdaptor::draw(void) const=0x8037E3A0
DrawAdaptor::__dt(void)=0x8037E3C0
FireMarioBall::__ct(const char*)=0x8037E420
FireMarioBall::init(const JMapInfoIter&)=0x8037E470
FireMarioBall::appear(void)=0x8037E570
FireMarioBall::kill(void)=0x8037E5C0
FireMarioBall::appearAndThrow(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8037E620
FireMarioBall::attackSensor(HitSensor*, HitSensor*)=0x8037E6D0
FireMarioBall::attackFire(HitSensor*)=0x8037E720
FireMarioBall::initSensor(void)=0x8037E7B0
FireMarioBall::isBindedAny(void) const=0x8037E810
FireMarioBall::tryToKill(void)=0x8037E890
FireMarioBall::exeThrow(void)=0x8037E9B0
FireMarioBall::__dt(void)=0x8037EBC0
short::(nit_\FireMarioBall_cpp)=0x8037EC20
NrvFireMarioBall::FireMarioBallNrvThrow::__ct(void)=0x8037EC30
NrvFireMarioBall::FireMarioBallNrvThrow::execute(Spine*) const=0x8037EC40
GhostPacket::__ct(void*, unsigned long)=0x8037EC50
GhostPacket::read(unsigned char*, unsigned long)=0x8037EC60
GroupChecker::__ct(const char*, unsigned long)=0x80380A60
GroupChecker::initAfterPlacement(void)=0x80380AD0
GroupChecker::add(const NameObj*)=0x80380AE0
GroupCheckManager::__ct(const char*)=0x80380B30
GroupCheckManager::add(const NameObj*, long)=0x80380BC0
GroupCheckManager::isExist(const NameObj*, long)=0x80380BD0
GroupChecker::__dt(void)=0x80380BF0
GroupCheckManager::__dt(void)=0x80380C50
InfernoMarioManager::__ct(const char*)=0x80380CB0
InfernoMarioManager::init(const JMapInfoIter&)=0x80380D00
InfernoMarioManager::__dt(void)=0x803810B0
GhostPlayer::playSound(LiveActor*, const char*)=0x80381140
InfernoMario::__ct(const char*)=0x80381270
InfernoMario::init(const JMapInfoIter&)=0x80381340
MR::Functor<InfernoMario>(InfernoMario*, M12InfernoMarioFPCvPv_v_Q22MR51FunctorV0M<InfernoMario*,M12InfernoMarioFPCvPv_v>)=0x80381560
InfernoMario::draw(void) const=0x803815A0
InfernoMario::makeActorAppeared(void)=0x803815E0
InfernoMario::kill(void)=0x80381620
InfernoMario::control(void)=0x80381930
InfernoMario::calcAndSetBaseMtx(void)=0x80381940
InfernoMario::attackSensor(HitSensor*, HitSensor*)=0x80381950
InfernoMario::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x803819C0
InfernoMario::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80381A40
InfernoMario::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80381AC0
MR::FunctorV0M<InfernoMario*,M12InfernoMarioFPCvPv_v>::__cl(void) const=0x80381E70
MR::FunctorV0M<InfernoMario*,M12InfernoMarioFPCvPv_v>::clone(JKRHeap*) const=0x80381EA0
InfernoMario::__dt(void)=0x80381F10
short::(nit_\InfernoMario_cpp)=0x80381F70
InfernoMarioGenerator::__ct(const char*)=0x80382060
InfernoMarioGenerator::makeActorAppeared(void)=0x803820D0
InfernoMarioGenerator::makeActorDead(void)=0x80382120
InfernoMarioGenerator::init(const JMapInfoIter&)=0x80382160
InfernoMarioGenerator::control(void)=0x80382450
MR::FunctorV0M<InfernoMarioGenerator*,M21InfernoMarioGeneratorFPCvPv_v>::__cl(void) const=0x80382740
MR::FunctorV0M<InfernoMarioGenerator*,M21InfernoMarioGeneratorFPCvPv_v>::clone(JKRHeap*) const=0x80382770
InfernoMarioGenerator::__dt(void)=0x803827E0
InfernoMarioGroup::__dt(void)=0x80382840
short::(nit_\InfernoMarioGenerator_cpp)=0x803828A0
ManekuriModell::__ct(const char*, A4_f)=0x803830A0
ManekuriModell::calcAndSetBaseMtx(void)=0x80383110
ManekuriModell::__dt(void)=0x80384110
short::(nit_\ManekuriModell_cpp)=0x80384170
Manekuri::__ct(InfernoMario*)=0x803842D0
Manekuri::__dt(void)=0x80384520
J3DMtxBuffer::swapNrmMtx(void)=0x803845B0
J3DModel::getDrawMtxPtr(void)=0x803845E0
J3DModelX::setDrawView(unsigned long)=0x80384600
J3DMtxBuffer2::rotationMtx(A4_f)=0x80384620
J3DModelX::setDrawViewBuffer(A4_f)=0x80384640
J3DModelX::copyAnmMtxBuffer(const J3DModelX*)=0x80384660
J3DModelX::viewCalc3(unsigned long, A4_f)=0x80384680
J3DModelX::viewCalcRef(unsigned long, J3DModel*)=0x80384760
J3DModelX::viewCalcRefPos(unsigned long, J3DModel*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803847F0
J3DMtxBuffer2::calcNrmMtx2(void)=0x80384890
J3DMtxBuffer::getDrawMtx(int)=0x80384930
J3DMtxBuffer2::calcDrawMtx2(unsigned long, const Vec&, A3_A4_CfP12J3DMtxBuffer)=0x80384950
J3DMtxBuffer2::calcDrawMtx3(unsigned long, const Vec&, A3_A4_CfP12J3DMtxBufferRCQ29JGeometry8TVec3<float>RCQ29JGeometry8TVec3<float>)=0x80384A30
J3DModelX::directDraw(J3DModel*)=0x80384C40
J3DModelX::drawIn(J3DMaterial*, bool, A4_fP8J3DModel)=0x80384D90
J3DModelX::simpleDrawSetup(J3DMaterial*)=0x80384FF0
J3DModelX::simpleDrawShape(J3DMaterial*)=0x803850B0
J3DModelX::storeDisplayList(_GDLObj*, unsigned long)=0x803850D0
J3DModelX::__ct(J3DModelData*, unsigned long, unsigned long)=0x80385170
J3DModelX::shapePacketDrawFast(J3DShapePacketX*) const=0x80385EA0
J3DModelX::shapeDrawFast(J3DShapeX*) const=0x80385F30
J3DModelX::__dt(void)=0x80386180
JetTurtleShadow::__ct(const char*)=0x803861E0
JetTurtleShadow::init(const JMapInfoIter&)=0x80386220
JetTurtleShadow::calcType0(A4_f)=0x80386270
JetTurtleShadow::drawType0(void) const=0x80386300
JetTurtleShadow::__dt(void)=0x80386350
MarineSnow::__ct(void)=0x80386500
MarineSnow::view(void)=0x80386650
MarineSnow::clear(void)=0x80386670
MarineSnow::draw(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float) const=0x80386690
Mario::__ct(MarioActor*)=0x80386D60
Mario::update(void)=0x80388930
Mario::postureCtrl(A4_f)=0x80389E40
Mario::setFrontVecKeepUp(const JGeometry::TVec3<float>&, float)=0x8038B160
MarioState::draw3D(void) const=0x8038B9E0
Mario::inputStick(void)=0x8038BFA0
Mario::getShadowNorm(void) const=0x8038C930
Mario::getGravityVec(void) const=0x8038C940
Mario::getAirGravityVec(void) const=0x8038CBC0
Mario::touchWater(void)=0x8038CC70
Mario::checkBaseTransPoint(void)=0x8038E0A0
Mario::checkHeadPoint(void)=0x8038E3A0
Mario::createAtField(bool, float)=0x8038E900
MarioState::hitWall(const JGeometry::TVec3<float>&, HitSensor*)=0x8038EE80
MarioState::hitPoly(unsigned char, const JGeometry::TVec3<float>&, HitSensor*)=0x8038EE90
Mario::updateBinderInfo(void)=0x8038F600
Mario::calcDistToCeil(bool)=0x8038FFC0
Mario::checkGround(void)=0x80391540
Mario::getWallNorm(void) const=0x80392A00
Mario::getSideWallNorm(void) const=0x80392AA0
Mario::getFrontWallNorm(void) const=0x80392AF0
Mario::getBackWallNorm(void) const=0x80392B40
Mario::getWallPos(void) const=0x80392B90
Mario::getWallPolygon(void) const=0x80392BD0
Mario::getGroundPolygon(void) const=0x80392C50
Mario::updateCubeCode(void)=0x80392C60
Mario::func_803930B0(void)=0x803930B0
Mario::updateFloorCode(void)=0x80393250
Mario::isDamaging(void) const=0x80393B20
Mario::checkEnforceMove(void)=0x80395470
Mario::checkEnforceMoveInner(void)=0x803954B0
Mario::getMoveBaseMtx(void) const=0x80395B90
Mario::moveRelativePosition(unsigned long)=0x80395BE0
Mario::moveRelativePositionWall(void)=0x80395EB0
Mario::powerAreaMove(void)=0x80396990
Mario::powerRailMove(void)=0x80396A80
Mario::tryStartFoo(void)=0x80397390
Mario::isStateHanging(void) const=0x80397960
Mario::isStateBury(void) const=0x80397990
Mario::initMember(void)=0x80398EC0
Mario::isRising(void) const=0x80399170
Mario::tryJump(void)=0x80399250
Mario::startTornadoCentering(HitSensor*)=0x8039B9A0
Mario::trySpinJump(unsigned char)=0x8039BB20
Mario::tryForceJumpDelay(const JGeometry::TVec3<float>&)=0x8039BE10
Mario::tryFreeJumpDelay(const JGeometry::TVec3<float>&)=0x8039BE30
Mario::stopJump(void)=0x8039F3B0
Mario::checkVerticalPress(bool)=0x803A58B0
Mario::doRecovery(void)=0x803A6E30
Mario::lockGroundCheck(void*, bool)=0x803A8A20
Mario::playSoundJ(const char*, long)=0x803A9390
Mario::stopSoundJ(const char*, unsigned long)=0x803A9540
Mario::updateOnimasu(void)=0x803A98A0
Mario::isDossun(const Triangle*) const=0x803AA1E0
Mario::isNoWalkFallOnDossun(void) const=0x803AA240
Mario::isUseAnotherMovingPolygon(void) const=0x803AA2D0
Mario::closeStatus(MarioState*)=0x803AAB00
Mario::getCurrentStatus(void) const=0x803AABB0
Mario::isStatusActive(unsigned long) const=0x803AABD0
Mario::isSwimming(void) const=0x803AB050
Mario::endTalk(void)=0x803AB5F0
Mario::startTeresaDisappear(void)=0x803AC5F0
Mario::getHitWallNorm(JGeometry::TVec3<float>*)=0x803AC6E0
Mario::resetSleepTimer(void)=0x803AC8C0
Mario::stopWalk(void)=0x803AC910
Mario::cancelSquatMode(void)=0x803AC9E0
Mario::getTargetWalkSpeed(void) const=0x803ACB20
Mario::updateWalkSpeed(void)=0x803AE800
Mario::isInhibitWall(void) const=0x803B0110
Mario::checkWallCode(const char*, bool) const=0x803B0200
Mario::doPointWarp(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x803B0BA0
TriangleFilterDelegator<Mario>::isInvalidTriangle(const Triangle*) const=0x803B48B0
MarioAccess::getTakePos(JGeometry::TVec3<float>*)=0x803B48E0
MarioAccess::isOnActor(const LiveActor*)=0x803B4950
MarioAccess::isOnGround(unsigned long)=0x803B4A70
MarioAccess::isHipDropFalling(void)=0x803B4AE0
MarioAccess::isHipDropLand(void)=0x803B4B70
MarioAccess::isSwingAction(void)=0x803B4BA0
MarioAccess::isInRush(void)=0x803B4C10
MarioAccess::isRecovering(void)=0x803B4C40
MarioAccess::isSquat(void)=0x803B4C70
MarioAccess::isParalyzing(void)=0x803B4CD0
MarioAccess::isTeresaDisappear(void)=0x803B4D00
MarioAccess::isFlying(void)=0x803B4D50
MarioAccess::isNeedBrakingCamera(void)=0x803B4DB0
MarioAccess::isSwimming(void)=0x803B4DE0
MarioAccess::getGroundingPolygon(unsigned long)=0x803B4EA0
MarioAccess::getShadowingPolygon(void)=0x803B4F60
MarioAccess::forceKill(unsigned long, unsigned long)=0x803B4FE0
MarioAccess::isDisableFpView(void)=0x803B5060
MarioAccess::isFpViewChangingFailure(void)=0x803B5090
MarioAccess::stopFpView(void)=0x803B50C0
MarioAccess::isHanging(void)=0x803B5120
MarioAccess::isBury(void)=0x803B5150
MarioAccess::forceFly(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, long)=0x803B51E0
MarioAccess::setJumpVec(const JGeometry::TVec3<float>&)=0x803B5240
MarioAccess::forceJump(const JGeometry::TVec3<float>&, unsigned long)=0x803B5280
MarioAccess::freeJump(const JGeometry::TVec3<float>&, unsigned long)=0x803B52F0
MarioAccess::tornadoJump(void)=0x803B5360
MarioAccess::tornadoJumpMini(void)=0x803B53E0
MarioAccess::becomeNormalJumpStatus(void)=0x803B5530
MarioAccess::setFrontVecKeepUp(const JGeometry::TVec3<float>&, unsigned short)=0x803B5560
MarioAccess::setFrontVecTarget(const JGeometry::TVec3<float>&, unsigned short)=0x803B5620
MarioAccess::getThrowVec(JGeometry::TVec3<float>*)=0x803B5670
MarioAccess::setTrans(const JGeometry::TVec3<float>&, unsigned short)=0x803B5880
MarioAccess::endRush(const RushEndInfo*)=0x803B5930
MarioAccess::incLife(unsigned long)=0x803B5A30
MarioAccess::isConfrontDeath(void)=0x803B5B10
MarioAccess::incOxygen(unsigned long)=0x803B5C00
MarioAccess::addStarPiece(void)=0x803B5C90
MarioAccess::getStarPieceDirect(void)=0x803B5D30
MarioAccess::scatterStarPiece(unsigned long)=0x803B5D40
MarioAccess::getJointMtx(const char*)=0x803B5E00
MarioAccess::concatWithJointMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const char*)=0x803B5E40
MarioAccess::getVelocity(void)=0x803B5E90
MarioAccess::getLastMove(void)=0x803B5EF0
MarioAccess::hide(bool)=0x803B5F30
MarioAccess::show(void)=0x803B5FB0
MarioAccess::getTakingSensor(void)=0x803B60C0
MarioAccess::dropTakingActor(void)=0x803B6130
MarioAccess::killTakingActor(void)=0x803B6160
MarioAccess::getAnimationFrameMax(void)=0x803B6190
MarioAccess::changeAnimationJ(const char*)=0x803B61C0
MarioAccess::changeAnimationE(const char*, const char*)=0x803B6210
MarioAccess::changeAnimationE(const char*, const BckCtrlData&)=0x803B6270
MarioAccess::keepCurrentAnimation(void)=0x803B62D0
MarioAccess::progressAnimation(void)=0x803B6320
MarioAccess::getCurrentBckName(void)=0x803B6380
MarioAccess::setAnimationBlendWeight(const float*)=0x803B63B0
MarioAccess::setSpot(float, unsigned long)=0x803B63F0
MarioAccess::startDownWipe(void)=0x803B6400
MarioAccess::offControl(void)=0x803B6470
MarioAccess::isOffControl(void)=0x803B64A0
MarioAccess::onControl(bool)=0x803B64D0
MarioAccess::setStateWait(void)=0x803B6520
MarioAccess::startTalk(const LiveActor*)=0x803B6560
MarioAccess::endTalk(void)=0x803B65B0
MarioAccess::readyRemoteDemo(void)=0x803B65E0
MarioAccess::setBaseMtx(A4_f)=0x803B6980
MarioAccess::getBaseMtx(void)=0x803B69C0
MarioAccess::calcSpinPullVelocity(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x803B6A40
MarioAccess::tryCoinPull(void)=0x803B6A90
MarioAccess::addVelocity(const JGeometry::TVec3<float>&)=0x803B6B10
MarioAccess::addVelocityFromArea(const JGeometry::TVec3<float>&)=0x803B6BE0
MarioAccess::isInWaterMode(void)=0x803B6C80
MarioAccess::isOnWaterSurface(void)=0x803B6CE0
MarioAccess::calcWorldPadDir(JGeometry::TVec3<float>*, float, float)=0x803B6D60
MarioAccess::changeItemStatus(long)=0x803B6DC0
MarioAccess::changePlayerModeYoshi(void)=0x803B6FB0
MarioAccess::changePlayerModeCloud(void)=0x803B6FF0
MarioAccess::changePlayerModeRock(void)=0x803B7030
MarioAccess::getPlayerActor(void)=0x803B7310
MarioActor::__ct(const char*)=0x803B7470
MarioActor::__dt(void)=0x803B77A0
MarioActor::init(const JMapInfoIter&)=0x803B7820
MarioActor::initAfterPlacement(void)=0x803B7BB0
MarioActor::draw(void) const=0x803B7CD0
MarioActor::setRasterScroll(long, long, long)=0x803B84C0
MarioActor::getGravityVec(void) const=0x803B8510
MarioActor::getGroundPos(JGeometry::TVec3<float>*) const=0x803B8530
MarioActor::getUpVec(JGeometry::TVec3<float>*) const=0x803B8560
MarioActor::getSideVec(JGeometry::TVec3<float>*) const=0x803B8570
FixedPosition::copyRotate(JGeometry::TVec3<float>*) const=0x803B8680
MarioActor::isJumping(void) const=0x803B86F0
MarioActor::isJumpRising(void) const=0x803B87C0
MarioActor::isFastRise(void) const=0x803B89F0
MarioActor::isDamaging(void) const=0x803B8A50
MarioActor::isStaggering(void) const=0x803B8A90
MarioActor::isSleeping(void) const=0x803B8AC0
MarioActor::isRefuseTalk(void) const=0x803B8BB0
MarioActor::getSpecialMode(void) const=0x803B8D70
MarioActor::getGravityLevel(void) const=0x803B8DF0
MarioActor::isCameraStateOn(SPECIAL_STATUS_FOR_CAMERA) const=0x803B9030
MarioActor::decLifeLarge(void)=0x803B9250
MarioActor::decLifeMiddle(void)=0x803B9260
MarioActor::setPlayerMode(unsigned short, bool, bool)=0x803B93F0
MarioActor::setUpperRotateY(float)=0x803B9B50
MarioActor::updateGravityVec(bool, bool)=0x803B9B60
MarioActor::damageDropThrowMemoSensor(void)=0x803B9F80
MarioActor::rushDropThrowMemoSensor(void)=0x803BA000
MarioActor::tryTornadoPull(HitSensor*)=0x803BA230
MarioActor::resetCondition(void)=0x803BA5C0
MarioActor::sendPunch(HitSensor*, bool)=0x803BA950
MarioActor::reactionPunch(HitSensor*)=0x803BACC0
MarioActor::isEnableNerveChange(void) const=0x803BAE60
MarioActor::isEnableMoveMario(void) const=0x803BAEB0
MarioActor::forceGameOver(void)=0x803BAF20
MarioActor::forceGameOverAbyss(void)=0x803BAF60
MarioActor::forceGameOverNonStop(void)=0x803BAFA0
MarioActor::forceKill(unsigned long)=0x803BB060
MarioActor::getNearestJumpTarget(void) const=0x803BB190
MarioActor::getHighPriorityTarget(void) const=0x803BB330
MarioActor::showBeeFur(void)=0x803BB8A0
MarioActor::getCarrySensor(void) const=0x803BB960
MarioActor::initBlur(void)=0x803BBAE0
MarioActor::doFreezeAttack(HitSensor*)=0x803BBF70
MarioActor::changeGameOverAnimation(void)=0x803BC0A0
MarioActor::clearNullAnimation(Sc)=0x803BC4A0
MarioActor::playSound(const char*, long)=0x803BCD70
MarioActor::playEffect(const char*)=0x803BCD80
MarioActor::getFloorMaterialIndex(unsigned long) const=0x803BCE70
MarioActor::playEffectTrans(const char*, const JGeometry::TVec3<float>&)=0x803BD0C0
MultiEmitter::setGlobalScale(float, long)=0x803BD100
MarioActor::playEffectRT(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803BD140
MarioActor::playEffectRTZ(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803BD210
MarioActor::playEffectRTW(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803BD2E0
MarioActor::playEffectSRT(const char*, float, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803BD390
MarioActor::stopEffect(const char*)=0x803BD480
MarioActor::stopEffectForce(const char*)=0x803BD530
MarioActor::getRealMtx(A4_fPCc) const=0x803BD9B0
MarioActor::getGlobalJointMtx(const char*)=0x803BDAB0
MarioActor::setBlendMtxTimer(unsigned short)=0x803BDB10
MarioActor::getStickValue(float*, float*)=0x803BDC00
MarioActor::checkButtonType(unsigned short, bool) const=0x803BDC90
MarioActor::isRequestSpin(void) const=0x803BE040
MarioActor::isRequestJump(void) const=0x803BE070
MarioActor::getResourceTable(void) const=0x803BE630
MarioActor::changeAnimationNonStop(const char*)=0x803BED20
MarioActor::changeAnimationUpper(const char*)=0x803BED30
MarioActor::updateRotationInfo(void)=0x803BEDD0
MarioActor::initDrawAndModel(void)=0x803BFEC0
MR::Functor<MarioActor>(const MarioActor*, M10MarioActorFPCvPCv_v_Q22MR49FunctorV0M<const MarioActor*,M10MarioActorFPCvPCv_v>)=0x803C02E0
J3DModelX::setDynamicDL(unsigned char*, unsigned long)=0x803C06A0
DLchanger::swap(void)=0x803C1230
MarioActor::updateSimpleAlphaDL(unsigned char)=0x803C1260
MarioActor::createRainbowDL(void)=0x803C1330
MarioActor::updateReflectAlphaDL(unsigned char)=0x803C14C0
MarioActor::movement(void)=0x803C1800
MarioActor::control(void)=0x803C1BE0
MarioActor::control2(void)=0x803C1FB0
MarioActor::controlMain(void)=0x803C20C0
MarioActor::updateBehavior(void)=0x803C21B0
MarioActor::updateBindRatio(void)=0x803C2410
MarioActor::doRush(void)=0x803C27D0
MarioActor::updateSwingTimer(void)=0x803C2BD0
MarioActor::updateSwingAction(void)=0x803C2D10
MarioActor::setPunchHitTimer(unsigned char)=0x803C3240
MarioActor::checkClapCatchStart(void)=0x803C34B0
MarioActor::doPressing(void)=0x803C35A0
MarioActor::careMovingObject(void)=0x803C3760
MarioActor::doStun(void)=0x803C37F0
MarioActor::calcAnim(void)=0x803C4150
MarioActor::calcAndSetBaseMtx(void)=0x803C4C80
MarioActor::updateForCamera(void)=0x803C6670
MarioActor::bodyClap(void)=0x803C67E0
MarioActor::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x803C68B0
MarioActor::receiveMsgPush(HitSensor*, HitSensor*)=0x803C7050
MarioActor::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x803C74E0
MarioState::passRing(const HitSensor*)=0x803C7E30
MarioActor::initFireMario(void)=0x803C8200
MarioActor::initBeeMario(void)=0x803C8250
MarioActor::initHopperMario(void)=0x803C83D0
MarioActor::initIceMario(void)=0x803C84B0
MarioActor::initInvincibleMario(void)=0x803C85F0
MarioActor::initTeresaMario(void)=0x803C86E0
MarioActor::initTornadoMario(void)=0x803C8720
MarioActor::initBoneMario(void)=0x803C87B0
MarioActor::initYoshi(void)=0x803C8860
MarioActor::initCloudMario(void)=0x803C88D0
MarioActor::initRockMario(void)=0x803C89D0
MarioActor::calcViewAndEntry(void)=0x803C8B20
J3DModelX::swapDrawBuffer(unsigned long)=0x803C8CF0
MarioActor::initFace(void)=0x803C8D10
MarioActor::updateFace(void)=0x803C8F30
MarioActor::initHand(void)=0x803C9A30
MarioActor::updateHand(void)=0x803C9D70
MarioActor::updateActionTrigger(void)=0x803CDEE0
MarioActor::updateControllerSwing(void)=0x803CDF80
MarioActor::updateControllerSwingLeft(void)=0x803CE090
MarioActor::update2D(void)=0x803CE1E0
MarioActor::initParts(void)=0x803CE330
MarioActor::updateBeeWingAnimation(void)=0x803CE4D0
XjointTransform::setLocalScale(float)=0x803CE690
MarioActor::updateTornado(void)=0x803CE6A0
MarioActor::updateTakingPosition(void)=0x803CE7A0
MarioActor::updateThrowVector(void)=0x803CEF60
MarioActor::initFireBall(void)=0x803CF260
MarioActor::updateFairyStar(void)=0x803CF6B0
MarioActor::trySpinPunch(void)=0x803CF950
MarioActor::beginRush(void)=0x803CFEE0
MarioActor::tryStandardRush(void)=0x803D0A10
MarioActor::tryRushInRush(void)=0x803D1280
MarioActor::updateHitSensor(HitSensor*)=0x803D1690
MarioActor::attackSensor(HitSensor*, HitSensor*)=0x803D1B90
MarioActor::resetSensorCount(void)=0x803D1D80
MarioActor::initShadow(void)=0x803D25F0
MarioSwim::getWaterEdgeDist(void) const=0x803D2970
MarioActor::calcViewReflectionModel(void)=0x803D29B0
J3DModel::getDrawMtx(int)=0x803D3A10
MarioActor::initScreenBox(void)=0x803D3B80
MarioState::getBlurOffset(void) const=0x803D4AD0
MarioActor::updateRandomTexture(float)=0x803D4AE0
MarioActor::tryThrow(void)=0x803D5730
MarioActor::tryCoinPull(void)=0x803D5CD0
MarioActor::tryCoinPullInRush(void)=0x803D5D50
MarioActor::tryReleaseBombTeresa(void)=0x803D62D0
MarioActor::playCommonEffect(const char*)=0x803D6B50
MarioActor::isCommonEffect(const char*) const=0x803D78B0
MarioActor::isMaterialEffect(const char*) const=0x803D78E0
MarioActor::updateEffect(void)=0x803D79A0
MarioActor::stopSpinTicoEffect(bool)=0x803D7E10
MarioActor::initSearchLight(void)=0x803D7E40
MarioActor::initThrowing(void)=0x803D7EE0
MarioActor::updateSearchLight(void)=0x803D7F80
MarioActor::updateThrowing(void)=0x803D8030
TriangleFilterDelegator<MarioActor>::isInvalidTriangle(const Triangle*) const=0x803D97A0
MR::FunctorV0M<MarioActor*,M10MarioActorFPCvPv_v>::__cl(void) const=0x803D97D0
MR::FunctorV0M<MarioActor*,M10MarioActorFPCvPv_v>::clone(JKRHeap*) const=0x803D9800
short::(nit_\MarioActor_cpp)=0x803D9870
CloudMarioHat::__ct(const char*)=0x803D9ED0
CloudMarioHat::init(const JMapInfoIter&)=0x803D9F20
CloudMarioHat::initAfterPlacement(void)=0x803D9FB0
CloudMarioHat::calcAnim(void)=0x803DA060
CloudMarioHat::appear(void)=0x803DA070
CloudMarioHat::control(void)=0x803DA160
CloudMarioHat::calcAndSetBaseMtx(void)=0x803DA180
JointControlDelegator<CloudMarioHat>::__dt(void)=0x803DA890
JointControlDelegator<CloudMarioHat>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x803DA8D0
JointControlDelegator<CloudMarioHat>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x803DA940
CloudMarioHat::__dt(void)=0x803DA9B0
short::(nit_\CloudMarioHat_cpp)=0x803DAA10
MarioActor::selectAction(const char*) const=0x803DB330
MarioAnimator::__ct(MarioActor*)=0x803DC9D0
MarioAnimator::change(const char*)=0x803DCC90
MarioAnimator::changeUpper(const char*)=0x803DCDB0
MarioAnimator::stopUpper(const char*)=0x803DCE20
MarioAnimator::changeDefault(const char*)=0x803DCF00
MarioAnimator::isDefaultAnimationRun(const char*) const=0x803DD010
MarioAnimator::setSpeed(float)=0x803DD3F0
MarioAnimator::addRumblePower(float, unsigned long)=0x803DD690
MarioAnimator::setUpperRotateY(float)=0x803DD6B0
XanimeCore::getJointTransform(unsigned long)=0x803DD720
MarioAnimator::clearAllJointTransform(void)=0x803DD740
MarioAnimator::switchMirrorMode(void)=0x803DD8F0
MarioAnimator::isMirrorAnimation(void)=0x803DDB50
MarioAnimator::updateTakingAnimation(const HitSensor*)=0x803DDFC0
MarioAnimator::changeThrowAnimation(const HitSensor*)=0x803DE1B0
MarioAnimator::waterToGround(void)=0x803DE2B0
MarioActor::getLookTargetSensor(void) const=0x803DE820
MarioActor::getJointCtrl(const char*) const=0x803DED00
MarioBlown::__ct(MarioActor*)=0x803E1940
MarioBlown::start(void)=0x803E19B0
Mario::setJumpVec(const JGeometry::TVec3<float>&)=0x803E1B10
MarioBlown::update(void)=0x803E1B50
MarioBlown::close(void)=0x803E1C20
MarioState::keep(void)=0x803E21D0
MarioState::notice(void)=0x803E21E0
MarioState::init(void)=0x803E21F0
MarioBump::__ct(MarioActor*)=0x803E2200
MarioBump::start(void)=0x803E2260
MarioBump::update(void)=0x803E2330
MarioBump::close(void)=0x803E2400
MarioClimb::__ct(MarioActor*)=0x803E2410
MarioClimb::start(void)=0x803E2460
MarioClimb::update(void)=0x803E24D0
MarioClimb::close(void)=0x803E2580
MarioDamage::__ct(MarioActor*)=0x803E4290
MarioDamage::start(void)=0x803E4340
MarioDamage::setVec(const JGeometry::TVec3<float>&)=0x803E46A0
MarioDamage::setVecSize(float, float)=0x803E4700
MarioDamage::stopHead(const JGeometry::TVec3<float>&)=0x803E4770
MarioDamage::updateHorrorDamage(void)=0x803E4DA0
MarioDamage::update(void)=0x803E4EA0
MarioDamage::close(void)=0x803E4F90
MarioDamage::notice(void)=0x803E5000
MarioFireDamage::__ct(MarioActor*)=0x803E5060
MarioFireDamage::decAfterTimer(void)=0x803E50B0
MarioAbyssDamage::__ct(MarioActor*)=0x803E5120
MarioAbyssDamage::start(void)=0x803E5180
MarioAbyssDamage::update(void)=0x803E51C0
MarioAbyssDamage::close(void)=0x803E5260
MarioFireRun::__ct(MarioActor*)=0x803E5270
MarioFireRun::start(void)=0x803E52D0
MarioFireRun::move(void)=0x803E5380
MarioFireRun::update(void)=0x803E5460
MarioFireRun::close(void)=0x803E5A20
MarioFireRun::notice(void)=0x803E5B00
MarioFireDance::__ct(MarioActor*)=0x803E5B10
MarioFireDance::start(void)=0x803E5B90
MarioFireDance::impact(void)=0x803E5D60
MarioFireDance::impactEffect(void)=0x803E5E60
MarioFireDance::update(void)=0x803E6040
MarioFireDance::close(void)=0x803E6420
MarioDarkDamage::__ct(MarioActor*)=0x803E6480
MarioDarkDamage::start(void)=0x803E64D0
MarioDarkDamage::update(void)=0x803E64F0
MarioState::close(void)=0x803E65C0
MarioDarkDamage::notice(void)=0x803E65D0
MarioAbyssDamage::notice(void)=0x803E65E0
MarioState::update(void)=0x803E65F0
MarioState::start(void)=0x803E6600
MarioCrush::__ct(MarioActor*)=0x803E6610
MarioCrush::start(void)=0x803E6660
MarioCrush::update(void)=0x803E6730
MarioCrush::close(void)=0x803E6850
MarioFreeze::__ct(MarioActor*)=0x803E68D0
MarioFreeze::start(void)=0x803E6930
MarioFreeze::update(void)=0x803E6A00
MarioFreeze::close(void)=0x803E6D80
MarioFreeze::notice(void)=0x803E6DE0
HorrorDamageExecutor::__ct(MarioDamage*)=0x803E6E50
HorrorDamageExecutor::startBreak(void)=0x803E6EC0
HorrorDamageExecutor::isBreakEnd(void) const=0x803E6ED0
HorrorDamageExecutor::exeBoneBreakStart(void)=0x803E6EE0
HorrorDamageExecutor::exeBoneBreakWait(void)=0x803E6F60
HorrorDamageExecutor::exeBoneBreakEnd(void)=0x803E6FF0
HorrorDamageExecutor::__dt(void)=0x803E7040
short::(nit_\HorrorDamageExecutor_cpp)=0x803E70A0
NrvHorrorDamageExecutor::HorrorDamageExecutorNrvBoneBreakStart::__ct(void)=0x803E70E0
NrvHorrorDamageExecutor::HorrorDamageExecutorNrvBoneBreakWait::__ct(void)=0x803E70F0
NrvHorrorDamageExecutor::HorrorDamageExecutorNrvBoneBreakEnd::__ct(void)=0x803E7100
NrvHorrorDamageExecutor::HorrorDamageExecutorNrvBoneBreakEnd::execute(Spine*) const=0x803E7110
NrvHorrorDamageExecutor::HorrorDamageExecutorNrvBoneBreakWait::execute(Spine*) const=0x803E7120
NrvHorrorDamageExecutor::HorrorDamageExecutorNrvBoneBreakStart::execute(Spine*) const=0x803E7130
MarioParalyze::__ct(MarioActor*)=0x803E7140
MarioParalyze::start(void)=0x803E71A0
MarioParalyze::update(void)=0x803E7290
MarioParalyze::close(void)=0x803E73E0
MarioStun::__ct(MarioActor*)=0x803E7510
MarioStun::start(void)=0x803E7560
MarioStun::update(void)=0x803E75D0
MarioStun::close(void)=0x803E76F0
MarioAllModel::__ct(MarioActor*)=0x803E7720
MarioAllModel::registerModel(long, LiveActor*, bool, bool)=0x803E7760
MarioAllModel::getJ3DModel(void) const=0x803E7B90
MarioEffect::execute(JPABaseEmitter*)=0x803E7C80
MarioEffect::addRequest(const char*, A4_f)=0x803E7CC0
MarioEffect::updateFollowMtx(MovingFollowMtx*)=0x803E7E10
MarioEffect::__ct(MarioActor*)=0x803E7F70
MarioEffect::playSwingEffect(void)=0x803E8050
MarioEffect::doCubeEffect(void)=0x803E8110
MarioEffect::__dt(void)=0x803E82A0
MarioFaint::__ct(MarioActor*)=0x803E8320
MarioFaint::start(void)=0x803E8390
MarioFaint::setVec(const JGeometry::TVec3<float>&)=0x803E8590
MarioFaint::update(void)=0x803E8670
MarioFaint::close(void)=0x803E87D0
MarioFlip::__ct(MarioActor*)=0x803E8850
MarioFlip::start(void)=0x803E88B0
MarioFlip::setVec(const JGeometry::TVec3<float>&)=0x803E8970
MarioFlip::update(void)=0x803E8A70
MarioFlip::close(void)=0x803E9020
MarioFlow::__ct(MarioActor*)=0x803E90C0
MarioFlow::start(void)=0x803E9120
MarioFlow::update(void)=0x803E9290
MarioFlow::close(void)=0x803E94E0
MarioFoo::__ct(MarioActor*)=0x803E9540
MarioFoo::init(void)=0x803E9660
MarioFoo::start(void)=0x803E96E0
MarioFoo::update(void)=0x803E9830
MarioFoo::notice(void)=0x803EA350
MarioFoo::close(void)=0x803EA3A0
MarioFoo::getGravityVec(void) const=0x803EA5D0
MarioFoo::jet(void)=0x803EA5E0
MarioFoo::updateTilt(void)=0x803EA930
MarioFoo::hitWall(const JGeometry::TVec3<float>&, HitSensor*)=0x803EABD0
MarioFoo::getStickY(void) const=0x803EACD0
MarioFoo::spin(void)=0x803EACE0
MarioFoo::passRing(const HitSensor*)=0x803EADE0
MarioFoo::calcRingAcc(void)=0x803EAED0
MarioFoo::draw3D(void) const=0x803EB050
MarioFoo::getBlurOffset(void) const=0x803EBCD0
short::(nit_\MarioFoo_cpp)=0x803EBCE0
MarioFpView::__ct(MarioActor*)=0x803EBD60
MarioFpView::start(void)=0x803EBDC0
MarioFpView::update(void)=0x803EBE70
MarioFpView::close(void)=0x803EBFF0
MarioFpView::forceClose(void)=0x803EC0C0
MarioFpView::getBlurOffset(void) const=0x803EC100
MarioFrontStep::__ct(MarioActor*)=0x803EC110
MarioFrontStep::start(void)=0x803EC150
MarioFrontStep::update(void)=0x803EC1B0
MarioFrontStep::close(void)=0x803EC3D0
MarioFrontStep::postureCtrl(A4_f)=0x803EC420
MarioHairAndHatModel::__ct(void)=0x803EC500
MarioHairAndHatModel::initAfterPlacement(void)=0x803EC670
MarioHairAndHatModel::makeActorAppeared(void)=0x803EC6D0
MarioHairAndHatModel::makeActorDead(void)=0x803EC6E0
MarioHairAndHatModel::control(void)=0x803EC6F0
MarioHairAndHatModel::calcAndSetBaseMtx(void)=0x803EC700
MarioHairAndHatModel::__dt(void)=0x803ECA50
short::(nit_\MarioHairAndHatModel_cpp)=0x803ECAB0
MarioHang::recordWallPolygon(const Triangle*)=0x803ECB50
MarioHang::recordHangNorm(const JGeometry::TVec3<float>&)=0x803ECC50
MarioHang::forceDrop(void, _2)=0x803ECCB0
MarioHang::__ct(MarioActor*)=0x803ECCC0
MarioHang::start(void)=0x803ECD80
MarioHang::update(void)=0x803ECE40
MarioHang::tryClimb(bool)=0x803ED310
MarioHang::close(void)=0x803ED4B0
MarioHang::notice(void)=0x803ED5C0
MarioHang::postureCtrl(A4_f)=0x803ED650
MarioHolder::__ct(void)=0x803EDED0
MarioHolder::__dt(void)=0x803EDF60
MarioHolder::setMarioActor(MarioActor*)=0x803EDFC0
MarioHolder::getMarioActor(void) const=0x803EDFD0
MR::getMarioHolder(void)=0x803EDFE0
MR::enablePlayerResourceBee(void)=0x803EE010
MR::enablePlayerResourceHopper(void)=0x803EE040
MR::enablePlayerResourceFire(void)=0x803EE070
MR::enablePlayerResourceIce(void)=0x803EE0A0
MR::enablePlayerResourceInvincible(void)=0x803EE0D0
MR::enablePlayerResourceTeresa(void)=0x803EE100
MR::enablePlayerResourceTornado(void)=0x803EE130
MR::enablePlayerResourceYoshi(void)=0x803EE160
MR::enablePlayerResourceYoshiBalloon(void)=0x803EE190
MR::enablePlayerResourceCloud(void)=0x803EE1C0
MR::enablePlayerResourceRock(void)=0x803EE1F0
MR::enablePlayerResourceHairAndHead(void)=0x803EE220
MR::enablePlayerResourceFreezeIce(void)=0x803EE250
MR::isCreatePlayerResourceBee(void)=0x803EE280
MR::isCreatePlayerResourceHopper(void)=0x803EE2B0
MR::isCreatePlayerResourceFire(void)=0x803EE2E0
MR::isCreatePlayerResourceIce(void)=0x803EE310
MR::isCreatePlayerResourceInvincible(void)=0x803EE340
MR::isCreatePlayerResourceTeresa(void)=0x803EE370
MR::isCreatePlayerResourceTornado(void)=0x803EE3A0
MR::isCreatePlayerResourceYoshi(void)=0x803EE3D0
MR::isCreatePlayerResourceYoshiBalloon(void)=0x803EE400
MR::isCreatePlayerResourceCloud(void)=0x803EE430
MR::isCreatePlayerResourceRock(void)=0x803EE460
MR::isCreatePlayerResourceHairAndHead(void)=0x803EE490
MR::isCreatePlayerResourceFreezeIce(void)=0x803EE4C0
MR::enablePlayerResourceHopperComet(void)=0x803EE4F0
MR::enablePlayerResourceInvincibleComet(void)=0x803EE500
MR::enablePlayerResourceNoHat(void)=0x803EE510
FloorCode::__ct(void)=0x803EE520
FloorCode::getCode(const Triangle*)=0x803EE530
MarioMessenger::__ct(HitSensor*)=0x803EE590
MarioMessenger::movement(void)=0x803EE620
MarioMessenger::addRequest(HitSensor*, unsigned long)=0x803EE690
MarioMessenger::__dt(void)=0x803EE6D0
MarioModule::getAnimator(void) const=0x803EE730
MarioModule::getPlayer(void) const=0x803EE740
MarioModule::getPlayerMode(void) const=0x803EE750
MarioModule::isPlayerModeBee(void) const=0x803EE760
MarioModule::isPlayerModeFire(void) const=0x803EE780
MarioModule::isPlayerModeIce(void) const=0x803EE7A0
MarioModule::isPlayerModeTeresa(void) const=0x803EE7C0
MarioModule::isPlayerModeHopper(void) const=0x803EE7E0
MarioModule::isPlayerModeInvincible(void) const=0x803EE800
MarioModule::isPlayerModeFoo(void) const=0x803EE820
MarioModule::isPlayerModeYoshi(void) const=0x803EE840
MarioModule::isPlayerModeCloud(void) const=0x803EE860
MarioModule::changeAnimation(const char*, const char*)=0x803EE880
MarioModule::changeAnimationNonStop(const char*)=0x803EE940
MarioModule::isAnimationRun(const char*) const=0x803EEA60
MarioModule::isAnimationTerminate(const char*) const=0x803EEA80
MarioModule::getCurrentBckName(void) const=0x803EEAB0
MarioModule::changeAnimationUpper(const char*, const char*)=0x803EEB30
MarioModule::stopAnimationUpper(const char*, const char*)=0x803EEBB0
MarioModule::changeAnimation(const char*, unsigned long)=0x803EECA0
MarioModule::getWorldPadDir(void) const=0x803EEE20
MarioModule::calcWorldPadDir(JGeometry::TVec3<float>*, float, float, bool)=0x803EEE30
MarioModule::getStickX(void) const=0x803EEFC0
MarioModule::getStickY(void) const=0x803EEFD0
MarioModule::getStickP(void) const=0x803EEFE0
MarioModule::checkTrgA(void) const=0x803EEFF0
MarioModule::checkLvlA(void) const=0x803EF010
MarioModule::checkTrgZ(void) const=0x803EF020
MarioModule::checkLvlZ(void) const=0x803EF030
MarioModule::checkPreLvlZ(void) const=0x803EF040
MarioModule::checkSquat(bool)=0x803EF050
MarioModule::isInputDisable(void) const=0x803EF1B0
MarioModule::addVelocity(const JGeometry::TVec3<float>&)=0x803EF2B0
MarioModule::addVelocity(const JGeometry::TVec3<float>&, float)=0x803EF2C0
MarioModule::getVelocity(void) const=0x803EF2F0
MarioModule::addVelocityAfter(const JGeometry::TVec3<float>&)=0x803EF310
MarioModule::clearVelocity(void)=0x803EF320
MarioModule::cutGravityElementFromJumpVec(bool)=0x803EF330
MarioModule::getJumpVec(void) const=0x803EF3C0
MarioModule::setJumpVec(const JGeometry::TVec3<float>&)=0x803EF3D0
MarioModule::getTrans(void) const=0x803EF3F0
MarioModule::playEffect(const char*)=0x803EF410
MarioModule::playEffectTrans(const char*, const JGeometry::TVec3<float>&)=0x803EF420
MarioModule::playEffectRT(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803EF430
MarioModule::playEffectRTZ(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803EF440
MarioModule::playEffectRTW(const char*, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803EF450
MarioModule::playEffectSRT(const char*, float, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803EF460
MarioModule::stopEffect(const char*)=0x803EF470
MarioModule::stopEffectForce(const char*)=0x803EF480
MarioModule::playSound(const char*, long)=0x803EF490
MarioModule::stopSound(const char*, unsigned long)=0x803EF4A0
MarioModule::startCamVib(unsigned long)=0x803EF4B0
MarioModule::startPadVib(unsigned long)=0x803EF500
MarioModule::startPadVib(const char*)=0x803EF560
MarioModule::getGravityVec(void) const=0x803EF5C0
MarioModule::getAirGravityVec(void) const=0x803EF5D0
MarioModule::getFrontVec(void) const=0x803EF5E0
MarioModule::isStatusActiveID(unsigned long) const=0x803EF5F0
MarioModule::isStatusActiveS(MarioState*) const=0x803EF600
MarioModule::isSlipFloorCode(long) const=0x803EF780
MarioModule::calcPolygonAngleD(const Triangle*) const=0x803EF820
MarioModule::calcAngleD(const JGeometry::TVec3<float>&) const=0x803EF8B0
MarioModule::sendPunch(HitSensor*, bool)=0x803EF950
MarioModule::getSensor(const Triangle*) const=0x803EF9C0
MarioModule::marioAcos(float) const=0x803EFA10
MarioNullBck::__ct(const char*)=0x803EFB40
MarioNullBck::init(const JMapInfoIter&)=0x803EFB80
MarioNullBck::appear(void)=0x803EFBF0
MarioNullBck::getFramePos(float, JGeometry::TVec3<float>*, JGeometry::TVec3<float>*)=0x803EFC00
MarioNullBck::getLastPos(JGeometry::TVec3<float>*)=0x803EFDB0
MarioNullBck::__dt(void)=0x803EFDC0
MarioParts::__ct(LiveActor*, const char*, const char*, bool, A4_fPA4_f)=0x803EFE20
MarioParts::__ct(LiveActor*, const char*, const char*, A4_f)=0x803EFF10
MarioParts::init(const JMapInfoIter&)=0x803EFF90
MarioParts::__dt(void)=0x803F0030
MarioRabbit::__ct(MarioActor*)=0x803F0090
MarioRabbit::start(void)=0x803F0130
MarioRabbit::impact(void)=0x803F02C0
MarioRabbit::hop(void)=0x803F04E0
MarioRabbit::update(void)=0x803F05A0
MarioRabbit::close(void)=0x803F0D70
MarioRabbit::notice(void)=0x803F0E30
MarioRecovery::__ct(MarioActor*)=0x803F10E0
MarioRecovery::calcFirstVector(void)=0x803F11A0
MarioRecovery::start(void)=0x803F14B0
MarioRecovery::update(void)=0x803F16A0
MarioRecovery::close(void)=0x803F1AA0
MarioSearchLight::__ct(LiveActor*)=0x803F1B70
MarioSearchLight::init(const JMapInfoIter&)=0x803F1C00
MarioSearchLight::initAfterPlacement(void)=0x803F1CE0
MarioSearchLight::attackSensor(HitSensor*, HitSensor*)=0x803F1CF0
MarioSearchLight::updateHitSensor(HitSensor*)=0x803F1EE0
MarioSearchLight::calcAndSetBaseMtx(void)=0x803F1FF0
MarioSearchLight::appear(void)=0x803F20A0
MarioSearchLight::control(void)=0x803F20E0
MarioSearchLight::__dt(void)=0x803F22B0
CollisionShadow::setMode(unsigned long)=0x803F2310
CollisionShadow::__ct(float, float)=0x803F2380
CollisionShadow::create(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x803F2620
CollisionShadow::sendVtx(void) const=0x803F2D70
CollisionShadow::getDrawPos(unsigned long) const=0x803F2E60
CollisionShadow::sendZsortedVtx(bool) const=0x803F2EB0
CollisionShadow::getDrawPos(unsigned long, unsigned long) const=0x803F3000
CollisionShadow::getDrawTx(unsigned long, unsigned long) const=0x803F3040
CollisionShadow::initCaptureTex(void)=0x803F3080
CollisionShadow::setViewMtx(const JGeometry::TVec3<float>&)=0x803F3140
CollisionShadow::setUpdateFlag(void)=0x803F3350
CollisionShadow::calcView(J3DModelX*, unsigned long, J3DModelX*)=0x803F33A0
CollisionShadow::drawAndCaptureTex(J3DModelX*, const JGeometry::TVec3<float>&)=0x803F3470
CollisionShadow::clearAlphaBuffer(void)=0x803F37E0
CollisionShadow::drawVolumeBox(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&) const=0x803F3870
CollisionShadow::draw(void) const=0x803F3AC0
CollisionShadow::draw1(void) const=0x803F3B60
CollisionShadow::draw2(void) const=0x803F3C20
CollisionShadow::draw3(void) const=0x803F3D70
CollisionShadow::createDL(void)=0x803F4170
CollisionShadow::drawVolume(void) const=0x803F42E0
CollisionShadow::doSortPolygons(void)=0x803F43D0
CollisionShadow::__dt(void)=0x803F44D0
MarioSideStep::__ct(MarioActor*)=0x803F4530
MarioSideStep::start(void)=0x803F4570
MarioSideStep::update(void)=0x803F45F0
MarioSideStep::close(void)=0x803F4A50
MarioSkate::__ct(MarioActor*)=0x803F4B40
MarioSkate::start(void)=0x803F4BB0
MarioSkate::update(void)=0x803F4D30
MarioSkate::close(void)=0x803F5470
MarioSkate::postureCtrl(A4_f)=0x803F5610
MarioSkate::notice(void)=0x803F56C0
MarioSlider::__ct(MarioActor*)=0x803F56D0
MarioSlider::start(void)=0x803F5750
MarioSlider::update(void)=0x803F5800
MarioSlider::close(void)=0x803F5E50
MarioSlider::calcGroundAccel(void)=0x803F5EF0
MarioSlider::postureCtrl(A4_f)=0x803F5F70
MarioSlider::calcWallHit(void)=0x803F60D0
MarioMagic::__ct(MarioActor*)=0x803F62E0
MarioMagic::start(void)=0x803F6330
MarioMagic::update(void)=0x803F6450
MarioMagic::close(void)=0x803F6550
MarioState::__ct(MarioActor*, unsigned long)=0x803F65B0
MarioState::proc(unsigned long)=0x803F65E0
MarioState::postureCtrl(A4_f)=0x803F66C0
MarioState::getNoticedStatus(void) const=0x803F6710
MarioStep::__ct(MarioActor*)=0x803F6740
MarioStep::start(void)=0x803F6790
MarioStep::update(void)=0x803F6880
MarioStep::close(void)=0x803F6990
MarioStick::__ct(MarioActor*)=0x803F6B80
MarioStick::start(void)=0x803F6C40
MarioStick::update(void)=0x803F6D40
MarioStick::close(void)=0x803F6FD0
MarioStick::postureCtrl(A4_f)=0x803F7140
MarioStick::notice(void)=0x803F7180
MarioSukekiyo::__ct(MarioActor*)=0x803F7190
MarioBury::__ct(MarioActor*)=0x803F7220
MarioSukekiyo::start(void)=0x803F7270
MarioSukekiyo::update(void)=0x803F73A0
MarioSukekiyo::close(void)=0x803F74E0
MarioSukekiyo::notice(void)=0x803F7540
MarioSukekiyo::postureCtrl(A4_f)=0x803F7550
MarioSwim::__ct(MarioActor*)=0x803F7590
MarioSwim::init(void)=0x803F79D0
MarioSwim::start(void)=0x803F79F0
MarioSwim::update(void)=0x803FAC60
MarioSwim::notice(void)=0x803FCAA0
MarioSwim::close(void)=0x803FCAF0
MarioSwim::resetJet(void)=0x803FEAB0
MarioSwim::hitPoly(unsigned char, const JGeometry::TVec3<float>&, HitSensor*)=0x803FF710
MarioSwim::hitWall(const JGeometry::TVec3<float>&, HitSensor*)=0x803FF7D0
MarioSwim::draw3D(void) const=0x80400350
MarioSwim::passRing(const HitSensor*)=0x804005A0
MarioSwim::getBlurOffset(void) const=0x80400950
MarioSwim::getStickY(void) const=0x80400B00
MarioSwim::addVelocity(const JGeometry::TVec3<float>&)=0x80400C10
MarioSwim::addVelocity(const JGeometry::TVec3<float>&, float)=0x80400CB0
MarioTalk::__ct(MarioActor*)=0x80403CF0
MarioTalk::start(void)=0x80403D40
MarioTalk::update(void)=0x80403DD0
Mario::setLastNonFixMoveVec(const JGeometry::TVec3<float>&)=0x80403F00
MarioTalk::notice(void)=0x80403F20
MarioTalk::close(void)=0x80403F30
MarioTeresa::updateDropFlag(void)=0x80403F90
MarioTeresa::resetTeresaMode(void)=0x80404040
MarioTeresa::isTeresaAccel(void) const=0x804040C0
MarioTeresa::__ct(MarioActor*)=0x804040D0
MarioTeresa::start(void)=0x80404150
MarioTeresa::close(void)=0x80404230
MarioTeresa::update(void)=0x80404280
MarioTeresa::checkHeight(void)=0x80404460
MarioTeresa::checkAccel(void)=0x804046B0
MarioTeresa::checkWind(void)=0x80404740
MarioTeresa::checkGroundReflect(void)=0x804048C0
MarioTeresa::checkWallCeilReflect(void)=0x804049E0
MarioTeresa::procNoControl(void)=0x80404CE0
MarioTeresa::procNearGroundControl(void)=0x80404D90
MarioTeresa::procAirControl(void)=0x80404F30
MarioTeresa::procDrop(void)=0x804050B0
MarioTeresa::procControl(void)=0x80405370
MarioTeresa::addTeresaVerticalVelocity(float)=0x80405590
MarioTeresa::addTeresaHorizontalVelocity(const JGeometry::TVec3<float>&)=0x804057E0
MarioTeresa::keep(void)=0x80405BA0
MarioTeresa::notice(void)=0x80405BB0
MarioActor::initTeresaMarioAnimation(void)=0x80405D50
MarioWait::__ct(MarioActor*)=0x80406390
MarioWait::start(void)=0x80406500
MarioWait::update(void)=0x80406580
MarioWait::close(void)=0x80406750
MarioWall::__ct(MarioActor*)=0x80406AC0
MarioWall::start(void)=0x80406B30
MarioWall::initTriangleJump(void)=0x80406D10
MarioWall::update(void)=0x80406D70
MarioWall::close(void)=0x80407530
MarioWall::isCancel(void)=0x804075E0
MarioWall::startJump(void)=0x80407690
MarioWall::startBackJump(unsigned long)=0x80407870
MarioWall::notice(void)=0x80407A80
MarioWarp::__ct(MarioActor*)=0x80407F30
MarioWarp::calcAxis(void)=0x80408000
MarioWarp::updateJump(void)=0x80408220
MarioWarp::start(void)=0x80408480
MarioWarp::update(void)=0x804086C0
MarioWarp::close(void)=0x80408B00
MarioYoshiPull::__ct(MarioActor*)=0x80408F20
MarioYoshiPull::start(void)=0x80408F70
MarioYoshiPull::close(void)=0x80408FD0
MarioYoshiPull::update(void)=0x80409040
MatrixValueGetter::__ct(const char*, MatrixValueTable*)=0x804092C0
MatrixValueGetter::getValue(const char*, float*) const=0x80409390
MatrixValueGetter::__dt(void)=0x80409410
ModelHolder::__ct(const char*, bool)=0x80409470
ModelHolder::updateMtx(A4_f)=0x804094F0
ModelHolder::__dt(void)=0x80409560
EventSequencer::__ct(void)=0x80409770
EventSequencer::init(const JMapInfoIter&)=0x804097E0
EventSequencer::movement(void)=0x80409970
EventSequencer::startEvent(const char*)=0x804099D0
EventSequence::__ct(unsigned long)=0x80409A30
EventSequence::clearFlag(void)=0x80409AD0
EventSequence::addEventOnTime(const char*, M13EventSequenceFPCvPvUsUs_vUs)=0x80409B10
EventSequence::addEventInTime(const char*, M13EventSequenceFPCvPvUsUs_vUsUs)=0x80409B70
EventSequence::addEventInStatus(const char*, M13EventSequenceFPCvPvUsUs_vM13EventSequenceFPCvPvUs_b)=0x80409BD0
EventSequence::addEventInPhase(const char*, M13EventSequenceFPCvPvUsUs_vUs)=0x80409C50
EventSequence::checkAndRun(unsigned long)=0x80409CE0
EventSequence::updateBefore(void)=0x80409E80
EventSequence::updateAfter(void)=0x80409E90
EventSequence::playSound(const char*)=0x80409EA0
EventSequence::playAnimation(const char*)=0x80409EB0
EventSequence::isMissLayoutClosed(unsigned short)=0x80409EC0
EventSequence::setSpot(float, unsigned long)=0x80409F10
EventSequence::decLeft(unsigned short, unsigned short)=0x80409F20
EventSequence::doCloseWipe(unsigned short, unsigned short)=0x80409F40
EventSequence::doWaitAfterWipe(unsigned short, unsigned short)=0x80409F90
EventSequencer::__dt(void)=0x80409FD0
EventAbyss::__ct(void)=0x8040A030
EventAbyss::updateAfter(void)=0x8040A1C0
EventAbyss::init(unsigned short, unsigned short)=0x8040A1D0
EventAbyss::sound(unsigned short, unsigned short)=0x8040A250
EventDown::__ct(void)=0x8040A290
EventDown::init(unsigned short, unsigned short)=0x8040A440
EventDown::missLayoutOpen(unsigned short, unsigned short)=0x8040A4B0
EventDown::sound(unsigned short, unsigned short)=0x8040A4F0
EventFireDown::__ct(void)=0x8040A530
EventFireDown::updateAfter(void)=0x8040A6F0
EventFireDown::init(unsigned short, unsigned short)=0x8040A700
EventFireDown::sound(unsigned short, unsigned short)=0x8040A780
EventFireDown::sound2(unsigned short, unsigned short)=0x8040A7C0
EventGameOver::__ct(void)=0x8040A7D0
EventGameOver::init(unsigned short, unsigned short)=0x8040A910
EventGameOver::sound(unsigned short, unsigned short)=0x8040A980
EventGameOver::reqLayout(unsigned short, unsigned short)=0x8040A9C0
EventGameOver::finish(unsigned short, unsigned short)=0x8040A9D0
EventGhostRaceDown::__ct(void)=0x8040AA10
EventGhostRaceDown::init(unsigned short, unsigned short)=0x8040ABF0
EventGhostRaceDown::sound(unsigned short, unsigned short)=0x8040AC70
EventKillNoDirector::__ct(void)=0x8040ACB0
EventKillNoDirector::init(unsigned short, unsigned short)=0x8040AE40
EventKillNoDirector::finish(unsigned short, unsigned short)=0x8040AEA0
EventRaceDown::__ct(void)=0x8040AEE0
EventRaceDown::checkCloseWipeStart(unsigned short)=0x8040B100
EventRaceDown::init(unsigned short, unsigned short)=0x8040B150
EventRaceDown::missLayoutOpen(unsigned short, unsigned short)=0x8040B1D0
EventRaceDown::sound(unsigned short, unsigned short)=0x8040B210
RushEndInfo::__ct(LiveActor*, unsigned long, const JGeometry::TVec3<float>&, bool, unsigned long)=0x8040B760
TornadoMario::__ct(const char*)=0x8040B8C0
TornadoMario::init(const JMapInfoIter&)=0x8040B910
TornadoMario::show(void)=0x8040BA10
TornadoMario::hide(void)=0x8040BA80
TornadoMario::hideForce(void)=0x8040BAE0
TornadoMario::control(void)=0x8040BB30
TornadoMario::calcAnim(void)=0x8040BBD0
TornadoMario::setTrHeight(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x8040BBE0
TornadoMario::calcAndSetBaseMtx(void)=0x8040BC50
TornadoMario::__dt(void)=0x8040BCA0
Yoshi::__ct(const char*)=0x8040BF30
Yoshi::init(const JMapInfoIter&)=0x8040C190
Yoshi::makeActorAppeared(void)=0x8040C560
Yoshi::makeActorDead(void)=0x8040C650
Yoshi::movement(void)=0x8040C6C0
Yoshi::calcAnim(void)=0x8040C730
Yoshi::kill(void)=0x8040CB90
Yoshi::control(void)=0x8040F6B0
Yoshi::calcAndSetBaseMtx(void)=0x8040F880
Yoshi::attackSensor(HitSensor*, HitSensor*)=0x8040F8C0
Yoshi::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8040F950
Yoshi::receiveMsgPush(HitSensor*, HitSensor*)=0x8040FAF0
JASMemChunkPool<1024,JASThreadingModel::ObjectLevelLockable>::MemoryChunk::__ct(JASMemChunkPool<1024,JASThreadingModel::ObjectLevelLockable>::MemoryChunk*)=0x80413020
Yoshi::__dt(void)=0x804136D0
short::(nit_\Yoshi_cpp)=0x80413730
YoshiArrow::__ct(const char*)=0x80413C40
YoshiArrow::init(const JMapInfoIter&)=0x80413CB0
YoshiArrow::appear(void)=0x80413FC0
YoshiArrow::kill(void)=0x80414000
YoshiArrow::control(void)=0x80414080
YoshiArrow::calcAndSetBaseMtx(void)=0x80414220
YoshiArrow::__dt(void)=0x80414230
MarioYoshiBalloon::__ct(MarioActor*)=0x80414290
MarioYoshiBalloon::start(void)=0x80414310
MarioYoshiBalloon::close(void)=0x80414400
MarioYoshiBalloon::update(void)=0x80414520
YoshiDashStep::__ct(const char*)=0x80415A10
YoshiDashStep::init(const JMapInfoIter&)=0x80415A60
YoshiDashStep::makeActorAppeared(void)=0x80415B10
YoshiDashStep::makeActorDead(void)=0x80415B50
YoshiDashStep::control(void)=0x80415BD0
YoshiDashStep::getBaseMtx(void) const=0x80415BE0
YoshiDashStep::__dt(void)=0x80415BF0
YoshiDashStep::__defctor(void)=0x80415CE0
MarioYoshiDash::__ct(MarioActor*)=0x80415E10
MarioYoshiDash::start(void)=0x80415E50
MarioYoshiDash::close(void)=0x80415E60
MarioYoshiDash::update(void)=0x80415E70
YoshiNest::__ct(const char*, const char*, A4_flllb)=0x80415FA0
YoshiNest::init(const JMapInfoIter&)=0x80416010
YoshiEgg::__ct(const char*)=0x80416060
YoshiEgg::init(const JMapInfoIter&)=0x804160E0
MR::Functor<YoshiEgg>(YoshiEgg*, M8YoshiEggFPCvPv_v_Q22MR41FunctorV0M<YoshiEgg*,M8YoshiEggFPCvPv_v>)=0x80416470
YoshiEgg::initAfterPlacement(void)=0x804164B0
YoshiEgg::makeActorAppeared(void)=0x80416CC0
YoshiEgg::makeActorDead(void)=0x80416FD0
YoshiEgg::kill(void)=0x80417020
YoshiEgg::appear(void)=0x80417030
YoshiEgg::attackSensor(HitSensor*, HitSensor*)=0x80417050
YoshiEgg::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x804170D0
YoshiEgg::calcAndSetBaseMtx(void)=0x80417200
YoshiEgg::meetYoshiDemo(void)=0x804174D0
MR::FunctorV0M<YoshiEgg*,M8YoshiEggFPCvPv_v>::__cl(void) const=0x804174E0
MR::FunctorV0M<YoshiEgg*,M8YoshiEggFPCvPv_v>::clone(JKRHeap*) const=0x80417510
YoshiNest::__dt(void)=0x80417580
YoshiEgg::__dt(void)=0x804175E0
short::(nit_\YoshiEgg_cpp)=0x80417640
YoshiFruitCounter::__ct(void)=0x804178C0
YoshiFruitCounter::movement(void)=0x80417920
YoshiFruitCounter::increment(void)=0x80417950
YoshiFruitCounter::__dt(void)=0x80417980
GameSceneLayoutHolder::getPurpleCoinCounter(void, _0) const=0x80418AF0
GameSceneLayoutHolder::getPurpleCoinCounter(void, _1) const=0x80418B50
GameSceneLayoutHolder::getPurpleCoinCounter(void, _2) const=0x80419404
YoshiLockOnManager::__ct(Yoshi*)=0x80419BD0
YoshiLockOnManager::init(const JMapInfoIter&)=0x80419C60
YoshiLockOnManager::movement(void)=0x80419D80
YoshiLockOnManager::draw(void) const=0x80419DF0
YoshiLockOnManager::__dt(void)=0x8041A820
YoshiLockOnTarget::__ct(LiveActor*, A4_fRCQ29JGeometry8TVec3<float>)=0x8041A8B0
MR::createYoshiLockOnTarget(LiveActor*, A4_fRCQ29JGeometry8TVec3<float>)=0x8041A8E0
MR::createYoshiLockOnTarget(LiveActor*, const char*, const JGeometry::TVec3<float>&)=0x8041A940
MarioYoshiShot::__ct(MarioActor*)=0x8041AD80
MarioYoshiShot::start(void)=0x8041ADD0
MarioYoshiShot::close(void)=0x8041AF70
MarioYoshiShot::update(void)=0x8041AFE0
YoshiSilhouette::__ct(Yoshi*)=0x8041B120
YoshiSilhouette::init(const JMapInfoIter&)=0x8041B210
YoshiSilhouette::makeActorAppeared(void)=0x8041B220
YoshiSilhouette::makeActorDead(void)=0x8041B260
YoshiSilhouette::movement(void)=0x8041B2A0
YoshiSilhouette::calcAnim(void)=0x8041B2F0
YoshiSilhouette::calcViewAndEntry(void)=0x8041B3D0
YoshiSilhouette::draw(void) const=0x8041B3E0
YoshiSilhouette::__dt(void)=0x8041B510
YoshiHolder::__ct(Mario*)=0x8041B570
YoshiTongue::__ct(Yoshi*, const char*)=0x8041C550
YoshiTongue::init(const JMapInfoIter&)=0x8041C620
YoshiTongue::control(void)=0x8041C7E0
YoshiTongue::makeActorAppeared(void)=0x8041C7F0
YoshiTongue::makeActorDead(void)=0x8041C830
YoshiTongue::calcAndSetBaseMtx(void)=0x8041CEF0
YoshiTongue::__dt(void)=0x8041DC60
short::(nit_\YoshiTongue_cpp)=0x8041DCC0
YoshiTongueAction::__dt(void)=0x804218E0
short::(nit_\YoshiTongueAction_cpp)=0x80421940
YoshiFunction::tryYoshiPushEat(YoshiLockOnTarget*)=0x80421D40
YoshiFunction::tryYoshiEat(YoshiLockOnTarget*)=0x80421DA0
YoshiFunction::tryYoshiLick(YoshiLockOnTarget*)=0x80421E40
YoshiFunction::tryYoshiCapture(YoshiLockOnTarget*, bool)=0x80421EE0
YoshiFunction::tryYoshiPull(YoshiLockOnTarget*)=0x80421F90
YoshiFunction::tryYoshiProjectile(YoshiLockOnTarget*)=0x80422030
YoshiFunction::emitGlowEffect(void)=0x804220D0
YoshiFunction::deleteGlowEffect(void)=0x80422110
MR::startDashYoshiMode(void)=0x804225F0
MR::isPlayerElementModeYoshiLight(void)=0x80422670
MR::getYoshiMouthMtx(void)=0x804228F0
MR::incYoshiFruitEaten(void)=0x80422940
AudRhythmSeqParser::__ct(void)=0x80422990
JASSeqParser::__dt(void)=0x80422A70
AudRhythmSeqParser::noteOnProcess(unsigned long, unsigned long, unsigned long, unsigned long)=0x80422AB0
AudRhythmSeqParser::noteOffProcess(unsigned long)=0x80422B10
AudRhythmSeqParser::execNoteOnMidi(JASTrack*, unsigned long, unsigned long, unsigned long)=0x80422B80
AudRhythmSeqParser::execNoteOff(JASTrack*, unsigned long)=0x80422CE0
AudRhythmSeqParser::parse(JASTrack*)=0x80422D50
AudRhythmSeqParser::checkNoteOn(unsigned long, unsigned long&, unsigned long&, unsigned long&, xb)=0x80422E60
AudRhythmSeqParser::checkNoteOnKey(unsigned long, unsigned long&, unsigned long&, xRUl)=0x80422F10
AudRhythmSeqParser::getTempo(void) const=0x80422FE0
AudRhythmSeqParser::getModifiedTempo(void) const=0x80423030
AudRhythmSeqParser::getRhythmType(unsigned long)=0x80423080
AudRhythmSeqParser::getTempoData(JASTrack*)=0x804230F0
AudRhythmSeqParser::getChordNumberData(JASTrack*)=0x80423110
AudRhythmSeqParser::getScaleNumberData(JASTrack*)=0x80423130
AudRhythmSeqParser::getNextNoteOff(JASTrack*, unsigned long)=0x80423150
AudRhythmSeqParser::passRegCommand(JASTrack*, int)=0x80423260
AudRhythmSeqParser::passCommand(JASTrack*, unsigned char, unsigned short)=0x804232C0
AudRhythmSeqParser::callTmp(JASTrack*, unsigned long)=0x80423540
AudRhythmSeqParser::retTmp(JASTrack*)=0x80423580
AudRhythmSeqParser::initNoteInfo(unsigned long)=0x804235C0
AudRhythmSeqParser::init(void)=0x804235F0
AudRhythmSeqParser::activate(void)=0x80423670
AudRhythmSeqParser::setNoteInfo(unsigned long, unsigned long, unsigned long, unsigned long)=0x804236B0
AudRhythmSeqParser::registChordNumToInfo(void)=0x80423710
AudChordInfo::isAvailable(void) const=0x80423790
AudRhythmSeqParser::registScaleNumToInfo(void)=0x804237D0
AudRhythmSeqParser::flushChordScale(void)=0x80423850
AudRhythmSeqParser::__dt(void)=0x80423890
AudBgmTempoAdjuster::__ct(void)=0x804238D0
AudBgmTempoAdjuster::init(void)=0x80423930
AudBgmTempoAdjuster::setInfo(float, unsigned long, unsigned long, unsigned long, unsigned long)=0x80423950
AudBgmTempoAdjuster::setStream(JAIStream*)=0x804239A0
AudBgmTempoAdjuster::reject(void)=0x804239F0
AudBgmTempoAdjuster::beatProc(float)=0x80423A40
AudBgmTempoAdjuster::calcAdjustRate(float, float)=0x80423BF0
AudMeTrack::__ct(void)=0x80423C60
AudMeTrack::__dt(void)=0x80423D00
AudMeTrack::init(void)=0x80423DC0
JASOscillator::Data::__as(const JASOscillator::Data&)=0x80423EC0
JASOscillator::Point::__as(const JASOscillator::Point&)=0x80423F00
AudMeTrack::initPlayParam(void)=0x80423F20
AudMeTrack::inherit(AudMeTrack*)=0x80423F50
AudMeTrack::newChild(long)=0x80424090
AudMeTrack::deleteChild(long)=0x80424130
AudMeTrack::isHaveChild(void) const=0x80424190
AudMeTrack::setSeqData(void*, unsigned long)=0x804241D0
AudMeTrack::startSeq(void)=0x80424220
AudMeTrack::stopSeq(void)=0x80424280
AudMeTrack::suspendSeq(void)=0x80424320
AudMeTrack::stopAtCurrentNoteEnd(void)=0x804243B0
AudMeTrack::rhythmProc(long, long)=0x80424440
AudMeTrack::setPauseFlag(bool)=0x804245B0
AudMeTrack::channelStart(AudMeChannelMgr*, unsigned long, unsigned long, unsigned long)=0x80424660
JASChannel::setParams(const JASChannelParams&)=0x80424740
AudMeTrack::noteOn(unsigned long, unsigned long, unsigned long)=0x80424780
AudMeTrack::noteOff(unsigned long, unsigned short)=0x80424830
AudMeTrack::noteOffAll(unsigned short)=0x804248C0
AudMeTrack::startNote(void)=0x80424920
AudMeTrack::channelUpdateCallback(unsigned long, JASChannel*, JASDsp::TChannel*, void*)=0x80424A00
AudMeTrack::initRegister(void)=0x80424AB0
AudMeTrack::overwriteOsc(JASChannel*)=0x80424AE0
AudMeTrack::setOscAdsr(short, short, short, short, unsigned short)=0x80424B50
AudMeTrack::updateChannelParams(void)=0x80424BC0
AudMeTrack::gframeProc(void)=0x80424D10
AudMeTrack::setBaseNoteFromChord(unsigned char*, long, bool)=0x80424D90
AudMeTrack::setBaseNoteFromScale(unsigned char*, long, bool)=0x80424FF0
AudMeTrack::setBaseNoteFromChromatic(unsigned char*, long, bool)=0x804250D0
AudMeTrack::setBaseNoteFromOtherPart(long)=0x80425150
AudMeTrack::setBaseNoteFromUpperPart(void)=0x80425190
AudMeTrack::setBaseNoteFix(unsigned char)=0x804251E0
AudMeTrack::setBaseNoteFromRegister(long)=0x804251F0
AudMeTrack::adjustNote(long, long)=0x80425210
AudMeTrack::modifyNote(long, long, long)=0x80425330
AudMeTrack::modifyNoteRnd(long, long, long)=0x804254D0
AudMeTrack::getRandom(unsigned long)=0x80425530
AudMeTrack::makeRandomSearchList(long*, long, bool)=0x804255B0
AudMeTrack::adjustInNoteRange(unsigned char&)=0x80425660
AudMeTrack::adjustInStartNoteRange(unsigned char&)=0x804256B0
AudMeTrack::getMyOrderInBrother(void)=0x80425720
AudMeTrack::getBrother(long)=0x80425740
AudMeTrack::TTrackInfo::init(void)=0x80425770
AudMeTrack::TList::cbSeqMain(long, long, void*)=0x804257C0
AudMeTrack::TList::append(AudMeTrack*)=0x80425800
JGadget::TLinkList<AudMeTrack,-384>::begin(void)=0x80425880
AudMeTrack::TList::seqMain(long, long)=0x80425890
JGadget::TLinkList<AudMeTrack,-384>::end(void)=0x80425930
JGadget::__ne(JGadget::TLinkList<AudMeTrack,-384>::iterator, JGadget::TLinkList<AudMeTrack,-384>::iterator)=0x80425940
AudMeTrack::TList::getSameME(AudMeTrack*, unsigned long)=0x80425960
short::(nit_\AudMeTrack_cpp)=0x804259F0
AudMeTrack::TList::__ct(void)=0x80425A80
AudMeTrack::TList::__dt(void)=0x80425AA0
AudMeChannelMgr::__ct(AudMeTrack*)=0x80425B00
AudMeChannelMgr::noteOff(unsigned long, unsigned short)=0x80425BB0
AudMeChannelMgr::setPauseFlag(bool)=0x80425C30
AudMeSeqParser::__dt(void)=0x80425C60
AudMeSeqCtrl::__ct(void)=0x80425CA0
AudMeSeqCtrl::start(void*, unsigned long)=0x80425D10
AudMeSeqCtrl::wait(long, long)=0x80425D60
AudMeSeqCtrl::autoWait(void)=0x80425D70
AudMeSeqCtrl::inherit(AudMeSeqCtrl*)=0x80425D90
AudMeSeqCtrl::rhythmProc(AudMeTrack*, long)=0x80425DA0
short::(nit_\AudMeSeqCtrl_cpp)=0x80425E90
AudMeSeqParser::__ct(void)=0x80425EA0
AudMeSeqReader::init(void*)=0x80425EB0
AudMeSeqReader::call(unsigned long)=0x80425EF0
AudMeSeqReader::ret(void)=0x80425F30
AudMeSeqReader::loopStart(unsigned short)=0x80425F70
AudMeSeqReader::loopEnd(void)=0x80425FC0
AudMeSeqParser::cmdBank(AudMeTrack*, unsigned long*)=0x80426030
AudMeSeqParser::cmdPrg(AudMeTrack*, unsigned long*)=0x80426040
AudMeSeqParser::cmdBProg(AudMeTrack*, unsigned long*)=0x80426050
AudMeSeqParser::cmdRelease(AudMeTrack*, unsigned long*)=0x80426070
AudMeSeqParser::cmdSimpleAdsr(AudMeTrack*, unsigned long*)=0x80426080
AudMeSeqParser::cmdOpenTrack(AudMeTrack*, unsigned long*)=0x804260E0
AudMeSeqParser::cmdCloseTrack(AudMeTrack*, unsigned long*)=0x80426160
AudMeSeqParser::cmdStart(AudMeTrack*, unsigned long*)=0x80426190
AudMeSeqParser::cmdEnd(AudMeTrack*, unsigned long*)=0x804261E0
AudMeSeqParser::cmdWait(AudMeTrack*, unsigned long*)=0x804261F0
AudMeSeqParser::cmdProgressOn(AudMeTrack*, unsigned long*)=0x80426220
AudMeSeqParser::cmdProgressOff(AudMeTrack*, unsigned long*)=0x80426230
AudMeSeqParser::cmdJump(AudMeTrack*, unsigned long*)=0x80426240
AudMeSeqParser::cmdCall(AudMeTrack*, unsigned long*)=0x80426260
AudMeSeqParser::cmdJumpZ(AudMeTrack*, unsigned long*)=0x80426290
AudMeSeqParser::cmdJumpNZ(AudMeTrack*, unsigned long*)=0x804262C0
AudMeSeqParser::cmdCallZ(AudMeTrack*, unsigned long*)=0x804262F0
AudMeSeqParser::cmdCallNZ(AudMeTrack*, unsigned long*)=0x80426340
AudMeSeqParser::cmdRet(AudMeTrack*, unsigned long*)=0x80426390
AudMeSeqParser::cmdLoopStart(AudMeTrack*, unsigned long*)=0x804263C0
AudMeSeqParser::cmdLoopEnd(AudMeTrack*, unsigned long*)=0x804263F0
AudMeSeqParser::cmdLock(AudMeTrack*, unsigned long*)=0x80426420
AudMeSeqParser::cmdNoWait(AudMeTrack*, unsigned long*)=0x80426430
AudMeSeqParser::cmdNote(AudMeTrack*, unsigned long*)=0x80426450
AudMeSeqParser::cmdNoteL(AudMeTrack*, unsigned long*)=0x80426490
AudMeSeqParser::cmdNoteP(AudMeTrack*, unsigned long*)=0x804264A0
AudMeSeqParser::cmdNoteLP(AudMeTrack*, unsigned long*)=0x804264B0
AudMeSeqParser::cmdNoteOff(AudMeTrack*, unsigned long*)=0x804264C0
AudMeSeqParser::cmdTie(AudMeTrack*, unsigned long*)=0x804264F0
AudMeSeqParser::cmdRest(AudMeTrack*, unsigned long*)=0x80426520
AudMeSeqParser::cmdNoteRangeUpper(AudMeTrack*, unsigned long*)=0x80426560
AudMeSeqParser::cmdNoteRangeLower(AudMeTrack*, unsigned long*)=0x80426570
AudMeSeqParser::cmdNoteRangeStart(AudMeTrack*, unsigned long*)=0x80426580
AudMeSeqParser::cmdNoteRangeStartU(AudMeTrack*, unsigned long*)=0x80426590
AudMeSeqParser::cmdNoteRangeStartD(AudMeTrack*, unsigned long*)=0x804265A0
AudMeSeqParser::cmdNoStartRange(AudMeTrack*, unsigned long*)=0x804265B0
AudMeSeqParser::cmdPan(AudMeTrack*, unsigned long*)=0x804265C0
AudMeSeqParser::cmdDolby(AudMeTrack*, unsigned long*)=0x80426600
AudMeSeqParser::cmdVolume(AudMeTrack*, unsigned long*)=0x80426640
AudMeSeqParser::cmdPitchBend(AudMeTrack*, unsigned long*)=0x80426680
AudMeSeqParser::cmdBendSense(AudMeTrack*, unsigned long*)=0x804266D0
AudMeSeqParser::cmdFxMix(AudMeTrack*, unsigned long*)=0x804266E0
AudMeSeqParser::cmdNoteReg(AudMeTrack*, unsigned long*)=0x80426720
AudMeSeqParser::cmdCmpNI(AudMeTrack*, unsigned long*)=0x80426730
AudMeSeqParser::cmdCmpCI(AudMeTrack*, unsigned long*)=0x80426770
AudMeSeqParser::cmdNoteDefineStart(AudMeTrack*, unsigned long*)=0x804267B0
AudMeSeqParser::cmdNoteDefineEnd(AudMeTrack*, unsigned long*)=0x804267E0
AudMeSeqParser::cmdRangeExcepUpper(AudMeTrack*, unsigned long*)=0x80426830
AudMeSeqParser::cmdRangeExcepLower(AudMeTrack*, unsigned long*)=0x80426840
AudMeSeqParser::cmdBasenotePrev(AudMeTrack*, unsigned long*)=0x80426850
AudMeSeqParser::cmdBasenoteChord(AudMeTrack*, unsigned long*)=0x80426860
AudMeSeqParser::cmdBasenoteScale(AudMeTrack*, unsigned long*)=0x804268B0
AudMeSeqParser::cmdBasenoteChromatic(AudMeTrack*, unsigned long*)=0x80426900
AudMeSeqParser::cmdBasenotePart(AudMeTrack*, unsigned long*)=0x80426950
AudMeSeqParser::cmdBasenoteUpperPart(AudMeTrack*, unsigned long*)=0x80426980
AudMeSeqParser::cmdBasenoteFix(AudMeTrack*, unsigned long*)=0x804269B0
AudMeSeqParser::cmdBasenoteReg(AudMeTrack*, unsigned long*)=0x804269E0
AudMeSeqParser::cmdAdjust(AudMeTrack*, unsigned long*)=0x80426A10
AudMeSeqParser::cmdModify(AudMeTrack*, unsigned long*)=0x80426A40
AudMeSeqParser::cmdModifyRnd(AudMeTrack*, unsigned long*)=0x80426A80
AudMeSeqParser::parse(AudMeTrack*)=0x80426AC0
short::(nit_\AudMeSeqParser_cpp)=0x80426C30
AudCallback::regist(long(long, long, void*), void*)=0x80427110
AudCallback::callback(long, long)=0x80427190
AudMeTrackCallback::regist(long(long, long, void*), void*)=0x80427220
AudMeTrackCallback::callback(long, long)=0x80427240
short::(nit_\AudMeTrackCallback_cpp)=0x80427260
AudCallback::__ct(void)=0x80427270
AudMeHandle::releaseMe(void)=0x804272A0
AudMe::__ct(void)=0x804272C0
AudMe::__dt(void)=0x80427340
AudMe::requestStart(void*, unsigned long)=0x804273C0
AudMe::start(void*, unsigned long)=0x804273E0
AudMe::stop(long)=0x80427480
AudMe::release(void)=0x804274E0
AudMe::attachHandle(AudMeHandle*)=0x80427570
AudMe::releaseHandle(void)=0x804275C0
AudMe::update(void)=0x804275E0
AudMe::setTimedParam(long, float, unsigned long)=0x804276E0
AudMe::initTimed(void)=0x80427750
AudMe::updateTimedParams(bool)=0x804277A0
AudMe::setOuterPlayingParams(float, float, float, long, long)=0x80427940
AudMe::doneStop(void)=0x80427960
AudMe::setPauseFlag(bool)=0x804279C0
AudMeMgr::__ct(void)=0x80427A20
AudMeMgr::setMeSeq(void*)=0x80427AA0
AudMeMgr::setMeTable(void*)=0x80427AB0
AudMeMgr::startMe(unsigned long, AudMeHandle*, const JGeometry::TVec3<float>*)=0x80427AC0
AudMeMgr::freeDeadMe(void)=0x80427C60
AudMeMgr::updateEachMe(void)=0x80427CD0
AudMeMgr::stopAll(long)=0x80427D30
AudMeMgr::setPauseFlagAll(bool)=0x80427D80
AudMeMgr::update(void)=0x80427DD0
AudMeMgr::getSeqStartPos(unsigned long)=0x80427E10
AudMeMgr::isRequestedMe(unsigned long)=0x80427E50
AudMeMgr::setOuterPlayingParam(long, AudMe*)=0x80427EF0
AudMePlayingParamsHolder::setResource(void*)=0x80427F90
short::(nit_\AudMePlayer_cpp)=0x80427FE0
AudRhythmMeSystem::__ct(JKRHeap*, unsigned long, bool)=0x80428080
AudRhythmHolder::__dt(void)=0x804281C0
AudRhythmMeSystem::setSeq(JAISoundHandle&, long)=0x80428200
AudRhythmMeSystem::rejectSeq(long)=0x80428310
AudRhythmMeSystem::rhythmProc(void)=0x80428370
AudRhythmMeSystem::update(void)=0x804283D0
AudRhythmMeSystem::setIdle(bool)=0x80428440
AudRhythmMeSystem::setUsingRhythmParser(unsigned long)=0x80428480
short::(nit_\AudRhythmMeSystem_cpp)=0x80428510
AudMeHandles::__ct(AudMeHandle*, int)=0x804285B0
AudMeHandles::getHandleMeID(unsigned long)=0x804285C0
AudMeHandles::getFreeHandle(void)=0x80428610
AudMeObject::__ct(JGeometry::TVec3<float>*, unsigned char, JKRHeap*)=0x80428650
AudMeHandle::__ct(void)=0x80428700
AudMeHandle::__dt(void)=0x80428710
AudMeObject::__dt(void)=0x80428770
AudMeObject::dispose(void)=0x804287F0
AudMeObject::startMe(unsigned long)=0x80428860
AudMeObject::getLowestPrioHandle(unsigned long)=0x80428940
AudScaleData::initScaleData(unsigned long)=0x80428A00
AudChordTable::__ct(void)=0x80428A20
AudChordTable::setChordTable(long, JKRArchive*)=0x80428A40
AudChordTable::setChordTableResource(void*)=0x80428AA0
AudChordInfo::__ct(void)=0x80428BD0
AudChordInfo::init(JKRArchive*)=0x80428C60
AudChordInfo::loadChordInfo(short, bool)=0x80428C70
AudChordInfo::setCurChord(long)=0x80428D30
AudChordInfo::setCurScale(long)=0x80428DB0
AudChordInfo::getBassNote(void) const=0x80428E00
AudChordInfo::getThird(void)=0x80428E20
AudChordInfo::getRoot(void) const=0x80428EF0
AudChordInfo::getChordTone(int) const=0x80428F00
AudChordInfo::getFifth(void)=0x80428F10
AudChordInfo::getSeventh(void)=0x80428FE0
AudChordInfo::getSixth(void)=0x804290B0
AudChordInfo::getNinth(void)=0x80429170
AudChordInfo::getEleventh(void)=0x80429250
AudChordInfo::isOnChord(unsigned char, bool, bool)=0x80429310
AudChordInfo::getAddNote(int) const=0x804293F0
AudChordInfo::getNearestChordNoteDir(unsigned char, bool)=0x80429400
AudChordInfo::getNearestChordNote(unsigned char)=0x80429520
AudChordInfo::getUpperNoteOnChord(unsigned char, long)=0x804295B0
AudChordInfo::getLowerNoteOnChord(unsigned char, long)=0x80429680
AudChordInfo::getOnScaleType(unsigned char)=0x80429760
AudChordInfo::getScaleNoteUp(long)=0x80429830
AudChordInfo::getScaleNoteDown(long)=0x80429840
AudChordInfo::getNearestScaleNoteDir(unsigned char, bool)=0x80429850
AudChordInfo::getNearestScaleNote(unsigned char)=0x80429980
AudChordInfo::getUpperNoteOnScale(unsigned char, long)=0x80429A00
AudChordInfo::getLowerNoteOnScale(unsigned char, long)=0x80429AD0
AudChordInfo::expandChordNote(void)=0x80429BB0
AudChordInfo::getChordNoteIndex(unsigned char)=0x80429D10
AudChordInfo::addIndexInChordNoteList(long, long, long&)=0x80429D50
AudChordInfo::subIndexInChordNoteList(long, long, long&)=0x80429DE0
AudChordInfo::getScaleNoteIndex(unsigned char, bool)=0x80429E60
AudChordInfo::addIndexInScaleNoteList(long, long, long&)=0x80429F00
AudChordInfo::subIndexInScaleNoteList(long, long, long&)=0x80429FD0
AudChordInfo::initParams(void)=0x8042A090
AudRhythmHolder::__ct(void)=0x8042A100
AudRhythmHolder::movement(void)=0x8042A140
AudRhythmHolder::copyInfoFromParser(void)=0x8042A2D0
AudRhythmHolder::init(void)=0x8042A560
AudRhythmHolder::copyInfoFromParserOne(unsigned long, unsigned long, unsigned long, x)=0x8042A5E0
AudRhythmWrap::rhythmProc(void)=0x8042A6D0
short::(nit_\AudRhythmWrap_cpp)=0x8042A8C0
CreeperPoint::__ct(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const CreeperPoint*)=0x8042A960
CreeperPoint::updateFree(void)=0x8042AAB0
CreeperPoint::updateBend(bool, const JGeometry::TVec3<float>&, float, float)=0x8042AB80
CreeperPoint::updateLocalAxis(void)=0x8042AD30
Creeper::__ct(const char*)=0x8042ADD0
Creeper::init(const JMapInfoIter&)=0x8042AEA0
Creeper::exeHangStart(void)=0x8042B0E0
Creeper::exeHangUp(void)=0x8042B160
Creeper::exeHangDown(void)=0x8042B1F0
Creeper::initPoints(void)=0x8042B340
Creeper::makeActorAppeared(void)=0x8042B520
Creeper::control(void)=0x8042B580
Creeper::getHeadPoint(void) const=0x8042B690
Creeper::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8042B6B0
Creeper::updatePoints(void)=0x8042B8E0
Creeper::bendPoints(void)=0x8042B940
Creeper::tryHangUp(void)=0x8042BA30
Creeper::tryJump(void)=0x8042BAC0
Creeper::updateHangUp(float)=0x8042BCA0
Creeper::calcAndGetCurrentInfo(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*) const=0x8042BDF0
@unnamed@Creeper_cpp@::sendVertex(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, unsigned long, float, float)=0x8042BF70
Creeper::draw(void) const=0x8042BFF0
Creeper::loadMaterial(void) const=0x8042C2B0
Creeper::__dt(void)=0x8042C4B0
short::(nit_\Creeper_cpp)=0x8042C510
NrvCreeper::CreeperNrvFree::__ct(void)=0x8042C5A0
NrvCreeper::CreeperNrvFreeInvalid::__ct(void)=0x8042C5B0
NrvCreeper::CreeperNrvHangStart::__ct(void)=0x8042C5C0
NrvCreeper::CreeperNrvHangUp::__ct(void)=0x8042C5D0
NrvCreeper::CreeperNrvHangDown::__ct(void)=0x8042C5E0
NrvCreeper::CreeperNrvHangDown::execute(Spine*) const=0x8042C5F0
NrvCreeper::CreeperNrvHangUp::execute(Spine*) const=0x8042C600
NrvCreeper::CreeperNrvHangStart::execute(Spine*) const=0x8042C610
NrvCreeper::CreeperNrvFreeInvalid::execute(Spine*) const=0x8042C620
NrvCreeper::CreeperNrvFree::execute(Spine*) const=0x8042C680
Fluff::__ct(const char*)=0x8042C690
Fluff::init(const JMapInfoIter&)=0x8042C740
Fluff::makeActorAppeared(void)=0x8042C8A0
Fluff::makeActorDead(void)=0x8042C8F0
Fluff::initAfterPlacement(void)=0x8042C940
Fluff::onDemoAction(void)=0x8042C9E0
Fluff::exeFreeBloom(void)=0x8042CA20
Fluff::exeFreeWaitOnGround(void)=0x8042CAF0
Fluff::exeFreeWaitAir(void)=0x8042CB60
Fluff::exeFreeWaitInvalid(void)=0x8042CC90
Fluff::exeRideStart(void)=0x8042CD70
Fluff::exeRideFly(void)=0x8042CE40
Fluff::exeRideFlyOnWind(void)=0x8042CF20
Fluff::exeRideSpinUp(void)=0x8042CFE0
Fluff::calcAndSetBaseMtx(void)=0x8042D230
Fluff::attackSensor(HitSensor*, HitSensor*)=0x8042D280
Fluff::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8042D2E0
Fluff::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8042D410
Fluff::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8042D540
Fluff::endBind(float)=0x8042D830
Fluff::updateRide(void)=0x8042D9B0
Fluff::updateWind(void)=0x8042DBB0
Fluff::trySpinUp(long)=0x8042DF00
MR::FunctorV0M<Fluff*,M5FluffFPCvPv_v>::__cl(void) const=0x8042DFB0
MR::FunctorV0M<Fluff*,M5FluffFPCvPv_v>::clone(JKRHeap*) const=0x8042DFE0
Fluff::__dt(void)=0x8042E050
short::(nit_\Fluff_cpp)=0x8042E0B0
NrvFluff::FluffNrvBeforeBloom::__ct(void)=0x8042E120
NrvFluff::FluffNrvFreeBloom::__ct(void)=0x8042E130
NrvFluff::FluffNrvFreeWaitOnGround::__ct(void)=0x8042E140
NrvFluff::FluffNrvFreeWaitAir::__ct(void)=0x8042E150
NrvFluff::FluffNrvFreeWaitInvalid::__ct(void)=0x8042E160
NrvFluff::FluffNrvRideStart::__ct(void)=0x8042E170
NrvFluff::FluffNrvRideFly::__ct(void)=0x8042E180
NrvFluff::FluffNrvRideFlyOnWind::__ct(void)=0x8042E190
NrvFluff::FluffNrvRideSpinUp::__ct(void)=0x8042E1A0
NrvFluff::FluffNrvRideSpinUpOnWind::__ct(void)=0x8042E1B0
NrvFluff::FluffNrvRideSpinUpOnWind::execute(Spine*) const=0x8042E1C0
NrvFluff::FluffNrvRideSpinUp::execute(Spine*) const=0x8042E1D0
NrvFluff::FluffNrvRideFlyOnWind::execute(Spine*) const=0x8042E1E0
NrvFluff::FluffNrvRideFly::execute(Spine*) const=0x8042E1F0
NrvFluff::FluffNrvRideStart::execute(Spine*) const=0x8042E200
NrvFluff::FluffNrvFreeWaitInvalid::execute(Spine*) const=0x8042E210
NrvFluff::FluffNrvFreeWaitAir::execute(Spine*) const=0x8042E220
NrvFluff::FluffNrvFreeWaitOnGround::execute(Spine*) const=0x8042E230
NrvFluff::FluffNrvFreeBloom::execute(Spine*) const=0x8042E240
NrvFluff::FluffNrvBeforeBloom::execute(Spine*) const=0x8042E250
FluffWindEffect::__ct(const char*)=0x8042E260
FluffWindEffect::initEffectInfo(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const char*, float)=0x8042E2C0
FluffWindEffect::init(const JMapInfoIter&)=0x8042E3B0
FluffWindEffect::makeActorAppeared(void)=0x8042E3C0
FluffWindEffect::makeActorDead(void)=0x8042E400
FluffWindEffect::exeBrowWind(void)=0x8042E440
FluffWind::startClipped(void)=0x8042E4F0
FluffWind::__ct(const char*)=0x8042E500
FluffWind::init(const JMapInfoIter&)=0x8042E550
FluffWind::makeActorAppeared(void)=0x8042E750
FluffWind::makeActorDead(void)=0x8042E7C0
FluffWindHolder::__ct(void)=0x8042E830
FluffWindHolder::calcWindInfo(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float*) const=0x8042E880
FluffFunction::calcFluffWindInfo(const JGeometry::TVec3<float>&, JGeometry::TVec3<float>*, float*)=0x8042E9A0
MR::FunctorV0M<FluffWind*,M9FluffWindFPCvPv_v>::__cl(void) const=0x8042EA20
MR::FunctorV0M<FluffWind*,M9FluffWindFPCvPv_v>::clone(JKRHeap*) const=0x8042EA50
FluffWindEffect::__dt(void)=0x8042EAC0
FluffWind::__dt(void)=0x8042EB20
FluffWindHolder::__dt(void)=0x8042EB80
short::(nit_\FluffWind_cpp)=0x8042EBE0
NrvFluffWindEffect::FluffWindEffectNrvBrowWind::__ct(void)=0x8042EBF0
NrvFluffWindEffect::FluffWindEffectNrvBrowWind::execute(Spine*) const=0x8042EC00
GliBird::__ct(const char*)=0x8042ED40
GliBird::init(const JMapInfoIter&)=0x8042EF40
GliBird::movement(void)=0x8042F2E0
GliBird::control(void)=0x8042F2F0
GliBird::calcAndSetBaseMtx(void)=0x8042FEB0
GliBird::attackSensor(HitSensor*, HitSensor*)=0x80430000
GliBird::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x804300A0
GliBird::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x804301F0
GliBird::__dt(void)=0x80431A30
short::(nit_\GliBird_cpp)=0x80431A90
GliBirdFootJointCtrl::__ct(GliBird*)=0x80431C70
GliBirdFootJointCtrl::init(const JMapInfoIter&)=0x80431CD0
GliBirdFootJointCtrl::calcAnim(void)=0x80431EF0
GliBirdFootJointCtrl::__dt(void)=0x80432020
short::(nit_\GliBirdFootJointCtrl_cpp)=0x80432080
GliBirdTutorial::__ct(void)=0x804320D0
GliBirdTutorial::init(const JMapInfoIter&)=0x80432170
GliBirdTutorial::movement(void)=0x80432230
GliBirdTutorial::appear(void)=0x80432370
GliBirdTutorial::kill(void)=0x804323C0
GliBirdTutorial::__dt(void)=0x80433030
short::(nit_\GliBirdTutorial_cpp)=0x80433090
JumpBranch::__ct(const char*)=0x80433310
JumpBranch::init(const JMapInfoIter&)=0x804333A0
JumpBranch::exeWait(void)=0x80433490
JumpBranch::exeWaitInvalid(void)=0x804334E0
JumpBranch::updateHitSensor(HitSensor*)=0x80433550
JumpBranch::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80433650
JumpBranch::updateBind(void)=0x80433AE0
JumpBranch::__dt(void)=0x80433D00
short::(nit_\JumpBranch_cpp)=0x80433D60
NrvJumpBranch::JumpBranchNrvWait::__ct(void)=0x80433DA0
NrvJumpBranch::JumpBranchNrvWaitInvalid::__ct(void)=0x80433DB0
NrvJumpBranch::JumpBranchNrvBind::__ct(void)=0x80433DC0
NrvJumpBranch::JumpBranchNrvBind::execute(Spine*) const=0x80433DD0
NrvJumpBranch::JumpBranchNrvWaitInvalid::execute(Spine*) const=0x80433E20
NrvJumpBranch::JumpBranchNrvWait::execute(Spine*) const=0x80433E30
Plant::__ct(const char*)=0x80433E40
Plant::init(const JMapInfoIter&)=0x80433F00
Plant::initAfterPlacement(void)=0x804341C0
Plant::appear(void)=0x804341E0
Plant::exeWaitFar(void)=0x80434240
Plant::exeSeedWait(void)=0x804342B0
Plant::exeWaitDemoWaitGrowUp(void)=0x80434340
Plant::exeDemoWaitGrowUp(void)=0x804343C0
Plant::exeGrowUp(void)=0x80434440
Plant::exeHangWaitGrowUp(void)=0x804344F0
Plant::exeHangUpGrowUp(void)=0x80434590
MR::clampMax(float*, float)=0x80434740
Plant::exeGrowthWait(void)=0x80434760
Plant::exeGrowthWaitInvalid(void)=0x80434800
Plant::exeHangStart(void)=0x80434890
Plant::exeHangUp(void)=0x80434910
Plant::exeHangDown(void)=0x804349C0
Plant::initLeaf(void)=0x80434BA0
Plant::calcAnim(void)=0x80434F20
PlantLeaf::getBaseMtx(void) const=0x80434FF0
Plant::startClipped(void)=0x80435000
Plant::endClipped(void)=0x80435080
Plant::updateHitSensor(HitSensor*)=0x80435100
Plant::attackSensor(HitSensor*, HitSensor*)=0x80435190
Plant::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80435270
Plant::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80435300
Plant::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x804353E0
Plant::updateTopMtx(void)=0x80435730
Plant::updateGrowUp(void)=0x80435790
Plant::updateHangUp(float)=0x80435930
Plant::updateBindLeaf(void)=0x80435A40
Plant::startGrowUp(void)=0x80435B20
Plant::tryHangUp(void)=0x80435B40
Plant::tryReachGoal(void)=0x80435BE0
Plant::tryAccelHangUp(void)=0x80435D80
Plant::draw(void) const=0x80435E20
Plant::__dt(void)=0x80435EE0
short::(nit_\Plant_cpp)=0x80435F40
NrvPlant::PlantNrvWaitFar::__ct(void)=0x80435FD0
NrvPlant::PlantNrvSeedWait::__ct(void)=0x80435FE0
NrvPlant::PlantNrvWaitDemoWaitGrowUp::__ct(void)=0x80435FF0
NrvPlant::PlantNrvDemoWaitGrowUp::__ct(void)=0x80436000
NrvPlant::PlantNrvGrowUp::__ct(void)=0x80436010
NrvPlant::PlantNrvHangWaitGrowUp::__ct(void)=0x80436020
NrvPlant::PlantNrvHangUpGrowUp::__ct(void)=0x80436030
NrvPlant::PlantNrvGrowthStop::__ct(void)=0x80436040
NrvPlant::PlantNrvGrowthWait::__ct(void)=0x80436050
NrvPlant::PlantNrvGrowthWaitInvalid::__ct(void)=0x80436060
NrvPlant::PlantNrvHangStart::__ct(void)=0x80436070
NrvPlant::PlantNrvHangUp::__ct(void)=0x80436080
NrvPlant::PlantNrvHangDown::__ct(void)=0x80436090
NrvPlant::PlantNrvHangDown::execute(Spine*) const=0x804360A0
NrvPlant::PlantNrvHangUp::execute(Spine*) const=0x804360B0
NrvPlant::PlantNrvHangStart::execute(Spine*) const=0x804360C0
NrvPlant::PlantNrvGrowthWaitInvalid::execute(Spine*) const=0x804360D0
NrvPlant::PlantNrvGrowthWait::execute(Spine*) const=0x804360E0
NrvPlant::PlantNrvGrowthStop::execute(Spine*) const=0x804360F0
NrvPlant::PlantNrvHangUpGrowUp::execute(Spine*) const=0x80436100
NrvPlant::PlantNrvHangWaitGrowUp::execute(Spine*) const=0x80436110
NrvPlant::PlantNrvGrowUp::execute(Spine*) const=0x80436120
NrvPlant::PlantNrvDemoWaitGrowUp::execute(Spine*) const=0x80436130
NrvPlant::PlantNrvWaitDemoWaitGrowUp::execute(Spine*) const=0x80436140
NrvPlant::PlantNrvSeedWait::execute(Spine*) const=0x80436150
NrvPlant::PlantNrvWaitFar::execute(Spine*) const=0x80436160
PlantLeaf::__ct(float, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x80436170
JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>::scale(float)=0x80436290
PlantLeaf::init(const JMapInfoIter&)=0x80436330
PlantLeaf::updateGrowUp(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float)=0x80436370
PlantLeaf::updateSpring(const JGeometry::TVec3<float>&, float, float)=0x804364A0
PlantLeaf::updateSpring(float)=0x80436570
PlantLeafDrawInit::__ct(const char*)=0x804366F0
PlantLeafDrawInit::init(const JMapInfoIter&)=0x804367B0
PlantLeafDrawInit::initDraw(void) const=0x804367F0
MR::FunctorV0M<const PlantLeafDrawInit*,M17PlantLeafDrawInitFPCvPCv_v>::__cl(void) const=0x80436870
MR::FunctorV0M<const PlantLeafDrawInit*,M17PlantLeafDrawInitFPCvPCv_v>::clone(JKRHeap*) const=0x804368A0
PlantLeaf::__dt(void)=0x80436910
PlantLeafDrawInit::__dt(void)=0x80436970
PlantSlider::__ct(const char*)=0x804369D0
PlantSlider::init(const JMapInfoIter&)=0x80436AB0
PlantSlider::startClipped(void)=0x804371F0
PlantSlider::endClipped(void)=0x804372A0
PlantSlider::control(void)=0x80437350
PlantSlider::updateHitSensor(HitSensor*)=0x80437450
PlantSlider::attackSensor(HitSensor*, HitSensor*)=0x80437520
PlantSlider::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80437530
PlantSlider::draw(void) const=0x804381D0
PlantSlider::__dt(void)=0x804386C0
short::(nit_\PlantSlider_cpp)=0x80438720
PlantStalk::__ct(void)=0x80438AC0
PlantStalk::init(const JMapInfoIter&)=0x80438B50
PlantStalk::draw(void) const=0x80438D40
PlantStalk::updateGrowUp(void)=0x80438D90
PlantStalk::calcPosAndAxisY(JGeometry::TVec3<float>*, JGeometry::TVec3<float>*, float) const=0x80438F90
PlantStalk::calcNearestPos(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&) const=0x80438FA0
PlantStalk::calcPlayerCoord(void) const=0x80438FB0
PlantStalk::drawGrowUp(void) const=0x804390F0
PlantStalkDrawInit::__ct(const char*)=0x804395C0
PlantStalkDrawInit::initDraw(void) const=0x804396A0
MR::FunctorV0M<const PlantStalkDrawInit*,M18PlantStalkDrawInitFPCvPCv_v>::__cl(void) const=0x804398B0
MR::FunctorV0M<const PlantStalkDrawInit*,M18PlantStalkDrawInitFPCvPCv_v>::clone(JKRHeap*) const=0x804398E0
PlantStalk::__dt(void)=0x80439950
PlantStalkDrawInit::__dt(void)=0x804399B0
short::(nit_\PlantStalk_cpp)=0x80439A10
Pole::__ct(const char*)=0x80439A80
Pole::init(const JMapInfoIter&)=0x80439B70
Pole::appear(void)=0x8043A210
Pole::calcAnim(void)=0x8043A250
Pole::exeDemoAppear(void)=0x8043A2C0
Pole::exeFree(void)=0x8043A390
Pole::exeFreeInvalid(void)=0x8043A430
Pole::exeBindStart(void)=0x8043A4E0
Pole::exeBindWait(void)=0x8043A6A0
Pole::exeBindTurn(void)=0x8043A7C0
Pole::exeBindClimbUp(void)=0x8043AAF0
Pole::exeBindFallDown(void)=0x8043ACB0
Pole::exeBindHandstandStart(void)=0x8043B000
Pole::exeBindHandstandWait(void)=0x8043B0F0
Pole::exeBindHandstandEnd(void)=0x8043B180
Pole::exeBindHandstandTurn(void)=0x8043B240
Pole::attackSensor(HitSensor*, HitSensor*)=0x8043B300
Pole::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8043B3B0
Pole::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8043B510
Pole::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8043B5B0
Pole::tryJump(bool, float)=0x8043BAB0
Pole::tryTurn(void)=0x8043BD20
Pole::tryClimbUp(void)=0x8043BD90
Pole::tryFallDown(void)=0x8043BDE0
Pole::tryHandstandTurn(void)=0x8043BE40
Pole::isEnableTurn(void) const=0x8043BE90
Pole::updateBindTrans(void)=0x8043BF40
Pole::calcGravityMtx(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*)=0x8043BF90
Pole::updateTopPos(float)=0x8043C010
Pole::getPoleSubPadStickX(void) const=0x8043C0C0
Pole::getPoleSubPadStickY(void) const=0x8043C100
Pole::getBaseMtx(void) const=0x8043C2F0
Pole::__dt(void)=0x8043C310
short::(nit_\Pole_cpp)=0x8043C370
NrvPole::PoleNrvDemoAppear::__ct(void)=0x8043C410
NrvPole::PoleNrvFree::__ct(void)=0x8043C420
NrvPole::PoleNrvFreeInvalid::__ct(void)=0x8043C430
NrvPole::PoleNrvBindStart::__ct(void)=0x8043C440
NrvPole::PoleNrvBindStartFast::__ct(void)=0x8043C450
NrvPole::PoleNrvBindWait::__ct(void)=0x8043C460
NrvPole::PoleNrvBindTurnLeft::__ct(void)=0x8043C470
NrvPole::PoleNrvBindTurnRight::__ct(void)=0x8043C480
NrvPole::PoleNrvBindTurnEnd::__ct(void)=0x8043C490
NrvPole::PoleNrvBindClimbUp::__ct(void)=0x8043C4A0
NrvPole::PoleNrvBindFallDown::__ct(void)=0x8043C4B0
NrvPole::PoleNrvBindHandstandStart::__ct(void)=0x8043C4C0
NrvPole::PoleNrvBindHandstandWait::__ct(void)=0x8043C4D0
NrvPole::PoleNrvBindHandstandEnd::__ct(void)=0x8043C4E0
NrvPole::PoleNrvBindHandstandTurn::__ct(void)=0x8043C4F0
NrvPole::PoleNrvBindHandstandTurn::execute(Spine*) const=0x8043C500
NrvPole::PoleNrvBindHandstandEnd::execute(Spine*) const=0x8043C510
NrvPole::PoleNrvBindHandstandWait::execute(Spine*) const=0x8043C520
NrvPole::PoleNrvBindHandstandStart::execute(Spine*) const=0x8043C530
NrvPole::PoleNrvBindFallDown::execute(Spine*) const=0x8043C540
NrvPole::PoleNrvBindClimbUp::execute(Spine*) const=0x8043C550
NrvPole::PoleNrvBindTurnEnd::execute(Spine*) const=0x8043C560
NrvPole::PoleNrvBindTurnRight::execute(Spine*) const=0x8043C570
NrvPole::PoleNrvBindTurnLeft::execute(Spine*) const=0x8043C580
NrvPole::PoleNrvBindWait::execute(Spine*) const=0x8043C590
NrvPole::PoleNrvBindStartFast::execute(Spine*) const=0x8043C5A0
NrvPole::PoleNrvBindStart::execute(Spine*) const=0x8043C5B0
NrvPole::PoleNrvFreeInvalid::execute(Spine*) const=0x8043C5C0
NrvPole::PoleNrvFree::execute(Spine*) const=0x8043C5D0
NrvPole::PoleNrvDemoAppear::execute(Spine*) const=0x8043C5E0
RollingRock::__ct(const char*)=0x8043C5F0
RollingRock::init(const JMapInfoIter&)=0x8043C690
RollingRock::makeActorAppeared(void)=0x8043C800
RollingRock::kill(void)=0x8043C840
RollingRock::calcAnim(void)=0x8043C8A0
RollingRock::calcAndSetBaseMtx(void)=0x8043C9C0
RollingRock::attackSensor(HitSensor*, HitSensor*)=0x8043C9D0
RollingRock::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8043CA60
RollingRock::receiveMsgPush(HitSensor*, HitSensor*)=0x8043CAE0
RollingRock::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8043CB50
RollingRock::__dt(void)=0x8043CC50
short::(nit_\RollingRock_cpp)=0x8043CCB0
SledRopePoint::__ct(const JGeometry::TVec3<float>&, float)=0x804404D0
SledRopePoint::updatePos(float)=0x804405A0
SphereAccelSensorController::__ct(void)=0x80440710
SphereAccelSensorController::getPadAcceleration(JGeometry::TVec3<float>*) const=0x804407C0
SphereAccelSensorController::testBrake(void) const=0x804407F0
SphereAccelSensorController::calcJumpPower(void) const=0x80440860
SphereAccelSensorController::doBrake(void) const=0x804408A0
SphereAccelSensorController::update(const JGeometry::TVec3<float>&)=0x804408B0
SphereAccelSensorController::clacXY(float*, float*)=0x804408C0
SphereController::notifyDeactivate(void)=0x80440B90
SphereController::notifyActivate(void)=0x80440BA0
SphereController::__ct(void)=0x80440BB0
SphereController::calcMoveVector(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80440BD0
SphereController::update(const JGeometry::TVec3<float>&)=0x80440BF0
SphereController::doBrake(void) const=0x80440C00
SphereController::calcJumpPower(void) const=0x80440C10
SpherePadController::__ct(void)=0x80440C20
SpherePadController::calcMoveVector(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&)=0x80440C60
SpherePadController::calcJumpPower(void) const=0x80440C70
SpherePadController::update(const JGeometry::TVec3<float>&)=0x80440CB0
SpherePadController::clacXY(float*, float*)=0x80440CC0
SpherePadController::calcDirSphereMove(JGeometry::TVec3<float>*, const JGeometry::TVec3<float>&, unsigned long)=0x80440D10
JGeometry::TRotation3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>::setRotate(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80440FE0
SwingRope::init(const JMapInfoIter&)=0x804410B0
SwingRope::draw(void) const=0x80441210
SwingRope::exeStop(void)=0x804412A0
SwingRope::exeFree(void)=0x80441320
SwingRope::exeBindSlideDownStart(void)=0x80441490
SwingRope::exeBindSlideDown(void)=0x80441510
SwingRope::exeBindStretch(void)=0x80441560
SwingRope::initPoints(void)=0x804415E0
SwingRope::updateHitSensor(HitSensor*)=0x80441710
SwingRope::attackSensor(HitSensor*, HitSensor*)=0x804417F0
SwingRope::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80441810
SwingRope::calcPointNo(float) const=0x80441AD0
SwingRope::calcFriction(long) const=0x80441B30
SwingRope::addPointGravity(void)=0x80441BE0
SwingRope::restrictPointToTail(long, const JGeometry::TVec3<float>*, float)=0x80441C60
SwingRope::restrictPointToHead(long, const JGeometry::TVec3<float>&, float)=0x80441D40
SwingRope::isAllPointsStop(void) const=0x80441DF0
SwingRope::isStretched(void) const=0x80441E70
SwingRope::tryJump(void)=0x80441ED0
SwingRope::updateHangPoint(void)=0x80442170
SwingRope::updateRideMtx(void)=0x804423E0
SwingRope::updateFootPos(void)=0x80442450
SwingRope::updateStretch(void)=0x80442590
SwingRope::updateLoose(void)=0x80442600
SwingRope::updateLooseUpperPoints(void)=0x80442660
SwingRope::updateSlideDown(void)=0x804427A0
SwingRope::updateStretchHangUpperPoints(void)=0x804428D0
SwingRope::updateHangLowerPoints(void)=0x80442AF0
SwingRope::updateHangLowerPointPos(long)=0x80442C60
@unnamed@SwingRope_cpp@::sendPoint(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float, unsigned long, float, float)=0x80442D20
@unnamed@SwingRope_cpp@::drawLine(const SwingRope*, unsigned long, unsigned long, float, float, float, float)=0x80442DA0
@unnamed@SwingRope_cpp@::drawLineAtHanging(const SwingRope*, unsigned long, unsigned long, float, float, float, float, float, float)=0x80442F80
SwingRope::drawStop(void) const=0x80443160
SwingRope::drawFree(void) const=0x804433E0
SwingRope::drawBind(void) const=0x80443470
SwingRopeGroup::__ct(const char*)=0x80443560
SwingRopeGroup::initDraw(void) const=0x80443640
MR::FunctorV0M<const SwingRopeGroup*,M14SwingRopeGroupFPCvPCv_v>::__cl(void) const=0x80443840
MR::FunctorV0M<const SwingRopeGroup*,M14SwingRopeGroupFPCvPCv_v>::clone(JKRHeap*) const=0x80443870
SwingRope::__dt(void)=0x804438E0
SwingRopeGroup::__dt(void)=0x80443940
short::(nit_\SwingRope_cpp)=0x804439A0
NrvSwingRope::SwingRopeNrvStop::__ct(void)=0x80443A40
NrvSwingRope::SwingRopeNrvFree::__ct(void)=0x80443A50
NrvSwingRope::SwingRopeNrvFreeInvalid::__ct(void)=0x80443A60
NrvSwingRope::SwingRopeNrvBindSlideDownStart::__ct(void)=0x80443A70
NrvSwingRope::SwingRopeNrvBindSlideDown::__ct(void)=0x80443A80
NrvSwingRope::SwingRopeNrvBindStretch::__ct(void)=0x80443A90
NrvSwingRope::SwingRopeNrvBindLoose::__ct(void)=0x80443AA0
NrvSwingRope::SwingRopeNrvBindLoose::execute(Spine*) const=0x80443AB0
NrvSwingRope::SwingRopeNrvBindStretch::execute(Spine*) const=0x80443B10
NrvSwingRope::SwingRopeNrvBindSlideDown::execute(Spine*) const=0x80443B20
NrvSwingRope::SwingRopeNrvBindSlideDownStart::execute(Spine*) const=0x80443B30
NrvSwingRope::SwingRopeNrvFreeInvalid::execute(Spine*) const=0x80443B40
NrvSwingRope::SwingRopeNrvFree::execute(Spine*) const=0x80443B90
NrvSwingRope::SwingRopeNrvStop::execute(Spine*) const=0x80443BA0
SwingRopePoint::__ct(const JGeometry::TVec3<float>&)=0x80443BB0
SwingRopePoint::addAccel(const JGeometry::TVec3<float>&)=0x80443C30
SwingRopePoint::restrict(const JGeometry::TVec3<float>&, float, const JGeometry::TVec3<float>*)=0x80443C40
SwingRopePoint::strain(const JGeometry::TVec3<float>&, float)=0x80443DD0
SwingRopePoint::updatePos(float)=0x80443F20
SwingRopePoint::updateAxis(const JGeometry::TVec3<float>&)=0x80443F70
SwingRopePoint::updatePosAndAxis(const JGeometry::TVec3<float>&, float)=0x80444040
SwingRopePoint::stop(void)=0x80444090
SwingRopePoint::setInfo(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float)=0x804440A0
SwingRopePoint::setPosAndAxis(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x804441E0
SwingRopePoint::setAndUpdatePosAndAxis(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&)=0x80444250
Tamakoro::__ct(const char*)=0x804442D0
Tamakoro::init(const JMapInfoIter&)=0x80444470
Tamakoro::initJointControl(void)=0x80444650
Tamakoro::ringMtxCallBack(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80444730
Tamakoro::control(void)=0x804447E0
Tamakoro::calcAndSetBaseMtx(void)=0x804448A0
Tamakoro::updateBindActorMatrix(void)=0x804448E0
Tamakoro::updateRingUpVec(void)=0x80444A00
Tamakoro::attackSensor(HitSensor*, HitSensor*)=0x80444AD0
Tamakoro::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80444D20
Tamakoro::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80444D30
Tamakoro::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80444E80
Tamakoro::requestBind(HitSensor*)=0x80445050
Tamakoro::requestEndBind(void)=0x804452E0
Tamakoro::startRide(void)=0x80445400
Tamakoro::requestTutorialEnd(void)=0x80445450
Tamakoro::tryFall(void)=0x804454B0
Tamakoro::tryJump(void)=0x804454F0
Tamakoro::tryBumpWall(void)=0x80445560
Tamakoro::tryLand(void)=0x80445620
Tamakoro::tryBindStarPointer(void)=0x80445740
Tamakoro::reactionCollision(void)=0x804457A0
Tamakoro::exeStandByBind(void)=0x80445930
Tamakoro::exeBindStart(void)=0x804459D0
Tamakoro::exeBindStartLand(void)=0x80445B80
Tamakoro::exeTutorial(void)=0x80445D80
Tamakoro::exeWait(void)=0x80445EB0
Tamakoro::exeFall(void)=0x80445FB0
Tamakoro::exeJump(void)=0x804460A0
Tamakoro::exeBumpWall(void)=0x80446200
Tamakoro::exeLand(void)=0x80446310
Tamakoro::exeFreeze(void)=0x80446440
Tamakoro::exeJumpHole(void)=0x80446520
Tamakoro::exeJumpHoleSetUp(void)=0x804465C0
Tamakoro::exeJumpHoleLaunch(void)=0x80446620
Tamakoro::exeDashRail(void)=0x804466C0
Tamakoro::exeDashRailEnd(void)=0x80446790
Tamakoro::exeRideRail(void)=0x804468C0
Tamakoro::exeRideRailFastStart(void)=0x80446950
Tamakoro::exeRideRailFast(void)=0x804469D0
Tamakoro::exeRideRailFastEnd(void)=0x80446A70
Tamakoro::exeBindEnd(void)=0x80446AE0
Tamakoro::addVelocityOperate(void)=0x80446C60
Tamakoro::updateRideRail(void)=0x80446CF0
Tamakoro::updateMoment(void)=0x80446D80
Tamakoro::updateAirTime(void)=0x80446E40
Tamakoro::updateMarioPose(float)=0x80446E90
Tamakoro::updateMarioOffset(void)=0x80447120
Tamakoro::updateMoveBckBlend(float)=0x80447180
Tamakoro::updateSquatBckBlend(float)=0x804472E0
Tamakoro::isEnablePushPlayer(void) const=0x80447370
Tamakoro::isEnableEnemyAttack(void) const=0x804473D0
Tamakoro::isEnableBallBind(void) const=0x80447490
Tamakoro::isEnebleHitCollisionMessage(void) const=0x80447540
Tamakoro::isUseMarioOffset(void) const=0x80447550
Tamakoro::isGroundMomentBall(void) const=0x804475B0
Tamakoro::isRideRail(void) const=0x80447630
Tamakoro::isNeedTutorial(void) const=0x804476B0
Tamakoro::startRotateLevelSound(void)=0x804476D0
Tamakoro::startTamakoroBgm(void)=0x80447790
JointControlDelegator<Tamakoro>::__dt(void)=0x80447800
JointControlDelegator<Tamakoro>::calcJointMatrix(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x80447840
JointControlDelegator<Tamakoro>::calcJointMatrixAfterChild(JGeometry::TPosition3<JGeometry::TMatrix34<JGeometry::SMatrix34C<float>>>*, const JointControllerInfo&)=0x804478B0
Tamakoro::__dt(void)=0x80447920
short::(nit_\Tamakoro_cpp)=0x80447980
NrvTamakoro::TamakoroNrvStandByTutorial::__ct(void)=0x80447A50
NrvTamakoro::TamakoroNrvStandByBind::__ct(void)=0x80447A60
NrvTamakoro::TamakoroNrvBindStart::__ct(void)=0x80447A70
NrvTamakoro::TamakoroNrvBindStartLand::__ct(void)=0x80447A80
NrvTamakoro::TamakoroNrvTutorial::__ct(void)=0x80447A90
NrvTamakoro::TamakoroNrvWait::__ct(void)=0x80447AA0
NrvTamakoro::TamakoroNrvFall::__ct(void)=0x80447AB0
NrvTamakoro::TamakoroNrvJump::__ct(void)=0x80447AC0
NrvTamakoro::TamakoroNrvBumpWall::__ct(void)=0x80447AD0
NrvTamakoro::TamakoroNrvLand::__ct(void)=0x80447AE0
NrvTamakoro::TamakoroNrvFreeze::__ct(void)=0x80447AF0
NrvTamakoro::TamakoroNrvJumpHole::__ct(void)=0x80447B00
NrvTamakoro::TamakoroNrvJumpHoleSetUp::__ct(void)=0x80447B10
NrvTamakoro::TamakoroNrvJumpHoleLaunch::__ct(void)=0x80447B20
NrvTamakoro::TamakoroNrvDashRail::__ct(void)=0x80447B30
NrvTamakoro::TamakoroNrvDashRailEnd::__ct(void)=0x80447B40
NrvTamakoro::TamakoroNrvRideRail::__ct(void)=0x80447B50
NrvTamakoro::TamakoroNrvRideRailFastStart::__ct(void)=0x80447B60
NrvTamakoro::TamakoroNrvRideRailFast::__ct(void)=0x80447B70
NrvTamakoro::TamakoroNrvRideRailFastEnd::__ct(void)=0x80447B80
NrvTamakoro::TamakoroNrvBindEnd::__ct(void)=0x80447B90
NrvTamakoro::TamakoroNrvBindEnd::execute(Spine*) const=0x80447BA0
NrvTamakoro::TamakoroNrvRideRailFastEnd::execute(Spine*) const=0x80447BB0
NrvTamakoro::TamakoroNrvRideRailFast::execute(Spine*) const=0x80447BC0
NrvTamakoro::TamakoroNrvRideRailFastStart::execute(Spine*) const=0x80447BD0
NrvTamakoro::TamakoroNrvRideRail::execute(Spine*) const=0x80447BE0
NrvTamakoro::TamakoroNrvDashRailEnd::execute(Spine*) const=0x80447BF0
NrvTamakoro::TamakoroNrvDashRail::execute(Spine*) const=0x80447C00
NrvTamakoro::TamakoroNrvJumpHoleLaunch::executeOnEnd(Spine*) const=0x80447C10
NrvTamakoro::TamakoroNrvJumpHoleLaunch::execute(Spine*) const=0x80447C60
NrvTamakoro::TamakoroNrvJumpHoleSetUp::execute(Spine*) const=0x80447C70
NrvTamakoro::TamakoroNrvJumpHole::execute(Spine*) const=0x80447C80
NrvTamakoro::TamakoroNrvFreeze::execute(Spine*) const=0x80447C90
NrvTamakoro::TamakoroNrvLand::execute(Spine*) const=0x80447CA0
NrvTamakoro::TamakoroNrvBumpWall::execute(Spine*) const=0x80447CB0
NrvTamakoro::TamakoroNrvJump::execute(Spine*) const=0x80447CC0
NrvTamakoro::TamakoroNrvFall::execute(Spine*) const=0x80447CD0
NrvTamakoro::TamakoroNrvWait::execute(Spine*) const=0x80447CE0
NrvTamakoro::TamakoroNrvTutorial::execute(Spine*) const=0x80447CF0
NrvTamakoro::TamakoroNrvBindStartLand::execute(Spine*) const=0x80447D00
NrvTamakoro::TamakoroNrvBindStart::execute(Spine*) const=0x80447D10
NrvTamakoro::TamakoroNrvStandByBind::execute(Spine*) const=0x80447D20
NrvTamakoro::TamakoroNrvStandByTutorial::execute(Spine*) const=0x80447D30
TamakoroTutorial::__ct(const char*)=0x80447DB0
TamakoroTutorial::init(const JMapInfoIter&)=0x80447E20
TamakoroTutorial::initAfterPlacement(void)=0x80448000
TamakoroTutorial::isNeedTutorial(void)=0x80448050
TamakoroTutorial::requestStart(void)=0x80448060
TamakoroTutorial::requestEnd(void)=0x804480A0
TamakoroTutorial::control(void)=0x804480B0
TamakoroTutorial::exeFirst(void)=0x804480F0
TamakoroTutorial::exeDenyTalk(void)=0x80448210
TamakoroTutorial::exeFirstForceTalk(void)=0x80448260
TamakoroTutorial::exeWaitRideTalk(void)=0x804482C0
TamakoroTutorial::exeWaitRide(void)=0x80448330
TamakoroTutorial::exeWaitRaiseTalk(void)=0x80448380
TamakoroTutorial::exeWaitRaiseStable(void)=0x80448420
TamakoroTutorial::exeRaiseOk(void)=0x80448500
TamakoroTutorial::exeRaiseOkTalk(void)=0x80448560
TamakoroTutorial::exeFinalTalk(void)=0x804485D0
TamakoroTutorial::exeWait(void)=0x80448670
TamakoroTutorial::exeTrample(void)=0x80448700
TamakoroTutorial::exeRecover(void)=0x80448800
TamakoroTutorial::attackSensor(HitSensor*, HitSensor*)=0x804488B0
TamakoroTutorial::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x80448930
TamakoroTutorial::updateHitSensor(HitSensor*)=0x80448AC0
TamakoroTutorial::startTimerSound(long, long)=0x80448BC0
TamakoroTutorial::__dt(void)=0x80448C40
short::(nit_\TamakoroTutorial_cpp)=0x80448CA0
NrvTamakoroTutorial::HostTypeNrvFirst::__ct(void)=0x80448D60
NrvTamakoroTutorial::HostTypeNrvDenyTalk::__ct(void)=0x80448D70
NrvTamakoroTutorial::HostTypeNrvFirstForceTalk::__ct(void)=0x80448D80
NrvTamakoroTutorial::HostTypeNrvWaitRideTalk::__ct(void)=0x80448D90
NrvTamakoroTutorial::HostTypeNrvWaitRide::__ct(void)=0x80448DA0
NrvTamakoroTutorial::HostTypeNrvWaitRaiseTalk::__ct(void)=0x80448DB0
NrvTamakoroTutorial::HostTypeNrvWaitRaiseStable::__ct(void)=0x80448DC0
NrvTamakoroTutorial::HostTypeNrvRaiseOk::__ct(void)=0x80448DD0
NrvTamakoroTutorial::HostTypeNrvRaiseOkTalk::__ct(void)=0x80448DE0
NrvTamakoroTutorial::HostTypeNrvFinalTalk::__ct(void)=0x80448DF0
NrvTamakoroTutorial::HostTypeNrvWait::__ct(void)=0x80448E00
NrvTamakoroTutorial::HostTypeNrvDirectRide::__ct(void)=0x80448E10
NrvTamakoroTutorial::HostTypeNrvTrampleFront::__ct(void)=0x80448E20
NrvTamakoroTutorial::HostTypeNrvTrampleBack::__ct(void)=0x80448E30
NrvTamakoroTutorial::HostTypeNrvRecoverFront::__ct(void)=0x80448E40
NrvTamakoroTutorial::HostTypeNrvRecoverBack::__ct(void)=0x80448E50
NrvTamakoroTutorial::HostTypeNrvRecoverBack::execute(Spine*) const=0x80448E60
NrvTamakoroTutorial::HostTypeNrvRecoverFront::execute(Spine*) const=0x80448E70
NrvTamakoroTutorial::HostTypeNrvTrampleBack::execute(Spine*) const=0x80448E80
NrvTamakoroTutorial::HostTypeNrvTrampleFront::execute(Spine*) const=0x80448E90
NrvTamakoroTutorial::HostTypeNrvDirectRide::execute(Spine*) const=0x80448EA0
NrvTamakoroTutorial::HostTypeNrvWait::execute(Spine*) const=0x80448EB0
NrvTamakoroTutorial::HostTypeNrvFinalTalk::execute(Spine*) const=0x80448EC0
NrvTamakoroTutorial::HostTypeNrvRaiseOkTalk::execute(Spine*) const=0x80448ED0
NrvTamakoroTutorial::HostTypeNrvRaiseOk::execute(Spine*) const=0x80448EE0
NrvTamakoroTutorial::HostTypeNrvWaitRaiseStable::execute(Spine*) const=0x80448EF0
NrvTamakoroTutorial::HostTypeNrvWaitRaiseTalk::execute(Spine*) const=0x80448F00
NrvTamakoroTutorial::HostTypeNrvWaitRide::execute(Spine*) const=0x80448F10
NrvTamakoroTutorial::HostTypeNrvWaitRideTalk::execute(Spine*) const=0x80448F20
NrvTamakoroTutorial::HostTypeNrvFirstForceTalk::execute(Spine*) const=0x80448F30
NrvTamakoroTutorial::HostTypeNrvDenyTalk::execute(Spine*) const=0x80448F40
NrvTamakoroTutorial::HostTypeNrvFirst::execute(Spine*) const=0x80448F50
Trapeze::__ct(const char*)=0x80448F60
Trapeze::init(const JMapInfoIter&)=0x80449020
Trapeze::draw(void) const=0x80449290
Trapeze::exeFree(void)=0x804494B0
Trapeze::exeFreeInvalid(void)=0x80449560
Trapeze::exeSwingWait(void)=0x80449600
Trapeze::exeSwingSlideDownStart(void)=0x80449690
Trapeze::exeSwingFrontStart(void)=0x80449700
Trapeze::exeSwingFrontEnd(void)=0x80449890
Trapeze::exeSwingBackStart(void)=0x804499B0
Trapeze::exeSwingBackEnd(void)=0x80449B40
Trapeze::updateHitSensor(HitSensor*)=0x80449C60
Trapeze::attackSensor(HitSensor*, HitSensor*)=0x80449DB0
Trapeze::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x80449DF0
Trapeze::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x80449EB0
Trapeze::tryJump(void)=0x8044A320
Trapeze::updateStick(const JGeometry::TVec3<float>&, float)=0x8044A570
Trapeze::updateStickMtx(void)=0x8044A600
Trapeze::updateHangPoint(void)=0x8044A650
Trapeze::updateBind(void)=0x8044A8F0
Trapeze::updateSwing(void)=0x8044A9B0
Trapeze::updateSlideDown(void)=0x8044AA50
Trapeze::isStartSwingFront(void) const=0x8044AB10
Trapeze::isStartSwingBack(void) const=0x8044AB40
Trapeze::drawRope(const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, const JGeometry::TVec3<float>&, float, float) const=0x8044AB70
TrapezeRopeDrawInit::__ct(const char*)=0x8044B1D0
TrapezeRopeDrawInit::initDraw(void) const=0x8044B2B0
MR::FunctorV0M<const TrapezeRopeDrawInit*,M19TrapezeRopeDrawInitFPCvPCv_v>::__cl(void) const=0x8044B4B0
MR::FunctorV0M<const TrapezeRopeDrawInit*,M19TrapezeRopeDrawInitFPCvPCv_v>::clone(JKRHeap*) const=0x8044B4E0
Trapeze::__dt(void)=0x8044B550
TrapezeRopeDrawInit::__dt(void)=0x8044B5B0
short::(nit_\Trapeze_cpp)=0x8044B610
NrvTrapeze::TrapezeNrvStop::__ct(void)=0x8044B6F0
NrvTrapeze::TrapezeNrvFree::__ct(void)=0x8044B700
NrvTrapeze::TrapezeNrvFreeInvalid::__ct(void)=0x8044B710
NrvTrapeze::TrapezeNrvSwingWait::__ct(void)=0x8044B720
NrvTrapeze::TrapezeNrvSwingSlideDownStart::__ct(void)=0x8044B730
NrvTrapeze::TrapezeNrvSwingSlideDown::__ct(void)=0x8044B740
NrvTrapeze::TrapezeNrvSwingFrontStart::__ct(void)=0x8044B750
NrvTrapeze::TrapezeNrvSwingFrontEnd::__ct(void)=0x8044B760
NrvTrapeze::TrapezeNrvSwingBackStart::__ct(void)=0x8044B770
NrvTrapeze::TrapezeNrvSwingBackEnd::__ct(void)=0x8044B780
NrvTrapeze::TrapezeNrvSlowSwingFrontStart::__ct(void)=0x8044B790
NrvTrapeze::TrapezeNrvSlowSwingFrontEnd::__ct(void)=0x8044B7A0
NrvTrapeze::TrapezeNrvSlowSwingBackStart::__ct(void)=0x8044B7B0
NrvTrapeze::TrapezeNrvSlowSwingBackEnd::__ct(void)=0x8044B7C0
NrvTrapeze::TrapezeNrvSlowSwingBackEnd::execute(Spine*) const=0x8044B7D0
NrvTrapeze::TrapezeNrvSlowSwingBackStart::execute(Spine*) const=0x8044B7E0
NrvTrapeze::TrapezeNrvSlowSwingFrontEnd::execute(Spine*) const=0x8044B7F0
NrvTrapeze::TrapezeNrvSlowSwingFrontStart::execute(Spine*) const=0x8044B800
NrvTrapeze::TrapezeNrvSwingBackEnd::execute(Spine*) const=0x8044B810
NrvTrapeze::TrapezeNrvSwingBackStart::execute(Spine*) const=0x8044B820
NrvTrapeze::TrapezeNrvSwingFrontEnd::execute(Spine*) const=0x8044B830
NrvTrapeze::TrapezeNrvSwingFrontStart::execute(Spine*) const=0x8044B840
NrvTrapeze::TrapezeNrvSwingSlideDown::execute(Spine*) const=0x8044B850
NrvTrapeze::TrapezeNrvSwingSlideDownStart::execute(Spine*) const=0x8044B8A0
NrvTrapeze::TrapezeNrvSwingWait::execute(Spine*) const=0x8044B8B0
NrvTrapeze::TrapezeNrvFreeInvalid::execute(Spine*) const=0x8044B8C0
NrvTrapeze::TrapezeNrvFree::execute(Spine*) const=0x8044B8D0
NrvTrapeze::TrapezeNrvStop::execute(Spine*) const=0x8044B8F0
TubeSlider::__ct(const char*)=0x8044B9B0
TubeSlider::init(const JMapInfoIter&)=0x8044BB00
TubeSlider::updateHitSensor(HitSensor*)=0x8044C6C0
TubeSlider::attackSensor(HitSensor*, HitSensor*)=0x8044C7C0
TubeSlider::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8044CB20
TubeSlider::receiveMsgEnemyAttack(unsigned long, HitSensor*, HitSensor*)=0x8044CB80
TubeSlider::receiveOtherMsg(unsigned long, HitSensor*, HitSensor*)=0x8044CC10
TubeSlider::__dt(void)=0x8044E2A0
short::(nit_\TubeSlider_cpp)=0x8044E300
TubeSliderCoinCreator::__ct(TubeSlider*, bool)=0x8044E620
TubeSliderCoinCreator::init(const JMapInfoIter&)=0x8044E680
TubeSliderCoinCreator::__dt(void)=0x8044E9E0
TubeSliderCrystal::__ct(const JGeometry::TVec3<float>&)=0x8044EA40
TubeSliderCrystal::init(const JMapInfoIter&)=0x8044EAB0
TubeSliderCrystal::calcAndSetBaseMtx(void)=0x8044EB70
TubeSliderCrystal::exeBreak(void)=0x8044EB80
TubeSliderCrystal::attackSensor(HitSensor*, HitSensor*)=0x8044EBF0
TubeSliderCrystal::__dt(void)=0x8044EC50
short::(nit_\TubeSliderCrystal_cpp)=0x8044ECB0
NrvTubeSliderCrystal::TubeSliderCrystalNrvWait::__ct(void)=0x8044ECE0
NrvTubeSliderCrystal::TubeSliderCrystalNrvBreak::__ct(void)=0x8044ECF0
NrvTubeSliderCrystal::TubeSliderCrystalNrvBreak::execute(Spine*) const=0x8044ED00
NrvTubeSliderCrystal::TubeSliderCrystalNrvWait::execute(Spine*) const=0x8044ED10
TubeSliderDamageObj::__ct(long, const JGeometry::TVec3<float>&)=0x8044ED20
TubeSliderDamageObj::init(const JMapInfoIter&)=0x8044EDA0
TubeSliderDamageObj::exeWait(void)=0x8044EE30
TubeSliderDamageObj::exeShake(void)=0x8044EEA0
TubeSliderDamageObj::exeSupportFreeze(void)=0x8044EF40
TubeSliderDamageObj::calcAndSetBaseMtx(void)=0x8044EFC0
TubeSliderDamageObj::attackSensor(HitSensor*, HitSensor*)=0x8044EFD0
TubeSliderDamageObj::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8044F060
TubeSliderDamageObj::control(void)=0x8044F0D0
TubeSliderDamageObjCreator::__ct(TubeSlider*)=0x8044F2A0
TubeSliderDamageObjCreator::init(const JMapInfoIter&)=0x8044F300
TubeSliderDamageObj::__dt(void)=0x8044F6B0
TubeSliderDamageObjCreator::__dt(void)=0x8044F710
short::(nit_\TubeSliderDamageObj_cpp)=0x8044F770
NrvTubeSliderDamageObj::TubeSliderDamageObjNrvWait::__ct(void)=0x8044F7B0
NrvTubeSliderDamageObj::TubeSliderDamageObjNrvShake::__ct(void)=0x8044F7C0
NrvTubeSliderDamageObj::TubeSliderDamageObjNrvSupportFreeze::__ct(void)=0x8044F7D0
NrvTubeSliderDamageObj::TubeSliderDamageObjNrvSupportFreeze::execute(Spine*) const=0x8044F7E0
NrvTubeSliderDamageObj::TubeSliderDamageObjNrvShake::execute(Spine*) const=0x8044F7F0
NrvTubeSliderDamageObj::TubeSliderDamageObjNrvWait::execute(Spine*) const=0x8044F800
TubeSliderEnemy::__ct(TubeSlider*)=0x8044F810
TubeSliderEnemy::init(const JMapInfoIter&)=0x8044F8A0
TubeSliderEnemy::initAfterPlacement(void)=0x8044F9C0
TubeSliderEnemy::control(void)=0x8044FA30
TubeSliderEnemy::exeWait(void)=0x8044FC70
TubeSliderEnemy::exeWalk(void)=0x8044FCE0
TubeSliderEnemy::calcAndSetBaseMtx(void)=0x8044FDA0
TubeSliderEnemy::attackSensor(HitSensor*, HitSensor*)=0x8044FDE0
TubeSliderEnemy::receiveMsgPlayerAttack(unsigned long, HitSensor*, HitSensor*)=0x8044FE40
TubeSliderEnemy::__dt(void)=0x8044FE50
short::(nit_\TubeSliderEnemy_cpp)=0x8044FEB0
NrvTubeSliderEnemy::TubeSliderEnemyNrvWait::__ct(void)=0x8044FEF0
NrvTubeSliderEnemy::TubeSliderEnemyNrvWalk::__ct(void)=0x8044FF00
NrvTubeSliderEnemy::TubeSliderEnemyNrvSupportFreeze::__ct(void)=0x8044FF10
NrvTubeSliderEnemy::TubeSliderEnemyNrvSupportFreeze::execute(Spine*) const=0x8044FF20
NrvTubeSliderEnemy::TubeSliderEnemyNrvWalk::execute(Spine*) const=0x8044FF70
NrvTubeSliderEnemy::TubeSliderEnemyNrvWait::execute(Spine*) const=0x8044FF80
TubeSliderFunction::initChildObjs(TubeSlider*, const JMapInfoIter&)=0x8044FF90
TubeSliderFunction::isGroundSlipWood(TubeSlider*)=0x80450BC0
TubeSliderFunction::isGroundSlipIce(TubeSlider*)=0x80450C10
TubeSliderJumpStep::__ct(const JGeometry::TVec3<float>&, _v)=0x80450D60
TubeSliderJumpStep::init(const JMapInfoIter&)=0x80450DC0
TubeSliderJumpStep::calcAndSetBaseMtx(void)=0x80450E40
TubeSliderJumpStep::exeJump(void)=0x80450E50
TubeSliderJumpStep::attackSensor(HitSensor*, HitSensor*)=0x80450EB0
TubeSliderJumpStep::__dt(void)=0x80450F30
short::(nit_\TubeSliderJumpStep_cpp)=0x80450F90
NrvTubeSliderJumpStep::TubeSliderJumpStepNrvWait::__ct(void)=0x80450FC0
NrvTubeSliderJumpStep::TubeSliderJumpStepNrvJump::__ct(void)=0x80450FD0
NrvTubeSliderJumpStep::TubeSliderJumpStepNrvJump::execute(Spine*) const=0x80450FE0
NrvTubeSliderJumpStep::TubeSliderJumpStepNrvWait::execute(Spine*) const=0x80450FF0
TubeSliderObjCreator::__ct(TubeSlider*, const char*)=0x80451040
TubeSliderObjCreator::init(const JMapInfoIter&)=0x804510A0
TubeSliderObjCreator::__dt(void)=0x804512E0
GameScene::__ct(void)=0x80451390
GameScene::__dt(void)=0x80451400
GameScene::init(void)=0x80451480
GameScene::start(void)=0x804517F0
GameScene::update(void)=0x80451890
GameScene::draw(void) const=0x804518D0
GameScene::calcAnim(void)=0x80451930
GameScene::notifyEndScenarioStarter(void)=0x804519F0
GameScene::requestStartGameOverDemo(void)=0x80451A00
GameScene::requestEndGameOverDemo(void)=0x80451A60
GameScene::requestPowerStarGetDemo(void)=0x80451AF0
GameScene::requestGrandStarGetDemo(void)=0x80451B00
GameScene::setNerveAfterPauseMenu(void)=0x80451B30
GameScene::isExecScenarioOpeningCamera(void) const=0x80451B50
GameScene::isExecScenarioStarter(void) const=0x80451B60
GameScene::isExecStageClearDemo(void) const=0x80451B70
GameScene::initSequences(void)=0x80451EC0
GameScene::initEffect(void)=0x80451FC0
GameScene::draw3D(void) const=0x80452170
GameScene::isDrawMirror(void) const=0x804526A0
GameScene::stageClear(void)=0x804526E0
MR::FunctorV0M<GameScenePauseControl*,M21GameScenePauseControlFPCvPv_v>::__cl(void) const=0x804527D0
MR::FunctorV0M<GameScenePauseControl*,M21GameScenePauseControlFPCvPv_v>::clone(JKRHeap*) const=0x80452800
short::(nit_\GameScene_cpp)=0x80452870
@unnamed@GameSceneFunction_cpp@::getGameScene(void)=0x80452A70
GameSceneFunction::notifyEndScenarioStarter(void)=0x80452A80
GameSceneFunction::requestPowerStarGetDemo(void)=0x80452B40
GameSceneFunction::requestGrandStarGetDemo(void)=0x80452B70
GameSceneFunction::isExecScenarioOpeningCamera(void)=0x80452C00
GameSceneFunction::isExecScenarioStarter(void)=0x80452C30
GameSceneFunction::isExecStageClearDemo(void)=0x80452C60
GameScenePauseControl::__ct(GameScene*)=0x80452DD0
GameScenePauseControl::registerNervePauseMenu(const Nerve*)=0x80452E60
GameScenePauseControl::requestPauseMenuOff(void)=0x80452E70
GameScenePauseControl::exeNormal(void)=0x80452E80
GameScenePauseControl::tryStartPauseMenu(void)=0x80452EE0
GameScenePauseControl::startPauseMenu(void)=0x80452F80
GameScenePauseControl::__dt(void)=0x80452FD0
short::(nit_\GameScenePauseControl_cpp)=0x80453030
NrvGameScenePauseControl::GameScenePauseControlNrvNormal::__ct(void)=0x80453040
NrvGameScenePauseControl::GameScenePauseControlNrvNormal::execute(Spine*) const=0x80453050
GameSceneScenarioOpeningCameraState::__ct(void)=0x80453060
GameSceneScenarioOpeningCameraState::update(void)=0x804530F0
GameSceneScenarioOpeningCameraState::isDone(void) const=0x80453100
GameSceneScenarioOpeningCameraState::start(void)=0x80453110
GameSceneScenarioOpeningCameraState::end(void)=0x80453210
GameSceneScenarioOpeningCameraState::exePlay(void)=0x80453290
GameSceneScenarioOpeningCameraState::trySkipTrigger(void) const=0x80453390
GameSceneScenarioOpeningCameraState::__dt(void)=0x804533E0
short::(nit_\GameSceneScenarioOpeningCameraState_cpp)=0x80453440
NrvGameSceneScenarioOpeningCameraState::GameSceneScenarioOpeningCameraStateNrvWait::__ct(void)=0x80453470
NrvGameSceneScenarioOpeningCameraState::GameSceneScenarioOpeningCameraStateNrvPlay::__ct(void)=0x80453480
NrvGameSceneScenarioOpeningCameraState::GameSceneScenarioOpeningCameraStateNrvPlay::execute(Spine*) const=0x80453490
NrvGameSceneScenarioOpeningCameraState::GameSceneScenarioOpeningCameraStateNrvWait::execute(Spine*) const=0x804534A0
IntermissionScene::__ct(void)=0x804534B0
IntermissionScene::update(void)=0x80453500
IntermissionScene::draw(void) const=0x80453510
IntermissionScene::setCurrentSceneControllerState(const char*, e)=0x80453640
IntermissionScene::__dt(void)=0x804536F0
LogoScene::__ct(void)=0x80453750
LogoScene::__dt(void)=0x804537B0
LogoScene::init(void)=0x80453820
LogoScene::update(void)=0x80453880
LogoScene::calcAnim(void)=0x804538B0
LogoScene::draw(void) const=0x804538E0
LogoScene::isDisplayStrapRemineder(void) const=0x80453960
LogoScene::exeStrapFadein(void)=0x80453A00
LogoScene::exeStrapDisplay(void)=0x80453A80
LogoScene::exeMountGameData(void)=0x80453B70
LogoScene::initLayout(void)=0x80453BC0
LogoScene::tryFadeinLayout(LayoutActor*)=0x80453C70
LogoScene::tryFadeoutLayout(LayoutActor*)=0x80453CF0
short::(nit_\LogoScene_cpp)=0x80453D70
NrvLogoScene::LogoSceneNrvStrapFadein::__ct(void)=0x80453DC0
NrvLogoScene::LogoSceneNrvStrapDisplay::__ct(void)=0x80453DD0
NrvLogoScene::LogoSceneNrvStrapFadeout::__ct(void)=0x80453DE0
NrvLogoScene::LogoSceneNrvMountGameData::__ct(void)=0x80453DF0
NrvLogoScene::LogoSceneNrvWaitReadDoneSystemArchive::__ct(void)=0x80453E00
NrvLogoScene::LogoSceneNrvDeactive::__ct(void)=0x80453E10
NrvLogoScene::LogoSceneNrvDeactive::execute(Spine*) const=0x80453E20
NrvLogoScene::LogoSceneNrvWaitReadDoneSystemArchive::execute(Spine*) const=0x80453E50
NrvLogoScene::LogoSceneNrvMountGameData::execute(Spine*) const=0x80453E90
NrvLogoScene::LogoSceneNrvStrapFadeout::execute(Spine*) const=0x80453EA0
NrvLogoScene::LogoSceneNrvStrapDisplay::execute(Spine*) const=0x80453EF0
NrvLogoScene::LogoSceneNrvStrapFadein::execute(Spine*) const=0x80453F00
ModelWipeScene::__ct(void)=0x80453F70
ModelWipeScene::init(void)=0x80454010
ModelWipeScene::update(void)=0x80454340
ModelWipeScene::calcAnim(void)=0x804543D0
ModelWipeScene::calcViewAndEntry(void)=0x80454490
ModelWipeScene::draw(void) const=0x80454550
ModelWipeScene::__dt(void)=0x80454C60
short::(nit_\ModelWipeScene_cpp)=0x80454CC0
MultiSceneActor::__ct(const char*, const char*, int, bool)=0x80454D80
MultiSceneActor::init(const JMapInfoIter&)=0x80454E50
MultiSceneActor::movement(void)=0x80454E60
MultiSceneActor::control(void)=0x80454ED0
MultiSceneActor::calcAnim(void)=0x80454EE0
MultiSceneActor::calcViewAndEntry(void)=0x80454F70
MultiSceneActor::appear(void)=0x80454FC0
MultiSceneActor::kill(void)=0x80454FE0
MultiSceneActor::initEffect(EffectSystem*, int, const char*)=0x80455030
MultiSceneActor::setNerve(const Nerve*)=0x804550B0
MultiSceneActor::isNerve(const Nerve*) const=0x804550C0
MultiSceneActor::initNerve(const Nerve*)=0x80455100
MultiScene::getResourceHolder(MultiSceneActor*)=0x80455160
MultiScene::startBck(MultiSceneActor*, const char*)=0x80455180
MultiScene::startBtk(MultiSceneActor*, const char*)=0x80455190
MultiScene::startBrk(MultiSceneActor*, const char*)=0x804551A0
MultiScene::startBtp(MultiSceneActor*, const char*)=0x804551B0
MultiScene::startBva(MultiSceneActor*, const char*)=0x804551C0
MultiScene::setBckFrameAndStop(MultiSceneActor*, float)=0x804551D0
MultiScene::setBrkFrameAndStop(MultiSceneActor*, float)=0x80455230
MultiScene::setBtpFrameAndStop(MultiSceneActor*, float)=0x80455290
MultiScene::setBvaFrameAndStop(MultiSceneActor*, float)=0x804552F0
MultiScene::isBckStopped(MultiSceneActor*)=0x80455350
MultiScene::startBckIfExist(MultiSceneActor*, const char*)=0x80455360
MultiScene::startBtkIfExist(MultiSceneActor*, const char*)=0x804553E0
MultiScene::startBrkIfExist(MultiSceneActor*, const char*)=0x80455450
MultiScene::startBtpIfExist(MultiSceneActor*, const char*)=0x804554C0
MultiScene::startBvaIfExist(MultiSceneActor*, const char*)=0x80455530
MultiScene::isStep(const MultiSceneActor*, long)=0x804555D0
MultiScene::isFirstStep(const MultiSceneActor*)=0x804555F0
MultiScene::isGreaterStep(const MultiSceneActor*, long)=0x80455610
MultiScene::isLessStep(const MultiSceneActor*, long)=0x80455630
MultiScene::isLessEqualStep(const MultiSceneActor*, long)=0x80455650
MultiScene::setNerveAtStep(MultiSceneActor*, const Nerve*, long)=0x80455670
MultiScene::setNerveAtBckStopped(MultiSceneActor*, const Nerve*)=0x80455690
MultiScene::calcNerveRate(const MultiSceneActor*, long)=0x804556E0
MultiScene::calcNerveRate(const MultiSceneActor*, long, long)=0x80455760
MultiScene::calcNerveEaseOutRate(const MultiSceneActor*, long)=0x804557E0
MultiScene::calcNerveValue(const MultiSceneActor*, long, float, float)=0x80455810
MultiScene::emitEffect(const MultiSceneActor*, const char*)=0x80455870
MultiScene::deleteEffectAll(const MultiSceneActor*)=0x80455880
MultiScene::forceDeleteEffectAll(const MultiSceneActor*)=0x80455890
MultiScene::getJointMtx(const MultiSceneActor*, const char*)=0x804558A0
MultiSceneEffectKeeper::__ct(const char*, ModelManager*, int, const char*)=0x804558E0
MultiSceneEffectKeeper::init(const MultiSceneActor*, const EffectSystem*)=0x80455960
MultiSceneEffectKeeper::add(const char*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const JGeometry::TVec3<float>*, const char*)=0x80455980
MultiSceneEffectKeeper::add(const char*, A4_fPCc)=0x80455A20
MultiSceneEffectKeeper::create(const char*, EffectSystem*)=0x80455AB0
MultiSceneEffectKeeper::deleteAll(void)=0x80455B00
MultiSceneEffectKeeper::forceDeleteAll(EffectSystem*)=0x80455B70
MultiSceneEffectKeeper::clear(void)=0x80455C00
MultiSceneEffectKeeper::get(const char*) const=0x80455C70
MultiSceneEffectKeeper::find(const char*) const=0x80455C80
MultiSceneEffectKeeper::registerEmitter(MultiEmitter*, const char*)=0x80455D60
PlacementInfoOrdered::__ct(void)=0x80455DC0
PlacementInfoOrdered::insert(const PlacementInfoOrdered::Identifier&, const JMapInfoIter&)=0x80456570
PlacementInfoOrdered::find(const PlacementInfoOrdered::Identifier&) const=0x804565E0
PlacementInfoOrdered::createSameIdSet(const PlacementInfoOrdered::Identifier&)=0x80456670
PlacementInfoOrdered::createIndex(const JMapInfoIter&)=0x80456710
PlacementStateChecker::__ct(const char*)=0x80456830
PlacementStateChecker::setCurrentPlacementZoneId(int)=0x80456880
PlacementStateChecker::clearCurrentPlacementZoneId(void)=0x80456890
PlacementStateChecker::getCurrentPlacementZoneId(void) const=0x804568A0
MR::getPlacementStateChecker(void)=0x804568B0
PlacementStateChecker::__dt(void)=0x804568E0
@unnamed@ScenarioSelectScene_cpp@::createDrawBuffer(void)=0x80456940
@unnamed@ScenarioSelectScene_cpp@::tryResumeInitializeThread(void)=0x804569A0
ScenarioSelectScene::__ct(void)=0x804569F0
ScenarioSelectScene::init(void)=0x80456A60
ScenarioSelectScene::start(void)=0x80456D60
ScenarioSelectScene::startBackground(void)=0x80456D80
ScenarioSelectScene::update(void)=0x80456DC0
ScenarioSelectScene::calcAnim(void)=0x80456E60
ScenarioSelectScene::calcViewAndEntry(void)=0x80456F00
ScenarioSelectScene::draw(void) const=0x80456FA0
ScenarioSelectScene::isActive(void) const=0x804570A0
ScenarioSelectScene::isExecForeground(void) const=0x804570F0
ScenarioSelectScene::isScenarioSelecting(void) const=0x80457160
ScenarioSelectScene::validateScenarioSelect(void)=0x80457170
ScenarioSelectScene::requestReset(bool)=0x804571A0
ScenarioSelectScene::isResetEnd(void) const=0x80457280
ScenarioSelectScene::setupCameraMtx(void) const=0x80457290
ScenarioSelectScene::trySetCurrentScenarioNo(void) const=0x804572E0
ScenarioSelectScene::suspend(void)=0x80457380
ScenarioSelectScene::tryStartScreenToFrame(void)=0x80457410
ScenarioSelectScene::exeDeactive(void)=0x80457460
ScenarioSelectScene::exeStartScenarioSelect(void)=0x804574C0
ScenarioSelectScene::exeWaitScenarioSelect(void)=0x80457540
ScenarioSelectScene::exeWaitResumeInitializeThread(void)=0x804575D0
ScenarioSelectScene::exeWaitInitializeEnd(void)=0x80457620
ScenarioSelectScene::exeWaitResumeInitializeThreadIfRequestedReset(void)=0x804576C0
ScenarioSelectScene::exeWaitResumeInitializeThreadIfCanceledSelect(void)=0x80457720
ScenarioSelectScene::__dt(void)=0x80457790
short::(nit_\ScenarioSelectScene_cpp)=0x804577F0
NrvScenarioSelectScene::ScenarioSelectSceneNrvDeactive::__ct(void)=0x80457860
NrvScenarioSelectScene::ScenarioSelectSceneNrvInvalidScenarioSelect::__ct(void)=0x80457870
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitStartScenarioSelect::__ct(void)=0x80457880
NrvScenarioSelectScene::ScenarioSelectSceneNrvStartScenarioSelect::__ct(void)=0x80457890
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitScenarioSelect::__ct(void)=0x804578A0
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitResumeInitializeThread::__ct(void)=0x804578B0
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitInitializeEnd::__ct(void)=0x804578C0
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitResumeInitializeThreadIfRequestedReset::__ct(void)=0x804578D0
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitResumeInitializeThreadIfCanceledSelect::__ct(void)=0x804578E0
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitResumeInitializeThreadIfCanceledSelect::execute(Spine*) const=0x804578F0
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitResumeInitializeThreadIfRequestedReset::execute(Spine*) const=0x80457900
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitInitializeEnd::execute(Spine*) const=0x80457910
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitResumeInitializeThread::execute(Spine*) const=0x80457920
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitScenarioSelect::execute(Spine*) const=0x80457930
NrvScenarioSelectScene::ScenarioSelectSceneNrvStartScenarioSelect::execute(Spine*) const=0x80457940
NrvScenarioSelectScene::ScenarioSelectSceneNrvWaitStartScenarioSelect::execute(Spine*) const=0x80457950
NrvScenarioSelectScene::ScenarioSelectSceneNrvInvalidScenarioSelect::execute(Spine*) const=0x80457990
NrvScenarioSelectScene::ScenarioSelectSceneNrvDeactive::execute(Spine*) const=0x804579A0
Scene::__ct(const char*)=0x804579B0
Scene::__dt(void)=0x80457A00
Scene::init(void)=0x80457AA0
Scene::start(void)=0x80457AB0
Scene::update(void)=0x80457AC0
Scene::draw(void) const=0x80457AD0
Scene::calcAnim(void)=0x80457AE0
Scene::initNameObjListExecutor(void)=0x80457AF0
Scene::initSceneObjHolder(void)=0x80457B50
SceneDataInitializer::__ct(void)=0x80457B90
SceneDataInitializer::startStageFileLoad(void)=0x80457BE0
SceneDataInitializer::waitDoneStageFileLoad(void)=0x80457C70
SceneDataInitializer::startActorFileLoadCommon(void)=0x80457CB0
SceneDataInitializer::startActorFileLoadScenario(void)=0x80457CD0
SceneDataInitializer::startActorPlacement(void)=0x80457CE0
SceneDataInitializer::initAfterScenarioSelected(void)=0x80457CF0
SceneDataInitializer::__dt(void)=0x80457D00
SceneFunction::movementStopSceneController(void)=0x80457D60
SceneFunction::executeMovementList(void)=0x80457DA0
SceneFunction::executeCalcAnimList(void)=0x80457FC0
SceneFunction::executeCalcViewAndEntryList(void)=0x80458160
SceneFunction::executeCalcViewAndEntryList2D(void)=0x804581A0
SceneFunction::executeDrawBufferListNormalOpaBeforeVolumeShadow(void)=0x80458240
SceneFunction::executeDrawBufferListNormalOpaBeforeSilhouette(void)=0x80458340
SceneFunction::executeDrawBufferListNormalOpa(void)=0x80458370
SceneFunction::executeDrawBufferListNormalXlu(void)=0x80458420
SceneFunction::executeDrawListOpa(void)=0x804584D0
SceneFunction::executeDrawListXlu(void)=0x80458610
SceneFunction::executeDrawSilhouetteAndFillShadow(void)=0x80458670
SceneFunction::executeDrawAlphaShadow(void)=0x804586A0
SceneFunction::executeDrawAfterIndirect(void)=0x804586D0
SceneFunction::executeDrawImageEffect(void)=0x804587E0
SceneFunction::executeDrawList2DNormal(void)=0x80458930
@unnamed@SceneFactory_cpp@::createScene<GameScene>(void, _P5Scene)=0x804589C0
@unnamed@SceneFactory_cpp@::createScene<IntermissionScene>(void, _P5Scene)=0x804589F0
@unnamed@SceneFactory_cpp@::createScene<LogoScene>(void, _P5Scene)=0x80458A20
MR::createScene(const char*)=0x80458A50
SceneFunction::startStageFileLoad(void)=0x80458AE0
SceneFunction::waitDoneStageFileLoad(void)=0x80458B20
SceneFunction::startActorFileLoadCommon(void)=0x80458B50
SceneFunction::startActorFileLoadScenario(void)=0x80458BB0
SceneFunction::startActorPlacement(void)=0x80458BE0
SceneFunction::initAfterScenarioSelected(void)=0x80458C10
SceneFunction::initForNameObj(void)=0x80458C40
SceneFunction::initForLiveActor(void)=0x80458C80
SceneFunction::initEffectSystem(unsigned long, unsigned long)=0x80458D20
SceneFunction::allocateDrawBufferActorList(void)=0x80458D80
CategoryList::execute(MR::MovementType)=0x80458DB0
CategoryList::execute(MR::CalcAnimType)=0x80458DF0
CategoryList::execute(MR::DrawType)=0x80458E30
CategoryList::entryDrawBuffer2D(void)=0x80458E70
CategoryList::entryDrawBuffer3D(void)=0x80458EA0
CategoryList::entryDrawBufferMirror(void)=0x80458ED0
CategoryList::drawOpa(MR::DrawBufferType)=0x80458F60
CategoryList::drawXlu(MR::DrawBufferType)=0x80458FA0
CategoryList::requestMovementOn(MR::MovementType)=0x80458FE0
CategoryList::requestMovementOff(MR::MovementType)=0x80458FF0
SceneFunction::createHioBasicNode(Scene*)=0x80459000
SceneNameObjListExecutor::initMovementList(void)=0x80459010
SceneNameObjListExecutor::initCalcAnimList(void)=0x80459090
SceneNameObjListExecutor::initCalcViewAndEntryList(void)=0x80459110
SceneNameObjListExecutor::initDrawList(void)=0x80459160
SceneNameObjListExecutor::__dt(void)=0x804591E0
@unnamed@SceneNameObjMovementController_cpp@::executeStopCategoriesDemoCommon(void)=0x80459240
StopSceneStateControl::__ct(void)=0x80459350
StopSceneStateControl::requestStopSceneFor(MR::MovementControlType, const NameObj*)=0x804593B0
StopSceneStateControl::requestStopSceneOverwrite(const NameObj*)=0x80459490
StopSceneStateControl::requestPlaySceneFor(MR::MovementControlType, const NameObj*)=0x80459570
StopSceneStateControl::executeStopCategories(MR::MovementControlType)=0x80459630
SceneNameObjMovementController::__ct(void)=0x80459700
SceneNameObjMovementController::requestStopSceneFor(MR::MovementControlType, const NameObj*)=0x80459770
SceneNameObjMovementController::requestStopSceneOverwrite(const NameObj*)=0x80459780
SceneNameObjMovementController::requestPlaySceneFor(MR::MovementControlType, const NameObj*)=0x80459790
SceneNameObjMovementController::movement(void)=0x804597A0
MR::getSceneNameObjMovementController(void)=0x804597F0
MR::notifyRequestNameObjMovementOnOff(void)=0x80459820
StopSceneStateControl::__dt(void)=0x80459850
SceneNameObjMovementController::__dt(void)=0x804598B0
short::(nit_\SceneNameObjMovementController_cpp)=0x80459910
@unnamed@SceneNameObjMovementController_cpp@::StopSceneStateControlNone::__ct(void)=0x80459940
@unnamed@SceneNameObjMovementController_cpp@::StopSceneStateControlStopped::__ct(void)=0x80459950
@unnamed@SceneNameObjMovementController_cpp@::StopSceneStateControlStopped::execute(Spine*) const=0x80459960
@unnamed@SceneNameObjMovementController_cpp@::StopSceneStateControlNone::execute(Spine*) const=0x80459970
SceneObjHolder::__ct(void)=0x80459980
SceneObjHolder::create(int)=0x804599A0
SceneObjHolder::getObj(int) const=0x80459A00
SceneObjHolder::isExist(int) const=0x80459A10
SceneObjHolder::newEachObj(int)=0x80459A30
MR::createSceneObj(int)=0x8045A930
MR::getSceneObjHolder(void)=0x8045A970
MR::isExistSceneObj(int)=0x8045A980
StageDataHolder::initLayerJmpInfo(MR::AssignableArray<JMapInfo>*, const char*, const char*, unsigned long)=0x8045B2F0
StageDataHolder::__ct(const char*, int, bool)=0x8045B5F0
StageDataHolder::init(const JMapInfoIter&)=0x8045B6F0
StageDataHolder::initAfterScenarioSelected(void)=0x8045B7A0
StageDataHolder::requestFileLoadScenario(void)=0x8045B8E0
StageDataHolder::initPlacement(void)=0x8045B8F0
StageDataHolder::getCommonPathPointInfo(const JMapInfo*, int) const=0x8045B940
StageDataHolder::getCommonPathPointInfoFromRailDataIndex(const JMapInfo*, int) const=0x8045B9C0
StageDataHolder::getCommonPathInfoElementNum(void) const=0x8045BA50
StageDataHolder::getStartPosNum(void) const=0x8045BAA0
StageDataHolder::getCurrentStartZoneId(void) const=0x8045BB40
StageDataHolder::getCurrentStartCameraId(void) const=0x8045BB90
StageDataHolder::getStartCameraIdInfoFromStartDataIndex(JMapIdInfo*, int) const=0x8045BBE0
StageDataHolder::getGeneralPosNum(void) const=0x8045BC40
StageDataHolder::getGeneralPosInfoFromDataIndex(int) const=0x8045BCF0
StageDataHolder::getChildObjNum(const JMapInfoIter&) const=0x8045BDF0
StageDataHolder::getChildObjInfoFromDataIndex(const JMapInfoIter&, int) const=0x8045BEC0
StageDataHolder::findPlacedStageDataHolder(const JMapInfoIter&) const=0x8045BFB0
StageDataHolder::getStageDataHolderFromZoneId(int) const=0x8045C060
StageDataHolder::getStageDataHolderFromZoneId(int)=0x8045C0B0
StageDataHolder::isPlacedZone(int) const=0x8045C0C0
StageDataHolder::getJapaneseObjectName(const char*) const=0x8045C110
StageDataHolder::getStageArchiveResource(const char*)=0x8045C230
StageDataHolder::initPlacementMario(void)=0x8045C2F0
StageDataHolder::makeMarioJMapInfoIter(const JMapIdInfo&) const=0x8045C370
StageDataHolder::makeCurrentMarioJMapInfoIter(void) const=0x8045C440
StageDataHolder::initTableData(void)=0x8045C5A0
StageDataHolder::findJmpInfoFromArray(const MR::AssignableArray<JMapInfo>*, const char*) const=0x8045C7E0
StageDataHolder::getStartJMapInfoIterFromStartDataIndex(int) const=0x8045C850
StageDataHolder::calcDataAddress(void)=0x8045C950
StageDataHolder::updateDataAddress(const MR::AssignableArray<JMapInfo>*)=0x8045C9C0
StageDataHolder::createLocalStageDataHolder(const MR::AssignableArray<JMapInfo>&, bool)=0x8045CA20
StageDataHolder::calcPlacementMtx(const JMapInfoIter&)=0x8045CB60
MR::getStageDataHolder(void)=0x8045CC10
StageDataHolder::__dt(void)=0x8045CC40
StageFileLoader::__ct(const char*)=0x8045CCE0
StageFileLoader::startLoadingStageFile(void)=0x8045CD20
StageFileLoader::waitLoadedStageFile(void)=0x8045CDD0
StageFileLoader::makeStageArchiveNameList(void)=0x8045CE30
StageFileLoader::makeStageArchiveName(const char*)=0x8045CEA0
StopSceneDelayRequest::__ct(void)=0x8045CFF0
StopSceneDelayRequest::movement(void)=0x8045D060
StopSceneController::__ct(void)=0x8045D090
StopSceneController::requestStopScene(long)=0x8045D150
StopSceneController::requestStopSceneDelay(long, long)=0x8045D180
StopSceneController::movement(void)=0x8045D1D0
StopSceneController::isSceneStopped(void) const=0x8045D1F0
StopSceneDelayRequest::__dt(void)=0x8045D210
StopSceneController::__dt(void)=0x8045D270
SimpleLayout::__dt(void)=0x8045D340
BackButton::__ct(const char*, bool)=0x8045E820
BackButton::init(const JMapInfoIter&)=0x8045E8A0
BackButton::appear(void)=0x8045E920
BackButton::disappear(void)=0x8045E960
BackButton::isHidden(void) const=0x8045E990
BackButton::isAppearing(void) const=0x8045E9A0
BackButton::isDisappearing(void) const=0x8045E9B0
BackButton::isPointing(void) const=0x8045E9C0
BackButton::control(void)=0x8045EA30
BackButtonCancelB::__ct(const char*, bool)=0x8045EAD0
BackButton::__dt(void)=0x8045EB10
BackButtonCancelB::control(void)=0x8045EB70
BackButtonCancelB::__dt(void)=0x8045EC00
BatteryInfo::__ct(LayoutActor*, const char*, int)=0x8045EC60
BatteryInfo::exeEnought(void)=0x8045ECF0
BatteryInfo::exeLowAppear(void)=0x8045EDA0
BatteryInfo::exeLow(void)=0x8045EE10
BatteryInfo::exeLowHide(void)=0x8045EE90
BatteryInfo::exeCriticalAppear(void)=0x8045EF80
BatteryInfo::exeCritical(void)=0x8045EFF0
BatteryInfo::exeNoneAppear(void)=0x8045F050
BatteryInfo::exeNone(void)=0x8045F0C0
BatteryInfo::exeNoneHide(void)=0x8045F130
BatteryInfo::exeStartAnimAndSetNerveIfStopped(const char*, const Nerve*)=0x8045F190
BatteryInfo::tryChangeNerveWithBatteryLeftAlreadyAppear(void)=0x8045F220
BatteryLayout::__ct(void)=0x8045F2E0
BatteryLayout::init(const JMapInfoIter&)=0x8045F340
BatteryLayout::appear(void)=0x8045F3E0
BatteryLayout::control(void)=0x8045F430
BatteryInfo::__dt(void)=0x8045F470
BatteryLayout::__dt(void)=0x8045F4D0
short::(nit_\BatteryInfo_cpp)=0x8045F530
NrvBatteryInfo::BatteryInfoEnought::__ct(void)=0x8045F5B0
NrvBatteryInfo::BatteryInfoLowAppear::__ct(void)=0x8045F5C0
NrvBatteryInfo::BatteryInfoLow::__ct(void)=0x8045F5D0
NrvBatteryInfo::BatteryInfoLowDisappear::__ct(void)=0x8045F5E0
NrvBatteryInfo::BatteryInfoLowHide::__ct(void)=0x8045F5F0
NrvBatteryInfo::BatteryInfoDisappear::__ct(void)=0x8045F600
NrvBatteryInfo::BatteryInfoCriticalAppear::__ct(void)=0x8045F610
NrvBatteryInfo::BatteryInfoCritical::__ct(void)=0x8045F620
NrvBatteryInfo::BatteryInfoNoneAppear::__ct(void)=0x8045F630
NrvBatteryInfo::BatteryInfoNone::__ct(void)=0x8045F640
NrvBatteryInfo::BatteryInfoNoneDisappear::__ct(void)=0x8045F650
NrvBatteryInfo::BatteryInfoNoneHide::__ct(void)=0x8045F660
NrvBatteryInfo::BatteryInfoNoneHide::execute(Spine*) const=0x8045F670
NrvBatteryInfo::BatteryInfoNoneDisappear::execute(Spine*) const=0x8045F680
NrvBatteryInfo::BatteryInfoNone::execute(Spine*) const=0x8045F6A0
NrvBatteryInfo::BatteryInfoNoneAppear::execute(Spine*) const=0x8045F6B0
NrvBatteryInfo::BatteryInfoCritical::execute(Spine*) const=0x8045F6C0
NrvBatteryInfo::BatteryInfoCriticalAppear::execute(Spine*) const=0x8045F6D0
NrvBatteryInfo::BatteryInfoDisappear::execute(Spine*) const=0x8045F6E0
NrvBatteryInfo::BatteryInfoLowHide::execute(Spine*) const=0x8045F700
NrvBatteryInfo::BatteryInfoLowDisappear::execute(Spine*) const=0x8045F710
NrvBatteryInfo::BatteryInfoLow::execute(Spine*) const=0x8045F730
NrvBatteryInfo::BatteryInfoLowAppear::execute(Spine*) const=0x8045F740
NrvBatteryInfo::BatteryInfoEnought::execute(Spine*) const=0x8045F750
BloomEffect::__ct(const char*)=0x8045F760
ImageEffectBase::__dt(void)=0x8045F8F0
BloomEffect::preDraw(void) const=0x8045F950
BloomEffect::postDraw(void) const=0x8045FA00
BloomEffect::getIntensity1Default(void) const=0x8045FDB0
BloomEffect::getIntensity2Default(void) const=0x8045FDC0
BloomEffect::isForEachModel(void) const=0x8045FDD0
BloomEffect::initDraw(void) const=0x8045FDE0
BloomEffect::drawTexture(JUTTexture*, long, long, unsigned char, BloomEffect::BLOOM_TEX_DRAW_TYPE) const=0x80460020
BloomEffect::blurTexture(JUTTexture*, A3_A4_fllUlfUlPCf) const=0x804602A0
BloomEffect::initBlurMtx(A3_A4_fUlff) const=0x804603B0
BloomEffect::initBlur(JUTTexture*, unsigned long, float) const=0x80460510
BloomEffect::drawBlur(long, long, A3_A4_fUlUl) const=0x804606F0
ImageEffectBase::notifyForceOff(void)=0x80460980
ImageEffectBase::notifyForceOn(void)=0x80460990
ImageEffectBase::notifyTurnOff(void)=0x804609A0
ImageEffectBase::notifyTurnOn(void)=0x804609B0
ImageEffectBase::calcAnimSub(void)=0x804609C0
BloomEffect::__dt(void)=0x804609D0
BloomEffectSimple::__ct(void)=0x80460A30
BloomEffectSimple::draw(void) const=0x80460B10
@unnamed@BloomEffectSimple_cpp@::TexSpec::set(JUTTexture*, long, long, _GXTexFmt)=0x80460E50
BloomEffectSimple::__dt(void)=0x80460E70
BombTimerLayout::__ct(void)=0x80460ED0
BombTimerLayout::init(const JMapInfoIter&)=0x80460F40
BombTimerLayout::appear(void)=0x80460FB0
BombTimerLayout::setTimeLimit(unsigned long)=0x80461010
BombTimerLayout::suspend(void)=0x80461020
BombTimerLayout::resume(void)=0x80461030
BombTimerLayout::isReadyToTimeUp(void) const=0x80461040
BombTimerLayout::addFrame(void)=0x80461060
BombTimerLayout::update(void)=0x80461090
BombTimerLayout::updateTextBox(void)=0x804611C0
BombTimerLayout::exeAppear(void)=0x804611F0
BombTimerLayout::exeWait(void)=0x80461260
BombTimerLayout::exeDanger(void)=0x804612E0
BombTimerLayout::exeEnd(void)=0x80461350
BombTimerLayout::__dt(void)=0x804613C0
short::(nit_\BombTimerLayout_cpp)=0x80461420
NrvBombTimerLayout::BombTimerLayoutNrvAppear::__ct(void)=0x80461460
NrvBombTimerLayout::BombTimerLayoutNrvWait::__ct(void)=0x80461470
NrvBombTimerLayout::BombTimerLayoutNrvDanger::__ct(void)=0x80461480
NrvBombTimerLayout::BombTimerLayoutNrvEnd::__ct(void)=0x80461490
NrvBombTimerLayout::BombTimerLayoutNrvEnd::execute(Spine*) const=0x804614A0
NrvBombTimerLayout::BombTimerLayoutNrvDanger::execute(Spine*) const=0x804614B0
NrvBombTimerLayout::BombTimerLayoutNrvWait::execute(Spine*) const=0x804614C0
NrvBombTimerLayout::BombTimerLayoutNrvAppear::execute(Spine*) const=0x804614D0
ButtonPaneController::__ct(LayoutActor*, const char*, const char*, unsigned long, bool)=0x804614E0
ButtonPaneController::update(void)=0x80461600
ButtonPaneController::appear(void)=0x80461660
ButtonPaneController::disappear(void)=0x804616E0
ButtonPaneController::trySelect(void)=0x804616F0
ButtonPaneController::isHidden(void) const=0x80461910
ButtonPaneController::isPointing(void) const=0x80461920
ButtonPaneController::isPointingTrigger(void) const=0x80461930
ButtonPaneController::isTimingForSelectedSe(void) const=0x804619F0
ButtonPaneController::isAppearing(void) const=0x80461A70
ButtonPaneController::isDisappearing(void) const=0x80461A80
ButtonPaneController::forceToWait(void)=0x80461A90
ButtonPaneController::forceToHide(void)=0x80461AB0
ButtonPaneController::isFirstStepWait(void) const=0x80461AC0
ButtonPaneController::isWait(void) const=0x80461B20
ButtonPaneController::isDecidedWait(void) const=0x80461B30
ButtonPaneController::startAnimAtFirstStep(const char*)=0x80461B40
ButtonPaneController::startPointingAnimAtFirstStep(const char*)=0x80461BA0
ButtonPaneController::setNerveAtAnimStopped(const Nerve*)=0x80461C00
ButtonPaneController::isPointingPane(void) const=0x80461C60
ButtonPaneController::tryPointing(bool)=0x80461CC0
ButtonPaneController::tryNotPointing(bool)=0x80461D60
ButtonPaneController::calcPointingAnimStartFrame(void) const=0x80461DF0
ButtonPaneController::exeHidden(void)=0x80461EC0
ButtonPaneController::exeAppear(void)=0x80461F10
ButtonPaneController::exeWait(void)=0x80461F60
ButtonPaneController::exePointing(void)=0x804620A0
ButtonPaneController::exeNotPointing(void)=0x80462110
ButtonPaneController::exeDecided(void)=0x80462180
ButtonPaneController::exeDecidedToDisappear(void)=0x80462200
ButtonPaneController::__dt(void)=0x80462390
short::(nit_\ButtonPaneController_cpp)=0x804623F0
NrvButtonPaneController::ButtonPaneControllerNrvHidden::__ct(void)=0x80462470
NrvButtonPaneController::ButtonPaneControllerNrvAppear::__ct(void)=0x80462480
NrvButtonPaneController::ButtonPaneControllerNrvWait::__ct(void)=0x80462490
NrvButtonPaneController::ButtonPaneControllerNrvPointing::__ct(void)=0x804624A0
NrvButtonPaneController::ButtonPaneControllerNrvNotPointing::__ct(void)=0x804624B0
NrvButtonPaneController::ButtonPaneControllerNrvDecided::__ct(void)=0x804624C0
NrvButtonPaneController::ButtonPaneControllerNrvDecidedWait::__ct(void)=0x804624D0
NrvButtonPaneController::ButtonPaneControllerNrvDecidedToDisappear::__ct(void)=0x804624E0
NrvButtonPaneController::ButtonPaneControllerNrvDisappear::__ct(void)=0x80462510
NrvButtonPaneController::ButtonPaneControllerNrvDisappear::execute(Spine*) const=0x80462520
NrvButtonPaneController::ButtonPaneControllerNrvDecidedToDisappear::execute(Spine*) const=0x80462580
NrvButtonPaneController::ButtonPaneControllerNrvDecidedWait::execute(Spine*) const=0x80462590
NrvButtonPaneController::ButtonPaneControllerNrvDecided::execute(Spine*) const=0x804625A0
NrvButtonPaneController::ButtonPaneControllerNrvNotPointing::execute(Spine*) const=0x804625B0
NrvButtonPaneController::ButtonPaneControllerNrvPointing::execute(Spine*) const=0x804625C0
NrvButtonPaneController::ButtonPaneControllerNrvWait::execute(Spine*) const=0x804625D0
NrvButtonPaneController::ButtonPaneControllerNrvAppear::execute(Spine*) const=0x804625E0
NrvButtonPaneController::ButtonPaneControllerNrvHidden::execute(Spine*) const=0x804625F0
CameraInfo::__ct(const char*)=0x80462600
CameraInfo::init(const JMapInfoIter&)=0x80462650
CameraInfo::control(void)=0x804626E0
CameraInfo::movement(void)=0x80462720
CameraInfo::calcAnim(void)=0x80462740
CameraInfo::draw(void) const=0x80462760
CameraInfo::activate(void)=0x80462780
CameraInfo::deactivate(void)=0x80462790
CameraInfo::exeAppear(void)=0x804627A0
CameraInfo::exeNormal(void)=0x80462810
CameraInfo::exeFirstPerson(void)=0x80462910
CameraInfo::exeEnd(void)=0x80462990
CameraInfo::updateCameraNG(void)=0x80462A00
CameraInfo::hideCrossLineAll(void)=0x80462AA0
CameraInfo::tryAnimShortCut(void)=0x80462B10
CameraInfo::tryShow(void)=0x80462B90
CameraInfo::tryHide(void)=0x80462C80
CameraInfo::tryChangeCameraStateNerve(void)=0x80462DA0
CameraInfo::__dt(void)=0x80462E30
short::(nit_\CameraInfo_cpp)=0x80462E90
NrvCameraInfo::CameraInfoNrvHide::__ct(void)=0x80462EE0
NrvCameraInfo::CameraInfoNrvAppear::__ct(void)=0x80462EF0
NrvCameraInfo::CameraInfoNrvNormal::__ct(void)=0x80462F00
NrvCameraInfo::CameraInfoNrvFirstPerson::__ct(void)=0x80462F10
NrvCameraInfo::CameraInfoNrvEnd::__ct(void)=0x80462F20
NrvCameraInfo::CameraInfoNrvEnd::execute(Spine*) const=0x80462F30
NrvCameraInfo::CameraInfoNrvFirstPerson::execute(Spine*) const=0x80462F40
NrvCameraInfo::CameraInfoNrvNormal::execute(Spine*) const=0x80462F50
NrvCameraInfo::CameraInfoNrvAppear::execute(Spine*) const=0x80462F60
NrvCameraInfo::CameraInfoNrvHide::execute(Spine*) const=0x80462F70
CaptureScreenDirector::__ct(void)=0x80462FB0
CaptureScreenDirector::captureIfAllow(const char*)=0x80463060
CaptureScreenDirector::capture(void)=0x804630E0
CaptureScreenDirector::requestCaptureTiming(const char*)=0x80463160
CaptureScreenDirector::invalidateCaptureTiming(const char*)=0x804631D0
CaptureScreenDirector::getResTIMG(void) const=0x80463230
CaptureScreenDirector::getUsingTiming(void) const=0x80463240
CaptureScreenDirector::getCurrentTiming(void) const=0x80463260
CaptureScreenDirector::findFromName(const char*) const=0x80463280
CaptureScreenActor::__ct(unsigned long, const char*)=0x804632F0
CaptureScreenActor::draw(void) const=0x80463360
CaptureScreenDirector::__dt(void)=0x80463370
CaptureScreenActor::__dt(void)=0x804633D0
CenterScreenBlur::__ct(void)=0x80463430
CenterScreenBlur::init(const JMapInfoIter&)=0x804634A0
CenterScreenBlur::appear(void)=0x80463510
CenterScreenBlur::draw(void) const=0x80463550
CenterScreenBlur::start(long, float, unsigned char, long, long)=0x804635D0
CenterScreenBlur::exeFadeIn(void)=0x80463600
CenterScreenBlur::exeKeep(void)=0x80463650
CenterScreenBlur::exeFadeOut(void)=0x804636C0
CenterScreenBlur::__dt(void)=0x80463730
short::(nit_\CenterScreenBlur_cpp)=0x80463790
NrvCenterScreenBlur::CenterScreenBlurNrvFadeIn::__ct(void)=0x804637D0
NrvCenterScreenBlur::CenterScreenBlurNrvKeep::__ct(void)=0x804637E0
NrvCenterScreenBlur::CenterScreenBlurNrvFadeOut::__ct(void)=0x804637F0
NrvCenterScreenBlur::CenterScreenBlurNrvFadeOut::execute(Spine*) const=0x80463800
NrvCenterScreenBlur::CenterScreenBlurNrvKeep::execute(Spine*) const=0x80463810
NrvCenterScreenBlur::CenterScreenBlurNrvFadeIn::execute(Spine*) const=0x80463820
CinemaFrame::__ct(bool)=0x80463830
CinemaFrame::init(const JMapInfoIter&)=0x804638B0
CinemaFrame::appear(void)=0x80463910
CinemaFrame::tryScreenToFrame(void)=0x80463950
CinemaFrame::tryFrameToBlank(void)=0x80463A00
CinemaFrame::tryBlankToFrame(void)=0x80463AA0
CinemaFrame::tryFrameToScreen(void)=0x80463B50
CinemaFrame::forceToScreen(void)=0x80463BF0
CinemaFrame::forceToFrame(void)=0x80463C50
CinemaFrame::forceToBlank(void)=0x80463CB0
CinemaFrame::setColor(void)=0x80463D10
CinemaFrame::isStop(void) const=0x80463E00
CinemaFrame::exeScreen(void)=0x80463E80
CinemaFrame::__dt(void)=0x80463F20
short::(nit_\CinemaFrame_cpp)=0x80463F80
NrvCinemaFrame::CinemaFrameNrvScreen::__ct(void)=0x80463FE0
NrvCinemaFrame::CinemaFrameNrvFrame::__ct(void)=0x80463FF0
NrvCinemaFrame::CinemaFrameNrvBlank::__ct(void)=0x80464000
NrvCinemaFrame::CinemaFrameNrvScreenToFrame::__ct(void)=0x80464010
NrvCinemaFrame::CinemaFrameNrvFrameToBlank::__ct(void)=0x80464020
NrvCinemaFrame::CinemaFrameNrvBlankToFrame::__ct(void)=0x80464030
NrvCinemaFrame::CinemaFrameNrvFrameToScreen::__ct(void)=0x80464040
NrvCinemaFrame::CinemaFrameNrvFrameToScreen::execute(Spine*) const=0x80464050
NrvCinemaFrame::CinemaFrameNrvBlankToFrame::execute(Spine*) const=0x804640A0
NrvCinemaFrame::CinemaFrameNrvFrameToBlank::execute(Spine*) const=0x804640F0
NrvCinemaFrame::CinemaFrameNrvScreenToFrame::execute(Spine*) const=0x80464140
NrvCinemaFrame::CinemaFrameNrvBlank::execute(Spine*) const=0x80464190
NrvCinemaFrame::CinemaFrameNrvFrame::execute(Spine*) const=0x804641F0
NrvCinemaFrame::CinemaFrameNrvScreen::execute(Spine*) const=0x80464210
CoinCounter::__ct(const char*)=0x80464220
CoinCounter::init(const JMapInfoIter&)=0x80464290
CoinCounter::appear(void)=0x804643D0
CoinCounter::forceAppear(bool)=0x80464460
CoinCounter::disappear(bool)=0x804644E0
CoinCounter::isWait(void) const=0x80464530
CoinCounter::forceSync(void)=0x80464540
CoinCounter::control(void)=0x80464580
CoinCounter::updateCounter(void)=0x804645C0
CoinCounter::exeHide(void)=0x804647C0
CoinCounter::exeAppear(void)=0x80464810
CoinCounter::exeWait(void)=0x804648A0
CoinCounter::exeDisappear(void)=0x80464900
CoinCounter::__dt(void)=0x80464960
short::(nit_\CoinCounter_cpp)=0x804649C0
NrvCoinCounter::CoinCounterNrvHide::__ct(void)=0x80464A00
NrvCoinCounter::CoinCounterNrvAppear::__ct(void)=0x80464A10
NrvCoinCounter::CoinCounterNrvWait::__ct(void)=0x80464A20
NrvCoinCounter::CoinCounterNrvDisappear::__ct(void)=0x80464A30
NrvCoinCounter::CoinCounterNrvDisappear::execute(Spine*) const=0x80464A40
NrvCoinCounter::CoinCounterNrvWait::execute(Spine*) const=0x80464A50
NrvCoinCounter::CoinCounterNrvAppear::execute(Spine*) const=0x80464A60
NrvCoinCounter::CoinCounterNrvHide::execute(Spine*) const=0x80464A70
CometMedalCounter::__ct(void)=0x80464A80
CometMedalCounter::init(const JMapInfoIter&)=0x80464AF0
CometMedalCounter::appear(void)=0x80464C00
CometMedalCounter::forceAppear(void)=0x80464C60
CometMedalCounter::disappear(void)=0x80464D00
CometMedalCounter::isWait(void) const=0x80464D10
CometMedalCounter::control(void)=0x80464D70
CometMedalCounter::isAppearInCurrentScenario(void) const=0x80464E10
CometMedalCounter::exeAppear(void)=0x80464E70
CometMedalCounter::exeWait(void)=0x80464F00
CometMedalCounter::exeFlash(void)=0x80464F60
CometMedalCounter::exeDisappear(void)=0x80464FF0
CometMedalCounter::__dt(void)=0x80465050
short::(nit_\CometMedalCounter_cpp)=0x804650B0
CopyFilterNegater::__ct(void)=0x804651D0
CopyFilterNegater::__dt(void)=0x80465220
CounterLayoutAppearer::__ct(LayoutActor*, const JGeometry::TVec2<float>&)=0x80465290
CounterLayoutAppearer::appear(const JGeometry::TVec2<float>&)=0x80465370
CounterLayoutAppearer::disappear(void)=0x804653E0
CounterLayoutAppearer::isAppeared(void) const=0x804653F0
CounterLayoutAppearer::isDisappeared(void) const=0x80465400
CounterLayoutAppearer::reset(void)=0x80465410
CounterLayoutAppearer::updateLayoutOffset(float)=0x80465460
CounterLayoutAppearer::exeAppear(void)=0x804654B0
CounterLayoutAppearer::exeDisappear(void)=0x80465520
CounterLayoutAppearer::__dt(void)=0x804655B0
short::(nit_\CounterLayoutAppearer_cpp)=0x80465610
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvHide::__ct(void)=0x80465650
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvAppear::__ct(void)=0x80465660
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvShow::__ct(void)=0x80465670
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvDisappear::__ct(void)=0x80465680
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvDisappear::execute(Spine*) const=0x80465690
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvShow::execute(Spine*) const=0x804656A0
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvAppear::execute(Spine*) const=0x804656F0
NrvCounterLayoutAppearer::CounterLayoutAppearerNrvHide::execute(Spine*) const=0x80465700
CounterLayoutController::__ct(void)=0x80465710
CounterLayoutController::init(const JMapInfoIter&)=0x80465780
CounterLayoutController::appear(void)=0x80465880
CounterLayoutController::kill(void)=0x804658F0
CounterLayoutController::forceAppear(void)=0x80465930
CounterLayoutController::setHPMeter(MarioMeter*)=0x80465980
CounterLayoutController::requestedTicoEat(bool)=0x80465990
CounterLayoutController::isInvalidSystemStateShowCounter(void)=0x80465A30
CounterLayoutController::isWaitToDisappearCounter(const LayoutActor*)=0x80465A90
CounterLayoutController::control(void)=0x80465AE0
CounterLayoutController::showAllLayout(void)=0x80465AF0
CounterLayoutController::hideAllLayout(void)=0x80465B70
CounterLayoutController::isHiddenOrWaitAllLayout(void) const=0x80465BE0
CounterLayoutController::isPlayerMoving(void) const=0x80465DA0
CounterLayoutController::appearAllCounterWithoutStar(void)=0x80465EB0
CounterLayoutController::killAllCoounter(void)=0x80465F30
CounterLayoutController::tryEndTicoEatStarPiece(void)=0x80465FC0
CounterLayoutController::exePlayerMoving(void)=0x80466060
CounterLayoutController::exePlayerNotMoving(void)=0x80466100
CounterLayoutController::__dt(void)=0x804661C0
short::(nit_\CounterLayoutController_cpp)=0x80466220
NrvCounterLayoutController::CounterLayoutControllerNrvPlayerMoving::__ct(void)=0x80466250
NrvCounterLayoutController::CounterLayoutControllerNrvPlayerNotMoving::__ct(void)=0x80466260
NrvCounterLayoutController::CounterLayoutControllerNrvPlayerNotMoving::execute(Spine*) const=0x80466270
NrvCounterLayoutController::CounterLayoutControllerNrvPlayerMoving::execute(Spine*) const=0x80466280
CountUpPaneRumbler::__ct(LayoutActor*, const char*)=0x80466290
CountUpPaneRumbler::update(void)=0x80466360
CountUpPaneRumbler::start(void)=0x804663B0
CountUpPaneRumbler::reset(void)=0x804663C0
CountUpPaneRumbler::isRumbling(void) const=0x804663D0
CountUpPaneRumbler::connectPane(LayoutActor*, const char*)=0x804663F0
@unnamed@CustomTagProcessor_cpp@::setGXColor(_GXColorS10)=0x80466460
@unnamed@CustomTagProcessor_cpp@::clampU8(long)=0x804664C0
nw4r::ut::Color::__dt(void)=0x804666E0
CustomTagAlphaCtrl::__ct(void)=0x80466720
CustomTagAlphaCtrl::init(unsigned long, float, float, long, long)=0x80466750
CustomTagAlphaCtrl::alpha(void) const=0x804667A0
CustomTagAlphaCtrl::update(void)=0x80466870
CustomTagAlphaCtrl::isEnd(void) const=0x80466900
CustomTagProcessor::Impl::findGroupFunctionInfo(int)=0x80466990
nw4r::ut::TextWriterBase<wchar_t>::PrintImpl(const wchar_t*, int)=0x80466A00
nw4r::ut::CharWriter::GetCursorX(void) const=0x804678C0
nw4r::ut::CharWriter::GetCursorY(void) const=0x804679E0
nw4r::ut::Font::GetCharStrmReader(void) const=0x80467B00
nw4r::ut::CharWriter::MoveCursorX(float)=0x80468370
nw4r::ut::CharWriter::MoveCursorY(float)=0x804684B0
nw4r::ut::TextWriterBase<wchar_t>::__ct(const nw4r::ut::TextWriterBase<wchar_t>&)=0x80468720
CustomTagProcessor::__ct(nw4r::lyt::TextBox*)=0x80468950
MessageTagSkipTagProcessor::__dt(void)=0x80468A50
CustomTagProcessor::CalcRect(nw4r::ut::Rect*, unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x80468AB0
CustomTagProcessor::Process(unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x80468BB0
CustomTagProcessor::setArgNumber(long, long)=0x80468CA0
CustomTagProcessor::setArgString(const wchar_t*, long)=0x80468D20
CustomTagProcessor::initAlpha(float, float, long, long)=0x80468DE0
CustomTagProcessor::getReplaceTag(const wchar_t*, long, long, long) const=0x80468F40
CustomTagProcessor::isIgnoreTag(unsigned short, nw4r::ut::PrintContext<wchar_t>*) const=0x80469010
CustomTagProcessor::writeString(nw4r::ut::Rect*, const wchar_t*, nw4r::ut::PrintContext<wchar_t>*)=0x80469060
CustomTagProcessor::exeDisplayGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x804691E0
CustomTagProcessor::exeSoundGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469290
CustomTagProcessor::exePictureGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469380
nw4r::ut::CharWriter::SetFont(const nw4r::ut::Font&)=0x804694E0
nw4r::ut::Rect::SetHeight(float)=0x804696F0
nw4r::ut::CharWriter::ResetColorMapping(void)=0x80469700
nw4r::ut::TextWriterBase<wchar_t>::GetLineSpace(void) const=0x80469980
CustomTagProcessor::exeFontSizeGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469AA0
CustomTagProcessor::exeSystemGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469BF0
CustomTagProcessor::exeLocalizeGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469C80
CustomTagProcessor::exeNumberGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469CE0
CustomTagProcessor::exeStringGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469E10
CustomTagProcessor::exeSystemGroupColor(nw4r::ut::Rect*, int, nw4r::ut::PrintContext<wchar_t>*)=0x80469E70
CustomTagProcessor::exeSystemGroupRuby(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x80469F80
CustomTagProcessor::exeDisplayGroupWait(nw4r::ut::Rect*, unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x8046A790
CustomTagProcessor::exeDisplayGroupOffset(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x8046A7B0
CustomTagProcessor::exeDisplayGroupCenter(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x8046A870
CustomTagProcessor::exeFontGroup(nw4r::ut::Rect*, const MessageEditorMessageTag&, nw4r::ut::PrintContext<wchar_t>*)=0x8046A950
CustomTagProcessor::__dt(void)=0x8046AAB0
short::(nit_\CustomTagProcessor_cpp)=0x8046AB10
DepthOfFieldBlur::__ct(const char*)=0x8046AB40
DepthOfFieldBlur::draw(void) const=0x8046AC10
DepthOfFieldBlur::createBlurTexture(void) const=0x8046ACF0
DepthOfFieldBlur::drawFinal(void) const=0x8046B4C0
DepthOfFieldBlur::__dt(void)=0x8046BBC0
ExterminationCounter::__ct(void)=0x8046BC20
ExterminationCounter::init(const JMapInfoIter&)=0x8046BCA0
ExterminationCounter::appear(void)=0x8046BDD0
ExterminationCounter::control(void)=0x8046BE90
ExterminationCounter::__dt(void)=0x8046C110
short::(nit_\ExterminationCounter_cpp)=0x8046C170
DreamerButtonGuidance::__ct(const char*)=0x8046C210
DreamerButtonGuidance::init(const JMapInfoIter&)=0x8046C250
DreamerButtonGuidance::kill(void)=0x8046C2C0
DreamerButtonGuidance::appear(void)=0x8046C2D0
DreamerButtonGuidance::__dt(void)=0x8046C530
short::(nit_\DreamerButtonGuidance_cpp)=0x8046C590
EncouragePal60Window::__ct(void)=0x8046C670
EncouragePal60Window::init(const JMapInfoIter&)=0x8046C6C0
EncouragePal60Window::appear(void)=0x8046C740
EncouragePal60Window::exeAppear(void)=0x8046C780
EncouragePal60Window::exeDisplay(void)=0x8046C7F0
EncouragePal60Window::exeDisappear(void)=0x8046C8A0
EncouragePal60Window::__dt(void)=0x8046C920
short::(nit_\EncouragePal60Window_cpp)=0x8046C980
NrvEncouragePal60Window::EncouragePal60WindowNrvAppear::__ct(void)=0x8046C9C0
NrvEncouragePal60Window::EncouragePal60WindowNrvDisplay::__ct(void)=0x8046C9D0
NrvEncouragePal60Window::EncouragePal60WindowNrvDisappear::__ct(void)=0x8046C9E0
NrvEncouragePal60Window::EncouragePal60WindowNrvDisappear::execute(Spine*) const=0x8046C9F0
NrvEncouragePal60Window::EncouragePal60WindowNrvDisplay::execute(Spine*) const=0x8046CA00
NrvEncouragePal60Window::EncouragePal60WindowNrvAppear::execute(Spine*) const=0x8046CA10
ErrorMessageWindow::__ct(void)=0x8046CA20
ErrorMessageWindow::init(const JMapInfoIter&)=0x8046CA80
ErrorMessageWindow::appear(void)=0x8046CAE0
ErrorMessageWindow::isAnimEnd(void) const=0x8046CB20
ErrorMessageWindow::appearWithMessage(const char*, ErrorMessageWindow::MessageType, const nw4r::lyt::TexMap*)=0x8046CB80
ErrorMessageWindow::disappear(void)=0x8046CC30
ErrorMessageWindow::exeAppear(void)=0x8046CC40
ErrorMessageWindow::__dt(void)=0x8046CD70
short::(nit_\ErrorMessageWindow_cpp)=0x8046CDD0
NrvErrorMessageWindow::ErrorMessageWindowNrvHide::__ct(void)=0x8046CE20
NrvErrorMessageWindow::ErrorMessageWindowNrvAppear::__ct(void)=0x8046CE30
NrvErrorMessageWindow::ErrorMessageWindowNrvDisplay::__ct(void)=0x8046CE40
NrvErrorMessageWindow::ErrorMessageWindowNrvDisappear::__ct(void)=0x8046CE50
NrvErrorMessageWindow::ErrorMessageWindowNrvDisappearBeforeAppear::__ct(void)=0x8046CE60
NrvErrorMessageWindow::ErrorMessageWindowNrvDisappearBeforeAppear::execute(Spine*) const=0x8046CE70
NrvErrorMessageWindow::ErrorMessageWindowNrvDisappear::execute(Spine*) const=0x8046CED0
NrvErrorMessageWindow::ErrorMessageWindowNrvDisplay::execute(Spine*) const=0x8046CF30
NrvErrorMessageWindow::ErrorMessageWindowNrvAppear::execute(Spine*) const=0x8046CF80
NrvErrorMessageWindow::ErrorMessageWindowNrvHide::execute(Spine*) const=0x8046CF90
FileSelectButton::__ct(const char*)=0x8046CFE0
FileSelectButton::init(const JMapInfoIter&)=0x8046D050
FileSelectButton::appear(void)=0x8046D0C0
FileSelectButton::kill(void)=0x8046D130
FileSelectButton::disappear(void)=0x8046D140
FileSelectButton::setCallbackFunctor(const MR::FunctorBase&, const MR::FunctorBase&, const MR::FunctorBase&, const MR::FunctorBase&)=0x8046D1A0
FileSelectButton::shiftSelect(void)=0x8046D250
FileSelectButton::exeSelect(void)=0x8046D260
FileSelectButton::exeDisappear(void)=0x8046D420
FileSelectButton::control(void)=0x8046D490
FileSelectButton::createPaneControl(void)=0x8046D520
FileSelectButton::createButtonController(void)=0x8046D5A0
FileSelectButton::createOthers(void)=0x8046D6B0
FileSelectButton::__dt(void)=0x8046D700
short::(nit_\FileSelectButton_cpp)=0x8046D760
NrvFileSelectButton::FileSelectButtonNrvSelect::__ct(void)=0x8046D7A0
NrvFileSelectButton::FileSelectButtonNrvWait::__ct(void)=0x8046D7C0
NrvFileSelectButton::FileSelectButtonNrvDisappear::__ct(void)=0x8046D7D0
NrvFileSelectButton::FileSelectButtonNrvDisappear::execute(Spine*) const=0x8046D7E0
NrvFileSelectButton::FileSelectButtonNrvWait::execute(Spine*) const=0x8046D7F0
NrvFileSelectButton::FileSelectButtonNrvSelect::execute(Spine*) const=0x8046D810
FileSelectInfo::__ct(long, const char*)=0x8046D820
FileSelectInfo::init(const JMapInfoIter&)=0x8046D8E0
FileSelectInfo::appear(void)=0x8046D930
FileSelectInfo::disappear(void)=0x8046D9E0
FileSelectInfo::slide(void)=0x8046DAF0
FileSelectInfo::slideBack(void)=0x8046DB00
FileSelectInfo::setInfo(unsigned short*, long, long, long, bool, bool, bool, const wchar_t*, const wchar_t*, long)=0x8046DB10
FileSelectInfo::exeAppear(void)=0x8046DBE0
FileSelectInfo::exeDisappear(void)=0x8046DC40
FileSelectInfo::control(void)=0x8046DCC0
FileSelectInfo::reflectInfo(void)=0x8046DCD0
FileSelectInfoSub::SlideState::__ct(FileSelectInfo*)=0x8046DEE0
FileSelectInfoSub::SlideState::exeNormalPos(void)=0x8046DF50
FileSelectInfoSub::SlideState::exeSliding(void)=0x8046DFB0
FileSelectInfoSub::SlideState::exeSlidePos(void)=0x8046E020
FileSelectInfoSub::SlideState::exeSlidingBack(void)=0x8046E080
FileSelectInfo::__dt(void)=0x8046E0F0
FileSelectInfoSub::SlideState::__dt(void)=0x8046E150
short::(nit_\FileSelectInfo_cpp)=0x8046E1B0
NrvFileSelectInfo::FileSelectInfoNrvAppear::__ct(void)=0x8046E210
NrvFileSelectInfo::FileSelectInfoNrvDisplay::__ct(void)=0x8046E220
NrvFileSelectInfo::FileSelectInfoNrvDisappear::__ct(void)=0x8046E230
FileSelectInfoSub::SlideStateNrvNormalPos::__ct(void)=0x8046E240
FileSelectInfoSub::SlideStateNrvSliding::__ct(void)=0x8046E250
FileSelectInfoSub::SlideStateNrvSlidePos::__ct(void)=0x8046E260
FileSelectInfoSub::SlideStateNrvSlidingBack::__ct(void)=0x8046E270
FileSelectInfoSub::SlideStateNrvSlidingBack::execute(Spine*) const=0x8046E280
FileSelectInfoSub::SlideStateNrvSlidePos::execute(Spine*) const=0x8046E290
FileSelectInfoSub::SlideStateNrvSliding::execute(Spine*) const=0x8046E2A0
FileSelectInfoSub::SlideStateNrvNormalPos::execute(Spine*) const=0x8046E2B0
NrvFileSelectInfo::FileSelectInfoNrvDisappear::execute(Spine*) const=0x8046E2C0
NrvFileSelectInfo::FileSelectInfoNrvDisplay::execute(Spine*) const=0x8046E2D0
NrvFileSelectInfo::FileSelectInfoNrvAppear::execute(Spine*) const=0x8046E320
FileSelectNumber::__ct(const char*)=0x8046E330
FileSelectNumber::init(const JMapInfoIter&)=0x8046E380
FileSelectNumber::appear(void)=0x8046E3F0
FileSelectNumber::disappear(void)=0x8046E4F0
FileSelectNumber::setNumber(long)=0x8046E5E0
FileSelectNumber::onSelectIn(void)=0x8046E600
FileSelectNumber::onSelectOut(void)=0x8046E610
FileSelectNumber::control(void)=0x8046E620
FileSelectNumberSub::SelectAnimController::__ct(LayoutActor*)=0x8046E630
FileSelectNumberSub::SelectAnimController::appear(void)=0x8046E6A0
FileSelectNumberSub::SelectAnimController::selectIn(void)=0x8046E730
FileSelectNumberSub::SelectAnimController::selectOut(void)=0x8046E7A0
FileSelectNumberSub::SelectAnimController::exeSelectInStart(void)=0x8046E810
FileSelectNumberSub::SelectAnimController::exeSelectOutStart(void)=0x8046E8A0
FileSelectNumber::__dt(void)=0x8046E930
FileSelectNumberSub::SelectAnimController::__dt(void)=0x8046E990
short::(nit_\FileSelectNumber_cpp)=0x8046E9F0
NrvFileSelectNumber::FileSelectNumberNrvAppear::__ct(void)=0x8046EA50
NrvFileSelectNumber::FileSelectNumberNrvWait::__ct(void)=0x8046EA60
NrvFileSelectNumber::FileSelectNumberNrvEnd::__ct(void)=0x8046EA70
FileSelectNumberSub::SelectAnimControllerNrvSelectInStart::__ct(void)=0x8046EA80
FileSelectNumberSub::SelectAnimControllerNrvSelectIn::__ct(void)=0x8046EA90
FileSelectNumberSub::SelectAnimControllerNrvSelectOutStart::__ct(void)=0x8046EAA0
FileSelectNumberSub::SelectAnimControllerNrvSelectOut::__ct(void)=0x8046EAB0
FileSelectNumberSub::SelectAnimControllerNrvSelectOut::execute(Spine*) const=0x8046EAC0
FileSelectNumberSub::SelectAnimControllerNrvSelectOutStart::execute(Spine*) const=0x8046EAD0
FileSelectNumberSub::SelectAnimControllerNrvSelectIn::execute(Spine*) const=0x8046EAE0
FileSelectNumberSub::SelectAnimControllerNrvSelectInStart::execute(Spine*) const=0x8046EAF0
NrvFileSelectNumber::FileSelectNumberNrvEnd::execute(Spine*) const=0x8046EB00
NrvFileSelectNumber::FileSelectNumberNrvWait::execute(Spine*) const=0x8046EB60
NrvFileSelectNumber::FileSelectNumberNrvAppear::execute(Spine*) const=0x8046EB70
FullnessMeter::__ct(LiveActor*, long, long)=0x8046EBC0
FullnessMeter::init(const JMapInfoIter&)=0x8046ECA0
FullnessMeter::control(void)=0x8046ED00
FullnessMeter::setNumber(long)=0x8046ED50
FullnessMeter::requestAppear(void)=0x8046EE70
FullnessMeter::requestDisappear(void)=0x8046EF00
FullnessMeter::pauseOff(void)=0x8046EF80
FullnessMeter::exeAppear(void)=0x8046EFC0
FullnessMeter::exeEnd(void)=0x8046F030
FullnessMeter::__dt(void)=0x8046F0B0
short::(nit_\FullnessMeter_cpp)=0x8046F110
NrvFullnessMeter::FullnessMeterNrvAppear::__ct(void)=0x8046F150
NrvFullnessMeter::FullnessMeterNrvWait::__ct(void)=0x8046F160
NrvFullnessMeter::FullnessMeterNrvEnd::__ct(void)=0x8046F170
NrvFullnessMeter::FullnessMeterNrvEnd::execute(Spine*) const=0x8046F180
NrvFullnessMeter::FullnessMeterNrvWait::execute(Spine*) const=0x8046F190
NrvFullnessMeter::FullnessMeterNrvAppear::execute(Spine*) const=0x8046F1A0
MR::drawFullScreenBlur(float)=0x8046F1B0
MR::drawFullScreenBlur(float, float, unsigned char, unsigned char)=0x8046F210
GalaxyCometScreenFilter::__ct(void)=0x8046F470
GalaxyCometScreenFilter::setCometType(long)=0x8046F500
GalaxyCometScreenFilter::__dt(void)=0x8046F570
GalaxyConfirmLayout::__ct(void)=0x8046F5D0
GalaxyConfirmLayout::init(const JMapInfoIter&)=0x8046F640
GalaxyConfirmLayout::appear(void)=0x8046F760
GalaxyConfirmLayout::kill(void)=0x8046F7C0
GalaxyConfirmLayout::isSelected(void) const=0x8046F810
GalaxyConfirmLayout::control(void)=0x8046F8E0
GalaxyConfirmLayout::exeSelecting(void)=0x8046F9F0
GalaxyConfirmLayout::exeSelectedBackButton(void)=0x8046FAD0
GalaxyConfirmLayout::exeSelected(void)=0x8046FB20
GalaxyConfirmLayout::__dt(void)=0x8046FC20
short::(nit_\GalaxyConfirmLayout_cpp)=0x8046FCE0
NrvGalaxyConfirmLayout::GalaxyConfirmLayoutNrvSelecting::__ct(void)=0x8046FD30
NrvGalaxyConfirmLayout::GalaxyConfirmLayoutNrvSelectedBackButton::__ct(void)=0x8046FD40
NrvGalaxyConfirmLayout::GalaxyConfirmLayoutNrvSelected::__ct(void)=0x8046FD50
NrvGalaxyConfirmLayout::GalaxyConfirmLayoutNrvSelected::execute(Spine*) const=0x8046FD60
NrvGalaxyConfirmLayout::GalaxyConfirmLayoutNrvSelectedBackButton::execute(Spine*) const=0x8046FD70
NrvGalaxyConfirmLayout::GalaxyConfirmLayoutNrvSelecting::execute(Spine*) const=0x8046FD80
GalaxyMapGalaxyPlain::__ct(const LayoutActor*)=0x8046FDA0
GalaxyMapGalaxyPlain::init(const JMapInfoIter&)=0x8046FE10
GalaxyMapGalaxyPlain::appear(void)=0x8046FE80
GalaxyMapGalaxyPlain::kill(void)=0x8046FE90
GalaxyMapGalaxyPlain::movement(void)=0x8046FED0
GalaxyMapGalaxyPlain::calcAnim(void)=0x8046FF10
GalaxyMapGalaxyPlain::draw(void) const=0x8046FF80
GalaxyMapGalaxyPlain::show(const wchar_t*, const char*)=0x8046FFD0
GalaxyMapGalaxyPlain::control(void)=0x80470040
GalaxyMapGalaxyPlain::__dt(void)=0x804701E0
GalaxyNamePlate::__ct(const char*, bool)=0x80470240
GalaxyNamePlate::init(const JMapInfoIter&)=0x80470310
GalaxyNamePlate::kill(void)=0x80470320
GalaxyNamePlate::showUnknown(bool)=0x80470360
GalaxyNamePlate::showOpen(bool)=0x804703C0
GalaxyNamePlate::show(const wchar_t*, bool)=0x80470420
GalaxyNamePlate::setPos3D(const JGeometry::TVec3<float>&)=0x80470430
GalaxyNamePlate::setShowBalloonNozzle(bool)=0x80470490
GalaxyNamePlate::control(void)=0x804704A0
GalaxyNamePlate::show(const wchar_t*, long, bool, bool)=0x804704B0
GalaxyNamePlate::exeAppearReady(void)=0x804706A0
GalaxyNamePlate::exeAppear(void)=0x80470710
GalaxyNamePlate::exeWait(void)=0x804707A0
GalaxyNamePlate::__dt(void)=0x80470850
short::(nit_\GalaxyNamePlate_cpp)=0x804708B0
NrvGalaxyNamePlate::GalaxyNamePlateNrvAppearReady::__ct(void)=0x804708F0
NrvGalaxyNamePlate::GalaxyNamePlateNrvAppear::__ct(void)=0x80470900
NrvGalaxyNamePlate::GalaxyNamePlateNrvWait::__ct(void)=0x80470910
NrvGalaxyNamePlate::GalaxyNamePlateNrvWait::execute(Spine*) const=0x80470920
NrvGalaxyNamePlate::GalaxyNamePlateNrvAppear::execute(Spine*) const=0x80470930
NrvGalaxyNamePlate::GalaxyNamePlateNrvAppearReady::execute(Spine*) const=0x80470940
GalaxyNamePlateDrawer::__ct(void)=0x80470950
GalaxyNamePlateDrawer::init(const JMapInfoIter&)=0x804709B0
GalaxyNamePlateDrawer::draw(void) const=0x804709D0
std::sort<const GalaxyNamePlatePrioritied*,@unnamed@GalaxyNamePlateDrawer_cpp@::PlatePriorityLt&>(const GalaxyNamePlatePrioritied*, const GalaxyNamePlatePrioritied*, @unnamed@GalaxyNamePlateDrawer_cpp@::PlatePriorityLt&, _v)=0x80470CE0
std::swap<const GalaxyNamePlatePrioritied*>(const GalaxyNamePlatePrioritied*, const GalaxyNamePlatePrioritied*, _v)=0x80470F90
std::__sort132<@unnamed@GalaxyNamePlateDrawer_cpp@::PlatePriorityLt&,const GalaxyNamePlatePrioritied*>(const GalaxyNamePlatePrioritied*, const GalaxyNamePlatePrioritied*, const GalaxyNamePlatePrioritied*, @unnamed@GalaxyNamePlateDrawer_cpp@::PlatePriorityLt&, _v)=0x80470FB0
std::__selection_sort<@unnamed@GalaxyNamePlateDrawer_cpp@::PlatePriorityLt&,const GalaxyNamePlatePrioritied*>(const GalaxyNamePlatePrioritied*, const GalaxyNamePlatePrioritied*, @unnamed@GalaxyNamePlateDrawer_cpp@::PlatePriorityLt&, _v)=0x80471080
GalaxyNamePlateDrawer::registerPlate(const LayoutActor*)=0x80471120
MR::registerToGalaxyNamePlateDrawer(const LayoutActor*)=0x80471190
GalaxyNamePlateDrawer::__dt(void)=0x804711E0
GamePauseSequence::__ct(void)=0x80471240
GamePauseSequence::init(const JMapInfoIter&)=0x804712A0
GamePauseSequence::initWindowMenu(const MR::FunctorBase&)=0x80471300
GamePauseSequence::startPause(GamePauseSequence::MenuType)=0x80471350
GamePauseSequence::deactivate(void)=0x80471430
GamePauseSequence::exeActivePauseMenu(void)=0x80471480
GamePauseSequence::__dt(void)=0x804714D0
short::(nit_\GamePauseSequence_cpp)=0x80471530
NrvGamePauseSequence::GamePauseSequenceNrvDeactive::__ct(void)=0x80471580
NrvGamePauseSequence::GamePauseSequenceNrvActivePauseMenu::__ct(void)=0x80471590
NrvGamePauseSequence::GamePauseSequenceNrvSceneInformation::__ct(void)=0x804715A0
NrvGamePauseSequence::GamePauseSequenceNrvSceneInformation::execute(Spine*) const=0x804715B0
NrvGamePauseSequence::GamePauseSequenceNrvActivePauseMenu::execute(Spine*) const=0x804715C0
NrvGamePauseSequence::GamePauseSequenceNrvDeactive::execute(Spine*) const=0x804715D0
GameSceneLayoutHolder::__ct(void)=0x804715E0
GameSceneLayoutHolder::setLifeCount(unsigned long)=0x80471800
GameSceneLayoutHolder::setOxygenRatio(float)=0x80471820
GameSceneLayoutHolder::setBeePowerRatio(float)=0x80471830
GameSceneLayoutHolder::requestPowerUpHPMeter(void)=0x80471890
GameSceneLayoutHolder::requestForceAppearHPMeter(void)=0x804718A0
GameSceneLayoutHolder::startMiss(void)=0x804718F0
GameSceneLayoutHolder::isMissAnimEnd(void) const=0x80471930
GameSceneLayoutHolder::activateDefaultGameLayout(void)=0x80471960
GameSceneLayoutHolder::deactivateDefaultGameLayout(void)=0x80471A20
GameSceneLayoutHolder::createPurpleCoinCounter(void)=0x80471AF0
GameSceneLayoutHolder::getPurpleCoinCounter(void) const=0x80471B40
MR::getGameSceneLayoutHolder(void)=0x80471C40
GameSceneLayoutHolder::__dt(void)=0x80471C70
GameSetLayout::__ct(void)=0x80471CD0
GameSetLayout::init(const JMapInfoIter&)=0x80471D20
GameSetLayout::appear(void)=0x80471D80
GameSetLayout::__dt(void)=0x80471EF0
short::(nit_\GameSetLayout_cpp)=0x80471F50
GameStageClearSequence::__ct(void)=0x80472030
GameStageClearSequence::init(const JMapInfoIter&)=0x80472090
GameStageClearSequence::startPowerStarGetDemo(void)=0x80472140
GameStageClearSequence::startGrandStarGetDemo(void)=0x804721C0
GameStageClearSequence::appearGetStarLayout(void)=0x80472240
GameStageClearSequence::exePowerStarGetDemo(void)=0x804722B0
GameStageClearSequence::exeGrandStarGetDemo(void)=0x804723A0
GameStageClearSequence::__dt(void)=0x804724F0
short::(nit_\GameStageClearSequence_cpp)=0x80472550
NrvGameStageClearSequence::GameStageClearSequencePowerStarGetDemo::__ct(void)=0x80472580
NrvGameStageClearSequence::GameStageClearSequenceGrandStarGetDemo::__ct(void)=0x80472590
NrvGameStageClearSequence::GameStageClearSequenceGrandStarGetDemo::execute(Spine*) const=0x804725A0
NrvGameStageClearSequence::GameStageClearSequencePowerStarGetDemo::execute(Spine*) const=0x804725B0
GliBirdGuidance::__ct(const char*)=0x804725C0
GliBirdGuidance::init(const JMapInfoIter&)=0x80472610
GliBirdGuidance::__dt(void)=0x80472830
short::(nit_\GliBirdGuidance_cpp)=0x80472890
GalaxyStatusIcon::__ct(void)=0x80472950
GalaxyStatusIcon::init(const JMapInfoIter&)=0x80472A90
GalaxyStatusIcon::control(void)=0x80472AA0
GalaxyStatusIcon::__dt(void)=0x804731B0
GrandGalaxyMapInfo::__ct(void)=0x80473210
GrandGalaxyMapInfo::init(const JMapInfoIter&)=0x80473320
GrandGalaxyMapInfo::appear(void)=0x80473370
GrandGalaxyMapInfo::kill(void)=0x80473400
GrandGalaxyMapInfo::control(void)=0x80473490
GrandGalaxyMapInfo::__dt(void)=0x80474390
short::(nit_\GrandGalaxyMapInfo_cpp)=0x804743F0
HeatHazeEffect::__ct(const char*)=0x80474690
HeatHazeEffect::init(const JMapInfoIter&)=0x804746E0
HeatHazeEffect::appear(void)=0x80474740
HeatHazeEffect::control(void)=0x80474780
HeatHazeDirector::__ct(const char*)=0x80474950
HeatHazeDirector::init(const JMapInfoIter&)=0x80474990
HeatHazeDirector::movement(void)=0x804749F0
HeatHazeEffect::__dt(void)=0x80474AA0
HeatHazeDirector::__dt(void)=0x80474B00
@unnamed@HomeButtonLayout_cpp@::SoundCallback(int, int)=0x80474B60
HomeButtonMenuContext::__ct(void)=0x80474BB0
HomeButtonMenuContext::initControllerData(void)=0x80474C40
HomeButtonMenuContext::initHomeButtonInfo(void)=0x80474C90
HomeButtonLayout::__ct(void)=0x80474D70
HomeButtonLayout::init(const JMapInfoIter&)=0x80474DD0
HomeButtonLayout::movement(void)=0x80474E60
HomeButtonLayout::exeDeactive(void)=0x80474EA0
HomeButtonLayout::exeActive(void)=0x80474F20
HomeButtonLayout::draw(void) const=0x804750D0
HomeButtonLayout::forceToDeactive(void)=0x80475250
HomeButtonLayout::isActive(void) const=0x804752B0
HomeButtonLayout::updateController(void)=0x804753B0
HomeButtonLayout::tryCorePadTriggerHome(void)=0x80475430
HomeButtonLayout::__dt(void)=0x804754D0
short::(nit_\HomeButtonLayout_cpp)=0x80475530
NrvHomeButtonLayout::HomeButtonLayoutDeactive::__ct(void)=0x80475570
NrvHomeButtonLayout::HomeButtonLayoutActive::__ct(void)=0x80475580
NrvHomeButtonLayout::HomeButtonLayoutActive::execute(Spine*) const=0x804755B0
NrvHomeButtonLayout::HomeButtonLayoutDeactive::execute(Spine*) const=0x804755C0
IconAButton::__ct(bool, bool)=0x804755D0
IconAButton::init(const JMapInfoIter&)=0x80475670
IconAButton::setFollowActorPane(LayoutActor*, const char*)=0x804756F0
IconAButton::isOpen(void)=0x80475750
IconAButton::openWithTalk(void)=0x80475780
IconAButton::openWithRead(void)=0x80475800
IconAButton::openWithoutMessage(void)=0x80475880
IconAButton::term(void)=0x80475900
IconAButton::exeOpen(void)=0x80475970
IconAButton::exeTerm(void)=0x804759E0
IconAButton::control(void)=0x80475A50
IconAButton::updateFollowPos(void)=0x80475A60
IconAButton::__dt(void)=0x80475A80
short::(nit_\IconAButton_cpp)=0x80475AE0
NrvIconAButton::IconAButtonNrvOpen::__ct(void)=0x80475B20
NrvIconAButton::IconAButtonNrvWait::__ct(void)=0x80475B30
NrvIconAButton::IconAButtonNrvTerm::__ct(void)=0x80475B40
NrvIconAButton::IconAButtonNrvTerm::execute(Spine*) const=0x80475B50
NrvIconAButton::IconAButtonNrvWait::execute(Spine*) const=0x80475B60
NrvIconAButton::IconAButtonNrvOpen::execute(Spine*) const=0x80475BB0
ImageEffectBase::__ct(const char*)=0x80475BC0
ImageEffectBase::calcAnim(void)=0x80475C10
ImageEffectDirector::__ct(const char*)=0x80475CB0
ImageEffectDirector::movement(void)=0x80475E00
ImageEffectState::onChange(void)=0x80475F00
ImageEffectDirector::setCurrentEffect(ImageEffectBase*)=0x80475F10
ImageEffectDirector::turnOnNormal(void)=0x80475F30
ImageEffectDirector::turnOnDepthOfField(bool)=0x80475F40
ImageEffectDirector::turnOff(void)=0x80475FB0
ImageEffectDirector::setAuto(void)=0x80475FC0
ImageEffectDirector::turnOffDOFInSubjective(void)=0x80475FD0
ImageEffectDirector::turnOnDOFInSubjective(void)=0x80475FE0
ImageEffectDirector::setNormalBloomIntensity(unsigned char)=0x80475FF0
ImageEffectDirector::setNormalBloomThreshold(unsigned char)=0x80476000
ImageEffectDirector::setNormalBloomBlurIntensity1(unsigned char)=0x80476010
ImageEffectDirector::setNormalBloomBlurIntensity2(unsigned char)=0x80476020
ImageEffectDirector::setDepthOfFieldIntensity(float)=0x80476030
ImageEffectDirector::updateAuto(void)=0x80476090
ImageEffectDirector::updateManual(void)=0x804761B0
ImageEffectDirector::setState(ImageEffectState*)=0x80476250
ImageEffectDirector::setBloomNormalParams(ImageEffectArea*)=0x80476280
ImageEffectDirector::setScreenBlurParams(ImageEffectArea*)=0x80476320
ImageEffectDirector::setDepthOfFieldParams(ImageEffectArea*)=0x80476390
ImageEffectDirector::setPostFogParams(ImageEffectArea*)=0x80476460
ImageEffectDirector::initPlayerSyncIntensity(ImageEffectArea*, ImageEffectState*)=0x80476540
ImageEffectDirector::updatePlayerSyncIntensity(ImageEffectArea*, ImageEffectState*)=0x804765B0
ImageEffectDirector::updateSyncCounter(void)=0x80476620
ImageEffectDirector::incPlayerSyncIntensity(void)=0x80476670
ImageEffectDirector::decPlayerSyncIntensity(void)=0x80476690
ImageEffectDirector::setPlayerSync(bool)=0x804766B0
ImageEffectStateImpl::StateNull::getEffect(void) const=0x804766E0
ImageEffectStateImpl::StateNull::doesEffectExist(void) const=0x804766F0
ImageEffectDirector::__dt(void)=0x80476700
ImageEffectStateImpl::StateNull::__dt(void)=0x80476760
MR::connectToSceneImageEffect(NameObj*)=0x804767A0
MR::connectToSceneNormalBloom(BloomEffect*)=0x804767C0
MR::Functor<BloomEffect>(const BloomEffect*, M11BloomEffectFPCvPCv_v_Q22MR51FunctorV0M<const BloomEffect*,M11BloomEffectFPCvPCv_v>)=0x804768F0
MR::connectToSceneImageEffectMovement(NameObj*)=0x80476930
ImageEffectLocalUtil::capture(JUTTexture*, long, long, _GXTexFmt, bool, unsigned char)=0x80476950
ImageEffectLocalUtil::setupDrawTexture(void)=0x804769E0
ImageEffectLocalUtil::drawTexture(JUTTexture*, long, long, unsigned char, ImageEffectLocalUtil::ETexDrawType)=0x80476C80
ImageEffectLocalUtil::sendTextureVertex(long, long)=0x80476E10
ImageEffectLocalUtil::blurTexture(JUTTexture*, long, long, unsigned long, float, float)=0x80476FE0
ImageEffectResource::createTexture(float, _GXTexFmt)=0x80477C90
MR::FunctorV0M<const BloomEffect*,M11BloomEffectFPCvPCv_v>::__cl(void) const=0x80477DA0
MR::FunctorV0M<const BloomEffect*,M11BloomEffectFPCvPCv_v>::clone(JKRHeap*) const=0x80477DD0
ImageEffectResource::__ct(void)=0x80477E40
ImageEffectResource::createBloomTexture(void)=0x80477ED0
ImageEffectResource::createBlurTexture(void)=0x80478020
ImageEffectResource::createDOFTexture(void)=0x80478090
ImageEffectResource::createFogTexture(void)=0x80478180
ImageEffectState::update(void)=0x80478360
ImageEffectState::forceOff(void)=0x804784F0
ImageEffectStateImpl::StateBloomNormal::__ct(ImageEffectDirector*)=0x80478570
ImageEffectStateImpl::StateBloomNormal::update(void)=0x804785C0
ImageEffectStateImpl::StateBloomNormal::doesEffectExist(void) const=0x80478850
ImageEffectStateImpl::StateBloomNormal::getEffect(void) const=0x80478860
ImageEffectStateImpl::StateBloomNormal::onChange(void)=0x80478890
ImageEffectStateImpl::StateBloomNormal::setBloomIntensity(unsigned char)=0x804788A0
ImageEffectStateImpl::StateBloomNormal::setThreshold(unsigned char)=0x804788B0
ImageEffectStateImpl::StateBloomNormal::setIntensity1(unsigned char)=0x804788C0
ImageEffectStateImpl::StateBloomNormal::setIntensity1Default(void)=0x804788D0
ImageEffectStateImpl::StateBloomNormal::setIntensity2(unsigned char)=0x80478910
ImageEffectStateImpl::StateBloomNormal::setIntensity2Default(void)=0x80478920
ImageEffectStateImpl::StateScreenBlur::doesEffectExist(void) const=0x80478960
ImageEffectStateImpl::StateScreenBlur::getEffect(void) const=0x80478970
ImageEffectStateImpl::StateScreenBlur::setIntensity(float)=0x804789A0
ImageEffectStateImpl::StateDepthOfField::doesEffectExist(void) const=0x804789E0
ImageEffectStateImpl::StateDepthOfField::getEffect(void) const=0x804789F0
ImageEffectStateImpl::StateDepthOfField::setIntensity(float)=0x80478A20
ImageEffectStateImpl::StateDepthOfField::setBlurMaxDist(long)=0x80478A60
ImageEffectStateImpl::StateDepthOfField::setBlurMinDist(long)=0x80478AA0
ImageEffectStateImpl::StateBloomNormal::__dt(void)=0x80478DA0
ImageEffectStateImpl::StateScreenBlur::__dt(void)=0x80478DE0
ImageEffectStateImpl::StateDepthOfField::__dt(void)=0x80478E20
ImageEffectSystemHolder::__ct(void)=0x80478EE0
ImageEffectSystemHolder::pauseOff(void)=0x80478F70
MR::createImageEffectSystemHolder(void)=0x80478F90
MR::getImageEffectSystemHolder(void)=0x80478FA0
MR::isExistImageEffectDirector(void)=0x80478FD0
MR::getImageEffectDirector(void)=0x80479020
MR::getImageEffectResource(void)=0x80479050
ImageEffectSystemHolder::__dt(void)=0x80479080
InformationMessage::__ct(void)=0x804790E0
InformationMessage::init(const JMapInfoIter&)=0x80479150
InformationMessage::movement(void)=0x80479230
InformationMessage::calcAnim(void)=0x80479280
InformationMessage::draw(void) const=0x804792D0
InformationMessage::appear(void)=0x80479320
InformationMessage::kill(void)=0x80479430
InformationMessage::setMessage(const char*)=0x80479590
InformationMessage::setMessage(const wchar_t*)=0x804795A0
InformationMessage::setReplaceString(const wchar_t*, long)=0x804795B0
InformationMessage::exeWait(void)=0x80479600
InformationMessage::exeDisappear(void)=0x804796A0
InformationMessage::__dt(void)=0x80479740
short::(nit_\InformationMessage_cpp)=0x804797A0
NrvInformationMessage::InformationMessageNrvAppear::__ct(void)=0x804797E0
NrvInformationMessage::InformationMessageNrvWait::__ct(void)=0x804797F0
NrvInformationMessage::InformationMessageNrvDisappear::__ct(void)=0x80479800
NrvInformationMessage::InformationMessageNrvDisappear::execute(Spine*) const=0x80479810
NrvInformationMessage::InformationMessageNrvWait::execute(Spine*) const=0x80479820
NrvInformationMessage::InformationMessageNrvAppear::execute(Spine*) const=0x80479830
InformationObserver::__ct(void)=0x80479840
InformationObserver::init(const JMapInfoIter&)=0x804798A0
InformationObserver::entry(InformationObserver::TYPE, LiveActor*, bool)=0x80479910
InformationObserver::exeDisp(void)=0x804799C0
InformationObserverFunction::explainBee(void)=0x80479D30
InformationObserverFunction::explainTeresa(void)=0x80479D70
InformationObserverFunction::explainHopper(void)=0x80479DB0
InformationObserverFunction::explainFire(void)=0x80479DF0
InformationObserverFunction::explainIce(void)=0x80479E30
InformationObserverFunction::explainFlying(void)=0x80479E70
InformationObserverFunction::explainInvincible(void)=0x80479EB0
InformationObserverFunction::explainRock(void)=0x80479EF0
InformationObserverFunction::explainCloud(void)=0x80479F30
InformationObserverFunction::explainDrill(void)=0x80479F70
InformationObserverFunction::explainLifeUp(void)=0x80479FB0
InformationObserverFunction::explainOneUp(void)=0x80479FF0
InformationObserverFunction::explainYoshi(void)=0x8047A030
InformationObserverFunction::explainCometMedal(void)=0x8047A080
InformationObserverFunction::explainMarioFacePlanet(void)=0x8047A0D0
InformationObserver::__dt(void)=0x8047A120
short::(nit_\InformationObserver_cpp)=0x8047A180
NrvInformationObserver::InformationObserverNrvWait::__ct(void)=0x8047A1C0
NrvInformationObserver::InformationObserverNrvDisp::__ct(void)=0x8047A1D0
NrvInformationObserver::InformationObserverNrvDisp::execute(Spine*) const=0x8047A200
NrvInformationObserver::InformationObserverNrvWait::execute(Spine*) const=0x8047A210
LayoutActor::__ct(const char*, bool)=0x8047A220
LayoutActor::movement(void)=0x8047A290
LayoutActor::calcAnim(void)=0x8047A330
LayoutActor::draw(void) const=0x8047A370
LayoutActor::appear(void)=0x8047A3B0
LayoutActor::kill(void)=0x8047A3D0
LayoutActor::setNerve(const Nerve*) const=0x8047A420
LayoutActor::isNerve(const Nerve*) const=0x8047A430
LayoutActor::getNerveStep(void) const=0x8047A470
LayoutActor::getTrans(void) const=0x8047A480
LayoutActor::setTrans(const JGeometry::TVec2<float>&)=0x8047A4C0
LayoutActor::getLayoutManager(void) const=0x8047A530
LayoutActor::createPaneMtxRef(const char*)=0x8047A540
LayoutActor::getPaneMtxRef(const char*)=0x8047A550
LayoutActor::initLayoutManager(const char*, unsigned long)=0x8047A560
LayoutActor::initLayoutManagerNoConvertFilename(const char*, unsigned long)=0x8047A5C0
LayoutActor::initLayoutManager(const char*, unsigned long, unsigned long)=0x8047A620
LayoutActor::initNerve(const Nerve*)=0x8047A690
LayoutActor::initEffectKeeper(int, const char*, const EffectSystem*)=0x8047A6F0
LayoutActor::initPointingTarget(int)=0x8047A760
LayoutActor::updateSpine(void)=0x8047A820
LayoutActorFlag::__ct(void)=0x8047A840
LayoutCoreUtil::getPaneUserData(const nw4r::lyt::Pane*, char*)=0x8047A9B0
LayoutCoreUtil::setTextBoxMessage(nw4r::lyt::TextBox*, const wchar_t*)=0x8047AA00
LayoutCoreUtil::initTextBoxPane(nw4r::lyt::TextBox*, const char*, unsigned long)=0x8047B120
MR::convertScreenPosToLayoutPos(JGeometry::TVec2<float>*, const JGeometry::TVec2<float>&)=0x8047B280
MR::convertLayoutPosToScreenPos(JGeometry::TVec2<float>*, const JGeometry::TVec2<float>&)=0x8047B380
MR::convertPaneLocalPosToScreenPos(JGeometry::TVec2<float>*, const nw4r::lyt::Pane*, const JGeometry::TVec2<float>&)=0x8047B490
LayoutGroupCtrl::__ct(LayoutManager*, const char*, unsigned long)=0x8047B4F0
LayoutGroupCtrl::movement(void)=0x8047B5A0
LayoutGroupCtrl::calcAnim(void)=0x8047B610
LayoutAnmPlayer::isStop(void) const=0x8047B730
LayoutGroupCtrl::getPaneNum(void) const=0x8047B780
LayoutGroupCtrl::getPane(unsigned long) const=0x8047B790
nw4r::ut::LinkList<nw4r::lyt::Pane,4>::Iterator::__ml(void) const=0x8047B830
LayoutManager::__ct(const char*, bool, unsigned long, unsigned long)=0x8047B8B0
LayoutManager::movement(void)=0x8047BA90
LayoutManager::calcAnim(void)=0x8047BB30
nw4r::lyt::DrawInfo::SetLocationAdjustScale(const nw4r::math::VEC2&)=0x8047BBB0
LayoutManager::draw(void) const=0x8047BBD0
LayoutManager::addPaneCtrl(LayoutPaneCtrl*)=0x8047BC30
LayoutManager::createAndAddRootPaneCtrl(unsigned long)=0x8047BCA0
LayoutManager::createAndAddPaneCtrl(const char*, unsigned long)=0x8047BD40
LayoutManager::getPaneCtrl(const char*) const=0x8047BDD0
LayoutManager::getIndexOfPane(const char*) const=0x8047BE20
LayoutManager::isExistPaneCtrl(const char*) const=0x8047BEA0
LayoutManager::addGroupCtrl(LayoutGroupCtrl*)=0x8047BF00
LayoutManager::isPointing(const nw4r::lyt::Pane*, const JGeometry::TVec2<float>&) const=0x8047BFB0
LayoutManager::createAndAddGroupCtrl(const char*, unsigned long)=0x8047C170
LayoutManager::getIndexOfGroupCtrl(const char*) const=0x8047C1E0
LayoutManager::createPaneMtxRef(const char*)=0x8047C340
LayoutManager::getPaneMtxRef(const char*) const=0x8047C3A0
LayoutManager::isExistPaneMtxRef(const char*) const=0x8047C3F0
LayoutManager::isPointing(const char*, const JGeometry::TVec2<float>&) const=0x8047C450
LayoutManager::getAnimTransform(const char*) const=0x8047C4A0
LayoutManager::bindPaneCtrlAnim(LayoutPaneCtrl*, nw4r::lyt::AnimTransform*)=0x8047C540
LayoutManager::bindPaneCtrlAnimSub(unsigned long&, nw4r::lyt::AnimTransform*)=0x8047C620
LayoutManager::unbindPaneCtrlAnim(LayoutPaneCtrl*, nw4r::lyt::AnimTransform*)=0x8047C710
LayoutManager::unbindPaneCtrlAnimSub(unsigned long&, nw4r::lyt::AnimTransform*)=0x8047C7C0
LayoutManager::calcAnimWithoutLocationAdjust(const nw4r::lyt::DrawInfo&)=0x8047C880
LayoutManager::getGroup(const char*) const=0x8047C9E0
LayoutManager::initArc(const char*, const char*)=0x8047CAC0
LayoutManager::initDrawInfo(void)=0x8047CB90
LayoutManager::initPaneInfo(void)=0x8047CC30
LayoutManager::initPaneInfoRecursive(unsigned long&, nw4r::lyt::Pane*)=0x8047CC90
LayoutManager::countPanes(nw4r::lyt::Pane*)=0x8047CDB0
LayoutManager::initGroupCtrlList(void)=0x8047CE50
LayoutManager::initTextBoxRecursive(nw4r::lyt::Pane*, nw4r::lyt::Pane*, const char*, unsigned long)=0x8047CEC0
LayoutManager::animateRecursive(unsigned long&, nw4r::lyt::Pane*)=0x8047D040
LayoutManager::findPaneByName(const char*) const=0x8047D150
LayoutManager::replaceIndDummyTexture(void)=0x8047D1D0
LayoutHolder::isExistResOther(const char*) const=0x8047D4B0
LayoutHolder::getResOther(unsigned long) const=0x8047D4C0
LayoutHolder::getResOtherNum(void) const=0x8047D4D0
LayoutManager::removeUnnecessaryPanes(nw4r::lyt::Pane*)=0x8047D4E0
@unnamed@LayoutManager_cpp@::Local::BitFlag<128>::__ct(void)=0x8047D800
@unnamed@LayoutManager_cpp@::Local::BitFlag<128>::isAnythingTrue(void) const=0x8047D850
@unnamed@LayoutManager_cpp@::Local::BitFlag<128>::__dt(void)=0x8047D890
@unnamed@LayoutManager_cpp@::Local::BitFlag<128>::onBit(int)=0x8047D8D0
@unnamed@LayoutManager_cpp@::Local::BitFlag<128>::offBit(int)=0x8047D900
@unnamed@LayoutManager_cpp@::Local::BitFlag<128>::isTrue(int) const=0x8047D930
LayoutPaneCtrl::__ct(LayoutManager*, const char*, unsigned long)=0x8047E720
LayoutPaneCtrl::movement(void)=0x8047E810
LayoutPaneCtrl::calcAnim(void)=0x8047E880
LayoutPaneCtrl::start(const char*, unsigned long)=0x8047E8F0
LayoutPaneCtrl::stop(unsigned long)=0x8047E9F0
LayoutPaneCtrl::isAnimStopped(unsigned long) const=0x8047EA10
LayoutPaneCtrl::reflectFollowPos(void)=0x8047EA20
LayoutPaneCtrl::getFrameCtrl(unsigned long) const=0x8047EC40
LayoutPaneCtrl::recalcChildGlobalMtx(nw4r::lyt::Pane*)=0x8047EC60
LensFlareModel::__ct(const char*, const char*)=0x8047ED40
LensFlareModel::update(bool, bool)=0x8047EE10
LensFlareModel::exeHide(void)=0x8047EF20
LensFlareModel::exeShow(void)=0x8047EF70
LensFlareModel::exeFadeIn(void)=0x8047EFC0
LensFlareModel::exeFadeOut(void)=0x8047F030
LensFlareModel::appear(void)=0x8047F060
LensFlareModel::appearAnim(void)=0x8047F0A0
LensFlareModel::control(void)=0x8047F0B0
LensFlareModel::controlAnim(void)=0x8047F0C0
LensFlareModel::notifyInArea(void)=0x8047F0D0
LensFlareRing::__ct(void)=0x8047F170
LensFlareModel::__dt(void)=0x8047F1E0
LensFlareRing::appearAnim(void)=0x8047F240
LensFlareRing::controlAnim(void)=0x8047F250
LensFlareGlow::__ct(void)=0x8047F340
LensFlareGlow::appearAnim(void)=0x8047F3A0
LensFlareGlow::controlAnim(void)=0x8047F3B0
LensFlareLine::__ct(void)=0x8047F440
LensFlareLine::appearAnim(void)=0x8047F4A0
LensFlareLine::controlAnim(void)=0x8047F4B0
LensFlareDirector::__ct(void)=0x8047F540
LensFlareDirector::__dt(void)=0x8047F5F0
LensFlareDirector::init(const JMapInfoIter&)=0x8047F650
LensFlareDirector::movement(void)=0x8047F6E0
LensFlareDirector::drawSyncCallback(unsigned short)=0x8047F770
LensFlareDirector::pauseOff(void)=0x8047F7F0
LensFlareDirector::setDrawSyncToken(void)=0x8047F840
LensFlareDirector::checkArea(void)=0x8047F890
LensFlareDirector::checkBrightObj(bool)=0x8047F900
LensFlareDirector::controlFlare(long, bool)=0x8047FA70
MR::addBrightObj(BrightObjBase*)=0x8047FCE0
MR::setLensFlareDrawSyncToken(void)=0x8047FD50
MR::getLensFlareDrawSyncTokenIndex(void)=0x8047FD90
LensFlareRing::__dt(void)=0x8047FDC0
LensFlareGlow::__dt(void)=0x8047FE20
LensFlareLine::__dt(void)=0x8047FE80
short::(nit_\LensFlare_cpp)=0x8047FEE0
NrvLensFlareModel::LensFlareModelNrvKill::__ct(void)=0x8047FF30
NrvLensFlareModel::LensFlareModelNrvHide::__ct(void)=0x8047FF40
NrvLensFlareModel::LensFlareModelNrvShow::__ct(void)=0x8047FF50
NrvLensFlareModel::LensFlareModelNrvFadeIn::__ct(void)=0x8047FF60
NrvLensFlareModel::LensFlareModelNrvFadeOut::__ct(void)=0x8047FF70
NrvLensFlareModel::LensFlareModelNrvFadeOut::execute(Spine*) const=0x8047FF80
NrvLensFlareModel::LensFlareModelNrvFadeIn::execute(Spine*) const=0x8047FF90
NrvLensFlareModel::LensFlareModelNrvShow::execute(Spine*) const=0x8047FFA0
NrvLensFlareModel::LensFlareModelNrvHide::execute(Spine*) const=0x8047FFB0
NrvLensFlareModel::LensFlareModelNrvKill::execute(Spine*) const=0x8047FFC0
LogoFader::__ct(const char*)=0x80480030
LogoFader::draw(void) const=0x804800B0
LogoFader::exeFadeIn(void)=0x80480140
LogoFader::exeFadeOut(void)=0x804801F0
LogoFader::setBlank(void)=0x80480290
LogoFader::startFadeIn(void)=0x804802A0
LogoFader::startFadeOut(void)=0x804802B0
LogoFader::isFadeEnd(void) const=0x804802C0
LogoFader::__dt(void)=0x80480320
short::(nit_\LogoFader_cpp)=0x80480380
NrvLogoFader::LogoFaderNrvBlank::__ct(void)=0x804803C0
NrvLogoFader::LogoFaderNrvDisplay::__ct(void)=0x804803D0
NrvLogoFader::LogoFaderNrvFadeIn::__ct(void)=0x804803E0
NrvLogoFader::LogoFaderNrvFadeOut::__ct(void)=0x804803F0
NrvLogoFader::LogoFaderNrvFadeOut::execute(Spine*) const=0x80480400
NrvLogoFader::LogoFaderNrvFadeIn::execute(Spine*) const=0x80480410
NrvLogoFader::LogoFaderNrvDisplay::execute(Spine*) const=0x80480420
NrvLogoFader::LogoFaderNrvBlank::execute(Spine*) const=0x80480460
Manual2P::__ct(const char*)=0x804804A0
Manual2P::init(const JMapInfoIter&)=0x80480510
Manual2P::appear(void)=0x804806F0
Manual2P::isClosed(void) const=0x80480780
Manual2P::exeAppear(void)=0x80480790
Manual2P::exeWait(void)=0x80480850
Manual2P::exeScrollRight(void)=0x80480A00
Manual2P::exeScrollRightAfter(void)=0x80480A70
Manual2P::exeScrollLeft(void)=0x80480B70
Manual2P::exeScrollLeftAfter(void)=0x80480C60
Manual2P::exeDisappear(void)=0x80480DF0
Manual2P::control(void)=0x80480E80
Manual2P::reflectPageIndex(void)=0x80480F40
Manual2P::__dt(void)=0x80481250
short::(nit_\Manual2P_cpp)=0x804812B0
NrvManual2P::Manual2PNrvAppear::__ct(void)=0x80481320
NrvManual2P::Manual2PNrvWait::__ct(void)=0x80481330
NrvManual2P::Manual2PNrvScrollRight::__ct(void)=0x80481340
NrvManual2P::Manual2PNrvScrollRightAfter::__ct(void)=0x80481350
NrvManual2P::Manual2PNrvScrollLeft::__ct(void)=0x80481370
NrvManual2P::Manual2PNrvScrollLeftAfter::__ct(void)=0x80481380
NrvManual2P::Manual2PNrvDisappear::__ct(void)=0x804813A0
NrvManual2P::Manual2PNrvDisappear::execute(Spine*) const=0x804813B0
NrvManual2P::Manual2PNrvScrollLeftAfter::execute(Spine*) const=0x804813D0
NrvManual2P::Manual2PNrvScrollLeft::execute(Spine*) const=0x804813E0
NrvManual2P::Manual2PNrvScrollRightAfter::execute(Spine*) const=0x80481400
NrvManual2P::Manual2PNrvScrollRight::execute(Spine*) const=0x80481410
NrvManual2P::Manual2PNrvWait::execute(Spine*) const=0x80481420
NrvManual2P::Manual2PNrvAppear::execute(Spine*) const=0x80481430
MarioMeter::__ct(const char*)=0x80481440
MarioMeter::init(const JMapInfoIter&)=0x80481490
MarioMeter::initLifeCount(long)=0x80481510
MarioMeter::setLifeCount(long)=0x80481590
MarioMeter::powerUp(void)=0x804815B0
MarioMeter::requestForceAppearHPMeter(void)=0x80481610
MarioMeter::requestPlayerMoving(void)=0x80481630
MarioMeter::requestPlayerStopped(void)=0x80481650
MarioMeter::activate(void)=0x80481670
MarioMeter::deactivate(void)=0x80481690
MarioMeter::__dt(void)=0x804816B0
MarioSubMeter::__ct(const char*)=0x80481710
MarioSubMeter::init(const JMapInfoIter&)=0x80481760
MarioSubMeter::setBeeLifeRatio(float)=0x804817E0
MarioSubMeter::setWaterLifeRatio(float)=0x804817F0
MarioSubMeter::activeSubMeterBee(void)=0x80481800
MarioSubMeter::activeSubMeterWater(void)=0x80481860
MarioSubMeter::frameOutSubMeter(void)=0x804818C0
MarioSubMeter::activate(void)=0x80481910
MarioSubMeter::deactivate(void)=0x80481930
MarioSubMeter::__dt(void)=0x80481970
MessageEditorMessageTag::__ct(const nw4r::ut::PrintContext<wchar_t>*)=0x804819D0
MessageEditorMessageTag::__ct(const wchar_t*)=0x804819E0
MessageEditorMessageTag::getSkipLength(void) const=0x804819F0
MessageEditorMessageTag::getParam8(int) const=0x80481A10
MessageEditorMessageTag::getParam16(int) const=0x80481A20
MessageEditorMessageTag::getParam32(int) const=0x80481A40
MessageEditorMessageTag::getParamPtr(int) const=0x80481A60
MessageTagSkipTagProcessor::__ct(void)=0x80481A70
MessageTagSkipTagProcessor::CalcRect(nw4r::ut::Rect*, unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x80481AB0
MessageTagSkipTagProcessor::Process(unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x80481AD0
MeterLayout::__ct(const char*, const char*)=0x80481B20
MeterLayout::init(const JMapInfoIter&)=0x80481BC0
MeterLayout::control(void)=0x80481D20
MeterLayout::requestActive(void)=0x80481E40
MeterLayout::requestDeactivate(void)=0x80481F10
MeterLayout::requestPowerUp(void)=0x80481F20
MeterLayout::requestForceAppear(void)=0x80481FA0
MeterLayout::requestPlayerMoving(void)=0x80481FF0
MeterLayout::requestPlayerStopped(void)=0x80482060
MeterLayout::initCount(long)=0x804820D0
MeterLayout::setCount(long)=0x804820E0
MeterLayout::exeAppear(void)=0x80482140
MeterLayout::exeWaitStart(void)=0x804821C0
MeterLayout::exeWait(void)=0x80482240
MeterLayout::exePowerUp(void)=0x804822C0
MeterLayout::exeMeterMove(void)=0x80482430
MeterLayout::exeCounterMove(void)=0x804824E0
MeterLayout::exeRecover(void)=0x804825D0
MeterLayout::exeDamage(void)=0x80482680
MeterLayout::exeBreakMeter(void)=0x80482730
MeterLayout::exeZeroMeter(void)=0x80482820
MeterLayout::exeZeroMeterBreak(void)=0x804828B0
MeterLayout::calcMarioHeadPosition(JGeometry::TVec2<float>*) const=0x80482930
MeterLayout::calcPowerUpMeterBasePosition(JGeometry::TVec2<float>*) const=0x804829B0
MeterLayout::setAnimBase(void)=0x80482A10
MeterLayout::setCountAnimFrame(void)=0x80482AC0
MeterLayout::setRecoveryCountAnimFrame(void)=0x80482B50
MeterLayout::__dt(void)=0x80482BE0
short::(nit_\MeterLayout_cpp)=0x80482C40
NrvMeterLayout::MeterLayoutNrvHide::__ct(void)=0x80482CC0
NrvMeterLayout::MeterLayoutNrvAppear::__ct(void)=0x80482CD0
NrvMeterLayout::MeterLayoutNrvWait::__ct(void)=0x80482CE0
NrvMeterLayout::MeterLayoutNrvWaitStart::__ct(void)=0x80482CF0
NrvMeterLayout::MeterLayoutNrvPowerUp::__ct(void)=0x80482D00
NrvMeterLayout::MeterLayoutNrvMeterMove::__ct(void)=0x80482D10
NrvMeterLayout::MeterLayoutNrvCounterMove::__ct(void)=0x80482D20
NrvMeterLayout::MeterLayoutNrvRecover::__ct(void)=0x80482D30
NrvMeterLayout::MeterLayoutNrvDamage::__ct(void)=0x80482D40
NrvMeterLayout::MeterLayoutNrvBreakMeter::__ct(void)=0x80482D50
NrvMeterLayout::MeterLayoutNrvZeroMeter::__ct(void)=0x80482D60
NrvMeterLayout::MeterLayoutNrvZeroMeterBreak::__ct(void)=0x80482D70
NrvMeterLayout::MeterLayoutNrvZeroMeterBreak::execute(Spine*) const=0x80482D80
NrvMeterLayout::MeterLayoutNrvZeroMeter::execute(Spine*) const=0x80482D90
NrvMeterLayout::MeterLayoutNrvBreakMeter::execute(Spine*) const=0x80482DA0
NrvMeterLayout::MeterLayoutNrvDamage::execute(Spine*) const=0x80482DB0
NrvMeterLayout::MeterLayoutNrvRecover::execute(Spine*) const=0x80482DC0
NrvMeterLayout::MeterLayoutNrvCounterMove::execute(Spine*) const=0x80482DD0
NrvMeterLayout::MeterLayoutNrvMeterMove::execute(Spine*) const=0x80482DE0
NrvMeterLayout::MeterLayoutNrvPowerUp::execute(Spine*) const=0x80482DF0
NrvMeterLayout::MeterLayoutNrvWaitStart::execute(Spine*) const=0x80482E00
NrvMeterLayout::MeterLayoutNrvWait::execute(Spine*) const=0x80482E10
NrvMeterLayout::MeterLayoutNrvAppear::execute(Spine*) const=0x80482E20
NrvMeterLayout::MeterLayoutNrvHide::execute(Spine*) const=0x80482E30
MiiConfirmIcon::__ct(const char*)=0x80482E40
MiiConfirmIcon::init(const JMapInfoIter&)=0x80482E80
MiiConfirmIcon::appear(nw4r::lyt::TexMap*, const wchar_t*)=0x80482ED0
MiiConfirmIcon::disappear(void)=0x80482F70
MiiConfirmIcon::exeAppear(void)=0x80482F80
MiiConfirmIcon::exeDisappear(void)=0x80482FF0
MiiConfirmIcon::isDisappear(void) const=0x80483060
MiiConfirmIcon::appear(void)=0x80483070
MiiConfirmIcon::__dt(void)=0x80483080
short::(nit_\MiiConfirmIcon_cpp)=0x804830E0
NrvMiiConfirmIcon::MiiConfirmIconNrvAppear::__ct(void)=0x80483120
NrvMiiConfirmIcon::MiiConfirmIconNrvWait::__ct(void)=0x80483130
NrvMiiConfirmIcon::MiiConfirmIconNrvDisappear::__ct(void)=0x80483140
NrvMiiConfirmIcon::MiiConfirmIconNrvDisappear::execute(Spine*) const=0x80483150
NrvMiiConfirmIcon::MiiConfirmIconNrvWait::execute(Spine*) const=0x80483160
NrvMiiConfirmIcon::MiiConfirmIconNrvAppear::execute(Spine*) const=0x804831B0
MiiSelect::__ct(const char*)=0x804831C0
MiiSelect::init(const JMapInfoIter&)=0x80483290
MiiSelect::appear(void)=0x80483310
MiiSelect::disappear(void)=0x80483390
MiiSelect::calcAnim(void)=0x804833E0
MiiSelect::isAppearing(void) const=0x80483420
MiiSelect::isSelected(void)=0x80483430
MiiSelect::isDummySelected(void)=0x80483440
MiiSelect::getSelectedID(FileSelectIconID*)=0x80483450
MiiSelect::getSelectedMiiTexMap(void)=0x80483460
MiiSelect::admitIcon(void)=0x80483470
MiiSelect::prohibitIcon(const FileSelectIconID&)=0x80483480
MiiSelect::invalidateSpecialMii(FileSelectIconID::EFellowID)=0x80483490
MiiSelect::validateAllSpecialMii(void)=0x804834F0
MiiSelect::exeAppear(void)=0x80483550
MiiSelect::exeWait(void)=0x804835E0
MiiSelect::exeScrollLeft(void)=0x80483710
MiiSelect::getIconNum(void)=0x804837E0
MiiSelect::exeScrollRight(void)=0x80483800
MiiSelect::exeDisappear(void)=0x804838C0
MiiSelect::control(void)=0x80483930
MiiSelect::createButtons(void)=0x80483A50
MiiSelect::callbackLeft(void)=0x80483AF0
MiiSelect::callbackRight(void)=0x80483B40
MiiSelect::appearButtons(void)=0x80483C50
MiiSelect::disappearButtons(void)=0x80483CB0
MiiSelect::updateButtons(void)=0x80483D10
MiiSelect::collectValidMiiIndex(void)=0x80483E10
MiiSelect::createPage(void)=0x80483ED0
MiiSelect::flipPage(void)=0x80483F30
MiiSelect::setCurrentPageGroupA(void)=0x80483F50
MiiSelect::setCurrentPageGroupB(void)=0x80483F70
MiiSelect::setCurrentPageNum(void)=0x80483F90
MiiSelect::validateAllIcon(void)=0x80484000
MiiSelect::refresh(void)=0x80484060
MiiSelect::getIconID(FileSelectIconID*, long) const=0x804840C0
MiiSelect::onSelect(long, nw4r::lyt::TexMap*)=0x804841A0
MiiSelect::onSelectDummy(void)=0x80484200
MiiSelectSub::Page::__ct(MiiSelect*)=0x80484250
MiiSelectSub::Page::refresh(long)=0x804842E0
MiiSelectSub::Page::movement(void)=0x804843F0
MiiSelectSub::Page::calcAnim(void)=0x80484540
MiiSelectSub::Page::invalidateAllIcon(void)=0x804845E0
MiiSelectSub::Page::validateAllIcon(void)=0x80484630
MiiSelectSub::Page::prohibitIcon(const FileSelectIconID&)=0x80484680
MiiSelect::__dt(void)=0x80484740
short::(nit_\MiiSelect_cpp)=0x804847A0
NrvMissSelect::MissSelectNrvAppear::__ct(void)=0x80484800
NrvMissSelect::MissSelectNrvWait::__ct(void)=0x80484810
NrvMissSelect::MissSelectNrvScrollRight::__ct(void)=0x80484820
NrvMissSelect::MissSelectNrvScrollLeft::__ct(void)=0x80484830
NrvMissSelect::MissSelectNrvSelected::__ct(void)=0x80484840
NrvMissSelect::MissSelectNrvDisappear::__ct(void)=0x80484850
NrvMissSelect::MissSelectNrvDummySelected::__ct(void)=0x80484860
NrvMissSelect::MissSelectNrvDummySelected::execute(Spine*) const=0x80484870
NrvMissSelect::MissSelectNrvDisappear::execute(Spine*) const=0x80484880
NrvMissSelect::MissSelectNrvSelected::execute(Spine*) const=0x80484890
NrvMissSelect::MissSelectNrvScrollLeft::execute(Spine*) const=0x804848A0
NrvMissSelect::MissSelectNrvScrollRight::execute(Spine*) const=0x804848B0
NrvMissSelect::MissSelectNrvWait::execute(Spine*) const=0x804848C0
NrvMissSelect::MissSelectNrvAppear::execute(Spine*) const=0x804848D0
MiiSelectIcon::__ct(int, int, int, const char*)=0x804848E0
MiiSelectIcon::appear(const FileSelectIconID&)=0x80484A20
MiiSelectIcon::appearMiiDummy(void)=0x80484C30
MiiSelectIcon::validate(void)=0x80484D60
MiiSelectIcon::invalidate(void)=0x80484DD0
MiiSelectIcon::prohibit(void)=0x80484E20
MiiSelectIcon::isSelected(void) const=0x80484EB0
MiiSelectIcon::isMiiDummy(void) const=0x80484EC0
MiiSelectIcon::copyIconID(FileSelectIconID*)=0x80484ED0
MiiSelectIcon::getTexMap(void)=0x80484EE0
MiiSelectIcon::isPointing(void) const=0x80484F50
MiiSelectIcon::exeCreate(void)=0x80484F60
MiiSelectIcon::exeWait(void)=0x80484FC0
MiiSelectIcon::exeDisappear(void)=0x80485060
MiiSelectIcon::appear(void)=0x804850D0
MiiSelectIcon::control(void)=0x804850E0
MiiSelectIcon::createButton(void)=0x80485120
MiiSelectIcon::createFaceImageObj(void)=0x804851D0
MiiSelectIcon::__dt(void)=0x80485300
short::(nit_\MiiSelectIcon_cpp)=0x80485360
NrvMissSelectIcon::MissSelectIconNrvCreate::__ct(void)=0x804853B0
NrvMissSelectIcon::MissSelectIconNrvWait::__ct(void)=0x804853C0
NrvMissSelectIcon::MissSelectIconNrvSelected::__ct(void)=0x804853D0
NrvMissSelectIcon::MissSelectIconNrvDisappear::__ct(void)=0x804853E0
NrvMissSelectIcon::MissSelectIconNrvInvalid::__ct(void)=0x804853F0
NrvMissSelectIcon::MissSelectIconNrvInvalid::execute(Spine*) const=0x80485400
NrvMissSelectIcon::MissSelectIconNrvDisappear::execute(Spine*) const=0x80485410
NrvMissSelectIcon::MissSelectIconNrvSelected::execute(Spine*) const=0x80485420
NrvMissSelectIcon::MissSelectIconNrvWait::execute(Spine*) const=0x80485430
NrvMissSelectIcon::MissSelectIconNrvCreate::execute(Spine*) const=0x80485440
MissLayout::__ct(void)=0x80485450
MissLayout::init(const JMapInfoIter&)=0x804854A0
MissLayout::kill(void)=0x80485520
MissLayout::isActive(void) const=0x80485560
MissLayout::start(void)=0x80485570
MissLayout::exeActive(void)=0x804855D0
MissLayout::__dt(void)=0x80485670
short::(nit_\MissLayout_cpp)=0x804856D0
NrvMissLayout::MissLayoutNrvWait::__ct(void)=0x80485710
NrvMissLayout::MissLayoutNrvActive::__ct(void)=0x80485720
NrvMissLayout::MissLayoutNrvEnd::__ct(void)=0x80485730
NrvMissLayout::MissLayoutNrvEnd::execute(Spine*) const=0x80485740
NrvMissLayout::MissLayoutNrvActive::execute(Spine*) const=0x80485750
NrvMissLayout::MissLayoutNrvWait::execute(Spine*) const=0x80485760
NoteCounter::__ct(const char*)=0x80485770
NoteCounter::init(const JMapInfoIter&)=0x804857E0
NoteCounter::declareNoteNumMaxAndMelody(LiveActor*, long, long, float)=0x80485830
NoteCounter::add(void)=0x804858D0
NoteCounter::exeShowToHide(void)=0x80485A10
NoteCounter::exeHideToShow(void)=0x80485AD0
NoteCounter::tryEndDisp(void)=0x80485BB0
MR::declareNoteNumMaxAndMelodyToCounter(LiveActor*, long, long, float)=0x80485BE0
MR::addNoteToCounter(void)=0x80485C40
MR::failureNoteCollection(void)=0x80485C70
NoteCounter::__dt(void)=0x80485CB0
short::(nit_\NoteCounter_cpp)=0x80485D10
NrvNoteCounter::NoteCounterNrvShow::__ct(void)=0x80485D60
NrvNoteCounter::NoteCounterNrvShowWait::__ct(void)=0x80485D70
NrvNoteCounter::NoteCounterNrvShowToHide::__ct(void)=0x80485D80
NrvNoteCounter::NoteCounterNrvHideToShow::__ct(void)=0x80485D90
NrvNoteCounter::NoteCounterNrvHide::__ct(void)=0x80485DA0
NrvNoteCounter::NoteCounterNrvHide::execute(Spine*) const=0x80485DB0
NrvNoteCounter::NoteCounterNrvHideToShow::execute(Spine*) const=0x80485DF0
NrvNoteCounter::NoteCounterNrvShowToHide::execute(Spine*) const=0x80485E00
NrvNoteCounter::NoteCounterNrvShowWait::execute(Spine*) const=0x80485E10
NrvNoteCounter::NoteCounterNrvShow::execute(Spine*) const=0x80485E60
OneUpBoard::__ct(void)=0x80485E70
OneUpBoard::init(const JMapInfoIter&)=0x80485EC0
OneUpBoard::popup(long)=0x80485F50
OneUpBoard::appear(void)=0x80485FA0
OneUpBoard::calcPos(void)=0x80485FE0
OneUpBoard::control(void)=0x80486050
OneUpBoard::exeAppear(void)=0x80486060
OneUpBoard::__dt(void)=0x804860F0
short::(nit_\OneUpBoard_cpp)=0x80486150
NrvOneUpBoard::HostTypeWait::__ct(void)=0x80486180
NrvOneUpBoard::HostTypeAppear::__ct(void)=0x80486190
NrvOneUpBoard::HostTypeAppear::execute(Spine*) const=0x804861A0
NrvOneUpBoard::HostTypeWait::execute(Spine*) const=0x804861B0
PaneEffectKeeper::__ct(LayoutActor*, const LayoutManager*, int, const char*)=0x804861C0
PaneEffectKeeper::init(const LayoutActor*, const EffectSystem*)=0x80486270
PaneEffectKeeper::add(const char*, const char*, const char*)=0x804862A0
PaneEffectKeeper::createEmitter(const char*)=0x80486360
PaneEffectKeeper::deleteEmitter(const char*)=0x804863A0
PaneEffectKeeper::forceDeleteEmitter(const char*)=0x804863D0
PaneEffectKeeper::deleteEmitterAll(void)=0x80486400
PaneEffectKeeper::forceDeleteEmitterAll(void)=0x80486460
PaneEffectKeeper::clear(void)=0x804864C0
PaneEffectKeeper::getEmitter(const char*) const=0x80486550
PaneEffectKeeper::changeAnim(void)=0x80486560
PaneEffectKeeper::registerEffect(MultiEmitter*, const char*)=0x80486570
PaneEffectKeeper::find(const char*) const=0x804865D0
PauseBlur::__ct(const char*)=0x80486650
PauseBlur::init(const JMapInfoIter&)=0x80486760
PauseBlur::movement(void)=0x80486770
PauseBlur::draw(void) const=0x80486840
PauseBlur::calcAnim(void)=0x804868D0
PauseBlur::__dt(void)=0x80486B80
@unnamed@PauseMenu_cpp@::isInvalidBackMarioFaceShipOrWorldMap(void)=0x80486BE0
PauseMenu::__ct(void)=0x80486C50
PauseMenu::init(const JMapInfoIter&)=0x80486CE0
PauseMenu::appear(void)=0x80487080
PauseMenu::kill(void)=0x80487220
PauseMenu::control(void)=0x80487260
PauseMenu::forceToWaitAllButton(void)=0x80487500
PauseMenu::exeSelecting(void)=0x80487700
PauseMenu::exeDecided(void)=0x80487930
PauseMenu::exeDisappear(void)=0x80487AE0
PauseMenu::exeConfirm(void)=0x80487C20
PauseMenu::exeGameDataSave(void)=0x80487CE0
PauseMenu::__dt(void)=0x80487DF0
short::(nit_\PauseMenu_cpp)=0x80487E50
NrvPauseMenu::PauseMenuNrvSelecting::__ct(void)=0x80487ED0
NrvPauseMenu::PauseMenuNrvDecided::__ct(void)=0x80487EE0
NrvPauseMenu::PauseMenuNrvDisappear::__ct(void)=0x80487EF0
NrvPauseMenu::PauseMenuNrvConfirm::__ct(void)=0x80487F00
NrvPauseMenu::PauseMenuNrvGameDataSave::__ct(void)=0x80487F10
NrvPauseMenu::PauseMenuNrvGameDataSave::execute(Spine*) const=0x80487F40
NrvPauseMenu::PauseMenuNrvConfirm::execute(Spine*) const=0x80487F50
NrvPauseMenu::PauseMenuNrvDisappear::execute(Spine*) const=0x80487F60
NrvPauseMenu::PauseMenuNrvDecided::execute(Spine*) const=0x80487F70
NrvPauseMenu::PauseMenuNrvSelecting::execute(Spine*) const=0x80487F80
PlayerActionGuidance::__ct(void)=0x80487F90
PlayerActionGuidance::control(void)=0x80488010
PlayerActionGuidance::init(const JMapInfoIter&)=0x80488140
PlayerActionGuidance::createSpinLayout(void)=0x804881C0
PlayerActionGuidance::createTamakoroLayout(void)=0x80488270
PlayerActionGuidance::exeWaitFocusIn(void)=0x804882F0
PlayerActionGuidance::exeFadein(void)=0x80488350
PlayerActionGuidance::exeDisplay(void)=0x804884F0
PlayerActionGuidance::exeSuspend(void)=0x80488640
PlayerActionGuidance::exeFadeout(void)=0x804886B0
PlayerActionGuidance::startAnimAllLayout(const char*)=0x80488740
PlayerActionGuidance::startWaitAnimAllLayout(void)=0x804887B0
PlayerActionGuidance::setAnimFrameAndStopAllLayout(float)=0x80488820
PlayerActionGuidance::hideAllLayout(void)=0x80488890
PlayerActionGuidance::isInVolumePlayer(const char*, bool) const=0x80488920
MR::getPlayerActionGuidance(void)=0x80488A60
PlayerActionGuidance::__dt(void)=0x80488AF0
short::(nit_\PlayerActionGuidance_cpp)=0x80488B50
NrvPlayerActionGuidance::PlayerActionGuidanceNrvWaitFocusIn::__ct(void)=0x80488BA0
NrvPlayerActionGuidance::PlayerActionGuidanceNrvFadein::__ct(void)=0x80488BB0
NrvPlayerActionGuidance::PlayerActionGuidanceNrvDisplay::__ct(void)=0x80488BC0
NrvPlayerActionGuidance::PlayerActionGuidanceNrvSuspend::__ct(void)=0x80488BD0
NrvPlayerActionGuidance::PlayerActionGuidanceNrvFadeout::__ct(void)=0x80488BE0
NrvPlayerActionGuidance::PlayerActionGuidanceNrvFadeout::execute(Spine*) const=0x80488BF0
NrvPlayerActionGuidance::PlayerActionGuidanceNrvSuspend::execute(Spine*) const=0x80488C00
NrvPlayerActionGuidance::PlayerActionGuidanceNrvDisplay::execute(Spine*) const=0x80488C10
NrvPlayerActionGuidance::PlayerActionGuidanceNrvFadein::execute(Spine*) const=0x80488C20
NrvPlayerActionGuidance::PlayerActionGuidanceNrvWaitFocusIn::execute(Spine*) const=0x80488C30
PlayerLeft::__ct(const char*)=0x80488C40
PlayerLeft::init(const JMapInfoIter&)=0x80488CA0
PlayerLeft::appear(void)=0x80488DA0
PlayerLeft::forceAppear(void)=0x80488E00
PlayerLeft::disappear(void)=0x80488E60
PlayerLeft::isWait(void) const=0x80488E70
PlayerLeft::control(void)=0x80488E80
PlayerLeft::exeHide(void)=0x80488ED0
PlayerLeft::exeAppear(void)=0x80488F40
PlayerLeft::exeWait(void)=0x80488FD0
PlayerLeft::exeDisappear(void)=0x804890C0
PlayerLeft::__dt(void)=0x80489120
short::(nit_\PlayerLeft_cpp)=0x80489180
NrvPlayerLeft::PlayerLeftNrvHide::__ct(void)=0x804891C0
NrvPlayerLeft::PlayerLeftNrvAppear::__ct(void)=0x804891D0
NrvPlayerLeft::PlayerLeftNrvWait::__ct(void)=0x804891E0
NrvPlayerLeft::PlayerLeftNrvDisappear::__ct(void)=0x804891F0
NrvPlayerLeft::PlayerLeftNrvDisappear::execute(Spine*) const=0x80489200
NrvPlayerLeft::PlayerLeftNrvWait::execute(Spine*) const=0x80489210
NrvPlayerLeft::PlayerLeftNrvAppear::execute(Spine*) const=0x80489220
NrvPlayerLeft::PlayerLeftNrvHide::execute(Spine*) const=0x80489230
PlayerMissLeft::__ct(const char*)=0x80489240
PlayerMissLeft::init(const JMapInfoIter&)=0x80489290
PlayerMissLeft::appear(void)=0x80489360
PlayerMissLeft::control(void)=0x804893C0
PlayerMissLeft::exeAppear(void)=0x80489400
PlayerMissLeft::exeWait(void)=0x80489500
PlayerMissLeft::exeEnd(void)=0x80489590
PlayerMissLeft::__dt(void)=0x804895F0
short::(nit_\PlayerMissLeft_cpp)=0x80489650
NrvPlayerMissLeft::HostTypeNrvAppearWait::__ct(void)=0x80489690
NrvPlayerMissLeft::HostTypeNrvAppear::__ct(void)=0x804896A0
NrvPlayerMissLeft::HostTypeNrvWait::__ct(void)=0x804896B0
NrvPlayerMissLeft::HostTypeNrvEnd::__ct(void)=0x804896C0
NrvPlayerMissLeft::HostTypeNrvEnd::execute(Spine*) const=0x804896D0
NrvPlayerMissLeft::HostTypeNrvWait::execute(Spine*) const=0x804896E0
NrvPlayerMissLeft::HostTypeNrvAppear::execute(Spine*) const=0x804896F0
NrvPlayerMissLeft::HostTypeNrvAppearWait::execute(Spine*) const=0x80489700
PopUpAddTimeAttackTime::__ct(const char*, float)=0x80489750
PopUpAddTimeAttackTime::appear(void)=0x804897C0
PopUpAddTimeAttackTime::init(const JMapInfoIter&)=0x80489820
PopUpAddTimeAttackTime::control(void)=0x80489890
PopUpAddTimeAttackTime::__dt(void)=0x80489A10
short::(nit_\PopUpAddTimeAttackTime_cpp)=0x80489A70
PostFog::__ct(const char*)=0x80489B30
PostFog::draw(void) const=0x80489BD0
PostFog::__dt(void)=0x8048A4D0
PostManLetter::__ct(long)=0x8048A640
PostManLetter::init(const JMapInfoIter&)=0x8048A810
PostManLetter::control(void)=0x8048A930
PostManLetter::appear(void)=0x8048ADB0
PostManLetter::__dt(void)=0x8048B090
short::(nit_\PostManLetter_cpp)=0x8048B0F0
PostOutline::__ct(const char*)=0x8048B220
PostOutline::draw(void) const=0x8048B2C0
PostOutline::__dt(void)=0x8048BB90
PurpleCoinCounter::__ct(const char*)=0x8048BBF0
PurpleCoinCounter::init(const JMapInfoIter&)=0x8048BC50
PurpleCoinCounter::appear(void)=0x8048BD20
PurpleCoinCounter::validate(void)=0x8048BDC0
PurpleCoinCounter::control(void)=0x8048BDE0
PurpleCoinCounter::updateCounter(void)=0x8048BE20
PurpleCoinCounter::exeAppear(void)=0x8048BF30
PurpleCoinCounter::__dt(void)=0x8048BFC0
short::(nit_\PurpleCoinCounter_cpp)=0x8048C020
NrvPurpleCoinCounter::PurpleCoinCounterNrvAppear::__ct(void)=0x8048C050
NrvPurpleCoinCounter::PurpleCoinCounterNrvWait::__ct(void)=0x8048C060
NrvPurpleCoinCounter::PurpleCoinCounterNrvWait::execute(Spine*) const=0x8048C070
NrvPurpleCoinCounter::PurpleCoinCounterNrvAppear::execute(Spine*) const=0x8048C080
RaceLayout::__ct(const char*)=0x8048C090
RaceLayout::init(const JMapInfoIter&)=0x8048C0D0
RaceLayout::appear(void)=0x8048C190
RaceLayout::__dt(void)=0x8048C620
short::(nit_\RaceLayout_cpp)=0x8048C680
ReplaceTagProcessor::Impl::findGroupFunctionInfo(int)=0x8048C720
ReplaceTagProcessor::ImplArgs::findGroupFunctionInfo(int)=0x8048C760
ReplaceTagProcessor::Replace(wchar_t*, const wchar_t*)=0x8048C7A0
ReplaceTagProcessor::ReplaceArgs(wchar_t*, const wchar_t*, __va_list_struct*)=0x8048C8E0
ReplaceTagProcessor::exePictureGroup(wchar_t*, const MessageEditorMessageTag&)=0x8048CA10
ReplaceTagProcessor::exeStringGroup(wchar_t*, const MessageEditorMessageTag&, __va_list_struct*)=0x8048CAE0
__va_list_struct::__as(const __va_list_struct&)=0x8048CB70
ReplaceTagProcessor::exeNumberGroup(wchar_t*, const MessageEditorMessageTag&, __va_list_struct*)=0x8048CBA0
ReplaceTagProcessor::exeLocalizeGroup(wchar_t*, const MessageEditorMessageTag&)=0x8048CD00
ReplaceTagProcessor::exeLocalizeGroupPlayerName(wchar_t*, unsigned char)=0x8048CD60
ReplaceTagProcessor::exeRaceTimeGroup(wchar_t*, const MessageEditorMessageTag&)=0x8048CE10
ReplaceTagFunction::ReplaceArgs(wchar_t*, long, const wchar_t*, e)=0x8048CE50
SaveIcon::__ct(const LayoutActor*)=0x8048CF30
SaveIcon::appear(void)=0x8048CFA0
SaveIcon::calcAnim(void)=0x8048CFE0
SaveIcon::__dt(void)=0x8048D020
ScenarioSelectLayout::__ct(EffectSystem*, const CameraContext*)=0x8048D250
ScenarioSelectLayout::init(const JMapInfoIter&)=0x8048D340
ScenarioSelectLayout::appear(void)=0x8048D660
ScenarioSelectLayout::kill(void)=0x8048D940
ScenarioSelectLayout::movement(void)=0x8048D9F0
ScenarioSelectLayout::calcAnim(void)=0x8048DA80
ScenarioSelectLayout::draw(void) const=0x8048DB10
ScenarioSelectLayout::calcViewAndEntryStarModel(void)=0x8048DB50
ScenarioSelectLayout::getSelectedScenarioNo(void) const=0x8048DBD0
ScenarioSelectLayout::isReadyToDisappear(void) const=0x8048DBE0
ScenarioSelectLayout::isAppearStarEnd(void) const=0x8048DC30
ScenarioSelectLayout::isEndAnimStartStep(void) const=0x8048DCD0
ScenarioSelectLayout::isCanceled(void) const=0x8048DD30
ScenarioSelectLayout::control(void)=0x8048DD90
ScenarioSelectLayout::updateSelectedScenario(void)=0x8048DDF0
ScenarioSelectLayout::updateScenarioText(void)=0x8048DEC0
ScenarioSelectLayout::fadeInText(void)=0x8048DFE0
ScenarioSelectLayout::fadeOutText(void)=0x8048E1E0
ScenarioSelectLayout::trySelect(void)=0x8048E2A0
ScenarioSelectLayout::getSelectedStar(void) const=0x8048E340
ScenarioSelectLayout::calcWorldPositionFromScreenPos(JGeometry::TVec3<float>*, const JGeometry::TVec2<float>&, float) const=0x8048E390
ScenarioSelectLayout::calcDisplayScenarioNum(long*, long*) const=0x8048E5B0
ScenarioSelectLayout::appearAllStar(long, long, bool)=0x8048E6B0
ScenarioSelectLayout::appearStar(long, long, int)=0x8048E970
ScenarioSelectLayout::isAppearStarEndAll(void) const=0x8048EA10
ScenarioSelectLayout::tryCancel(void)=0x8048EA90
ScenarioSelectLayout::setPlayerLeft(void)=0x8048EB00
ScenarioSelectLayout::startAnimAllNewPane(const char*)=0x8048EB80
ScenarioSelectLayout::setAnimRateAllNewPane(float)=0x8048EC20
ScenarioSelectLayout::exeAppearStar(void)=0x8048ECD0
ScenarioSelectLayout::exeAppear(void)=0x8048EDE0
ScenarioSelectLayout::exeWaitScenarioSelect(void)=0x8048F1F0
ScenarioSelectLayout::exeDecide(void)=0x8048F300
ScenarioSelectLayout::exeAfterScenarioSelected(void)=0x8048F3D0
ScenarioSelectLayout::exeCancel(void)=0x8048F4D0
ScenarioSelectLayout::exeAppearCometWarning(void)=0x8048F550
ScenarioSelectLayout::exeWaitCometWarning(void)=0x8048F630
ScenarioSelectLayout::__dt(void)=0x8048F6C0
short::(nit_\ScenarioSelectLayout_cpp)=0x8048F720
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAppearStar::__ct(void)=0x8048F790
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAppear::__ct(void)=0x8048F7A0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvWaitScenarioSelect::__ct(void)=0x8048F7B0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvDecide::__ct(void)=0x8048F7C0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAfterScenarioSelected::__ct(void)=0x8048F7D0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvDisappear::__ct(void)=0x8048F7E0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvCancel::__ct(void)=0x8048F7F0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvCancelFadeOut::__ct(void)=0x8048F800
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvWaitCometWarning::__ct(void)=0x8048F810
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvDisappearCometWarning::__ct(void)=0x8048F820
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvDisappearCometWarning::execute(Spine*) const=0x8048F830
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvWaitCometWarning::execute(Spine*) const=0x8048F890
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAppearCometWarning::execute(Spine*) const=0x8048F8A0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvCancelFadeOut::execute(Spine*) const=0x8048F8B0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvCancel::execute(Spine*) const=0x8048F8D0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAfterScenarioSelected::execute(Spine*) const=0x8048F8E0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvDecide::execute(Spine*) const=0x8048F8F0
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvWaitScenarioSelect::execute(Spine*) const=0x8048F900
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAppear::execute(Spine*) const=0x8048F910
NrvScenarioSelectLayout::ScenarioSelectLayoutNrvAppearStar::execute(Spine*) const=0x8048F920
ScenarioTitle::__ct(void)=0x8048F930
ScenarioTitle::init(const JMapInfoIter&)=0x8048F980
ScenarioTitle::start(void)=0x8048F9F0
ScenarioTitle::end(void)=0x8048FA40
ScenarioTitle::exeAppear(void)=0x8048FA50
ScenarioTitle::exeEnd(void)=0x8048FAE0
ScenarioTitle::__dt(void)=0x8048FB50
short::(nit_\ScenarioTitle_cpp)=0x8048FBB0
NrvScenarioTitle::ScenarioTitleNrvAppear::__ct(void)=0x8048FBF0
NrvScenarioTitle::ScenarioTitleNrvWait::__ct(void)=0x8048FC00
NrvScenarioTitle::ScenarioTitleNrvEnd::__ct(void)=0x8048FC10
NrvScenarioTitle::ScenarioTitleNrvEnd::execute(Spine*) const=0x8048FC20
NrvScenarioTitle::ScenarioTitleNrvWait::execute(Spine*) const=0x8048FC30
NrvScenarioTitle::ScenarioTitleNrvAppear::execute(Spine*) const=0x8048FC40
SceneWipeHolder::__ct(void)=0x8048FC50
WipeHolderBase::__dt(void)=0x8048FE60
SceneWipeHolderFunction::getSceneWipeHolder(void)=0x8048FEC0
SceneWipeHolderFunction::openWipe(const char*, long)=0x8048FEF0
SceneWipeHolderFunction::closeWipe(const char*, long)=0x8048FF70
SceneWipeHolderFunction::forceOpenWipe(const char*)=0x8048FFF0
SceneWipeHolderFunction::forceCloseWipe(const char*)=0x80490040
WipeHolderBase::getCurrent(void) const=0x80490090
SceneWipeHolder::__dt(void)=0x804900A0
ScoreCounterLayout::__ct(void)=0x80490100
ScoreCounterLayout::init(const JMapInfoIter&)=0x80490170
ScoreCounterLayout::appear(void)=0x80490230
ScoreCounterLayout::control(void)=0x80490680
ScoreCounterLayout::__dt(void)=0x80490710
short::(nit_\ScoreCounterLayout_cpp)=0x80490770
ScoreResult::__ct(const char*)=0x804908A0
ScoreResult::init(const JMapInfoIter&)=0x80490900
ScoreResult::control(void)=0x80490960
ScoreResult::__dt(void)=0x80490AB0
short::(nit_\ScoreResult_cpp)=0x80490B10
ScoreResultKeeper::__ct(void)=0x80490B40
ScoreResultKeeper::__dt(void)=0x80490D90
ScreenAlphaCapture::__ct(const char*)=0x80490DF0
ScreenAlphaCapture::init(const JMapInfoIter&)=0x80490E50
ScreenAlphaCapture::createScreenAlpha(long, float)=0x80490E60
ScreenAlphaCapture::captureScreenAlpha(long)=0x80490F80
MR::createScreenAlphaSceneObj(long, float)=0x80491010
MR::captureScreenAlpha(long)=0x80491070
MR::loadScreenAlphaTexture(long, _GXTexMapID)=0x804910B0
MR::getScreenAlphaTexture(long)=0x80491160
ScreenAlphaCapture::__dt(void)=0x804911A0
ScreenBlurEffect::__ct(const char*)=0x80491200
ScreenBlurEffect::calcAnimSub(void)=0x80491290
ScreenBlurEffect::notifyTurnOn(void)=0x804912A0
ScreenBlurEffect::draw(void) const=0x804912B0
ScreenBlurEffect::drawBlur(void) const=0x80491310
ScreenBlurEffect::captureBlur(void) const=0x804918B0
ScreenBlurEffect::__dt(void)=0x80491930
ScreenPreserver::__ct(void)=0x80491990
ScreenPreserver::draw(void) const=0x80491A00
ScreenPreserver::captureIfAllow(void)=0x80491AF0
ScreenPreserver::activate(void)=0x80491B00
ScreenPreserver::deactivate(void)=0x80491B30
ScreenPreserver::__dt(void)=0x80491B60
SimpleLayout::__ct(const char*, const char*, unsigned long, int)=0x80491BC0
SimpleEffectLayout::__ct(const char*, const char*, unsigned long, int)=0x80491C60
SimpleEffectLayout::__dt(void)=0x80491F00
short::(nit_\SimpleLayout_cpp)=0x80491FC0
StaffRoll::__ct(void)=0x80492100
StaffRoll::init(const JMapInfoIter&)=0x80492190
StaffRoll::appear(void)=0x80492390
StaffRoll::kill(void)=0x804923D0
StaffRoll::movement(void)=0x804924D0
StaffRoll::calcAnim(void)=0x80492560
StaffRoll::draw(void) const=0x804925E0
StaffRoll::__dt(void)=0x80492DC0
short::(nit_\StaffRoll_cpp)=0x80492E20
DisplayInformationForResult::__ct(StageResultInformer*)=0x80494B60
DisplayInformationForResult::exeAppear(void)=0x80494BD0
StageResultInformer::__ct(void)=0x80494C90
StageResultInformer::init(const JMapInfoIter&)=0x80494D20
StageResultInformer::appear(void)=0x80494E00
StageResultInformer::kill(void)=0x80494EC0
StageResultInformer::exeAppearGetPowerStar(void)=0x80494F00
StageResultInformer::exeCountUpPowerStar(void)=0x804950D0
StageResultInformer::exeDisplayGetPowerStar(void)=0x80495180
StageResultInformer::exeAppearGetStarPiece(void)=0x80495490
StageResultInformer::exeDisplayGetStarPiece(void)=0x80495560
StageResultInformer::exeWaitBeforeDisappearGetStarPiece(void)=0x80495690
StageResultInformer::exeAppearGetCoin(void)=0x80495790
StageResultInformer::exeDisplayGetCoin(void)=0x80495880
StageResultInformer::exeWaitBeforeDisappearGetCoin(void)=0x804959E0
StageResultInformer::decideNextNerve(void)=0x80496360
StageResultInformer::tryWaitSystemPadTriggerDecide(const Nerve*)=0x804963C0
StageResultInformer::tryWaitIntervalBeforeKeyWait(const Nerve*, int)=0x80496440
StageResultInformer::tryShowAndKeyWaitInformationWindow(const char*, const Nerve*)=0x804964C0
DisplayInformationForResult::__dt(void)=0x80496890
StageResultInformer::__dt(void)=0x804968F0
short::(nit_\StageResultInformer_cpp)=0x80496950
StarCounter::__ct(void)=0x80497000
StarCounter::init(const JMapInfoIter&)=0x80497060
StarCounter::appear(void)=0x80497120
StarCounter::kill(void)=0x80497200
StarCounter::disappear(void)=0x80497210
StarCounter::isWait(void) const=0x80497250
StarCounter::control(void)=0x80497260
StarCounter::exeCountUp(void)=0x804972A0
StarCounter::exeDisappear(void)=0x80497340
StarCounter::__dt(void)=0x804973A0
short::(nit_\StarCounter_cpp)=0x80497400
NrvStarCounter::StarCounterNrvAppear::__ct(void)=0x80497440
NrvStarCounter::StarCounterNrvWait::__ct(void)=0x80497450
NrvStarCounter::StarCounterNrvCountUp::__ct(void)=0x80497460
NrvStarCounter::StarCounterNrvDisappear::__ct(void)=0x80497470
NrvStarCounter::StarCounterNrvDisappear::execute(Spine*) const=0x80497480
NrvStarCounter::StarCounterNrvCountUp::execute(Spine*) const=0x80497490
NrvStarCounter::StarCounterNrvWait::execute(Spine*) const=0x804974A0
NrvStarCounter::StarCounterNrvAppear::execute(Spine*) const=0x804974F0
StarPieceBank::__ct(const char*)=0x80497600
StarPieceBank::appear(void)=0x80497810
StarPieceBank::control(void)=0x80498020
StarPieceBank::__dt(void)=0x80498230
short::(nit_\StarPieceBank_cpp)=0x80498290
StarPieceCounter::__ct(const char*)=0x80498430
StarPieceCounter::init(const JMapInfoIter&)=0x804984A0
StarPieceCounter::appear(void)=0x804985D0
StarPieceCounter::forceAppear(bool)=0x80498640
StarPieceCounter::disappear(bool)=0x80498720
StarPieceCounter::isWait(void) const=0x80498790
StarPieceCounter::forceSync(void)=0x804987F0
StarPieceCounter::tryOnModeTicoEat(bool)=0x80498830
StarPieceCounter::tryOffModeTicoEat(void)=0x80498850
StarPieceCounter::control(void)=0x80498860
StarPieceCounter::updateCounter(void)=0x804988A0
StarPieceCounter::updateCounterValue(void)=0x804989B0
StarPieceCounter::isValidAppearSituation(void) const=0x80498B30
StarPieceCounter::tryChangeModeTicoEat(int)=0x80498BC0
StarPieceCounter::exeHide(void)=0x80498C80
StarPieceCounter::exeAppear(void)=0x80498D10
CounterLayoutAppearer::setAppearOffset(const JGeometry::TVec2<float>&)=0x80498EE0
StarPieceCounter::exeWait(void)=0x80498F00
StarPieceCounter::exeDisappear(void)=0x80498F80
StarPieceCounter::__dt(void)=0x80498FF0
short::(nit_\StarPieceCounter_cpp)=0x80499050
NrvStarPieceCounter::StarPieceCounterNrvHide::__ct(void)=0x80499090
NrvStarPieceCounter::StarPieceCounterNrvAppear::__ct(void)=0x804990A0
NrvStarPieceCounter::StarPieceCounterNrvWait::__ct(void)=0x804990B0
NrvStarPieceCounter::StarPieceCounterNrvDisappear::__ct(void)=0x804990C0
NrvStarPieceCounter::StarPieceCounterNrvDisappear::execute(Spine*) const=0x804990D0
NrvStarPieceCounter::StarPieceCounterNrvWait::execute(Spine*) const=0x804990E0
NrvStarPieceCounter::StarPieceCounterNrvAppear::execute(Spine*) const=0x804990F0
NrvStarPieceCounter::StarPieceCounterNrvHide::execute(Spine*) const=0x80499100
StarPointerBlur::__ct(JUTTexture*)=0x80499110
StarPointerBlur::BlurPoint::__ct(void)=0x80499240
StarPointerBlur::show(void)=0x80499270
StarPointerBlur::hide(void)=0x804992C0
StarPointerBlur::hideAll(void)=0x804992E0
StarPointerBlur::movement(void)=0x80499320
StarPointerBlur::updatePoint(const JGeometry::TVec2<float>&, bool, JGeometry::TVec2<float>*)=0x804993C0
StarPointerBlur::findDrawPointRange(unsigned short*, unsigned short*) const=0x804994F0
StarPointerBlur::draw(void) const=0x804995B0
StarPointerBlur::draw2(void) const=0x80499600
StarPointerBlur::initDraw(void) const=0x80499870
StarPointerBlur::__dt(void)=0x80499A70
StarPointerController::__ct(void)=0x80499AD0
DpdInfo::__ct(void)=0x80499BC0
StarPointerController::isOutScreenLong(void) const=0x80499BF0
StarPointerController::initAndSetPort(long)=0x80499C10
StarPointerController::movement(const float*, const float*)=0x80499C20
StarPointerController::storeDataFromCallback(const float*, const float*)=0x80499C60
StarPointerController::storePastPointingData(void)=0x80499D70
StarPointerController::calcPastPointingPosOnScreen(JGeometry::TVec2<float>*, long) const=0x80499E40
StarPointerController::updateDpdInfo(void)=0x80499F00
StarPointerController::updateAdditionalInfo(void)=0x80499FD0
StarPointerController::calcViewDistanceZ(const JGeometry::TVec3<float>&, A4_f)=0x8049A0E0
StarPointerDirector::__ct(void)=0x8049A120
StarPointerDirector::update(void)=0x8049A2C0
StarPointerDirector::draw(void)=0x8049A470
StarPointerDirector::createLayout(void)=0x8049A500
StarPointerLayout::__defctor(void)=0x8049A5B0
StarPointerLayout::__dt(void)=0x8049A5C0
StarPointerDirector::startHandPointer(void)=0x8049A620
StarPointerDirector::startFingerPointer(void)=0x8049A640
StarPointerDirector::startStarPointer(void)=0x8049A660
StarPointerDirector::startStarPointerNozzle(void)=0x8049A680
StarPointerDirector::setGameSceneCameraMtx(void)=0x8049A6E0
JMath::gekko_ps_copy16(void*, const void*)=0x8049A750
StarPointerDirector::getStarPointerController(long) const=0x8049A7A0
StarPointerDirector::getStarPointerLayout(long) const=0x8049A810
StarPointerTransformHolder::__ct(void)=0x8049A820
StarPointerTransformHolder::movement(void)=0x8049A870
StarPointerPeekZ::__ct(void)=0x8049A990
StarPointerPeekZ::setDrawSyncToken(void)=0x8049A9F0
StarPointerPeekZ::drawSyncCallback(unsigned short)=0x8049AA40
StarPointerFunction::forceInsideScreenEdge(JGeometry::TVec2<float>*)=0x8049AE80
StarPointerFunction::getStarPointerDirector(void)=0x8049AF80
StarPointerFunction::getNumStarPointer(void)=0x8049AF90
StarPointerFunction::getPastPointNum(long)=0x8049AFA0
StarPointerFunction::getPastPosition(long, long)=0x8049AFF0
StarPointerFunction::getNextPastPointNum(long)=0x8049B050
StarPointerFunction::canShoot(long)=0x8049B0A0
StarPointerGuidance::__ct(const char*)=0x8049BEE0
StarPointerGuidance::init(const JMapInfoIter&)=0x8049BF60
StarPointerGuidance::control(void)=0x8049C050
StarPointerGuidance::checkRequest1P(void)=0x8049C0B0
StarPointerGuidance::exeAppearCore(Spine*, const char*, unsigned long, const Nerve*)=0x8049C380
StarPointerGuidance::exeWaitCore(Spine*, const char*, unsigned long)=0x8049C450
StarPointerGuidance::exeEndCore(Spine*, const char*, unsigned long)=0x8049C500
StarPointerGuidance::request1PGuidance(const char*, bool)=0x8049C5E0
StarPointerGuidance::isExistGuidanceOrFrame(void)=0x8049C680
StarPointerGuidance::isExistGuidance(void)=0x8049C6E0
StarPointerGuidance::isExistFrame1P(void)=0x8049C740
StarPointerGuidance::deactive(void)=0x8049C780
StarPointerGuidance::__dt(void)=0x8049C800
short::(nit_\StarPointerGuidance_cpp)=0x8049C860
NrvStarPointerGuidance::HostTypeNrvAppear1P::__ct(void)=0x8049C8C0
NrvStarPointerGuidance::HostTypeNrvWait1P::__ct(void)=0x8049C8D0
NrvStarPointerGuidance::HostTypeNrvEnd1P::__ct(void)=0x8049C8E0
NrvStarPointerGuidance::HostTypeNrvAppearBlueStarGuide::__ct(void)=0x8049C8F0
NrvStarPointerGuidance::HostTypeNrvWaitBlueStarGuide::__ct(void)=0x8049C900
NrvStarPointerGuidance::HostTypeNrvEndBlueStarGuide::__ct(void)=0x8049C910
NrvStarPointerGuidance::HostTypeNrvEndWait::__ct(void)=0x8049C920
NrvStarPointerGuidance::HostTypeNrvEndWait::execute(Spine*) const=0x8049C930
NrvStarPointerGuidance::HostTypeNrvEndBlueStarGuide::execute(Spine*) const=0x8049C940
NrvStarPointerGuidance::HostTypeNrvWaitBlueStarGuide::execute(Spine*) const=0x8049C960
NrvStarPointerGuidance::HostTypeNrvAppearBlueStarGuide::execute(Spine*) const=0x8049C980
NrvStarPointerGuidance::HostTypeNrvEnd1P::execute(Spine*) const=0x8049C9A0
NrvStarPointerGuidance::HostTypeNrvWait1P::execute(Spine*) const=0x8049C9C0
NrvStarPointerGuidance::HostTypeNrvAppear1P::execute(Spine*) const=0x8049C9E0
StarPointerLayout::__ct(const char*)=0x8049CA00
StarPointerLayout::initWithPort(long)=0x8049CAB0
StarPointerBlur::setPortAndColor(long, const _GXColor*, const _GXColor*)=0x8049CC90
StarPointerLayout::appear(void)=0x8049CCA0
StarPointerLayout::kill(void)=0x8049CCE0
StarPointerLayout::exeWait(void)=0x8049CCF0
StarPointerLayout::exeGrip(void)=0x8049CF10
StarPointerLayout::exeHold(void)=0x8049D1D0
StarPointerLayout::tearDownHold(void)=0x8049D490
StarPointerLayout::exeRelease(void)=0x8049D520
StarPointerLayout::exeOnReaction(void)=0x8049D7B0
StarPointerLayout::updateTouch(void)=0x8049D9E0
StarPointerLayout::isTouch(void)=0x8049DA70
StarPointerLayout::exeOutScreen(void)=0x8049DA90
StarPointerLayout::hideAll(void)=0x8049DB50
StarPointerLayout::exeHide(void)=0x8049DBE0
StarPointerLayout::tearDownHide(void)=0x8049DE00
StarPointerLayout::calcAnim(void)=0x8049DEB0
StarPointerLayout::draw(void) const=0x8049DEF0
StarPointerLayout::drawDecoration(void) const=0x8049DFA0
StarPointerLayout::control(void)=0x8049E030
StarPointerLayout::setPosition(void)=0x8049E410
StarPointerLayout::rotateTest(void)=0x8049E480
StarPointerLayout::calcPoseNozzle(const JGeometry::TVec2<float>&, const JGeometry::TVec2<float>&)=0x8049E5A0
StarPointerLayout::changeLayout(StarPointerKind)=0x8049E670
StarPointerLayout::isChanceToRumble(void) const=0x8049E790
StarPointerLayout::hideBlur(void)=0x8049E830
StarPointerLayout::resetSameNerve(void)=0x8049E840
StarPointerLayout::changeToStarPointer(void)=0x8049E9D0
StarPointerLayout::changeToHandPointer(void)=0x8049EA40
StarPointerLayout::startAnimHandPaa(void)=0x8049EBB0
StarPointerLayout::startAnimHandGuu(void)=0x8049EC20
StarPointerLayout::startAnimHandFinger(void)=0x8049EC90
StarPointerLayout::updateDecoration(void)=0x8049ED80
StarPointerNumber::__ct(StarPointerLayout*, long, const char*)=0x8049EDB0
StarPointerNumber::control(void)=0x8049EE40
StarPointerNumber::isOffState(void) const=0x8049EFB0
StarPointerNumber::startAnimPosition(unsigned long)=0x8049F070
StarPointerNumber::__dt(void)=0x8049F0E0
short::(nit_\StarPointerLayout_cpp)=0x8049F140
NrvStarPointerLayout::HostTypeNrvWait::__ct(void)=0x8049F1C0
NrvStarPointerLayout::HostTypeNrvOnReaction::__ct(void)=0x8049F1D0
NrvStarPointerLayout::HostTypeNrvGrip::__ct(void)=0x8049F1E0
NrvStarPointerLayout::HostTypeNrvHold::__ct(void)=0x8049F1F0
NrvStarPointerLayout::HostTypeNrvHoldTouch::__ct(void)=0x8049F200
NrvStarPointerLayout::HostTypeNrvRelease::__ct(void)=0x8049F210
NrvStarPointerLayout::HostTypeNrvOutScreen::__ct(void)=0x8049F220
NrvStarPointerLayout::HostTypeNrvNotConnected::__ct(void)=0x8049F230
NrvStarPointerLayout::HostTypeNrvHide::__ct(void)=0x8049F240
NrvStarPointerLayout::HostTypeNrvHideImmediately::__ct(void)=0x8049F250
NrvStarPointerLayout::HostTypeNrvInvalidate::__ct(void)=0x8049F260
NrvStarPointerLayout::HostTypeNrvInvalidateWait::__ct(void)=0x8049F270
NrvStarPointerLayout::HostTypeNrvInvalidateWait::executeOnEnd(Spine*) const=0x8049F280
NrvStarPointerLayout::HostTypeNrvInvalidateWait::execute(Spine*) const=0x8049F290
NrvStarPointerLayout::HostTypeNrvInvalidate::executeOnEnd(Spine*) const=0x8049F2A0
NrvStarPointerLayout::HostTypeNrvInvalidate::execute(Spine*) const=0x8049F2B0
NrvStarPointerLayout::HostTypeNrvHideImmediately::execute(Spine*) const=0x8049F2C0
NrvStarPointerLayout::HostTypeNrvHide::execute(Spine*) const=0x8049F2D0
NrvStarPointerLayout::HostTypeNrvNotConnected::executeOnEnd(Spine*) const=0x8049F2E0
NrvStarPointerLayout::HostTypeNrvNotConnected::execute(Spine*) const=0x8049F2F0
NrvStarPointerLayout::HostTypeNrvOutScreen::execute(Spine*) const=0x8049F300
NrvStarPointerLayout::HostTypeNrvRelease::execute(Spine*) const=0x8049F310
NrvStarPointerLayout::HostTypeNrvHoldTouch::executeOnEnd(Spine*) const=0x8049F320
NrvStarPointerLayout::HostTypeNrvHoldTouch::execute(Spine*) const=0x8049F330
NrvStarPointerLayout::HostTypeNrvHold::executeOnEnd(Spine*) const=0x8049F340
NrvStarPointerLayout::HostTypeNrvHold::execute(Spine*) const=0x8049F350
NrvStarPointerLayout::HostTypeNrvGrip::execute(Spine*) const=0x8049F360
NrvStarPointerLayout::HostTypeNrvOnReaction::execute(Spine*) const=0x8049F370
NrvStarPointerLayout::HostTypeNrvWait::execute(Spine*) const=0x8049F380
StarPointerTarget::__ct(float, const JGeometry::TVec3<float>*, A4_fQ29JGeometry8TVec3<float>)=0x8049F390
StarPointerTarget::calcScreenPosition(JGeometry::TVec2<float>*) const=0x8049F3C0
StarPointerTarget::isPointing(const JGeometry::TVec2<float>&, float, float) const=0x8049F440
StarPointerTarget::calcPosition(JGeometry::TVec3<float>*) const=0x8049F540
StarPointerTarget::calcRadius2d(float, float, float) const=0x8049F690
StarPointerTarget::calcScreenPositionFromView(JGeometry::TVec2<float>*, const JGeometry::TVec3<float>&) const=0x8049F7F0
StarPointerLayoutTarget::__ct(LayoutActor*, const char*, const char*)=0x8049FA20
StarPointerLayoutTarget::isPointing(const JGeometry::TVec2<float>&) const=0x8049FA50
StarPointerLayoutTarget::calcBasePos(JGeometry::TVec2<float>*) const=0x8049FB90
StarPointerLayoutTargetKeeper::__ct(int)=0x8049FC30
StarPointerLayoutTargetKeeper::addTargetCircle(LayoutActor*, const char*, float, const JGeometry::TVec2<float>&, const char*)=0x8049FC90
StarPointerLayoutTargetKeeper::getTarget(const char*) const=0x8049FD40
StarPointerLayoutTargetKeeper::registerTarget(StarPointerLayoutTarget*)=0x8049FDC0
StartCountdownLayout::__ct(void)=0x8049FDE0
StartCountdownLayout::init(const JMapInfoIter&)=0x8049FE30
StartCountdownLayout::appear(void)=0x8049FED0
StartCountdownLayout::exeCountdown(void)=0x8049FF10
StartCountdownLayout::exeStart(void)=0x8049FFF0
StartCountdownLayout::isStart(void) const=0x804A0090
StartCountdownLayout::__dt(void)=0x804A00A0
short::(nit_\StartCountdownLayout_cpp)=0x804A0100
NrvStartCountdownLayout::StartCountdownLayoutNrvCountdown::__ct(void)=0x804A0130
NrvStartCountdownLayout::StartCountdownLayoutNrvStart::__ct(void)=0x804A0140
NrvStartCountdownLayout::StartCountdownLayoutNrvStart::execute(Spine*) const=0x804A0150
NrvStartCountdownLayout::StartCountdownLayoutNrvCountdown::execute(Spine*) const=0x804A0160
StoryBookText::__ct(void)=0x804A0170
StoryBookText::init(const JMapInfoIter&)=0x804A01D0
StoryBookText::kill(void)=0x804A0260
StoryBookText::__dt(void)=0x804A0900
short::(nit_\StoryBookText_cpp)=0x804A0960
SubMeterLayout::__ct(const char*, const char*)=0x804A0AE0
SubMeterLayout::init(const JMapInfoIter&)=0x804A0B60
SubMeterLayout::setLifeRatio(float)=0x804A0BE0
SubMeterLayout::requestDeactivate(void)=0x804A0C50
SubMeterLayout::requestAppear(void)=0x804A0C90
SubMeterLayout::requestFrameIn(void)=0x804A0CF0
SubMeterLayout::requestFrameOut(void)=0x804A0D50
SubMeterLayout::control(void)=0x804A0D90
SubMeterLayout::__dt(void)=0x804A0FF0
SuddenDeathMeter::__ct(const char*, const char*)=0x804A1050
SuddenDeathMeter::init(const JMapInfoIter&)=0x804A10F0
SuddenDeathMeter::control(void)=0x804A1210
SuddenDeathMeter::requestActive(void)=0x804A1250
SuddenDeathMeter::requestDeactivate(void)=0x804A12C0
SuddenDeathMeter::requestPowerUp(void)=0x804A1310
SuddenDeathMeter::requestForceAppear(void)=0x804A1320
SuddenDeathMeter::requestPlayerMoving(void)=0x804A1360
SuddenDeathMeter::exeAppear(void)=0x804A1370
SuddenDeathMeter::exeWait(void)=0x804A13E0
SuddenDeathMeter::exePowerUp(void)=0x804A1430
SuddenDeathMeter::exeMeterMove(void)=0x804A14C0
SuddenDeathMeter::exeCounterMove(void)=0x804A1570
SuddenDeathMeter::exeBreakMeter(void)=0x804A15F0
SuddenDeathMeter::exeZeroMeter(void)=0x804A16C0
SuddenDeathMeter::exeZeroMeterBreak(void)=0x804A1730
SuddenDeathMeter::initCount(long)=0x804A1790
SuddenDeathMeter::setCount(long)=0x804A17A0
SuddenDeathMeter::calcMarioHeadPosition(JGeometry::TVec2<float>*) const=0x804A17D0
SuddenDeathMeter::calcPowerUpMeterBasePosition(JGeometry::TVec2<float>*) const=0x804A1850
SuddenDeathMeter::setPowerUpMeterPosition(const JGeometry::TVec2<float>&)=0x804A18B0
SuddenDeathMeter::setCountAnimFrame(void)=0x804A1930
SuddenDeathMeter::setRecoveryCountAnimFrame(void)=0x804A19C0
SuddenDeathMeter::__dt(void)=0x804A1A50
short::(nit_\SuddenDeathMeter_cpp)=0x804A1AB0
NrvSuddenDeathMeter::SuddenDeathMeterNrvAppear::__ct(void)=0x804A1B10
NrvSuddenDeathMeter::SuddenDeathMeterNrvWait::__ct(void)=0x804A1B20
NrvSuddenDeathMeter::SuddenDeathMeterNrvPowerUp::__ct(void)=0x804A1B30
NrvSuddenDeathMeter::SuddenDeathMeterNrvMeterMove::__ct(void)=0x804A1B40
NrvSuddenDeathMeter::SuddenDeathMeterNrvCounterMove::__ct(void)=0x804A1B50
NrvSuddenDeathMeter::SuddenDeathMeterNrvBreakMeter::__ct(void)=0x804A1B60
NrvSuddenDeathMeter::SuddenDeathMeterNrvZeroMeter::__ct(void)=0x804A1B70
NrvSuddenDeathMeter::SuddenDeathMeterNrvZeroMeterBreak::__ct(void)=0x804A1B80
NrvSuddenDeathMeter::SuddenDeathMeterNrvZeroMeterBreak::execute(Spine*) const=0x804A1B90
NrvSuddenDeathMeter::SuddenDeathMeterNrvZeroMeter::execute(Spine*) const=0x804A1BA0
NrvSuddenDeathMeter::SuddenDeathMeterNrvBreakMeter::execute(Spine*) const=0x804A1BB0
NrvSuddenDeathMeter::SuddenDeathMeterNrvCounterMove::execute(Spine*) const=0x804A1BC0
NrvSuddenDeathMeter::SuddenDeathMeterNrvMeterMove::execute(Spine*) const=0x804A1BD0
NrvSuddenDeathMeter::SuddenDeathMeterNrvPowerUp::execute(Spine*) const=0x804A1BE0
NrvSuddenDeathMeter::SuddenDeathMeterNrvWait::execute(Spine*) const=0x804A1BF0
NrvSuddenDeathMeter::SuddenDeathMeterNrvAppear::execute(Spine*) const=0x804A1C00
SupportPlayGuidance::__ct(void)=0x804A1C10
SupportPlayGuidance::init(const JMapInfoIter&)=0x804A1C60
SupportPlayGuidance::appear(void)=0x804A1D30
SupportPlayGuidance::kill(void)=0x804A1D70
SupportPlayGuidance::__dt(void)=0x804A1FD0
short::(nit_\SupportPlayGuidance_cpp)=0x804A2030
SwitchingScreenEffect::__ct(const char*)=0x804A2130
SwitchingScreenEffect::init(const JMapInfoIter&)=0x804A2170
SwitchingScreenEffect::control(void)=0x804A2220
MR::createSwitchingScreenEffect(void)=0x804A24D0
MR::onSwitchingScreenEffect(void)=0x804A24E0
MR::offSwitchingScreenEffect(void)=0x804A2530
SwitchingScreenEffect::__dt(void)=0x804A2580
short::(nit_\SwitchingScreenEffect_cpp)=0x804A25E0
SysInfoWindow::__ct(SysInfoWindow::SysInfoWindowType, SysInfoWindow::SysInfoExecuteType)=0x804A26A0
SysInfoWindow::init(const JMapInfoIter&)=0x804A2760
SysInfoWindow::movement(void)=0x804A2860
SysInfoWindow::calcAnim(void)=0x804A28B0
SysInfoWindow::draw(void) const=0x804A2900
SysInfoWindow::appear(void)=0x804A2950
SysInfoWindow::appear(const char*, SysInfoWindow::SysInfoType, SysInfoWindow::SysInfoTextPos, SysInfoWindow::SysInfoMessageType)=0x804A29C0
SysInfoWindow::disappear(void)=0x804A2B60
SysInfoWindow::kill(void)=0x804A2B70
SysInfoWindow::forceKill(void)=0x804A2BB0
SysInfoWindow::isWait(void) const=0x804A2C00
SysInfoWindow::isSelectedYes(void) const=0x804A2C10
SysInfoWindow::isDisappear(void) const=0x804A2C30
SysInfoWindow::control(void)=0x804A2C40
SysInfoWindow::getLayoutName(void) const=0x804A2C60
SysInfoWindow::exeWait(void)=0x804A2CA0
SysInfoWindow::exeDisappear(void)=0x804A2D90
SysInfoWindow::setYesNoSelectorSE(const char*, const char*, const char*)=0x804A2E70
SysInfoWindow::resetYesNoSelectorSE(void)=0x804A2E90
SysInfoWindow::setTextBoxArgString(const wchar_t*, long)=0x804A2EB0
MR::createSysInfoWindow(void)=0x804A2ED0
MR::createSysInfoWindowExecuteWithChildren(void)=0x804A2F30
MR::createSysInfoWindowMiniExecuteWithChildren(void)=0x804A2F90
SysInfoWindow::__dt(void)=0x804A2FF0
short::(nit_\SysInfoWindow_cpp)=0x804A3050
NrvSysInfoWindow::SysInfoWindowNrvAppear::__ct(void)=0x804A3090
NrvSysInfoWindow::SysInfoWindowNrvWait::__ct(void)=0x804A30A0
NrvSysInfoWindow::SysInfoWindowNrvDisappear::__ct(void)=0x804A30B0
NrvSysInfoWindow::SysInfoWindowNrvDisappear::execute(Spine*) const=0x804A30C0
NrvSysInfoWindow::SysInfoWindowNrvWait::execute(Spine*) const=0x804A30D0
NrvSysInfoWindow::SysInfoWindowNrvAppear::execute(Spine*) const=0x804A30E0
SystemWipeHolder::__ct(void)=0x804A3100
SystemWipeHolder::init(const JMapInfoIter&)=0x804A3150
SystemWipeHolder::movement(void)=0x804A32A0
SystemWipeHolder::calcAnim(void)=0x804A33E0
SystemWipeHolder::draw(void) const=0x804A3480
SystemWipeHolder::setWipeRingCenter(const JGeometry::TVec3<float>&)=0x804A3540
SystemWipeHolder::startGameScreenCapture(void)=0x804A35B0
SystemWipeHolder::drawGameScreenCapture(void) const=0x804A35D0
SystemWipeHolder::updateWipe(const char*)=0x804A36C0
MR::createSystemWipeHolder(void)=0x804A3720
SystemWipeHolder::__dt(void)=0x804A3770
TimeLimitLayout::__ct(unsigned long)=0x804A37D0
TimeLimitLayout::init(const JMapInfoIter&)=0x804A3840
TimeLimitLayout::appear(void)=0x804A3900
TimeLimitLayout::kill(void)=0x804A3940
TimeLimitLayout::setTimeLimit(unsigned long)=0x804A3A10
TimeLimitLayout::setDisplayModeOnNormal(bool)=0x804A3A20
TimeLimitLayout::isReadyToTimeUp(void) const=0x804A3A30
TimeLimitLayout::resetFrame(void)=0x804A3A90
TimeLimitLayout::updateTextBox(void)=0x804A3B00
TimeLimitLayout::exeAppear(void)=0x804A3B30
TimeLimitLayout::exeCountDown(void)=0x804A3BE0
TimeLimitLayout::exeScaleUp(void)=0x804A3C50
TimeLimitLayout::exeScaleKeep(void)=0x804A3CD0
TimeLimitLayout::exeScaleDown(void)=0x804A3D80
TimeLimitLayout::exeFadeout(void)=0x804A3E20
TimeLimitLayout::control(void)=0x804A3E90
TimeLimitLayout::getCurrentTiming(void) const=0x804A3F30
TimeLimitLayout::updateNormal(void)=0x804A3FA0
TimeLimitLayout::__dt(void)=0x804A40E0
short::(nit_\TimeLimitLayout_cpp)=0x804A4140
NrvTimeLimitLayout::TimeLimitLayoutAppear::__ct(void)=0x804A41A0
NrvTimeLimitLayout::TimeLimitLayoutCountDown::__ct(void)=0x804A41B0
NrvTimeLimitLayout::TimeLimitLayoutScaleUp::__ct(void)=0x804A41C0
NrvTimeLimitLayout::TimeLimitLayoutScaleKeep::__ct(void)=0x804A41D0
NrvTimeLimitLayout::TimeLimitLayoutScaleDown::__ct(void)=0x804A41E0
NrvTimeLimitLayout::TimeLimitLayoutFadeout::__ct(void)=0x804A41F0
NrvTimeLimitLayout::TimeLimitLayoutTimeUpReady::__ct(void)=0x804A4200
NrvTimeLimitLayout::TimeLimitLayoutTimeUpReady::execute(Spine*) const=0x804A4210
NrvTimeLimitLayout::TimeLimitLayoutFadeout::execute(Spine*) const=0x804A4220
NrvTimeLimitLayout::TimeLimitLayoutScaleDown::execute(Spine*) const=0x804A4230
NrvTimeLimitLayout::TimeLimitLayoutScaleKeep::execute(Spine*) const=0x804A4240
NrvTimeLimitLayout::TimeLimitLayoutScaleUp::execute(Spine*) const=0x804A4250
NrvTimeLimitLayout::TimeLimitLayoutCountDown::execute(Spine*) const=0x804A4260
NrvTimeLimitLayout::TimeLimitLayoutAppear::execute(Spine*) const=0x804A4270
TimeStopScreenCaptureTexture::__ct(const char*)=0x804A4280
TimeStopScreenEffect::__ct(const char*)=0x804A4310
TimeStopScreenEffect::init(const JMapInfoIter&)=0x804A4360
TimeStopScreenEffect::control(void)=0x804A4450
TimeStopScreenEffect::calcAndSetBaseMtx(void)=0x804A4460
TimeStopScreenEffect::draw(void) const=0x804A4500
MR::createTimeStopScreenEffect(void)=0x804A46A0
MR::onTimeStopScreenEffect(void)=0x804A46D0
MR::offTimeStopScreenEffect(void)=0x804A4720
TimeStopScreenCaptureTexture::__dt(void)=0x804A4810
TimeStopScreenEffect::__dt(void)=0x804A4870
short::(nit_\TimeStopScreenEffect_cpp)=0x804A48D0
TimeUpLayout::__ct(void)=0x804A49E0
TimeUpLayout::init(const JMapInfoIter&)=0x804A4A30
TimeUpLayout::appear(void)=0x804A4AA0
TimeUpLayout::__dt(void)=0x804A4C10
short::(nit_\TimeUpLayout_cpp)=0x804A4C70
TitleSequenceProductSub::LogoLayout::__ct(void)=0x804A4D50
TitleSequenceProduct::__ct(void)=0x804A4DE0
TitleSequenceProduct::exeLogoFadein(void)=0x804A5080
TitleSequenceProduct::exeLogoWait(void)=0x804A5100
TitleSequenceProduct::exeLogoDisplay(void)=0x804A51F0
TitleSequenceProduct::exeDecide(void)=0x804A5380
TitleSequenceProduct::exeDead(void)=0x804A5420
TitleSequenceProduct::appear(void)=0x804A54E0
TitleSequenceProduct::kill(void)=0x804A5500
TitleSequenceProduct::isActive(void) const=0x804A5510
TitleSequenceProduct::updateButtonReaction(TriggerChecker*, const char*)=0x804A5560
TitleSequenceProduct::updatePressStartReaction(void)=0x804A55F0
TitleSequenceProduct::__dt(void)=0x804A5670
TitleSequenceProductSub::LogoLayout::__dt(void)=0x804A56D0
short::(nit_\TitleSequenceProduct_cpp)=0x804A5730
NrvTitleSequenceProduct::TitleSequenceProductNrvLogoFadein::__ct(void)=0x804A57D0
NrvTitleSequenceProduct::TitleSequenceProductNrvLogoWait::__ct(void)=0x804A57E0
NrvTitleSequenceProduct::TitleSequenceProductNrvLogoDisplay::__ct(void)=0x804A57F0
NrvTitleSequenceProduct::TitleSequenceProductNrvDecide::__ct(void)=0x804A5800
NrvTitleSequenceProduct::TitleSequenceProductNrvDead::__ct(void)=0x804A5810
NrvTitleSequenceProduct::TitleSequenceProductNrvDead::execute(Spine*) const=0x804A5840
NrvTitleSequenceProduct::TitleSequenceProductNrvDecide::execute(Spine*) const=0x804A5850
NrvTitleSequenceProduct::TitleSequenceProductNrvLogoDisplay::execute(Spine*) const=0x804A5860
NrvTitleSequenceProduct::TitleSequenceProductNrvLogoWait::execute(Spine*) const=0x804A5870
NrvTitleSequenceProduct::TitleSequenceProductNrvLogoFadein::execute(Spine*) const=0x804A5880
WaterCameraFilter::__ct(void)=0x804A58C0
WaterCameraFilter::init(const JMapInfoIter&)=0x804A5930
WaterCameraFilter::exeAirToWater(void)=0x804A5A90
WaterCameraFilter::exeWaterToAir(void)=0x804A5B20
WaterCameraFilter::control(void)=0x804A5BB0
WaterCameraFilter::draw(void) const=0x804A5C90
WaterCameraFilter::loadMaterial(void) const=0x804A5EB0
WaterCameraFilter::__dt(void)=0x804A6300
short::(nit_\WaterCameraFilter_cpp)=0x804A6360
NrvWaterCameraFilter::WaterCameraFilterNrvAir::__ct(void)=0x804A63A0
NrvWaterCameraFilter::WaterCameraFilterNrvAirToWater::__ct(void)=0x804A63B0
NrvWaterCameraFilter::WaterCameraFilterNrvWater::__ct(void)=0x804A63C0
NrvWaterCameraFilter::WaterCameraFilterNrvWaterToAir::__ct(void)=0x804A63D0
NrvWaterCameraFilter::WaterCameraFilterNrvWaterToAir::execute(Spine*) const=0x804A63E0
NrvWaterCameraFilter::WaterCameraFilterNrvWater::execute(Spine*) const=0x804A63F0
NrvWaterCameraFilter::WaterCameraFilterNrvAirToWater::execute(Spine*) const=0x804A6430
NrvWaterCameraFilter::WaterCameraFilterNrvAir::execute(Spine*) const=0x804A6440
WipeFade::__ct(const char*, const Color8&)=0x804A6480
WipeLayoutBase::__dt(void)=0x804A64F0
WipeFade::init(const JMapInfoIter&)=0x804A6550
WipeFade::control(void)=0x804A6560
WipeFade::draw(void) const=0x804A65C0
WipeFade::wipe(long)=0x804A66C0
WipeFade::forceClose(void)=0x804A6750
WipeFade::forceOpen(void)=0x804A67B0
WipeFade::isOpen(void) const=0x804A67D0
WipeFade::isClose(void) const=0x804A6800
WipeFade::isWipeIn(void) const=0x804A6830
WipeFade::isWipeOut(void) const=0x804A6860
WipeLayoutBase::getWipeType(void) const=0x804A6890
WipeLayoutBase::getWipeName(void) const=0x804A68A0
WipeFade::__dt(void)=0x804A68B0
WipeGameOver::__ct(void)=0x804A6910
WipeGameOver::init(const JMapInfoIter&)=0x804A6960
WipeGameOver::kill(void)=0x804A69B0
WipeGameOver::wipe(long)=0x804A69F0
WipeGameOver::forceClose(void)=0x804A6A60
WipeGameOver::forceOpen(void)=0x804A6AB0
WipeGameOver::isOpen(void) const=0x804A6B70
WipeGameOver::isClose(void) const=0x804A6BD0
WipeGameOver::isWipeIn(void) const=0x804A6C30
WipeGameOver::isWipeOut(void) const=0x804A6C40
WipeGameOver::getWipeType(void) const=0x804A6CA0
WipeGameOver::__dt(void)=0x804A6CB0
short::(nit_\WipeGameOver_cpp)=0x804A6D10
NrvWipeGameOver::WipeGameOverWait::__ct(void)=0x804A6D40
NrvWipeGameOver::WipeGameOverActive::__ct(void)=0x804A6D50
NrvWipeGameOver::WipeGameOverActive::execute(Spine*) const=0x804A6D60
NrvWipeGameOver::WipeGameOverWait::execute(Spine*) const=0x804A6DC0
WipeHolderBase::__ct(unsigned long, const char*)=0x804A6DD0
WipeHolderBase::setCurrent(const char*)=0x804A6E40
WipeHolderBase::wipe(const char*, long)=0x804A6EE0
WipeHolderBase::forceClose(const char*)=0x804A6F40
WipeHolderBase::forceOpen(const char*)=0x804A6F90
WipeHolderBase::isOpen(void) const=0x804A6FE0
WipeHolderBase::isClose(void) const=0x804A7000
WipeHolderBase::isWipeIn(void) const=0x804A7020
WipeHolderBase::isWipeOut(void) const=0x804A7040
WipeHolderBase::isCurrent(const char*) const=0x804A7060
WipeHolderBase::addWipeLayout(WipeLayoutBase*)=0x804A70B0
WipeHolderBase::updateWipe(const char*)=0x804A7120
WipeHolderBase::findWipe(const char*) const=0x804A7190
WipeKoopa::__ct(void)=0x804A7240
WipeKoopa::init(const JMapInfoIter&)=0x804A7290
WipeKoopa::exeWipeOut(void)=0x804A72E0
WipeKoopa::wipe(long)=0x804A73B0
WipeKoopa::forceClose(void)=0x804A7420
WipeKoopa::forceOpen(void)=0x804A74B0
WipeKoopa::isOpen(void) const=0x804A7560
WipeKoopa::isClose(void) const=0x804A7570
WipeKoopa::isWipeIn(void) const=0x804A7580
WipeKoopa::isWipeOut(void) const=0x804A7590
WipeKoopa::getWipeType(void) const=0x804A75A0
WipeKoopa::__dt(void)=0x804A75B0
short::(nit_\WipeKoopa_cpp)=0x804A7610
NrvWipeKoopa::WipeKoopaNrvWait::__ct(void)=0x804A7650
NrvWipeKoopa::WipeKoopaNrvWipeOut::__ct(void)=0x804A7660
NrvWipeKoopa::WipeKoopaNrvClose::__ct(void)=0x804A7670
NrvWipeKoopa::WipeKoopaNrvClose::execute(Spine*) const=0x804A7680
NrvWipeKoopa::WipeKoopaNrvWipeOut::execute(Spine*) const=0x804A7690
NrvWipeKoopa::WipeKoopaNrvWait::execute(Spine*) const=0x804A76A0
WipeMario::__ct(void)=0x804A76B0
WipeMario::init(const JMapInfoIter&)=0x804A7700
WipeMario::wipe(long)=0x804A7930
WipeMario::forceClose(void)=0x804A79B0
WipeMario::forceOpen(void)=0x804A7A40
WipeMario::isOpen(void) const=0x804A7A80
WipeMario::isClose(void) const=0x804A7A90
WipeMario::isWipeIn(void) const=0x804A7AA0
WipeMario::isWipeOut(void) const=0x804A7AB0
WipeMario::getWipeType(void) const=0x804A7AC0
WipeMario::__dt(void)=0x804A7AD0
short::(nit_\WipeMario_cpp)=0x804A7B30
WipeRing::__ct(bool, const char*)=0x804A7BF0
WipeRing::init(const JMapInfoIter&)=0x804A7C70
WipeRing::exeWipeIn(void)=0x804A7D00
WipeRing::exeWipeOut(void)=0x804A7E50
WipeRing::wipe(long)=0x804A7FD0
WipeRing::forceClose(void)=0x804A8100
WipeRing::forceOpen(void)=0x804A8160
WipeRing::isOpen(void) const=0x804A81B0
WipeRing::isClose(void) const=0x804A81C0
WipeRing::isWipeIn(void) const=0x804A81D0
WipeRing::isWipeOut(void) const=0x804A81E0
WipeRing::setCenterPos(const JGeometry::TVec3<float>&)=0x804A81F0
WipeRing::startAnim(const char*)=0x804A8300
WipeRing::getMarioCenterPos(JGeometry::TVec3<float>*)=0x804A83A0
WipeRing::calcRadius(void) const=0x804A84D0
JGeometry::TVec2<float>::distance(const JGeometry::TVec2<float>&) const=0x804A8620
WipeRing::calcMaxRadius(void) const=0x804A8650
WipeRing::updatePlayerPos(void)=0x804A86F0
WipeRing::__dt(void)=0x804A87F0
short::(nit_\WipeRing_cpp)=0x804A8850
NrvWipeRing::WipeRingNrvClose::__ct(void)=0x804A8890
NrvWipeRing::WipeRingNrvWipeIn::__ct(void)=0x804A88A0
NrvWipeRing::WipeRingNrvOpen::__ct(void)=0x804A88B0
NrvWipeRing::WipeRingNrvWipeOut::__ct(void)=0x804A88C0
NrvWipeRing::WipeRingNrvWipeOut::execute(Spine*) const=0x804A88D0
NrvWipeRing::WipeRingNrvOpen::execute(Spine*) const=0x804A88E0
NrvWipeRing::WipeRingNrvWipeIn::execute(Spine*) const=0x804A8930
NrvWipeRing::WipeRingNrvClose::execute(Spine*) const=0x804A8940
YesNoController::__ct(LayoutActor*)=0x804AA7B0
YesNoController::appear(void)=0x804AA8B0
YesNoController::kill(void)=0x804AA8C0
YesNoController::update(void)=0x804AA8D0
YesNoController::isSelected(void) const=0x804AA920
YesNoController::isSelectedYes(void) const=0x804AA930
YesNoController::isDisappearStart(void) const=0x804AA950
YesNoController::setSE(const char*, const char*, const char*)=0x804AA9B0
YesNoController::trySelect(void)=0x804AA9C0
YesNoController::emitEffectIfExist(const char*)=0x804AAA10
YesNoController::deleteEffectIfExist(const char*)=0x804AAA60
YesNoController::forceDeleteEffectAllIfExist(void)=0x804AAAB0
YesNoController::exeSelecting(void)=0x804AABD0
YesNoController::exeDecided(void)=0x804AAD40
YesNoController::exeDisappear(void)=0x804AAE60
YesNoController::__dt(void)=0x804AAF00
short::(nit_\YesNoController_cpp)=0x804AAF60
NrvYesNoController::YesNoControllerNrvSelecting::__ct(void)=0x804AAFB0
NrvYesNoController::YesNoControllerNrvDecided::__ct(void)=0x804AAFC0
NrvYesNoController::YesNoControllerNrvDisappear::__ct(void)=0x804AAFD0
NrvYesNoController::YesNoControllerNrvSelected::__ct(void)=0x804AAFE0
NrvYesNoController::YesNoControllerNrvNotSelected::__ct(void)=0x804AAFF0
NrvYesNoController::YesNoControllerNrvNotSelected::execute(Spine*) const=0x804AB000
NrvYesNoController::YesNoControllerNrvSelected::execute(Spine*) const=0x804AB010
NrvYesNoController::YesNoControllerNrvDisappear::execute(Spine*) const=0x804AB020
NrvYesNoController::YesNoControllerNrvDecided::execute(Spine*) const=0x804AB030
NrvYesNoController::YesNoControllerNrvSelecting::execute(Spine*) const=0x804AB040
YesNoLayout::__ct(void)=0x804AB050
YesNoLayout::init(const JMapInfoIter&)=0x804AB0B0
YesNoLayout::appear(void)=0x804AB140
YesNoLayout::kill(void)=0x804AB190
YesNoLayout::setSelectMessage(const char*, const char*)=0x804AB1D0
YesNoLayout::control(void)=0x804AB230
YesNoLayout::exeSelecting(void)=0x804AB240
YesNoLayout::__dt(void)=0x804AB270
short::(nit_\YesNoLayout_cpp)=0x804AB2D0
NrvYesNoLayout::YesNoLayoutNrvSelecting::__ct(void)=0x804AB2E0
NrvYesNoLayout::YesNoLayoutNrvSelecting::execute(Spine*) const=0x804AB2F0
YoshiTargetMark::__ct(const char*)=0x804AB300
YoshiTargetMark::init(const JMapInfoIter&)=0x804AB340
YoshiTargetMark::appear(void)=0x804AB3B0
YoshiTargetMark::exeAppear(void)=0x804AB3F0
YoshiTargetMark::exeDisappear(void)=0x804AB480
YoshiTargetMark::control(void)=0x804AB550
YoshiTargetMark::__dt(void)=0x804AB5D0
short::(nit_\YoshiTargetMark_cpp)=0x804AB630
NrvYoshiTargetMark::YoshiTargetMarkNrvAppear::__ct(void)=0x804AB670
NrvYoshiTargetMark::YoshiTargetMarkNrvWait::__ct(void)=0x804AB680
NrvYoshiTargetMark::YoshiTargetMarkNrvDisappear::__ct(void)=0x804AB690
NrvYoshiTargetMark::YoshiTargetMarkNrvDisappear::execute(Spine*) const=0x804AB6A0
NrvYoshiTargetMark::YoshiTargetMarkNrvWait::execute(Spine*) const=0x804AB6B0
NrvYoshiTargetMark::YoshiTargetMarkNrvAppear::execute(Spine*) const=0x804AB700
SpkSpeakerCtrl::setMixingBuffer(SpkMixingBuffer*)=0x804AB710
SpkSpeakerCtrl::setup(void)=0x804AB750
SpkSpeakerCtrl::connect(long)=0x804AB850
SpkSpeakerCtrl::disconnect(long)=0x804AB8D0
SpkSpeakerCtrl::setSpeakerOn(long)=0x804AB950
SpkSpeakerCtrl::setSpeakerOnCallback(long, long)=0x804AB9E0
SpkSpeakerCtrl::setSpeakerPlay(long)=0x804ABA70
SpkSpeakerCtrl::startPlayCallback(long, long)=0x804ABB00
SpkSpeakerCtrl::setSpeakerOff(long)=0x804ABBB0
SpkSpeakerCtrl::retryConnection(long)=0x804ABBE0
SpkSpeakerCtrl::reconnect(long)=0x804ABC20
SpkSpeakerCtrl::framework(void)=0x804ABC60
SpkSpeakerCtrl::reconnectProcess(long)=0x804ABCB0
SpkSpeakerCtrl::initReconnect(long)=0x804ABD60
SpkSpeakerCtrl::continuousUsingProcess(long)=0x804ABD90
SpkSpeakerCtrl::updateSpeaker(OSAlarm*, OSContext*)=0x804ABDD0
SpkSpeakerCtrl::isEnable(long)=0x804ABEF0
SpkSpeakerCtrl::extensionProcess(long, long)=0x804ABF70
SpkSpeakerCtrl::getDeviceVolume(long)=0x804ABF80
SpkSystem::__ct(JKRHeap*)=0x804ABFF0
JSUList<SpkSound>::__dt(void)=0x804AC090
SpkSystem::setResource(JKRArchive*, unsigned short, unsigned short)=0x804AC0F0
SpkSystem::framework(void)=0x804AC170
SpkSystem::startSound(long, long, SpkSoundHandle*)=0x804AC1B0
SpkSystem::newSoundMemPool(long)=0x804AC240
SpkSystem::setup(void)=0x804AC260
SpkSystem::connect(long)=0x804AC270
SpkSystem::disconnect(long)=0x804AC280
SpkSystem::reconnect(long)=0x804AC290
SpkSystem::extensionProcess(long, long)=0x804AC2E0
SpkSystem::getDeviceVolume(long)=0x804AC2F0
short::(nit_\SpkSystem_cpp)=0x804AC300
JASMemPool<SpkSound>::__ct(void)=0x804AC360
JASMemPool<SpkSound>::__dt(void)=0x804AC390
SpkMixingBuffer::__ct(JKRHeap*)=0x804AC3F0
SpkMixingBuffer::mix(long, short*, long, float, long)=0x804AC460
SpkMixingBuffer::getSamples(long) const=0x804AC500
SpkMixingBuffer::update(long)=0x804AC510
SpkWave::__ct(void)=0x804AC560
SpkWave::setResource(void*)=0x804AC570
SpkWave::getWaveSize(long) const=0x804AC5B0
SpkWave::getLoopStartPos(long) const=0x804AC5F0
SpkWave::getLoopEndPos(long) const=0x804AC630
SpkWave::getWave(long) const=0x804AC670
SpkWave::getWaveData(long) const=0x804AC6B0
SpkTable::__ct(void)=0x804AC6D0
SpkTable::setResource(void*)=0x804AC6F0
SpkData::__ct(JKRArchive*)=0x804AC760
SpkData::loadTable(unsigned short)=0x804AC7B0
SpkData::loadWave(unsigned short)=0x804AC7F0
SpkData::isValid(void) const=0x804AC830
SpkSoundHandle::releaseSound(void)=0x804AC860
SpkSoundVolume::__ct(void)=0x804AC880
SpkSoundVolume::setRelease(long)=0x804AC8B0
SpkSoundVolume::setFadeOut(long)=0x804AC910
SpkSoundVolume::calc(bool&)=0x804ACA40
SpkSound::__ct(void)=0x804ACB40
SpkSound::__dt(void)=0x804ACBC0
SpkSound::update(float)=0x804ACC40
SpkSound::stop(long)=0x804ACE30
SpkSound::attachHandle(SpkSoundHandle*)=0x804ACE60
SpkSound::releaseHandle(void)=0x804ACEB0
SpkSound::start(long, long)=0x804ACED0
SpkSound::unlock(void)=0x804ACF30
SpkSound::setWaveData(long)=0x804ACF80
SpkSoundHolder::__ct(void)=0x804AD0A0
JSUList<SpkSound>::__ct(void)=0x804AD120
SpkSoundHolder::startSound(long, long, SpkSoundHandle*)=0x804AD150
SpkSoundHolder::update(long)=0x804AD360
SpkSoundHolder::updateEachSound(long)=0x804AD3C0
SpkSoundHolder::freeDeadSound(long)=0x804AD480
SpkSoundHolder::framework(void)=0x804AD580
short::(nit_\SpkSound_cpp)=0x804AD670
ArchiveHolderArchiveEntry::__ct(void*, JKRHeap*, const char*)=0x804ADBE0
ArchiveHolderArchiveEntry::__dt(void)=0x804ADCA0
ArchiveHolder::__ct(void)=0x804ADD10
ArchiveHolder::createAndAdd(void*, JKRHeap*, const char*)=0x804ADD70
ArchiveHolder::getArchive(const char*) const=0x804ADE10
ArchiveHolder::getArchiveAndHeap(const char*, JKRArchive*, JKRHeap*) const=0x804ADE50
ArchiveHolder::removeIfIsEqualHeap(JKRHeap*)=0x804ADEA0
ArchiveHolder::findEntry(const char*) const=0x804ADFD0
MR::Vector<MR::AssignableArray<FileHolderFileEntry*>>::erase(FileHolderFileEntry*)=0x804AE050
AudSystemWrapper::__ct(JKRSolidHeap*, JKRHeap*)=0x804AE0C0
AudSystemWrapper::requestResourceForInitialize(void)=0x804AE160
AudSystemWrapper::createAudioSystem(void)=0x804AE230
AudSystemWrapper::createSoundNameConverter(void)=0x804AE2E0
AudSystemWrapper::updateRhythm(void)=0x804AE350
AudSystemWrapper::movement(void, _0)=0x804AE370
AudSystemWrapper::isLoadDoneWaveDataAtSystemInit(void) const=0x804AE3B0
AudSystemWrapper::loadStaticWaveData(void)=0x804AE410
AudSystemWrapper::isLoadDoneStaticWaveData(void) const=0x804AE430
AudSystemWrapper::loadStageWaveData(const char*, const char*, bool)=0x804AE460
AudSystemWrapper::isPermitToReset(void) const=0x804AE690
AudSystemWrapper::prepareReset(void)=0x804AE6A0
AudSystemWrapper::requestReset(bool)=0x804AE6D0
AudSystemWrapper::isResetDone(void)=0x804AE740
AudSystemWrapper::resumeReset(void)=0x804AE770
AudSystemWrapper::receiveResourceForInitialize(void)=0x804AE7A0
BinaryDataChunkHolder::__ct(unsigned long, int)=0x804AE840
BinaryDataChunkHolder::addChunk(BinaryDataChunkBase*)=0x804AE8C0
BinaryDataChunkHolder::makeFileBinary(unsigned char*, unsigned long)=0x804AE8E0
BinaryDataChunkHolder::loadFromFileBinary(const unsigned char*, unsigned long)=0x804AE9A0
BinaryDataChunkHolder::makeChunkData(BinaryDataChunkHolderChunkData*, unsigned long, const BinaryDataChunkBase*)=0x804AEAC0
BinaryDataChunkHolder::findFromSignature(unsigned long) const=0x804AEB50
BinaryDataChunkHolder::calcBinarySize(const unsigned char*)=0x804AEBE0
BinaryDataContentHeaderSerializer::__ct(unsigned char*, unsigned long)=0x804AEC10
JSUMemoryOutputStream::__dt(void)=0x804AEC90
BinaryDataContentHeaderSerializer::addAttribute(const char*, unsigned long)=0x804AECF0
BinaryDataContentHeaderSerializer::flush(void)=0x804AED70
JSUMemoryOutputStream::getPosition(void) const=0x804AEE20
BinaryDataContentHeaderSerializer::getHeaderSize(void, _0) const=0x804AEE30
BinaryDataContentAccessor::__ct(unsigned char*)=0x804AEE50
BinaryDataContentAccessor::getHeaderSize(void) const=0x804AEE60
BinaryDataContentAccessor::getDataSize(void) const=0x804AEE80
BinaryDataContentAccessor::getPointer(const char*, unsigned char*) const=0x804AEE90
JSUMemoryInputStream::__dt(void)=0x804AEF90
DrawBufferShapeDrawer::__ct(J3DMaterial*, J3DMatPacket*)=0x804AEFF0
DrawBufferShapeDrawer::init(long)=0x804AF020
DrawBufferShapeDrawer::swap(DrawBufferShapeDrawer*)=0x804AF0C0
DrawBufferShapeDrawer::draw(void) const=0x804AF100
DrawBufferShapeDrawer::add(const J3DShapePacket*, const ActorLightCtrl*)=0x804AF1D0
DrawBufferShapeDrawer::remove(const J3DShapePacket*)=0x804AF2A0
DrawBufferShapeDrawer::resetLightSort(const ActorLightCtrl*)=0x804AF350
DrawBufferShapeDrawer::findLightSortIndex(const ActorLightCtrl*, bool*) const=0x804AF3E0
DrawBuffer::__ct(J3DModel*)=0x804AF4C0
DrawBuffer::init(int)=0x804AF4F0
DrawBuffer::add(const LiveActor*)=0x804AF500
DrawBuffer::getShapeDrawerByMatNo(int) const=0x804AF5B0
DrawBuffer::remove(const LiveActor*)=0x804AF5D0
DrawBuffer::resetLightSort(const ActorLightCtrl*)=0x804AF670
DrawBuffer::drawOpa(void) const=0x804AF6E0
DrawBuffer::drawXlu(void) const=0x804AF750
@unnamed@DrawBuffer_cpp@::getSortedMaterialIndex(int, J3DModel*)=0x804AF7C0
DrawBuffer::initTable(void)=0x804AF840
DrawBuffer::sortShapeDrawer(long, long)=0x804AFB30
DrawBufferExecuter::__ct(const char*, J3DModel*, long)=0x804AFC10
DrawBufferExecuter::allocateActorListBuffer(void)=0x804AFC90
DrawBufferExecuter::add(LiveActor*)=0x804AFCF0
DrawBufferExecuter::remove(LiveActor*)=0x804AFD10
DrawBufferExecuter::findLightInfo(LiveActor*)=0x804AFD80
DrawBufferExecuter::onExecuteLight(long)=0x804AFD90
DrawBufferExecuter::offExecuteLight(void, _0)=0x804AFDA0
DrawBufferExecuter::calcViewAndEntry(void)=0x804AFDB0
DrawBufferExecuter::drawOpa(void) const=0x804AFE40
DrawBufferExecuter::drawXlu(void) const=0x804AFE90
DrawBufferGroup::__ct(void)=0x804AFEE0
MR::Vector<MR::AssignableArray<DrawBufferExecuter*>>::__ct(void)=0x804AFF30
DrawBufferGroup::init(long)=0x804AFF50
DrawBufferGroup::registerDrawBuffer(LiveActor*)=0x804AFFB0
DrawBufferGroup::allocateActorListBuffer(void)=0x804B0090
std::for_each<DrawBufferExecuter*,std::mem_fun_t<void,DrawBufferExecuter>>(DrawBufferExecuter*, DrawBufferExecuter*, std::mem_fun_t<void,DrawBufferExecuter>, _Q23std33mem_fun_t<void,DrawBufferExecuter>)=0x804B0100
DrawBufferGroup::active(LiveActor*, long)=0x804B0180
DrawBufferGroup::deactive(LiveActor*, long)=0x804B01F0
DrawBufferGroup::findLightInfo(LiveActor*, long)=0x804B02B0
DrawBufferGroup::entry(void)=0x804B0350
DrawBufferGroup::drawOpa(void) const=0x804B03C0
std::for_each<const DrawBufferExecuter*,std::const_mem_fun_t<void,DrawBufferExecuter>>(const DrawBufferExecuter*, const DrawBufferExecuter*, std::const_mem_fun_t<void,DrawBufferExecuter>, _Q23std39const_mem_fun_t<void,DrawBufferExecuter>)=0x804B0460
DrawBufferGroup::drawXlu(void) const=0x804B04E0
DrawBufferGroup::setDrawCameraType(long)=0x804B0580
DrawBufferGroup::setLightType(long)=0x804B0590
DrawBufferGroup::findExecuterIndex(const char*) const=0x804B05A0
MR::Vector<MR::AssignableArray<DrawBufferExecuter*>>::push_back(const DrawBufferExecuter*)=0x804B0620
DrawBufferHolder::__ct(void)=0x804B0640
MR::Vector<MR::AssignableArray<DrawBufferGroup*>>::__ct(void)=0x804B06B0
DrawBufferHolder::initTable(const DrawBufferInitialTable*, long)=0x804B06D0
DrawBufferHolder::allocateActorListBuffer(void)=0x804B0800
DrawBufferHolder::active(LiveActor*, long, long)=0x804B08A0
DrawBufferHolder::deactive(LiveActor*, long, long)=0x804B0930
DrawBufferHolder::findLightInfo(LiveActor*, long, long)=0x804B0A00
DrawBufferHolder::entry(long)=0x804B0A20
DrawBufferHolder::getExecuteList(long)=0x804B0AF0
DrawSyncManager::start(unsigned long, long)=0x804B0B10
DrawSyncManager::prepareReset(void)=0x804B0B80
DrawSyncManager::resetIfAborted(void)=0x804B0BA0
DrawSyncManager::clearFifo(void)=0x804B0BC0
Fifo::pop(void)=0x804B0C10
Fifo::getLoopIdx(unsigned long)=0x804B0C60
Fifo::getCount(void)=0x804B0C80
DrawSyncManager::end(void)=0x804B0CB0
DrawSyncManager::drawSyncCallback(unsigned short)=0x804B0CF0
DrawSyncManager::threadFunc(void*)=0x804B0D10
DrawSyncManager::__ct(unsigned long, long)=0x804B0E10
DrawSyncManager::__dt(void)=0x804B0F30
DrawSyncManager::setCallback(unsigned long, unsigned short, DrawSyncCallback*)=0x804B0FB0
DrawSyncManager::TDrawSyncTokenRange::__as(const DrawSyncManager::TDrawSyncTokenRange&)=0x804B1080
DrawSyncManager::reset(bool)=0x804B10A0
DrawSyncManager::drawSyncCallbackSub(unsigned short)=0x804B1100
DrawSyncManager::pushBreakPoint(void)=0x804B11D0
FileHolderFileEntry::__ct(const char*, JKRHeap*, void*)=0x804B1260
FileHolderFileEntry::__dt(void)=0x804B12E0
FileHolderFileEntry::waitReadDone(void)=0x804B1350
FileHolderFileEntry::setContext(void*, JKRHeap*)=0x804B13A0
FileHolder::__ct(void)=0x804B13F0
FileHolder::add(const char*, JKRHeap*, void*)=0x804B1440
FileHolder::isExist(const char*) const=0x804B14C0
FileHolder::getContext(const char*) const=0x804B14F0
FileHolder::removeIfIsEqualHeap(JKRHeap*)=0x804B1520
FileHolder::removeFile(const char*)=0x804B15D0
FileHolder::findEntry(const char*) const=0x804B1650
MR::Vector<MR::AssignableArray<FileHolderFileEntry*>>::erase(FileHolderFileEntry*, _0)=0x804B16C0
FileLoader::__ct(void)=0x804B1730
FileLoader::requestLoadToMainRAM(const char*, unsigned char*, JKRHeap*, JKRDvdRipper::EAllocDirection, bool)=0x804B1810
FileLoader::requestMountArchive(const char*, JKRHeap*, bool)=0x804B18E0
FileLoader::receiveFile(const char*)=0x804B19B0
FileLoader::receiveArchive(const char*)=0x804B1A10
FileLoader::receiveAllRequestedFile(void)=0x804B1A70
FileLoader::createAndAddArchive(void*, JKRHeap*, const char*)=0x804B1AD0
FileLoader::getMountedArchiveAndHeap(const char*, JKRArchive*, JKRHeap*) const=0x804B1B00
FileLoader::clearRequestFileInfo(bool, _1)=0x804B1B10
FileLoader::removeHolderIfIsEqualHeap(JKRHeap*)=0x804B1B20
FileLoader::removeFile(const char*)=0x804B1B70
FileLoader::isNeedToLoad(const char*) const=0x804B1BC0
FileLoader::getRequestFileInfoConst(const char*) const=0x804B1C20
FileLoader::addRequest(const char*)=0x804B1CA0
@unnamed@FileLoaderThread_cpp@::loadFileUsingRipper(RequestFileInfo*)=0x804B1D30
FileLoaderThread::__ct(int, int, JKRHeap*)=0x804B1D60
FileLoaderThread::run(void)=0x804B1DB0
FileLoaderThread::loadToMainRAM(RequestFileInfo*)=0x804B1E40
FileLoaderThread::mountArchiveAndStartCreateResource(RequestFileInfo*)=0x804B1EA0
FileLoaderThread::__dt(void)=0x804B1F10
FileRipper::setup(unsigned long, JKRHeap*)=0x804B1F70
FileRipper::checkCompressed(const unsigned char*)=0x804B1FC0
FileRipper::loadToMainRAM(const char*, unsigned char*, bool, JKRHeap*, FileRipper::AllocDirection)=0x804B2010
FileRipper::decompressFromDVD(DVDFileInfo*, void*, unsigned long, unsigned long, const unsigned char*, unsigned long)=0x804B22D0
FileRipper::decompressSzsSub(unsigned char*, unsigned char*)=0x804B23C0
FileRipper::readSrcDataFirst(void)=0x804B2510
FileRipper::readSrcDataNext(unsigned char*)=0x804B25C0
FunctionAsyncExecInfo::__ct(MR::FunctorBase*, int, const char*)=0x804B26B0
FunctionAsyncExecInfo::__dt(void)=0x804B2700
FunctionAsyncExecInfo::execute(void)=0x804B2760
FunctionAsyncExecutorThread::__ct(JKRHeap*)=0x804B27D0
FunctionAsyncExecutorThread::run(void)=0x804B2830
FunctionAsyncExecutorOnMainThread::__ct(OSThread*)=0x804B28D0
FunctionAsyncExecutorOnMainThread::update(void)=0x804B2920
FunctionAsyncExecutor::__ct(void)=0x804B29A0
FunctionAsyncExecutor::update(void)=0x804B2AA0
FunctionAsyncExecutor::start(const MR::FunctorBase&, int, const char*)=0x804B2AB0
FunctionAsyncExecutor::startOnMainThread(const MR::FunctorBase&, const char*)=0x804B2B00
FunctionAsyncExecutor::waitForEnd(const char*)=0x804B2BA0
FunctionAsyncExecutor::isEnd(const char*) const=0x804B2CE0
FunctionAsyncExecutor::getOSThread(const char*)=0x804B2D80
FunctionAsyncExecutor::createAndAddExecInfo(const MR::FunctorBase&, int, const char*)=0x804B2E00
FunctionAsyncExecutor::getSuspendThread(void)=0x804B2EC0
FunctionAsyncExecutorThread::__dt(void)=0x804B2F00
GameSequence::__ct(void)=0x804B2F60
GameSequence::__dt(void)=0x804B3350
short::(nit_\GameSequence_cpp)=0x804B33B0
GameSequenceEnding::__ct(GameSequence*)=0x804B34C0
GameSequenceEnding::__dt(void)=0x804B3C20
short::(nit_\GameSequenceEnding_cpp)=0x804B3C80
GameSequenceInGame::__ct(GameSequence*)=0x804B3DE0
GameSequenceInGame::getPlayResultInStageHolder(void)=0x804B4000
GameSequenceInGame::__dt(void)=0x804B4070
GameSequenceTitle::__ct(GameSequence*)=0x804B5FE0
GameSequenceTitle::__dt(void)=0x804B6080
short::(nit_\GameSequenceTitle_cpp)=0x804B60E0
int::()=0x804B6440
GameSystem::__ct(void)=0x804B6540
GameSystem::init(void)=0x804B65C0
GameSystem::isExecuteLoadSystemArchive(void) const=0x804B6760
GameSystem::isDoneLoadSystemArchive(void) const=0x804B6770
GameSystem::startToLoadSystemArchive(void)=0x804B6780
GameSystem::exeInitializeAudio(void)=0x804B67E0
GameSystem::exeInitializeLogoScene(void)=0x804B68D0
GameSystem::exeLoadStationedArchive(void)=0x804B6940
GameSystem::initGX(void)=0x804B69B0
GameSystem::initAfterStationedResourceLoaded(void)=0x804B6A00
GameSystem::prepareReset(void)=0x804B6A70
GameSystem::isPreparedReset(void) const=0x804B6A80
GameSystem::frameLoop(void)=0x804B6AE0
GameSystem::draw(void)=0x804B6B50
GameSystem::update(void)=0x804B6C10
GameSystem::updateSceneController(void)=0x804B6CE0
GameSystem::calcAnim(void)=0x804B6DC0
GameSystem::__dt(void)=0x804B6E10
MR::FunctorV0M<GameSystemObjHolder*,M19GameSystemObjHolderFPCvPv_v>::__cl(void) const=0x804B6E70
MR::FunctorV0M<GameSystemObjHolder*,M19GameSystemObjHolderFPCvPv_v>::clone(JKRHeap*) const=0x804B6EA0
short::(nit_\GameSystem_cpp)=0x804B6F10
NrvGameSystem::GameSystemInitializeAudio::__ct(void)=0x804B6F60
NrvGameSystem::GameSystemInitializeLogoScene::__ct(void)=0x804B6F70
NrvGameSystem::GameSystemLoadStationedArchive::__ct(void)=0x804B6F80
NrvGameSystem::GameSystemWaitForReboot::__ct(void)=0x804B6F90
NrvGameSystem::GameSystemNormal::__ct(void)=0x804B6FA0
NrvGameSystem::GameSystemNormal::execute(Spine*) const=0x804B6FB0
NrvGameSystem::GameSystemWaitForReboot::execute(Spine*) const=0x804B6FF0
NrvGameSystem::GameSystemLoadStationedArchive::execute(Spine*) const=0x804B7000
NrvGameSystem::GameSystemInitializeLogoScene::execute(Spine*) const=0x804B7010
NrvGameSystem::GameSystemInitializeAudio::execute(Spine*) const=0x804B7020
GameSystemDataHolder::__ct(void)=0x804B7030
GameSystemDataHolder::init(void)=0x804B7130
GameSystemDataFunction::getHeapSizeExcept(void)=0x804B7290
GameSystemDataFunction::getMarioFaceShipEventDataTable(void)=0x804B72A0
GameSystemDataFunction::getMarioFaceShipEventCastTable(void)=0x804B72B0
GameSystemDataFunction::getGalaxyWorldOrderList(void)=0x804B72C0
GameSystemDataFunction::getWorldMapHeapGalaxy(void)=0x804B72D0
GameSystemDataFunction::getWorldMapHeapResource(void)=0x804B72E0
GameSystemDimmingWatcher::__ct(void)=0x804B72F0
GameSystemDimmingWatcher::update(void)=0x804B7350
GameSystemErrorWatcher::__ct(void)=0x804B73E0
GameSystemErrorWatcher::initAfterResourceLoaded(void)=0x804B74B0
GameSystemErrorWatcher::movement(void)=0x804B7510
GameSystemErrorWatcher::draw(void) const=0x804B75C0
GameSystemErrorWatcher::isWarning(void) const=0x804B7630
GameSystemErrorWatcher::setPermissionUpdateWiiRemoteStatus(bool)=0x804B7660
GameSystemErrorWatcher::exeNoError(void)=0x804B7720
GameSystemErrorWatcher::exeErrorWindowIn(void)=0x804B7780
GameSystemErrorWatcher::exeErrorWindowDisplay(void)=0x804B7800
GameSystemErrorWatcher::exeErrorWindowOut(void)=0x804B7890
GameSystemErrorWatcher::updateWiiRemoteStatus(void)=0x804B7920
GameSystemErrorWatcher::getProperMessageId(void) const=0x804B7AB0
GameSystemErrorWatcher::getProperErrorTexMap(void) const=0x804B7B30
GameSystemErrorWatcher::__dt(void)=0x804B7BA0
short::(nit_\GameSystemErrorWatcher_cpp)=0x804B7C00
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherNoError::__ct(void)=0x804B7C40
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherErrorWindowIn::__ct(void)=0x804B7C50
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherErrorWindowDisplay::__ct(void)=0x804B7C60
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherErrorWindowOut::__ct(void)=0x804B7C70
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherErrorWindowOut::execute(Spine*) const=0x804B7C80
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherErrorWindowDisplay::execute(Spine*) const=0x804B7C90
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherErrorWindowIn::execute(Spine*) const=0x804B7CA0
@unnamed@GameSystemErrorWatcher_cpp@::GameSystemErrorWatcherNoError::execute(Spine*) const=0x804B7CB0
@unnamed@GameSystemException_cpp@::isBootWPAD(void)=0x804B7CC0
GameSystemException::init(void)=0x804B7CF0
JUTException::getConsole(void)=0x804B7DB0
GameSystemException::handleException(unsigned short, OSContext*, unsigned long, unsigned long)=0x804B7DC0
GameSystemFontHolder::__ct(void)=0x804B7EE0
GameSystemFontHolder::createFontFromEmbeddedData(void)=0x804B7F10
GameSystemFontHolder::createFontFromFile(void)=0x804B8010
GameSystemFontHolder::getMessageFont(void) const=0x804B8300
GameSystemFrameControl::__ct(void)=0x804B8320
GameSystemFrameControl::setMovement60fps(void)=0x804B8360
@unnamed@GameSystemFunction_cpp@::getLogoScene(void)=0x804B83C0
@unnamed@GameSystemFunction_cpp@::getAudSystemWrapper(void)=0x804B83E0
@unnamed@GameSystemFunction_cpp@::getSaveDataHandleSequence(void)=0x804B83F0
GameSystemFunction::loadAudioStaticWaveData(void)=0x804B8430
GameSystemFunction::isLoadedAudioStaticWaveData(void)=0x804B8460
GameSystemFunction::initAfterStationedResourceLoaded(void)=0x804B8590
GameSystemFunction::setSceneNameObjHolderToNameObjRegister(void)=0x804B85A0
GameSystemFunction::isCreatedGameDataHolder(void)=0x804B85C0
GameSystemFunction::isCreatedSystemWipe(void)=0x804B85D0
GameSystemFunction::isDoneLoadSystemArchive(void)=0x804B85F0
GameSystemFunction::tryToLoadSystemArchive(void)=0x804B8600
GameSystemFunction::isDisplayStrapRemineder(void)=0x804B8650
GameSystemFunction::requestChangeArchivePlayer(bool)=0x804B86B0
GameSystemFunction::isEndChangeArchivePlayer(void)=0x804B86D0
GameSystemFunction::activateScreenPreserver(void)=0x804B8700
GameSystemFunction::deactivateScreenPreserver(void)=0x804B8710
GameSystemFunction::isOccurredSystemWarning(void)=0x804B8720
GameSystemFunction::isResetProcessing(void)=0x804B8730
GameSystemFunction::setResetOperationApplicationReset(void)=0x804B8740
GameSystemFunction::setResetOperationReturnToMenu(void)=0x804B8750
GameSystemFunction::requestResetGameSystem(bool)=0x804B8760
GameSystemFunction::requestGoWiiMenu(bool)=0x804B8770
GameSystemFunction::forceToDeactivateHomeButtonLayout(void)=0x804B8790
GameSystemFunction::resetCurrentScenarioNo(void)=0x804B87B0
GameSystemFunction::isPermitToResetSaveDataHandleSequence(void)=0x804B87C0
GameSystemFunction::prepareResetSaveDataHandleSequence(void)=0x804B8800
GameSystemFunction::isPrepareResetSaveDataHandleSequence(void)=0x804B8830
GameSystemFunction::restoreFromResetSaveDataHandleSequence(void)=0x804B8870
GameSystemFunction::isPermitToResetAudioSystem(void)=0x804B88A0
GameSystemFunction::prepareResetAudioSystem(void)=0x804B88D0
GameSystemFunction::requestResetAudioSystem(bool)=0x804B8900
GameSystemFunction::isDoneResetAudioSystem(void)=0x804B8940
GameSystemFunction::resumeResetAudioSystem(void)=0x804B8970
GameSystemFunction::setPadConnectCallback(void)=0x804B8A30
GameSystemFunction::resetAllControllerRumble(void)=0x804B8A40
GameSystemFunction::setPermissionToCheckWiiRemoteConnectAndScreenDimming(bool)=0x804B8AB0
GameSystemFunction::onPauseBeginAllRumble(void)=0x804B8B00
GameSystemFunction::onPauseEndAllRumble(void)=0x804B8B70
GameSystemFunction::onHomeButtonMenuBeginAllRumble(void)=0x804B8BD0
GameSystemFunction::onHomeButtonMenuCloseAllRumble(void)=0x804B8C40
GameSystemFunction::onHomeButtonMenuEndAllRumble(void)=0x804B8CA0
GameSystemFunction::prepareResetSystem(void)=0x804B8D10
GameSystemFunction::isPreparedFadeinSystem(void)=0x804B8D40
GameSystemFunction::restartSceneController(void)=0x804B8DB0
GameSystemObjHolder::__ct(void)=0x804B8E00
GameSystemObjHolder::init(void)=0x804B8EB0
GameSystemObjHolder::initAfterStationedResourceLoaded(void)=0x804B9010
GameSystemObjHolder::update(void)=0x804B9050
GameSystemObjHolder::updateAudioSystem(void)=0x804B90A0
GameSystemObjHolder::clearRequestFileInfo(bool)=0x804B90C0
GameSystemObjHolder::drawStarPointer(void)=0x804B90D0
GameSystemObjHolder::drawBeforeEndRender(void)=0x804B90E0
GameSystemObjHolder::captureIfAllowForScreenPreserver(void)=0x804B9100
GameSystemObjHolder::getRenderModeObj(void) const=0x804B9110
GameSystemObjHolder::initDvd(void)=0x804B9120
GameSystemObjHolder::initNAND(void)=0x804B9170
GameSystemObjHolder::initAudio(void)=0x804B91B0
GameSystemObjHolder::initRenderMode(void)=0x804B9230
GameSystemObjHolder::initNameObj(void)=0x804B9310
GameSystemObjHolder::initMessageResource(void)=0x804B9390
GameSystemObjHolder::initResourceHolderManager(void)=0x804B9470
GameSystemObjHolder::initGameController(void)=0x804B94B0
GameSystemObjHolder::initDisplay(void)=0x804B9510
GameSystemResetAndPowerProcess::init(const JMapInfoIter&)=0x804B9640
GameSystemResetAndPowerProcess::draw(void) const=0x804B9690
GameSystemResetAndPowerProcess::isActive(void) const=0x804B97D0
GameSystemResetAndPowerProcess::setResetOperationApplicationReset(void)=0x804B9800
GameSystemResetAndPowerProcess::setResetOperationReturnToMenu(void)=0x804B9810
GameSystemResetAndPowerProcess::requestReset(bool)=0x804B9820
GameSystemResetAndPowerProcess::requestGoWiiMenu(bool)=0x804B9870
GameSystemResetAndPowerProcess::notifyCheckDiskResult(bool)=0x804B9930
GameSystemResetAndPowerProcess::exePolling(void)=0x804B9960
GameSystemResetAndPowerProcess::exeWaitResetPermitted(void)=0x804B99C0
GameSystemResetAndPowerProcess::exePrepareReset(void)=0x804B9A40
GameSystemResetAndPowerProcess::exeReset(void)=0x804B9B10
GameSystemResetAndPowerProcess::exeWaitPrepareFadein(void)=0x804B9BA0
GameSystemResetAndPowerProcess::exeFadein(void)=0x804B9C00
GameSystemResetAndPowerProcess::exitApplication(void)=0x804B9CA0
GameSystemResetAndPowerProcess::tryPermitReset(void)=0x804B9D30
GameSystemResetAndPowerProcess::tryAcceptPowerOff(void)=0x804B9D60
GameSystemResetAndPowerProcess::isResetAcceptAudio(void) const=0x804B9D90
GameSystemResetAndPowerProcess::control(void)=0x804B9E00
GameSystemResetAndPowerProcess::handleOSPowerCallback(void)=0x804B9E50
GameSystemResetAndPowerProcess::handleCheckDiskAsync(long, DVDCommandBlock*)=0x804B9E60
GameSystemResetAndPowerProcess::__ct(void)=0x804B9E80
GameSystemResetAndPowerProcess::__dt(void)=0x804B9F20
short::(nit_\GameSystemResetAndPowerProcess_cpp)=0x804B9F80
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessPolling::__ct(void)=0x804B9FD0
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessWaitResetPermitted::__ct(void)=0x804B9FE0
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessPrepareReset::__ct(void)=0x804B9FF0
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessReset::__ct(void)=0x804BA000
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessWaitPrepareFadein::__ct(void)=0x804BA010
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessFadein::__ct(void)=0x804BA020
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessFadein::execute(Spine*) const=0x804BA030
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessWaitPrepareFadein::execute(Spine*) const=0x804BA040
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessReset::execute(Spine*) const=0x804BA050
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessPrepareReset::execute(Spine*) const=0x804BA060
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessWaitResetPermitted::execute(Spine*) const=0x804BA070
NrvGameSystemResetAndPowerProcess::GameSystemResetAndPowerProcessPolling::execute(Spine*) const=0x804BA080
SceneControlInfo::__ct(void)=0x804BA0A0
SceneControlInfo::setScene(const char*)=0x804BA120
SceneControlInfo::setStage(const char*)=0x804BA140
SceneControlInfo::setStartIdInfo(const JMapIdInfo&)=0x804BA160
JMapIdInfo::__as(const JMapIdInfo&)=0x804BA170
GameSystemSceneController::__ct(void)=0x804BA190
GameSystemSceneController::initAfterStationedResourceLoaded(void)=0x804BA290
GameSystemSceneController::requestChangeScene(void)=0x804BA310
GameSystemSceneController::checkRequestAndChangeScene(void)=0x804BA370
GameSystemSceneController::initializeScene(void)=0x804BA3C0
GameSystemSceneController::destroyScene(void)=0x804BA460
GameSystemSceneController::isReadyToStartScene(void) const=0x804BA570
GameSystemSceneController::isFirstUpdateSceneNerveNormal(void) const=0x804BA5E0
GameSystemSceneController::startScene(void)=0x804BA650
GameSystemSceneController::updateScene(void)=0x804BA6A0
GameSystemSceneController::drawScene(void)=0x804BA7F0
GameSystemSceneController::getNameObjListExecutor(void) const=0x804BA850
GameSystemSceneController::getSceneObjHolder(void) const=0x804BA860
GameSystemSceneController::isExistSceneObjHolder(void) const=0x804BA870
GameSystemSceneController::getCurrentScenarioNo(void) const=0x804BA8A0
GameSystemSceneController::getCurrentSelectedScenarioNo(void) const=0x804BA8B0
GameSystemSceneController::setSceneInitializeState(SceneInitializeState)=0x804BA8D0
GameSystemSceneController::isSceneInitializeState(SceneInitializeState) const=0x804BA8E0
GameSystemSceneController::startScenarioSelectScene(void)=0x804BA900
GameSystemSceneController::startScenarioSelectSceneBackground(void)=0x804BA920
GameSystemSceneController::setCurrentScenarioNo(long, long)=0x804BA930
GameSystemSceneController::resetCurrentScenarioNo(void)=0x804BA940
GameSystemSceneController::isScenarioDecided(void) const=0x804BA950
GameSystemSceneController::exeNotInitialized(void)=0x804BAA00
GameSystemSceneController::exeWaitDrawDoneScene(void)=0x804BAA30
GameSystemSceneController::exeDestroyScene(void)=0x804BAAB0
MR::Functor<GameSystemSceneController>(GameSystemSceneController*, M25GameSystemSceneControllerFPCvPv_v_Q22MR77FunctorV0M<GameSystemSceneController*,M25GameSystemSceneControllerFPCvPv_v>)=0x804BABB0
GameSystemSceneController::exeChangeWaveBank(void)=0x804BABF0
GameSystemSceneController::exeInitializeScene(void)=0x804BAC80
GameSystemSceneController::exeInvalidateSystemWipe(void)=0x804BAD40
GameSystemSceneController::exeDestroyed(void)=0x804BADE0
GameSystemSceneController::exeReadyToStartScene(void)=0x804BAE10
GameSystemSceneController::prepareReset(void)=0x804BAE60
GameSystemSceneController::isPreparedReset(void)=0x804BAF10
GameSystemSceneController::restartGameAfterResetting(void)=0x804BAF80
GameSystemSceneController::isExistRequest(void) const=0x804BAFD0
GameSystemSceneController::isSameAtNextSceneAndStage(void) const=0x804BB030
GameSystemSceneController::updateSceneControlInfo(void)=0x804BB0A0
GameSystemSceneController::getCurrentSceneForExecute(void) const=0x804BB130
GameSystemSceneController::getNextNerveOnResetProcessing(void) const=0x804BB190
GameSystemSceneController::requestChangeNerve(const Nerve*)=0x804BB670
MR::FunctorV0M<GameSystemSceneController*,M25GameSystemSceneControllerFPCvPv_v>::__cl(void) const=0x804BB6D0
MR::FunctorV0M<GameSystemSceneController*,M25GameSystemSceneControllerFPCvPv_v>::clone(JKRHeap*) const=0x804BB700
short::(nit_\GameSystemSceneController_cpp)=0x804BB770
NrvGameSystemSceneController::GameSystemSceneControllerNotInitialized::__ct(void)=0x804BB7F0
NrvGameSystemSceneController::GameSystemSceneControllerNormal::__ct(void)=0x804BB800
NrvGameSystemSceneController::GameSystemSceneControllerChangeWaveBank::__ct(void)=0x804BB810
NrvGameSystemSceneController::GameSystemSceneControllerInitializeScene::__ct(void)=0x804BB820
NrvGameSystemSceneController::GameSystemSceneControllerInvalidateSystemWipe::__ct(void)=0x804BB830
NrvGameSystemSceneController::GameSystemSceneControllerWaitDrawDoneScene::__ct(void)=0x804BB840
NrvGameSystemSceneController::GameSystemSceneControllerDestroyScene::__ct(void)=0x804BB850
NrvGameSystemSceneController::GameSystemSceneControllerReadyToStartScene::__ct(void)=0x804BB860
NrvGameSystemSceneController::GameSystemSceneControllerWaitDrawDoneSceneForDestroy::__ct(void)=0x804BB870
NrvGameSystemSceneController::GameSystemSceneControllerDestroySceneForDestroy::__ct(void)=0x804BB880
NrvGameSystemSceneController::GameSystemSceneControllerDestroyed::__ct(void)=0x804BB890
NrvGameSystemSceneController::GameSystemSceneControllerDestroyed::execute(Spine*) const=0x804BB8A0
NrvGameSystemSceneController::GameSystemSceneControllerDestroySceneForDestroy::execute(Spine*) const=0x804BB8B0
NrvGameSystemSceneController::GameSystemSceneControllerWaitDrawDoneSceneForDestroy::execute(Spine*) const=0x804BB8C0
NrvGameSystemSceneController::GameSystemSceneControllerReadyToStartScene::execute(Spine*) const=0x804BB8D0
NrvGameSystemSceneController::GameSystemSceneControllerDestroyScene::execute(Spine*) const=0x804BB8E0
NrvGameSystemSceneController::GameSystemSceneControllerWaitDrawDoneScene::execute(Spine*) const=0x804BB8F0
NrvGameSystemSceneController::GameSystemSceneControllerInvalidateSystemWipe::execute(Spine*) const=0x804BB900
NrvGameSystemSceneController::GameSystemSceneControllerInitializeScene::execute(Spine*) const=0x804BB910
NrvGameSystemSceneController::GameSystemSceneControllerChangeWaveBank::execute(Spine*) const=0x804BB920
NrvGameSystemSceneController::GameSystemSceneControllerNormal::execute(Spine*) const=0x804BB930
NrvGameSystemSceneController::GameSystemSceneControllerNotInitialized::execute(Spine*) const=0x804BB940
GameSystemStationedArchiveLoader::__ct(void)=0x804BB950
GameSystemStationedArchiveLoader::update(void)=0x804BB9B0
GameSystemStationedArchiveLoader::isDone(void) const=0x804BB9D0
GameSystemStationedArchiveLoader::isPreparedReset(void) const=0x804BB9E0
GameSystemStationedArchiveLoader::prepareReset(void)=0x804BBA80
GameSystemStationedArchiveLoader::requestChangeArchivePlayer(bool)=0x804BBB40
MR::Functor<GameSystemStationedArchiveLoader,bool>(GameSystemStationedArchiveLoader*, M32GameSystemStationedArchiveLoaderFPCvPvb_vb_Q22MR94FunctorV1M<GameSystemStationedArchiveLoader*,M32GameSystemStationedArchiveLoaderFPCvPvb_v,bool>)=0x804BBCE0
GameSystemStationedArchiveLoader::exeLoadAudio1stWaveData(void)=0x804BBD20
GameSystemStationedArchiveLoader::trySuspend(void)=0x804BC230
GameSystemStationedArchiveLoader::tryAsyncExecuteIfNotSuspend(const MR::FunctorBase&, const char*)=0x804BC260
ConditionIfIsNotPlayer::__ct(void)=0x804BC440
ConditionIfIsNotPlayer::__dt(void)=0x804BC450
GameSystemStationedArchiveLoader::createAndAddPlayerArchives(bool)=0x804BC4B0
ConditionIsEqualType::__dt(void)=0x804BC580
ConditionIsEqualType::isExecute(const MR::StationedFileInfo*) const=0x804BC680
MR::FunctorV1M<GameSystemStationedArchiveLoader*,M32GameSystemStationedArchiveLoaderFPCvPvb_v,bool>::__cl(void) const=0x804BC6A0
MR::FunctorV1M<GameSystemStationedArchiveLoader*,M32GameSystemStationedArchiveLoaderFPCvPvb_v,bool>::clone(JKRHeap*) const=0x804BC6D0
GameSystemStationedArchiveLoader::__dt(void)=0x804BC740
short::(nit_\GameSystemStationedArchiveLoader_cpp)=0x804BC7A0
@unnamed@HeapMemoryWatcher_cpp@::createExpHeap(unsigned long, JKRHeap*, bool)=0x804BC9A0
@unnamed@HeapMemoryWatcher_cpp@::createSolidHeap(unsigned long, JKRHeap*)=0x804BCA30
@unnamed@HeapMemoryWatcher_cpp@::destroyHeapAndSetNULL(JKRHeap*)=0x804BCA80
HeapMemoryWatcher::getHeapNapa(const JKRHeap*)=0x804BCAD0
HeapMemoryWatcher::getHeapGDDR3(const JKRHeap*)=0x804BCB20
HeapMemoryWatcher::createFileCacheHeapOnGameHeap(unsigned long)=0x804BCB70
HeapMemoryWatcher::createSceneHeapOnGameHeap(void)=0x804BCC10
HeapMemoryWatcher::setCurrentHeapToStationedHeap(void)=0x804BCC80
HeapMemoryWatcher::setCurrentHeapToGameHeap(void)=0x804BCC90
HeapMemoryWatcher::setCurrentHeapToSceneHeap(void)=0x804BCCA0
HeapMemoryWatcher::createRootHeap(void)=0x804BCE10
HeapMemoryWatcher::createHeaps(void)=0x804BCEB0
HeapMemoryWatcher::createGameHeap(void)=0x804BCFB0
HeapMemoryWatcher::__ct(void)=0x804BD000
HeapMemoryWatcher::memoryErrorCallback(void*, unsigned long, int)=0x804BD080
HeapMemoryWatcher::checkRestMemory(void)=0x804BD0A0
RSO::setupRsoHomeButtonMenu(void)=0x804BD0B0
RSO::HBMCreate(const HBMDataInfo*)=0x804BD1D0
RSO::HBMInit(void)=0x804BD1E0
RSO::HBMCalc(const HBMControllerData*)=0x804BD1F0
RSO::HBMDraw(void)=0x804BD200
RSO::HBMGetSelectBtnNum(void)=0x804BD210
RSO::HBMSetAdjustFlag(int)=0x804BD220
RSO::HBMStartBlackOut(void)=0x804BD230
MR::getDecidedLanguageFromIPL(void)=0x804BD250
MR::getLanguage(void)=0x804BD2A0
MR::getLanguageFromIPL(void)=0x804BD2B0
MR::getCurrentLanguagePrefix(void)=0x804BD2E0
MR::getCurrentRegionPrefix(void)=0x804BD340
MR::getLanguageNum(void)=0x804BD420
MR::getLanguagePrefixByIndex(unsigned long)=0x804BD430
LayoutHolder::__ct(JKRArchive&)=0x804BD450
LayoutHolder::__dt(void)=0x804BD4C0
LayoutHolder::GetResource(unsigned long, const char*, unsigned long*)=0x804BD520
LayoutHolder::GetFont(const char*)=0x804BD5F0
LayoutHolder::isAnimationHashEqual(unsigned long, unsigned long) const=0x804BD6E0
LayoutHolder::initializeArc(void)=0x804BD730
LayoutHolder::getFileFinder(const char*)=0x804BD7C0
LayoutHolder::initEachResTable(ResTable*, const char*)=0x804BD800
LayoutHolder::count(const char*, const char*)=0x804BD880
LayoutHolder::mount(char*)=0x804BD980
LayoutHolder::createAndRegisterObject(const char*, void*)=0x804BDAB0
LayoutHolder::getResOtherName(unsigned long) const=0x804BDB60
MainLoopFramework::ctor_subroutine(bool)=0x804BDB70
MainLoopFramework::__dt(void)=0x804BDC80
MainLoopFramework::createManager(const _GXRenderModeObj*, void*, void*, void*, bool)=0x804BDCF0
JUTXfb::getDrawingXfb(void) const=0x804BDDF0
JUTXfb::getManager(void)=0x804BDE10
MainLoopFramework::prepareCopyDisp(void)=0x804BDE20
MainLoopFramework::drawendXfb_single(void)=0x804BDF20
MainLoopFramework::exchangeXfb_double(void)=0x804BDF80
JUTXfb::getDisplayingXfbIndex(void) const=0x804BE080
@unnamed@MainLoopFramework_cpp@::getDisplayingXfbIndex(void)=0x804BE090
MainLoopFramework::exchangeXfb_triple(void)=0x804BE0C0
MainLoopFramework::copyXfb_triple(void)=0x804BE140
MainLoopFramework::preGX(void)=0x804BE1B0
MainLoopFramework::endGX(void)=0x804BE250
MainLoopFramework::waitForRetrace(void)=0x804BE310
MainLoopFramework::beginRender(void)=0x804BE350
MainLoopFramework::endRender(void)=0x804BE480
MainLoopFramework::endFrame(void)=0x804BE4F0
MainLoopFramework::waitBlanking(int)=0x804BE590
MainLoopFramework::setTickRateFromFrame(unsigned short)=0x804BE5E0
MainLoopFramework::clearEfb(_GXColor)=0x804BE640
MainLoopFramework::clearEfb(int, int, int, int, _GXColor)=0x804BE690
MainLoopFramework::calcCombinationRatio(void)=0x804BEA00
MainLoopFramework::frameToTick(float)=0x804BEA90
MainLoopFramework::setForOSResetSystem(void)=0x804BEAF0
@unnamed@MainLoopFramework_cpp@::waitForTick(unsigned long, unsigned short)=0x804BEB70
@unnamed@MainLoopFramework_cpp@::waitDrawDoneAndSetAlarm(void)=0x804BECA0
MR::BothDirLink<MainLoopFrameworkAlarm>::__dt(void)=0x804BEDB0
@unnamed@MainLoopFramework_cpp@::handleGXAbortAlarm(OSAlarm*, OSContext*)=0x804BEE10
short::(nit_\MainLoopFramework_cpp)=0x804BEEA0
MR::BothDirList<MainLoopFrameworkAlarm>::__ct(bool)=0x804BEEF0
MR::BothDirList<MainLoopFrameworkAlarm>::__dt(void)=0x804BEF20
MarioFaceShipSwitch::__ct(const char*)=0x804BEF80
MarioFaceShipSwitch::__dt(void)=0x804BF5A0
MarioFaceShipEventDataHolder::__ct(const char*)=0x804C0F60
MarioFaceShipEventDataHolder::__dt(void)=0x804C26E0
MessageSystem::getSystemMessageDirect(TalkMessageInfo*, const char*)=0x804C2FD0
MessageSystem::getGameMessageDirect(TalkMessageInfo*, const char*)=0x804C3030
NANDErrorSequence::__ct(SaveDataHandleSequence*, SysInfoWindow*, SysInfoWindow*)=0x804C3420
ActorStateBase<SaveDataHandleSequence>::__dt(void)=0x804C34C0
NANDErrorSequence::startErrorToWiiMenu(const char*)=0x804C3520
NANDErrorSequence::startRemoveFile(void)=0x804C3580
NANDErrorSequence::startCheckEnableToCreate(void)=0x804C35D0
NANDErrorSequence::tryLessBlockOrInode(unsigned long)=0x804C3620
NANDErrorSequence::tryNoRecoverErroSequence(long)=0x804C36C0
NANDErrorSequence::isPermitToReset(void) const=0x804C3790
NANDErrorSequence::prepareReset(void)=0x804C37C0
NANDErrorSequence::isPreparedReset(void) const=0x804C3810
NANDErrorSequence::restoreFromReset(void)=0x804C3910
NANDErrorSequence::exeError(void)=0x804C3960
NANDErrorSequence::exeErrorToFreeze(void)=0x804C39D0
NANDErrorSequence::exeRemoveConfirm(void)=0x804C3A30
NANDErrorSequence::exeRemove(void)=0x804C3AA0
NANDErrorSequence::exeNoSaveConfirmBeforeRemove(void)=0x804C3B50
NANDErrorSequence::exeNoSaveConfirmLessBlockOrInode(void)=0x804C3BD0
NANDErrorSequence::exeLessBlockOrInodeConfirm(void)=0x804C3C50
NANDErrorSequence::exeGoWiiMenu(void)=0x804C3CC0
NANDErrorSequence::exeCheckEnableToCreateOnPreloading(void)=0x804C3D80
NANDErrorSequence::exeCheckEnableToCreateAfterRemove(void)=0x804C3DD0
NANDErrorSequence::isEnablePointer(void) const=0x804C3E20
NANDErrorSequence::isResultNoSave(void) const=0x804C3F10
NANDErrorSequence::isResultFileCorrupted(void) const=0x804C3F30
NANDErrorSequence::control(void)=0x804C3F50
NANDErrorSequence::tryConfirm(const char*, bool*)=0x804C3F60
NANDErrorSequence::tryProcessDoneKeyWait(const char*)=0x804C4000
NANDErrorSequence::tryCheckEnableToCreate(void)=0x804C4080
NANDErrorSequence::tryVerifyNANDCheckResult(void)=0x804C4130
NANDErrorSequence::__dt(void)=0x804C4140
short::(nit_\NANDErrorSequence_cpp)=0x804C41A0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceIdle::__ct(void)=0x804C4230
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceError::__ct(void)=0x804C4240
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceErrorToFreeze::__ct(void)=0x804C4250
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceRemoveConfirm::__ct(void)=0x804C4260
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceRemove::__ct(void)=0x804C4270
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceRemoveDoneKeyWait::__ct(void)=0x804C4280
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceNoSaveConfirmBeforeRemove::__ct(void)=0x804C4290
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceNoSaveConfirmLessBlockOrInode::__ct(void)=0x804C42A0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceLessBlockOrInodeConfirm::__ct(void)=0x804C42B0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceGoWiiMenu::__ct(void)=0x804C42C0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceCheckEnableToCreateOnPreloading::__ct(void)=0x804C42E0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceCheckEnableToCreateAfterRemove::__ct(void)=0x804C42F0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceCheckEnableToCreateAfterRemove::execute(Spine*) const=0x804C4300
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceCheckEnableToCreateOnPreloading::execute(Spine*) const=0x804C4310
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceGoWiiMenu::execute(Spine*) const=0x804C4330
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceLessBlockOrInodeConfirm::execute(Spine*) const=0x804C4340
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceNoSaveConfirmLessBlockOrInode::execute(Spine*) const=0x804C4350
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceNoSaveConfirmBeforeRemove::execute(Spine*) const=0x804C4360
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceRemoveDoneKeyWait::execute(Spine*) const=0x804C4370
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceRemove::execute(Spine*) const=0x804C43C0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceRemoveConfirm::execute(Spine*) const=0x804C43D0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceErrorToFreeze::execute(Spine*) const=0x804C43E0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceError::execute(Spine*) const=0x804C43F0
@unnamed@NANDErrorSequence_cpp@::NANDErrorSequenceIdle::execute(Spine*) const=0x804C4400
NANDRequestInfo::__ct(void)=0x804C4410
NANDRequestInfo::init(void)=0x804C4440
NANDRequestInfo::isDone(void) const=0x804C4470
NANDRequestInfo::setDelete(const char*)=0x804C4480
NANDRequestInfo::setMove(const char*, const char*)=0x804C44E0
NANDRequestInfo::setWriteSeq(const char*, const void*, unsigned long, unsigned char, unsigned char)=0x804C4550
NANDRequestInfo::setReadSeq(const char*, void*, unsigned long, unsigned long*)=0x804C45D0
NANDRequestInfo::setCheck(unsigned long, unsigned long, unsigned long*)=0x804C4650
NANDManager::__ct(void)=0x804C46B0
NANDManager::addRequest(NANDRequestInfo*)=0x804C4730
NANDResultCode::getCode(void) const=0x804C47A0
NANDResultCode::isSuccess(void) const=0x804C47B0
NANDResultCode::isSaveDataCorrupted(void) const=0x804C47C0
NANDResultCode::isNANDCorrupted(void) const=0x804C47E0
NANDResultCode::isMaxBlocks(void) const=0x804C4800
NANDResultCode::isMaxFiles(void) const=0x804C4820
NANDResultCode::isNoExistFile(void) const=0x804C4840
NANDResultCode::isBusyOrAllocFailed(void) const=0x804C4860
NANDResultCode::isUnknown(void) const=0x804C4880
MR::addRequestToNANDManager(NANDRequestInfo*)=0x804C48A0
NANDManagerThread::__ct(int, int, JKRHeap*)=0x804C48B0
NANDManagerThread::run(void)=0x804C4900
NANDManagerThread::executeWriteSequence(NANDRequestInfo*)=0x804C4A10
NANDManagerThread::executeReadSequence(NANDRequestInfo*)=0x804C4AD0
NANDManagerThread::__dt(void)=0x804C4BE0
NerveExecutor::__ct(const char*)=0x804C4C40
NerveExecutor::__dt(void)=0x804C4C60
NerveExecutor::initNerve(const Nerve*, long)=0x804C4CD0
NerveExecutor::updateNerve(void)=0x804C4D30
NerveExecutor::setNerve(const Nerve*)=0x804C4D50
NerveExecutor::isNerve(const Nerve*) const=0x804C4D60
NerveExecutor::getNerveStep(void) const=0x804C4DA0
OSThreadWrapper::__ct(unsigned long, int, int, JKRHeap*)=0x804C4DB0
OSThreadWrapper::__dt(void)=0x804C4E30
OSThreadWrapper::initMessageQueue(JKRHeap*, int)=0x804C4ED0
OSThreadWrapper::initHeapSpecified(JKRHeap*, unsigned long, int)=0x804C4F20
OSThreadWrapper::start(void*)=0x804C4FB0
JKRUnitHeap::do_alloc(unsigned long, int)=0x804C4FD0
JKRUnitHeap::do_free(void*)=0x804C5120
JKRSolidHeap::do_free(void*)=0x804C51C0
JKRExpHeap::adjustSize(void)=0x804C51D0
JKRHeap::getMaxAllocatableSize(int)=0x804C5340
JUTTexture::captureDolTexture(void*, int, int, int, int, bool, _GXTexFmt)=0x804C5430
JSUOutputStream::__dt(void)=0x804C54D0
JSUInputStream::__dt(void)=0x804C5510
JUTException::readPad(unsigned long*, unsigned long*)=0x804C5610
JUTException::queryMapAddress_single(char*, unsigned long, long, unsigned long*, unsigned long*, char*, unsigned long, bool, bool)=0x804C56F0
J3DShapeMtx::loadMtxIndx_PNGP(int, unsigned short) const=0x804C5700
@unnamed@Overwrite_cpp@::noLoadPrj(const JPAEmitterWorkData*, A4_Cf)=0x804C57B0
@unnamed@Overwrite_cpp@::loadPrj(const JPAEmitterWorkData*, A4_Cf)=0x804C57C0
@unnamed@Overwrite_cpp@::loadPrjAnm(const JPAEmitterWorkData*, A4_Cf)=0x804C5800
@unnamed@Overwrite_cpp@::getNext(JPANode<JPABaseParticle>*)=0x804C59E0
@unnamed@Overwrite_cpp@::getPrev(JPANode<JPABaseParticle>*)=0x804C59F0
@unnamed@Overwrite_cpp@::dirTypeVel(const JPAEmitterWorkData*, const JPABaseParticle*, JGeometry::TVec3<float>*)=0x804C5A00
@unnamed@Overwrite_cpp@::dirTypePos(const JPAEmitterWorkData*, const JPABaseParticle*, JGeometry::TVec3<float>*)=0x804C5A10
@unnamed@Overwrite_cpp@::dirTypePosInv(const JPAEmitterWorkData*, const JPABaseParticle*, JGeometry::TVec3<float>*)=0x804C5A20
@unnamed@Overwrite_cpp@::dirTypeEmtrDir(const JPAEmitterWorkData*, const JPABaseParticle*, JGeometry::TVec3<float>*)=0x804C5A70
@unnamed@Overwrite_cpp@::dirTypePrevPtcl(const JPAEmitterWorkData*, const JPABaseParticle*, JGeometry::TVec3<float>*)=0x804C5A80
@unnamed@Overwrite_cpp@::rotTypeY(float, float, A3_A4_f)=0x804C5B00
@unnamed@Overwrite_cpp@::rotTypeX(float, float, A3_A4_f)=0x804C5B40
@unnamed@Overwrite_cpp@::rotTypeZ(float, float, A3_A4_f)=0x804C5B80
@unnamed@Overwrite_cpp@::rotTypeXYZ(float, float, A3_A4_f)=0x804C5BC0
@unnamed@Overwrite_cpp@::basePlaneTypeXY(A4_fff)=0x804C5C20
@unnamed@Overwrite_cpp@::basePlaneTypeXZ(A4_fff)=0x804C5C70
@unnamed@Overwrite_cpp@::basePlaneTypeX(A4_fff)=0x804C5CC0
JPABaseEmitter::init(JPAEmitterManager*, JPAResource*)=0x804C5D30
JPAFieldAir::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x804C7170
JPAFieldVortex::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x804C7200
JPAFieldVortex::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x804C7270
JPAFieldConvection::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x804C7360
JPAFieldSpin::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x804C7400
JPAEmitterManager::calcYBBCam(void)=0x804C74A0
JAU_JASInitializer::initJASystem(JKRSolidHeap*)=0x804C7820
JASThreadingModel::InterruptsDisable<JASMemPool_MultiThreaded<JASTrack>>::Lock::__dt(void)=0x804C79D0
JASThreadingModel::InterruptsDisable<JASMemPool_MultiThreaded<JASTrack::TChannelMgr>>::Lock::__dt(void)=0x804C7A30
JKRAram::__ct(unsigned long, unsigned long, long)=0x804C7B70
nw4r::ut::CharWriter::SetupGX(void)=0x804C7F10
JPAFieldSpin::__dt(void)=0x804C84A0
JPAFieldConvection::__dt(void)=0x804C84E0
JPAFieldVortex::__dt(void)=0x804C8520
JPAFieldAir::__dt(void)=0x804C8560
JASMemPool_MultiThreaded<JASTrack::TChannelMgr>::__ct(void)=0x804C8640
JASMemPool_MultiThreaded<JASTrack::TChannelMgr>::__dt(void)=0x804C8670
JASMemPool_MultiThreaded<JASTrack>::__ct(void)=0x804C86D0
JASMemPool_MultiThreaded<JASTrack>::__dt(void)=0x804C8700
PauseButtonCheckerInGame::__ct(void)=0x804C8760
PauseButtonCheckerInGame::update(void)=0x804C8770
PauseButtonCheckerInGame::isPermitToPlusPause(void) const=0x804C87F0
PauseButtonCheckerInGame::isPermitToMinusPause(void) const=0x804C8850
PauseButtonCheckerInGame::isPermitToPause(void) const=0x804C88B0
ConditionIfIsNotPlayer::isExecute(const MR::StationedFileInfo*) const=0x804C8920
ConditionUsePlayerHeap::__ct(void)=0x804C8960
ConditionUsePlayerHeap::isExecute(const MR::StationedFileInfo*) const=0x804C8990
ConditionUsePlayerHeap::getProperHeap(const MR::StationedFileInfo*) const=0x804C89C0
PlayerHeapHolder::__ct(void)=0x804C8A00
PlayerHeapHolder::adjust(void)=0x804C8AC0
PlayerHeapHolder::dispose(void)=0x804C8B50
PlayerHeapHolder::setIsDataMario(bool)=0x804C8BB0
PlayerHeapHolder::createHeap(unsigned long, JKRHeap*)=0x804C8BC0
ConditionUsePlayerHeap::__dt(void)=0x804C8C20
PlayResultInStageHolder::__ct(void)=0x804C8C80
PlayResultInStageHolder::reset(void)=0x804C8E00
PlayResultInStageHolder::setStageName(const char*)=0x804C8F40
PlayResultInStageHolder::getStageName() const=0x804C8F50
PlayResultInStageHolder::setClearedPowerStarNum(long)=0x804C9090
PlayResultInStageHolder::getClearedPowerStarNum() const=0x804C90A0
PlayResultInStageHolder::addStarPieceNum(long)=0x804C90B0
PlayResultInStageHolder::getClearedStarPieceNum(void) const=0x804C9110
PlayResultInStageHolder::addCoinNum(long)=0x804C9120
PlayResultInStageHolder::getClearedCoinNum(void) const=0x804C9170
PlayResultInStageHolder::incPurpleCoinNum(void)=0x804C9180
PlayResultInStageHolder::getPurpleCoinNum(void) const=0x804C91A0
PlayResultInStageHolder::setCollectTicoCoinSaved(void)=0x804C91B0
PlayResultInStageHolder::setRestartMarioNo(const JMapIdInfo&)=0x804C9310
PlayResultInStageHolder::clearAfterMiss(void)=0x804C9320
PlayResultInStageHolder::getPlayerHealth(void) const=0x804C9370
PlayResultInStageHolder::initPlayerHealth(void)=0x804C9400
PlayResultInStageHolder::__dt(void)=0x804C9510
MR::getSuitableRenderMode(void)=0x804C98A0
MR::isAspectRatioFlag16Per9(void)=0x804C99B0
MR::getRequiredExternalFrameBufferSize(void)=0x804C99E0
RenderModeObj::getViWidthMax(void)=0x804C99F0
ResourceHolder::__ct(JKRArchive&)=0x804C9A50
ResourceHolder::getMotionName(unsigned long) const=0x804C9B80
ResourceHolder::isExistMaterialAnm(void) const=0x804C9BA0
ResourceHolder::newMaterialAnmBuffer(J3DModelData*)=0x804C9BF0
ResourceHolder::newBckCtrl(void)=0x804C9C60
ResourceHolder::getInitEffectMtx(int, int) const=0x804C9CD0
ResourceHolder::initializeArc(JKRArchive&)=0x804C9ED0
ResourceHolder::getFileFinder(JKRArchive*, const char*)=0x804CA060
ResourceHolder::initEachResTable(ResTable*, JKRArchive*, const char*)=0x804CA090
ResourceHolder::count(JKRArchive*, const char*, const char*)=0x804CA130
ResourceHolder::mount(JKRArchive*, char*)=0x804CA230
ResourceHolder::createAndRegisterObject(const char*, void*)=0x804CA380
ResourceHolderManager::__ct(void)=0x804CA6E0
ResourceHolderManagerName2Resource::__ct(void)=0x804CA740
ResourceHolderManager::createAndAdd(const char*, JKRHeap*)=0x804CA760
ResourceHolderManager::createAndAddStationed(const char*)=0x804CA7A0
ResourceHolderManager::createAndAddLayoutHolder(const char*, JKRHeap*)=0x804CA820
ResourceHolderManager::createAndAddLayoutHolderStationed(const char*)=0x804CA860
ResourceHolderManager::createAndAddLayoutHolderRawData(const char*)=0x804CA8B0
ResourceHolderManager::removeIfIsEqualHeap(JKRHeap*)=0x804CA940
ResourceHolderManager::startCreateResourceHolderOnMainThread(const char*, CreateResourceHolderArgs*)=0x804CAAF0
MR::Functor<ResourceHolderManager,const char*,CreateResourceHolderArgs*>(ResourceHolderManager*, M21ResourceHolderManagerFPCvPvPCcP24CreateResourceHolderArgs_vPCcP24CreateResourceHolderArgs_Q22MR131FunctorV2M<ResourceHolderManager*,M21ResourceHolderManagerFPCvPvPCcP24CreateResourceHolderArgs_v,const char*,CreateResourceHolderArgs*>)=0x804CAB60
ResourceHolderManager::startCreateLayoutHolderOnMainThread(const char*, CreateResourceHolderArgs*)=0x804CABB0
ResourceHolderManager::createAndAddInner(const char*, bool(char*, unsigned long, const char*), void(const char*, CreateResourceHolderArgs*))=0x804CAC20
CreateResourceHolderArgs::__ct(void)=0x804CAD30
ResourceHolderManager::createAndAddInnerStationed(const char*, M21ResourceHolderManagerFPCvPvPCcP24CreateResourceHolderArgs_v)=0x804CAD50
ResourceHolderManager::createResourceHolder(const char*, CreateResourceHolderArgs*)=0x804CADE0
@unnamed@ResourceHolderManager_cpp@::GDCurrentRestorer::__dt(void)=0x804CAE70
ResourceHolderManager::createLayoutHolder(const char*, CreateResourceHolderArgs*)=0x804CAEC0
ResourceHolderManager::add(const char*, const CreateResourceHolderArgs&)=0x804CAF40
ResourceHolderManager::find(const char*)=0x804CAFE0
MR::FunctorV2M<ResourceHolderManager*,M21ResourceHolderManagerFPCvPvPCcP24CreateResourceHolderArgs_v,const char*,CreateResourceHolderArgs*>::__cl(void) const=0x804CB070
MR::FunctorV2M<ResourceHolderManager*,M21ResourceHolderManagerFPCvPvPCcP24CreateResourceHolderArgs_v,const char*,CreateResourceHolderArgs*>::clone(JKRHeap*) const=0x804CB0B0
ResourceHolderManagerName2Resource::__as(const ResourceHolderManagerName2Resource&)=0x804CB130
ResFileInfo::__ct(void)=0x804CB160
ResFileInfo::setName(const char*, bool)=0x804CB180
ResTable::__ct(void)=0x804CB220
ResTable::newFileInfoTable(unsigned long)=0x804CB230
ResTable::add(const char*, void*, bool)=0x804CB290
ResTable::getResName(unsigned long) const=0x804CB300
ResTable::getRes(unsigned long) const=0x804CB320
ResTable::getRes(const char*) const=0x804CB330
ResTable::findFileInfo(const char*) const=0x804CB340
ResTable::getFileInfo(unsigned long) const=0x804CB390
ResTable::isExistRes(const char*) const=0x804CB3A0
ResTable::findRes(const char*) const=0x804CB3D0
ResTable::getResIndex(const char*) const=0x804CB420
ResTable::findResName(const void*) const=0x804CB4A0
ResTable::getResName(const void*) const=0x804CB4E0
ScenarioData::__ct(const char*)=0x804CB4F0
ScenarioData::initialize(const char*)=0x804CB5F0
ScenarioData::getNormalPowerStarNum(void) const=0x804CB6A0
ScenarioData::getPowerStarNum(void) const=0x804CB740
ScenarioData::getValueString(const char*, long, const char*) const=0x804CB7F0
ScenarioData::getValueS32(const char*, long, long*) const=0x804CB850
ScenarioData::getValueU32(const char*, long, unsigned long*) const=0x804CB8B0
ScenarioData::isPowerStarTypeHidden(long) const=0x804CB910
ScenarioData::isPowerStarTypeGreen(long) const=0x804CB970
ScenarioData::getZoneNum(void) const=0x804CB9D0
ScenarioData::getZoneName(int) const=0x804CB9F0
ScenarioData::getZoneId(const char*) const=0x804CBA30
ScenarioData::getWorldNo(void) const=0x804CBAC0
ScenarioData::getScenarioDataIter(long) const=0x804CBB10
ScenarioData::getScenarioString(const char*, long, const char*)=0x804CBBF0
ScenarioDataIter::isEnd(void) const=0x804CBC40
ScenarioDataIter::goNext(void)=0x804CBC60
ScenarioDataIter::makeAccessor(void) const=0x804CBC70
ScenarioDataParser::__ct(const char*)=0x804CBDC0
ScenarioDataParser::getScenarioData(const char*) const=0x804CBEA0
ScenarioDataParser::makeAccessor(const char*) const=0x804CBF20
ScenarioDataFunction::getScenarioDataParser(void)=0x804CBF50
ScenarioDataFunction::getCurrentCommonLayers(const char*)=0x804CBF60
ScenarioDataFunction::getCurrentScenarioLayers(const char*, long)=0x804CBFA0
MR::makeBeginScenarioDataIter(void)=0x804CC000
ScenarioDataParser::__dt(void)=0x804CC040
ShapePacketUserData::__ct(void)=0x804CC0A0
ShapePacketUserData::init(J3DMaterial*)=0x804CC0E0
ShapePacketUserData::callDL(void) const=0x804CC320
ShapePacketUserData::loadTexMtx(J3DMaterial*, int, unsigned short) const=0x804CC330
MR::getJ3DShapePacketUserData(const J3DShapePacket*)=0x804CC480
MR::initJ3DShapePacketUserData(J3DModel*)=0x804CC4A0
StarPointerOnOffController::__ct(void)=0x804CC9B0
StarPointerOnOffController::setStateToTitle(void*)=0x804CCAF0
StarPointerOnOffController::setStateToFileSelect(void*)=0x804CCB40
StarPointerOnOffController::setStateToBase(void*)=0x804CCB90
StarPointerOnOffController::requestMode(void*, StarPointerModeEnum)=0x804CCBB0
StarPointerOnOffController::setupHomeButton(void)=0x804CCC00
StarPointerOnOffController::setupErrorWindow(void)=0x804CCC80
StarPointerOnOffController::setupLogo(void)=0x804CCD00
StarPointerOnOffController::setupTitle(void)=0x804CCD80
StarPointerOnOffController::setupFileSelect(void)=0x804CCE00
StarPointerLayout::show(void)=0x804CCE80
StarPointerOnOffController::setupDemo(void)=0x804CCEA0
StarPointerOnOffController::setup1PInvalid2PValid(void)=0x804CCF20
StarPointerOnOffController::setupMarioLauncher(void)=0x804CCFA0
StarPointerOnOffController::setupChooseYesNo(void)=0x804CD0A0
StarPointerOnOffController::setupPauseMenu(void)=0x804CD1A0
StarPointerOnOffController::setupScenarioSelectScene(void)=0x804CD2B0
StarPointerOnOffController::setupBlueStar(void)=0x804CD330
StarPointerOnOffController::setupBlueStarReady(void)=0x804CD3B0
StarPointerOnOffController::setupPowerStarGetDemo(void)=0x804CD430
StarPointerOnOffController::setupStarPieceTarget(void)=0x804CD4B0
StarPointerOnOffController::setupSphereSelectorFinger(void)=0x804CD530
StarPointerOnOffController::setupBigBubble(void)=0x804CD5B0
StarPointerOnOffController::updateMode(void)=0x804CD830
StarPointerOnOffController::clearInfo(void)=0x804CDA20
StarPointerOnOffController::incModeCounter(void*, long)=0x804CDA90
StarPointerOnOffController::decModeCounter(void*)=0x804CDB60
StarPointerOnOffController::__dt(void)=0x804CDC10
StationedArchiveLoader::Condition::__dt(void)=0x804CDC70
StationedArchiveLoader::Condition::getProperHeap(const MR::StationedFileInfo*) const=0x804CDCB0
StationedArchiveLoader::getProperHeap(const MR::StationedFileInfo*)=0x804CDCC0
StationedArchiveLoader::loadResourcesFromTable(const StationedArchiveLoader::Condition&)=0x804CDCF0
StationedArchiveLoader::loadScenarioData(JKRHeap*)=0x804CDDD0
StationedArchiveLoader::createAndAddResourcesFromTable(const StationedArchiveLoader::Condition&)=0x804CDE70
MR::getStationedFileInfoTable(void)=0x804CE000
WPad::__ct(long)=0x804CE010
WPad::setReadInfo(WPadReadDataInfo*)=0x804CE1E0
WPad::update(void)=0x804CE1F0
WPad::getRumbleInstance(void) const=0x804CE2D0
WPad::startLeaveWatcher(void)=0x804CE2E0
WPad::getBattery(void) const=0x804CE2F0
WPad::connected(void)=0x804CE300
WPad::disconnected(void)=0x804CE350
WPad::connectCallback(long, long)=0x804CE3A0
WPad::extensionCallback(long, long)=0x804CE400
WPad::getInfoCallback(long, long)=0x804CE480
MR::isDeviceFreeStyle(const KPADStatus*)=0x804CE4B0
MR::getPadDataForExceptionNoInit(unsigned long, unsigned long*, unsigned long*)=0x804CE4E0
WPad::getKPadStatus(unsigned long) const=0x804CE690
WPad::getValidStatusCount(void) const=0x804CE6A0
WPad::getEnableAccelPastCount(unsigned long) const=0x804CE6B0
WPad::getAcceleration(JGeometry::TVec3<float>*, unsigned long) const=0x804CE6D0
WPad::getPastAcceleration(JGeometry::TVec3<float>*, long, unsigned long) const=0x804CE6F0
WPadAcceleration::__ct(const WPad*, unsigned long)=0x804CE710
WPadAcceleration::getAcceleration(JGeometry::TVec3<float>*) const=0x804CE7E0
WPadAcceleration::getPastAcceleration(JGeometry::TVec3<float>*, long) const=0x804CE840
WPadAcceleration::isStationary(void) const=0x804CE8B0
WPadAcceleration::isBalanced(void) const=0x804CE8C0
WPadAcceleration::update(void)=0x804CE8E0
WPadAcceleration::updateRotate(void)=0x804CEB20
WPadAcceleration::updateAccAverage(void)=0x804CED20
WPadAcceleration::updateIsStable(void)=0x804CEE30
WPadButton::__ct(const WPad*)=0x804CEED0
WPadButton::update(void)=0x804CEF30
WPadButton::testButtonUp(void) const=0x804CEFE0
WPadButton::testButtonDown(void) const=0x804CEFF0
WPadButton::testButtonLeft(void) const=0x804CF000
WPadButton::testButtonRight(void) const=0x804CF010
WPadButton::testButtonA(void) const=0x804CF020
WPadButton::testButtonB(void) const=0x804CF030
WPadButton::testButtonMinus(void) const=0x804CF040
WPadButton::testButtonPlus(void) const=0x804CF050
WPadButton::testButton1(void) const=0x804CF060
WPadButton::testButton2(void) const=0x804CF070
WPadButton::testButtonC(void) const=0x804CF080
WPadButton::testButtonZ(void) const=0x804CF090
WPadButton::testTriggerUp(void) const=0x804CF0A0
WPadButton::testTriggerDown(void) const=0x804CF0B0
WPadButton::testTriggerLeft(void) const=0x804CF0C0
WPadButton::testTriggerRight(void) const=0x804CF0D0
WPadButton::testTriggerA(void) const=0x804CF0E0
WPadButton::testTriggerB(void) const=0x804CF0F0
WPadButton::testTriggerMinus(void) const=0x804CF100
WPadButton::testTriggerHome(void) const=0x804CF110
WPadButton::testTriggerPlus(void) const=0x804CF120
WPadButton::testTrigger1(void) const=0x804CF130
WPadButton::testTrigger2(void) const=0x804CF140
WPadButton::testTriggerC(void) const=0x804CF150
WPadButton::testTriggerZ(void) const=0x804CF160
WPadButton::isChangeAnyState(void) const=0x804CF170
WPadHVSwing::__ct(const WPad*, unsigned long)=0x804CF1C0
WPadHVSwing::updateSwing(void)=0x804CF210
WPadHVSwing::updateCentrifugal(void)=0x804CF320
WPadHVSwing::update(void)=0x804CF4C0
WPadReadDataInfo::__ct(void)=0x804CF590
WPadReadDataInfo::getKPadStatus(unsigned long) const=0x804CF5E0
WPadReadDataInfo::getValidStatusCount(void) const=0x804CF620
WPadHolder::__ct(void)=0x804CF7B0
WPadHolder::updateReadDataOnly(void)=0x804CF8D0
WPadHolder::updateProjectPadData(void)=0x804CF980
WPadHolder::updateInGame(void)=0x804CFA40
WPadHolder::update(void)=0x804CFAC0
WPadHolder::initSensorBarPosition(void)=0x804CFB40
WPadHolder::getWPad(long)=0x804CFBE0
WPadHolder::setConnectCallback(void)=0x804CFC00
@unnamed@WPadHolder_cpp@::getWPadHolder(void)=0x804CFCD0
MR::getWPad(long)=0x804CFCE0
MR::setWPadHolderModeHomeButton(void)=0x804CFD20
MR::setWPadHolderModeGame(void)=0x804CFD50
MR::getHBMKPadData(HBMKPadData*, long)=0x804CFD80
WPadInfoChecker::__ct(WPad*)=0x804CFE80
WPadInfoChecker::getBattery(void) const=0x804CFEA0
WPadInfoChecker::successGetInfo(void)=0x804CFEB0
WPadInfoChecker::startCheck(void)=0x804CFEC0
WPadInfoChecker::reset(void)=0x804CFF10
WPadInfoChecker::update(void)=0x804CFF30
WPadLeaveWatcher::__ct(WPad*)=0x804CFF70
WPadLeaveWatcher::update(void)=0x804CFF90
WPadLeaveWatcher::start(void)=0x804D0080
WPadPointer::__ct(const WPad*)=0x804D00A0
WPadPointer::reset(void)=0x804D0170
WPadPointer::setSensorBarLevel(float)=0x804D0240
WPadPointer::update(void)=0x804D0250
WPadPointer::getPointingPos(JGeometry::TVec2<float>*) const=0x804D0430
WPadPointer::getHorizonVec(JGeometry::TVec2<float>*) const=0x804D0470
WPadPointer::getPastPointingPos(JGeometry::TVec2<float>*, long) const=0x804D04B0
WPadPointer::getEnablePastCount(void) const=0x804D04E0
WPadPointer::getPointingPosBasedOnScreen(JGeometry::TVec2<float>*) const=0x804D04F0
RumbleChannel::clear(void)=0x804D05A0
RumbleChannel::update(void)=0x804D05C0
RumbleChannel::setPattern(const void*, const RumblePattern&, unsigned long, bool)=0x804D0630
WPadRumble::__ct(WPad*)=0x804D0650
WPadRumble::__dt(void)=0x804D0730
WPadRumble::registInstance(void)=0x804D07D0
WPadRumble::pause(void)=0x804D0800
WPadRumble::stop(void)=0x804D0810
WPadRumble::update(void)=0x804D0880
WPadRumble::getRumbleInstance(void) const=0x804D0A40
WPadRumble::vibratePatternIfNotExist(const void*, const char*)=0x804D0A60
WPadRumble::setRumblePatternIfNotExist(const void*, const RumblePattern&, bool)=0x804D0AB0
WPadRumble::findRubmlePattern(const void*, long*, long*, long*, const RumblePattern&)=0x804D0BA0
RumbleData::getPattern(const char*)=0x804D0CF0
RumbleData::initHashValue(void)=0x804D0D50
RumbleData::checkHashCollision(void)=0x804D0DB0
WPadStick::__ct(const WPad*)=0x804D0DC0
WPadStick::update(void)=0x804D0E00
WPadStick::isChanged(void) const=0x804D1020
ConfigDataCreateChunk::__ct(void)=0x804D1040
ConfigDataCreateChunk::makeHeaderHashCode(void) const=0x804D1090
ConfigDataCreateChunk::getSignature(void) const=0x804D10A0
ConfigDataCreateChunk::serialize(unsigned char*, unsigned long) const=0x804D10B0
ConfigDataCreateChunk::deserialize(const unsigned char*, unsigned long)=0x804D1130
ConfigDataCreateChunk::initializeData(void)=0x804D11D0
ConfigDataHolder::__ct(void)=0x804D11E0
ConfigDataHolder::setIsCreated(bool)=0x804D12D0
ConfigDataHolder::isCreated(void) const=0x804D12E0
ConfigDataHolder::updateLastModified(void)=0x804D12F0
ConfigDataHolder::getLastModified(void) const=0x804D1300
ConfigDataHolder::setMiiOrIconId(const void*, const unsigned long*)=0x804D1310
ConfigDataHolder::getMiiId(void*) const=0x804D1320
ConfigDataHolder::getIconId(unsigned long*) const=0x804D1330
ConfigDataHolder::resetAllData(void)=0x804D1340
ConfigDataHolder::makeFileBinary(unsigned char*, unsigned long)=0x804D13B0
ConfigDataHolder::loadFromFileBinary(const char*, const unsigned char*, unsigned long)=0x804D13C0
ConfigDataMii::__ct(void)=0x804D1420
ConfigDataMii::setMiiOrIconId(const void*, const unsigned long*)=0x804D1490
ConfigDataMii::getIconId(unsigned long*) const=0x804D1510
ConfigDataMii::getMiiId(void*) const=0x804D1530
ConfigDataMii::makeHeaderHashCode(void) const=0x804D1580
ConfigDataMii::getSignature(void) const=0x804D1590
ConfigDataMii::serialize(unsigned char*, unsigned long) const=0x804D15A0
ConfigDataMii::deserialize(const unsigned char*, unsigned long)=0x804D1640
JSURandomInputStream::getAvailable(void) const=0x804D1720
ConfigDataMii::initializeData(void)=0x804D1780
ConfigDataMisc::__ct(void)=0x804D17A0
ConfigDataMisc::getLastModified(void) const=0x804D17F0
ConfigDataMisc::updateLastModified(void)=0x804D1800
ConfigDataMisc::makeHeaderHashCode(void) const=0x804D1840
ConfigDataMisc::getSignature(void) const=0x804D1850
ConfigDataMisc::serialize(unsigned char*, unsigned long) const=0x804D1860
ConfigDataMisc::deserialize(const unsigned char*, unsigned long)=0x804D18E0
ConfigDataMisc::initializeData(void)=0x804D1980
GalaxyStatusAccessor::__ct(const ScenarioData*)=0x804D1990
GalaxyStatusAccessor::getName(void) const=0x804D19A0
GalaxyStatusAccessor::getPowerStarNum(void) const=0x804D1A20
GalaxyStatusAccessor::getGreenStarNum(void) const=0x804D1A30
GalaxyStatusAccessor::getZoneNum(void) const=0x804D1AA0
GalaxyStatusAccessor::getZoneId(const char*) const=0x804D1AB0
GalaxyStatusAccessor::getZoneName(int) const=0x804D1AC0
GalaxyStatusAccessor::getAppearPowerStarObjName(long) const=0x804D1AD0
GalaxyStatusAccessor::getCometScenarioId(void) const=0x804D1C00
GalaxyStatusAccessor::isValidComet(long) const=0x804D1C70
GalaxyStatusAccessor::getCometName(long) const=0x804D1CA0
GalaxyStatusAccessor::getCometLimitTimer(long) const=0x804D1CF0
GalaxyStatusAccessor::isHiddenStar(long) const=0x804D1D60
GalaxyStatusAccessor::isGreenStar(long) const=0x804D1D70
GalaxyStatusAccessor::isNotNormalStar(long) const=0x804D1D80
GalaxyStatusAccessor::isGrandStar(long) const=0x804D1DF0
GalaxyStatusAccessor::hasPowerStar(long) const=0x804D1E00
GalaxyStatusAccessor::isOwnBronzeStar(long) const=0x804D1E60
GalaxyStatusAccessor::isCompletedNoGreen(void) const=0x804D1E70
GalaxyStatusAccessor::isCompletedWithGreen(void) const=0x804D1F00
GalaxyStatusAccessor::isCompletedGreenStars(void) const=0x804D1FB0
GalaxyStatusAccessor::getPowerStarNumOwnedTotal(void) const=0x804D2000
GalaxyStatusAccessor::isOpened(void) const=0x804D2050
GalaxyStatusAccessor::isOpenScenario(long) const=0x804D20A0
GalaxyStatusAccessor::getWorldNo(void) const=0x804D21F0
GalaxyStatusAccessor::getPowerStarNumOwned(void) const=0x804D2200
GalaxyStatusAccessor::getGreenStarNumOwned(void) const=0x804D2290
MR::makeGalaxyStatusAccessor(const char*)=0x804D2310
MR::makeCurrentGalaxyStatusAccessor(void)=0x804D2350
GameDataConst::isGrandStar(const char*, long)=0x804D2390
GameDataConst::getWorldNo(const char*)=0x804D2410
GameDataFunction::getSaveDataHandleSequence(void)=0x804D24A0
GameDataFunction::getCurrentGameEventValueChecker(void)=0x804D24B0
GameDataFunction::getCurrentGameDataPlayerStatus(void)=0x804D24E0
GameDataFunction::makeSomeGalaxyStorage(const char*)=0x804D2510
GameDataFunction::getCurrentGameDataTicoFatStorage(void)=0x804D2550
GameDataFunction::getCurrentGameDataWorldMapStorage(void)=0x804D2580
GameDataFunction::setPowerStar(const char*, long)=0x804D25B0
GameDataFunction::hasPowerStar(const char*, long)=0x804D2620
GameDataSomeScenarioAccessor::testFlag(unsigned long) const=0x804D2660
GameDataFunction::hasGrandStar(int)=0x804D2680
GameDataFunction::setBronzeStar(const char*, long)=0x804D26C0
GameDataFunction::hasBronzeStar(const char*, long)=0x804D2730
GameDataFunction::calcCurrentPowerStarNum(void)=0x804D2770
GameDataFunction::calcCurrentGrandStarNum(void)=0x804D27A0
GameDataFunction::getNormalPowerStarNumOwned(const char*)=0x804D2810
GameDataFunction::getPowerStarNumOwned(const char*)=0x804D2840
GameDataFunction::getPowerStarNumMax(void)=0x804D2920
GameDataFunction::onGalaxyScenarioFlagGhostLuigi(const char*, long)=0x804D2990
GameDataFunction::isOnGalaxyScenarioFlagGhostLuigi(const char*, long)=0x804D29D0
GameDataFunction::isOnGalaxyScenarioFlagAlreadyVisited(const char*, long)=0x804D2A10
GameDataFunction::onGalaxyScenarioFlagAlreadyVisited(const char*, long)=0x804D2A50
GameDataFunction::isGalaxyStateClosed(const char*)=0x804D2A90
GameDataFunction::isGalaxyStateNew(const char*)=0x804D2AC0
GameDataFunction::isGalaxyStateOpened(const char*)=0x804D2AF0
GameDataFunction::setGalaxyStateNew(const char*)=0x804D2B20
GameDataFunction::setGalaxyStateOpened(const char*)=0x804D2B50
GameDataFunction::onGalaxyFlagTicoCoin(const char*)=0x804D2B80
GameDataFunction::isOnGalaxyFlagTicoCoin(const char*)=0x804D2BB0
GameDataFunction::calcTicoCoinNum(void)=0x804D2BF0
GameDataFunction::onGalaxyFlagComet(const char*)=0x804D2C20
GameDataFunction::offGalaxyFlagComet(const char*)=0x804D2C50
GameDataFunction::isOnGalaxyFlagComet(const char*)=0x804D2C80
GameDataFunction::tryOnDimensionBigCastleGalaxyComet(void)=0x804D2CC0
GameDataFunction::onGameEventFlag(const char*)=0x804D2D60
GameDataFunction::offGameEventFlag(const char*)=0x804D2DA0
GameDataFunction::isOnGameEventFlag(const char*)=0x804D2DE0
GameDataFunction::isOnGameEventFlagEnding120Stars(void)=0x804D2E20
GameDataFunction::isOnGameEventFlagFinalGalaxyAppearance(void)=0x804D2E60
GameDataFunction::isOnGameEventFlagStarPieceCounterStop(void)=0x804D2EA0
GameDataFunction::isOnGameEventFlagCoinCounterStop(void)=0x804D2EE0
GameDataFunction::isOnGameEventFlagCometExplain(void)=0x804D2F20
GameDataFunction::onGameEventFlagOpenScenario(const char*, long)=0x804D2F60
GameDataFunction::isOnGameEventFlagOpenScenario(const char*, long)=0x804D2FB0
GameDataFunction::existsGameEventFlagOpenScenario(const char*, long)=0x804D3000
GameDataFunction::onGameEventFlagLuigiPlayed(void)=0x804D3050
GameDataFunction::isOnMessageAlreadyRead(Sc)=0x804D3350
GameDataFunction::setRaceBestTime(const char*, unsigned long)=0x804D3640
GameDataFunction::getRaceBestTime(const char*)=0x804D3690
GameDataFunction::setBestScoreAttackCurrentStage(void)=0x804D36D0
GameDataFunction::getBestScoreAttackCurrentStage(void)=0x804D3740
GameDataFunction::incPlayerMissNum(void)=0x804D37B0
GameDataFunction::getPlayerMissNum(void)=0x804D37E0
GameDataFunction::incScenarioMissNum(const char*, long)=0x804D3810
GameDataFunction::getScenarioMissNum(const char*, long)=0x804D3890
GameDataFunction::updateStorageSpinDriverPathDrawRange(const char*, int, int, float)=0x804D39B0
GameDataFunction::onTicoCoinFeed(const char*)=0x804D3AC0
GameDataFunction::isTicoCoinFeed(const char*)=0x804D3B00
GameDataFunction::getPlayerLeft(void)=0x804D3B40
GameDataFunction::addPlayerLeft(int)=0x804D3B70
GameDataFunction::getStocketStarPieceNum(void)=0x804D3BE0
GameDataFunction::tryOnGameEventFlagStarPieceCounterStop(int)=0x804D3C10
GameDataFunction::getStockedCoinNum(void)=0x804D3C90
GameDataFunction::tryOnGameEventFlagCoinCounterStop(int)=0x804D3CC0
GameDataFunction::incCumulativePlayTime(void)=0x804D3DF0
GameDataFunction::getCumulativePlayTime(void)=0x804D3E20
GameDataFunction::resetAllGameData(void)=0x804D3E50
GameDataFunction::getCurrentWorldId(void)=0x804D3FE0
GameDataFunction::isOnGameEventFlagWorld1Entered(void)=0x804D40A0
GameDataFunction::getUserName(void)=0x804D43E0
GameDataFunction::setUserName(const wchar_t*)=0x804D4410
GameDataFunction::setSysConfigFileTimeSent(x)=0x804D4510
GameDataFunction::getSysConfigFileSentBytes(void)=0x804D4560
GameDataFunction::setSysConfigFileSentBytes(unsigned long)=0x804D4590
GameDataHolder::__ct(void)=0x804D47F0
GameDataHolder::isOnGameEventFlag(const char*) const=0x804D4950
GameDataHolder::onGameEventFlag(const char*)=0x804D4960
GameDataHolder::offGameEventFlag(const char*)=0x804D4970
GameDataHolder::getGameEventValue(const char*) const=0x804D4980
GameDataHolder::setGameEventValue(const char*, unsigned short)=0x804D4990
GameDataHolder::incPlayerMissNum(void)=0x804D49A0
GameDataHolder::getPlayerMissNum(void) const=0x804D4A20
GameDataHolder::calcCurrentPowerStarNum(void) const=0x804D4A60
GameDataHolder::calcNormalPowerStarNum(void) const=0x804D4A70
GameDataHolder::hasGrandStar(int) const=0x804D4A80
GameDataHolder::calcTicoCoinNum(void) const=0x804D4AE0
GameDataHolder::getStocketStarPieceNum(void) const=0x804D4AF0
GameDataHolder::addStockedStarPieceNum(int)=0x804D4B00
GameDataHolder::incCumulativePlayTime(void)=0x804D4B10
GameDataHolder::getCumulativePlayTime(void) const=0x804D4B80
GameDataHolder::resetAllData(void)=0x804D4BC0
GameDataHolder::makeFileBinary(unsigned char*, unsigned long)=0x804D4C60
GameDataHolder::loadFromFileBinary(const char*, const unsigned char*, unsigned long)=0x804D4C70
GameEventFlagAccessor::__ct(const GameEventFlag*)=0x804D4CD0
GameEventFlagAccessor::getName(void, _1) const=0x804D4CE0
GameEventFlagIter::isEnd(void) const=0x804D4CF0
GameEventFlagIter::goNext(void)=0x804D4D40
GameEventFlagIter::getFlag(void) const=0x804D4D80
GameEventFlagIter::isValid(void) const=0x804D4D90
GameEventFlagTableInstance::__ct(void)=0x804D4DA0
GameEventFlagTableInstance::findFlag(const char*)=0x804D4DE0
GameEventFlagTableInstance::initSortTable(void)=0x804D4EA0
std::sort<GameEventFlagTableInstance::Key*,@unnamed@GameEventFlagTable_cpp@::GameEventFlagSortLt&>(GameEventFlagTableInstance::Key*, GameEventFlagTableInstance::Key*, @unnamed@GameEventFlagTable_cpp@::GameEventFlagSortLt&, _v)=0x804D5190
std::swap<GameEventFlagTableInstance::Key>(GameEventFlagTableInstance::Key&, GameEventFlagTableInstance::Key&, _v)=0x804D5410
std::__sort132<@unnamed@GameEventFlagTable_cpp@::GameEventFlagSortLt&,GameEventFlagTableInstance::Key*>(GameEventFlagTableInstance::Key*, GameEventFlagTableInstance::Key*, GameEventFlagTableInstance::Key*, @unnamed@GameEventFlagTable_cpp@::GameEventFlagSortLt&, _v)=0x804D5450
std::__selection_sort<@unnamed@GameEventFlagTable_cpp@::GameEventFlagSortLt&,GameEventFlagTableInstance::Key*>(GameEventFlagTableInstance::Key*, GameEventFlagTableInstance::Key*, @unnamed@GameEventFlagTable_cpp@::GameEventFlagSortLt&, _v)=0x804D5510
GameEventFlagTable::getBeginIter(void)=0x804D55B0
GameEventFlagTable::getTableSize(void)=0x804D55C0
GameEventFlagTable::getFlag(int)=0x804D55D0
GameEventFlagTable::findFlag(const char*)=0x804D5600
GameEventFlagTable::isExist(const char*)=0x804D5610
GameEventFlagTable::getIndex(const GameEventFlag*)=0x804D5640
GameEventFlagTable::getIndexFromHashCode(unsigned short)=0x804D5660
GameSequenceDirector::__ct(GameSystemDataHolder*)=0x804D5880
GameSequenceDirector::initAfterResourceLoaded(void)=0x804D5960
GameSequenceDirector::draw(void) const=0x804D5A10
GameSequenceDirector::isInitializedGameDataHolder(void) const=0x804D5A60
GameSequenceFunction::getGameSequenceInGame(void)=0x804D5A70
GameSequenceFunction::getSaveDataHandleSequence(void)=0x804D5AB0
GameSequenceFunction::getNWC24Messenger(void)=0x804D5AC0
GameSequenceFunction::startPreLoadSaveDataSequence(void)=0x804D5E00
GameSequenceFunction::startCreateUserFileSequence(int)=0x804D5F70
GameSequenceFunction::startDeleteUserFileSequence(int)=0x804D5FB0
GameSequenceFunction::storeMiiOrIconIdUserFileSequence(int, const void*, const unsigned long*)=0x804D6050
GameSequenceFunction::startSaveAllUserFileSequence(void)=0x804D60A0
GameSequenceFunction::isActiveSaveDataHandleSequence(void)=0x804D6100
GameSequenceFunction::isSuccessSaveDataHandleSequence(void)=0x804D6130
GameSequenceFunction::restoreUserFile(UserFile*, int, bool)=0x804D6160
GameSequenceFunction::tryNANDErrorSequence(long)=0x804D6220
GameSequenceFunction::requestPrepareResetNWC24(void)=0x804D6260
GameSequenceFunction::isEnableToResetNWC24(void)=0x804D6290
GameSequenceFunction::resetNWC24(void)=0x804D62C0
GameSequenceFunction::notifyToGameSequenceProgressToEndScene(void)=0x804D62F0
GameSequenceFunction::changeToScenarioSelect(const char*)=0x804D6960
GameSequenceFunction::hasStageResultSequence(void)=0x804D6B70
GameSequenceFunction::getClearedStageName(void)=0x804D6C70
GameSequenceFunction::getClearedPowerStarId(void)=0x804D6CA0
GameSequenceFunction::getClearedStarPieceNum(void)=0x804D6CD0
GameSequenceFunction::getClearedCoinNum(void)=0x804D6D00
GameSequenceFunction::getPlayResultInStageHolder(void)=0x804D7070
GameSequenceFunction::hasRetryGalaxySequence(void)=0x804D7130
GameSequenceFunction::collectTicoCoinInStage(void)=0x804D81E0
GameSequenceFunction::isCollectTicoCoinInStage(void)=0x804D8210
GameSequenceFunction::isCollectTicoCoinSaved(void)=0x804D8240
GameSequenceFunction::tryCollectTicoCoinSaved(void)=0x804D82A0
GameSequenceFunction::changeSceneStage(const char*, long, long, JMapIdInfo*)=0x804D84A0
MR::requestChangeScene(const char*)=0x804D85F0
SaveDataBannerCreator::__ct(void)=0x804D92D0
SaveDataBannerCreator::execute(void)=0x804D9360
SaveDataBannerCreator::isDone(void) const=0x804D9390
SaveDataBannerCreator::getResultCode(void) const=0x804D93A0
SaveDataBannerCreator::exeCreateOnTemporary(void)=0x804D93B0
SaveDataBannerCreator::exeMoveToHomeDir(void)=0x804D9460
SaveDataBannerCreator::setupBannerInfo(void)=0x804D9500
SaveDataBannerCreator::__dt(void)=0x804D9630
short::(nit_\SaveDataBannerCreator_cpp)=0x804D9690
@unnamed@SaveDataBannerCreator_cpp@::SaveDataBannerCreatorNoOperation::__ct(void)=0x804D96D0
@unnamed@SaveDataBannerCreator_cpp@::SaveDataBannerCreatorCreateOnTemporary::__ct(void)=0x804D96E0
@unnamed@SaveDataBannerCreator_cpp@::SaveDataBannerCreatorMoveToHomeDir::__ct(void)=0x804D96F0
@unnamed@SaveDataBannerCreator_cpp@::SaveDataBannerCreatorMoveToHomeDir::execute(Spine*) const=0x804D9700
@unnamed@SaveDataBannerCreator_cpp@::SaveDataBannerCreatorCreateOnTemporary::execute(Spine*) const=0x804D9710
@unnamed@SaveDataBannerCreator_cpp@::SaveDataBannerCreatorNoOperation::execute(Spine*) const=0x804D9720
SaveDataFileAccessor::__ct(unsigned char*)=0x804D9730
SaveDataFileAccessor::getHeader(void)=0x804D9740
SaveDataFileAccessor::getFileInfo(int)=0x804D9750
SaveDataFileAccessor::makeUserFileInfo(SaveDataUserFileInfo*, const char*)=0x804D9770
SaveDataHandleSequence::__ct(void)=0x804D9890
SaveDataHandleSequence::initAfterResourceLoaded(void)=0x804D9950
SaveDataHandleSequence::startPreLoad(void)=0x804D9BC0
SaveDataHandleSequence::startCreateUserFile(int)=0x804D9BD0
SaveDataHandleSequence::startDeleteUserFile(int)=0x804D9C60
SaveDataHandleSequence::startSaveAll(void)=0x804D9D50
SaveDataHandleSequence::tryNANDErrorSequence(long)=0x804D9E70
SaveDataHandleSequence::isActive(void) const=0x804D9ED0
SaveDataHandleSequence::isPermitToReset(void) const=0x804D9F00
SaveDataHandleSequence::prepareReset(void)=0x804D9F20
SaveDataHandleSequence::isPreparedReset(void) const=0x804D9F40
SaveDataHandleSequence::restoreFromReset(void)=0x804DA0A0
SaveDataHandleSequence::isInitializedGameDataHolder(void) const=0x804DA130
SaveDataHandleSequence::restoreUserFile(UserFile*, int)=0x804DA140
SaveDataHandleSequence::backupCurrentUserFile(void)=0x804DA190
SaveDataHandleSequence::exeNoOperation(void)=0x804DA340
SaveDataHandleSequence::exeCheckEnableToCreate(void)=0x804DA360
SaveDataHandleSequence::exeSaveConfirm(void)=0x804DA3E0
SaveDataHandleSequence::exeSaveDoneKeyWait(void)=0x804DA600
SaveDataHandleSequence::exeSaveAllWithoutKeyWait(void)=0x804DA650
SaveDataHandleSequence::exePreLoadDone(void)=0x804DA9B0
SaveDataHandleSequence::exeNoSaveConfirmRemind(void)=0x804DAA30
SaveDataHandleSequence::exeErrorHandling(void)=0x804DAAB0
SaveDataHandleSequence::getSysConfigFile(void)=0x804DAB20
SaveDataHandleSequence::getCurrentUserFile(void)=0x804DAB30
SaveDataHandleSequence::restoreUserFileConfigData(UserFile*, int)=0x804DAB40
SaveDataHandleSequence::restoreUserFileGameData(UserFile*, int)=0x804DABC0
SaveDataHandleSequence::restoreSysConfigFile(SysConfigFile*)=0x804DAC50
SaveDataHandleSequence::trySave(void)=0x804DAD10
SaveDataHandleSequence::tryConfirm(const char*, bool*)=0x804DAD90
SaveDataHandleSequence::tryProcessDoneKeyWait(const char*)=0x804DAE30
SaveDataHandleSequence::tryNoSave(void)=0x804DAEB0
SaveDataHandleSequence::isEnablePointer(void) const=0x804DAF20
SaveDataHandleSequence::executeSaveFinish(bool*, const Nerve*)=0x804DAFF0
SaveDataHandleSequence::syncNoSaveFlagsFromErrorSequence(void)=0x804DB120
SaveDataHandleSequence::__dt(void)=0x804DB170
short::(nit_\SaveDataHandleSequence_cpp)=0x804DB1D0
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceNoOperation::__ct(void)=0x804DB250
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceCheckEnableToCreate::__ct(void)=0x804DB260
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceSaveConfirm::__ct(void)=0x804DB270
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceSaveDoneKeyWait::__ct(void)=0x804DB290
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceSaveAllWithoutKeyWait::__ct(void)=0x804DB2A0
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceNoSaveConfirmRemind::__ct(void)=0x804DB2F0
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceErrorHandling::__ct(void)=0x804DB300
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceErrorHandling::execute(Spine*) const=0x804DB310
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequencePreLoadDone::execute(Spine*) const=0x804DB320
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceSaveAllWithoutKeyWait::execute(Spine*) const=0x804DB370
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceSaveDoneKeyWait::execute(Spine*) const=0x804DB380
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceSaveConfirm::execute(Spine*) const=0x804DB3A0
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceCheckEnableToCreate::execute(Spine*) const=0x804DB3B0
@unnamed@SaveDataHandleSequence_cpp@::SaveDataHandleSequenceNoOperation::execute(Spine*) const=0x804DB3C0
SaveDataHandler::__ct(const SysConfigFile*, const UserFile*)=0x804DB3D0
SaveDataHandler::update(void)=0x804DB4A0
SaveDataHandler::requestCheckEnableToCreate(void)=0x804DB4E0
SaveDataHandler::requestLoadBanner(void)=0x804DB530
SaveDataHandler::requestLoadGameData(void)=0x804DB540
SaveDataHandler::requestVerifyAfterLoadGameDataFile(void)=0x804DB550
SaveDataHandler::initializeUserFileMemory(int, const UserFile*)=0x804DB5F0
SaveDataHandler::restoreGameDataFile(const char*, void*, unsigned long)=0x804DB6C0
SaveDataHandler::storeUserFile(const UserFile*)=0x804DB720
SaveDataHandler::storeSysConfigFile(const SysConfigFile*)=0x804DB7B0
SaveDataHandler::requestSaveSaveData(void)=0x804DB810
SaveDataHandler::requestRemoveSaveData(void)=0x804DB920
SaveDataHandler::getEnoughtTempBufferSize(void)=0x804DB930
SaveDataHandler::isDone(void) const=0x804DB940
SaveDataHandler::getLastResultCode(void) const=0x804DB990
SaveDataHandler::exeSaveProcessingGameData(void)=0x804DB9A0
SaveDataHandler::exeSaveProcessingBanner(void)=0x804DBAD0
SaveDataHandler::exeRemoveProcessingBanner(void)=0x804DBB70
SaveDataHandler::resetSaveData(unsigned char*)=0x804DBBE0
SaveDataHandler::initializeAllFileInSaveData(unsigned char*, const SysConfigFile*, const UserFile*)=0x804DBD50
SaveDataHandler::isCorrectFileHeader(const unsigned char*)=0x804DBE20
SaveDataHandler::copySaveDataEachFile(unsigned char*, const unsigned char*)=0x804DBE90
SaveDataHandler::createCommunicationBuffer(void)=0x804DBF70
SaveDataHandler::requestLoadSaveData(const char*)=0x804DBFE0
SaveDataHandler::tryRemoveFile(const char*, bool*)=0x804DC050
SaveDataHandler::trySave(bool*, bool)=0x804DC110
SaveDataHandler::__dt(void)=0x804DC180
short::(nit_\SaveDataHandler_cpp)=0x804DC1E0
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerWait::__ct(void)=0x804DC240
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerProcessing::__ct(void)=0x804DC250
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerSaveProcessingGameData::__ct(void)=0x804DC260
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerSaveProcessingBanner::__ct(void)=0x804DC280
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerRemoveProcessingBanner::__ct(void)=0x804DC290
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerRemoveProcessingGameData::__ct(void)=0x804DC2A0
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerRemoveProcessingGameData::execute(Spine*) const=0x804DC2B0
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerRemoveProcessingBanner::execute(Spine*) const=0x804DC310
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerSaveProcessingBanner::execute(Spine*) const=0x804DC320
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerSaveProcessingGameData::execute(Spine*) const=0x804DC340
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerProcessing::execute(Spine*) const=0x804DC350
@unnamed@SaveDataHandler_cpp@::SaveDataHandlerWait::execute(Spine*) const=0x804DC3A0
GameEventFlagStorage::__ct(void)=0x804DC3B0
GameEventFlagStorage::set(const GameEventFlag*, bool)=0x804DC450
GameEventFlagStorage::isOn(const GameEventFlag*) const=0x804DC4A0
GameEventFlagStorage::makeHeaderHashCode(void) const=0x804DC4E0
GameEventFlagStorage::getSignature(void) const=0x804DC4F0
GameEventFlagStorage::serialize(unsigned char*, unsigned long) const=0x804DC500
GameEventFlagStorage::deserialize(const unsigned char*, unsigned long)=0x804DC5F0
GameEventFlagStorage::initializeData(void)=0x804DC6C0
GameEventValueChecker::__ct(void)=0x804DC720
GameEventValueChecker::getValue(const char*) const=0x804DC790
GameEventValueChecker::setValue(const char*, unsigned short)=0x804DC7D0
GameEventValueChecker::makeHeaderHashCode(void) const=0x804DCB90
GameEventValueChecker::getSignature(void) const=0x804DCBA0
GameEventValueChecker::serialize(unsigned char*, unsigned long) const=0x804DCBB0
GameEventValueChecker::deserialize(const unsigned char*, unsigned long)=0x804DCC80
GameEventValueChecker::initializeData(void)=0x804DCD70
GameDataSomeScenarioAccessor::__ct(void)=0x804DCEC0
GameDataSomeScenarioAccessor::resetAllData(void)=0x804DCF00
GameDataSomeGalaxyStorage::__ct(const GalaxyStatusAccessor&)=0x804DD070
GameDataSomeGalaxyStorage::getScenarioAccessor(long) const=0x804DD110
GameDataSomeGalaxyStorage::resetAllData(void)=0x804DD130
GameDataSomeGalaxyStorage::getPowerStarNumOwned(void) const=0x804DD1A0
GameDataSomeGalaxyStorage::serialize(const BinaryDataContentAccessor&, unsigned char*) const=0x804DD220
GameDataSomeGalaxyStorage::deserialize(const BinaryDataContentAccessor&, const unsigned char*)=0x804DD300
GameDataAllGalaxyStorage::__ct(void)=0x804DD440
GameDataAllGalaxyStorage::makeAccessor(const char*) const=0x804DD5A0
GameDataAllGalaxyStorage::calcCurrentPowerStarNum(void) const=0x804DD5E0
GameDataAllGalaxyStorage::calcNormalPowerStarNum(void) const=0x804DD650
GameDataAllGalaxyStorage::getPowerStarNumOwned(const char*) const=0x804DD730
GameDataAllGalaxyStorage::calcTicoCoinNum(void) const=0x804DD770
GameDataAllGalaxyStorage::makeHeaderHashCode(void) const=0x804DD7C0
GameDataAllGalaxyStorage::getSignature(void) const=0x804DD810
GameDataAllGalaxyStorage::serialize(unsigned char*, unsigned long) const=0x804DD820
GameDataAllGalaxyStorage::deserialize(const unsigned char*, unsigned long)=0x804DD970
GameDataAllGalaxyStorage::initializeData(void)=0x804DDAB0
GameDataAllGalaxyStorage::initHeaderSerializer(void)=0x804DDB10
GameDataAllGalaxyStorage::findIndex(const char*) const=0x804DDBE0
GameDataAllGalaxyStorage::findIndex(unsigned short) const=0x804DDC60
GameDataPlayerStatus::__ct(void)=0x804DDCE0
GameDataPlayerStatus::makeHeaderHashCode(void) const=0x804DDDE0
GameDataPlayerStatus::getSignature(void) const=0x804DDE30
GameDataPlayerStatus::serialize(unsigned char*, unsigned long) const=0x804DDE40
GameDataPlayerStatus::deserialize(const unsigned char*, unsigned long)=0x804DDF40
GameDataPlayerStatus::initializeData(void)=0x804DE080
GameDataPlayerStatus::getPlayerLeft(void) const=0x804DE0B0
GameDataPlayerStatus::addPlayerLeft(int)=0x804DE0C0
GameDataPlayerStatus::getStockedStarPieceNum(void) const=0x804DE100
GameDataPlayerStatus::addStockedStarPieceNum(int)=0x804DE110
GameDataPlayerStatus::getStockedCoinNum(void) const=0x804DE150
GameDataPlayerStatus::addStockedCoinNum(int)=0x804DE160
GameDataTicoFatStorage::__ct(void)=0x804DE340
StarPieceAlmsStorage::getValue(int) const=0x804DE3D0
GameDataTicoFatStorage::makeHeaderHashCode(void) const=0x804DE480
GameDataTicoFatStorage::getSignature(void) const=0x804DE4B0
GameDataTicoFatStorage::initializeData(void)=0x804DE630
GameDataWorldMapStorage::__ct(void)=0x804DE670
GameDataWorldMapStorage::makeHeaderHashCode(void) const=0x804DE770
GameDataWorldMapStorage::getSignature(void) const=0x804DE7A0
GameDataWorldMapStorage::serialize(unsigned char*, unsigned long) const=0x804DE7B0
GameDataWorldMapStorage::deserialize(const unsigned char*, unsigned long)=0x804DE830
GameDataWorldMapStorage::initializeData(void)=0x804DE8B0
SysConfigChunk::__ct(void)=0x804DE940
SysConfigChunk::makeHeaderHashCode(void) const=0x804DEB60
SysConfigChunk::getSignature(void) const=0x804DEB70
SysConfigChunk::serialize(unsigned char*, unsigned long) const=0x804DEB80
SysConfigChunk::deserialize(const unsigned char*, unsigned long)=0x804DECD0
SysConfigChunk::initializeData(void)=0x804DEE90
SysConfigChunk::initializeHeaderSerializer(void)=0x804DEEE0
SysConfigFile::__ct(void)=0x804DEFD0
SysConfigFile::makeDataBinary(unsigned char*, unsigned long) const=0x804DF050
SysConfigFile::loadFromDataBinary(const unsigned char*, unsigned long)=0x804DF060
UserFile::__ct(void)=0x804DF070
UserFile::isCreated(void) const=0x804DF100
UserFile::getPowerStarNum(void) const=0x804DF110
UserFile::calcNormalPowerStarNum(void) const=0x804DF120
UserFile::getPlayerMissNum(void) const=0x804DF130
UserFile::getMiiId(void*) const=0x804DF140
UserFile::getIconId(unsigned long*) const=0x804DF150
UserFile::isView120StarsEnding(void) const=0x804DF160
UserFile::isComplete(void) const=0x804DF170
UserFile::getLastModified(void) const=0x804DF1C0
UserFile::hasGrandStar(int) const=0x804DF1D0
UserFile::getCumulativePlayTime(void) const=0x804DF1E0
UserFile::setCreated(void)=0x804DF1F0
UserFile::setMiiOrIconId(const void*, const unsigned long*)=0x804DF200
UserFile::updateLastModified(void)=0x804DF210
UserFile::setUserName(const wchar_t*)=0x804DF220
UserFile::getGameDataName(void) const=0x804DF230
UserFile::makeGameDataBinary(unsigned char*, unsigned long) const=0x804DF240
UserFile::loadFromGameDataBinary(const char*, const unsigned char*, unsigned long)=0x804DF250
UserFile::getConfigDataName(void) const=0x804DF290
UserFile::makeConfigDataBinary(unsigned char*, unsigned long) const=0x804DF2A0
UserFile::loadFromConfigDataBinary(const char*, const unsigned char*, unsigned long)=0x804DF2B0
UserFile::resetAllData(void)=0x804DF2F0
WorldMapComet::__ct(const char*)=0x804E3260
WorldMapComet::init(const JMapInfoIter&)=0x804E32C0
WorldMapComet::appear(void)=0x804E3330
WorldMapComet::__dt(void)=0x804E3370
short::(nit_\WorldMapComet_cpp)=0x804E33D0
WorldMapEarthenPipe::__ct(void)=0x804E3440
WorldMapEarthenPipe::control(void)=0x804E3500
WorldMapEarthenPipe::__dt(void)=0x804E3510
WorldMapStarCheckPoint::init(const JMapInfoIter&)=0x804E5B30
WorldMapStarCheckPoint::makeActorAppeared(void)=0x804E5CC0
WorldMapStarCheckPoint::makeActorDead(void)=0x804E5CE0
WorldMapStarCheckPoint::kill(void)=0x804E5D30
WorldMapStarCheckPoint::control(void)=0x804E5DD0
WorldMapStarCheckPoint::calcAndSetBaseMtx(void)=0x804E5DE0
WorldMapStarCheckPoint::__dt(void)=0x804E61C0
short::(nit_\WorldMapStarCheckPoint_cpp)=0x804E6220
WorldMapStarPieceMine::init(const JMapInfoIter&)=0x804E63F0
WorldMapStarPieceMine::makeActorAppeared(void)=0x804E6510
WorldMapStarPieceMine::attackSensor(HitSensor*, HitSensor*)=0x804E6550
WorldMapStarPieceMine::__dt(void)=0x804E66B0
short::(nit_\WorldMapStarPieceMine_cpp)=0x804E6710
NrvWorldMapStarPieceMine::WorldMapStarPieceMineNrvWait::__ct(void)=0x804E6740
NrvWorldMapStarPieceMine::WorldMapStarPieceMineNrvBreak::__ct(void)=0x804E6750
NrvWorldMapStarPieceMine::WorldMapStarPieceMineNrvBreak::execute(Spine*) const=0x804E6760
NrvWorldMapStarPieceMine::WorldMapStarPieceMineNrvWait::execute(Spine*) const=0x804E6770
WorldMapModel::__ct(const char*)=0x804E77D0
WorldMapModel::init(const JMapInfoIter&)=0x804E7820
WorldMapModel::initAfterPlacement(void)=0x804E7AD0
WorldMapModel::__dt(void)=0x804E7AE0
GalaxyWorldMapInfo::__ct(const char*, const char*, long, const char*)=0x804E9130
WorldMapResultCommand::__ct(void)=0x804EEA50
WorldMapResultCommand::__dt(void)=0x804EEC20
@unnamed@NWC24Function_cpp@::isLastUpdateToday(x)=0x804FE4E0
MR::calcWiiMailSize(const unsigned short*, const unsigned short*, unsigned long, unsigned long)=0x804FE580
MR::checkWiiMailLimit(unsigned long)=0x804FE680
MR::updateWiiMailSentSize(unsigned long)=0x804FE6E0
MR::getMailSender(const char*)=0x804FE750
@unnamed@NWC24Messenger_cpp@::getNWC24Messenger(void)=0x804FE760
NWC24Messenger::__ct(const char*)=0x804FE770
NWC24MessengerSub::SendTask::__ct(void)=0x804FE850
NWC24Messenger::initAfterResourceLoaded(void)=0x804FE890
NWC24Messenger::movement(void)=0x804FE8A0
NWC24Messenger::calcAnim(void)=0x804FE8B0
NWC24Messenger::draw(void) const=0x804FE8C0
NWC24Messenger::send(const char*, const wchar_t*, const wchar_t*, const unsigned char*, unsigned long, bool, bool, unsigned short, unsigned char)=0x804FE8D0
NWC24Messenger::term(const char*)=0x804FE9C0
NWC24Messenger::isSent(const char*) const=0x804FEA00
NWC24Messenger::isError(const char*) const=0x804FEA40
NWC24Messenger::prepareReset(void)=0x804FEA90
NWC24Messenger::isRunning(void) const=0x804FEB10
NWC24Messenger::reset(void)=0x804FEB50
NWC24Messenger::findTask(const char*) const=0x804FEB90
NWC24Messenger::selectTask(void) const=0x804FEC50
NWC24Messenger::clearBackgroundTask(void)=0x804FECC0
NWC24MessengerSub::SendState::__ct(NWC24Messenger*)=0x804FECF0
NWC24MessengerSub::SendState::initAfterResourceLoaded(void)=0x804FED70
NWC24MessengerSub::SendState::updateNerve(void)=0x804FEDD0
NWC24MessengerSub::SendState::calcAnim(void)=0x804FEE40
NWC24MessengerSub::SendState::draw(void) const=0x804FEEB0
NWC24MessengerSub::SendState::reset(void)=0x804FEF20
NWC24MessengerSub::SendState::exeWait(void)=0x804FEFA0
NWC24MessengerSub::SendState::exeOpenBG(void)=0x804FF050
NWC24MessengerSub::SendState::exeRunBG(void)=0x804FF100
NWC24MessengerSub::SendState::exeOpenFG(void)=0x804FF1D0
NWC24MessengerSub::SendState::exeRunFG(void)=0x804FF270
NWC24MessengerSub::SendState::exeCloseFG(void)=0x804FF2F0
NWC24MessengerSub::SendState::exeUpdateLimitFG(void)=0x804FF360
NWC24MessengerSub::SendState::exeRetryErrorFG(void)=0x804FF3D0
NWC24MessengerSub::SendState::exeOpenErrorFG(void)=0x804FF470
NWC24MessengerSub::SendState::exeSendFatalErrorFG(void)=0x804FF580
NWC24MessengerSub::SendState::exeCloseErrorFG(void)=0x804FF6B0
NWC24MessengerSub::SendState::exeSendFullErrorFG(void)=0x804FF7A0
NWC24MessengerSub::SendState::exeWaitCloseSysInfoMini(void)=0x804FF880
NWC24MessengerSub::SendState::selectTask(void)=0x804FF8F0
NWC24MessengerSub::SendState::openSystem(void)=0x804FF930
NWC24MessengerSub::SendState::isRestorableError(void) const=0x804FF950
NWC24MessengerSub::SendState::send(void)=0x804FF980
NWC24MessengerSub::SendState::checkFinish(void)=0x804FFA10
NWC24MessengerSub::SendState::closeSystem(void)=0x804FFA30
NWC24MessengerSub::SendState::hasFatalErrorOccured(void) const=0x804FFA90
NWC24MessengerSub::SendState::doneTask(void)=0x804FFAC0
NWC24MessengerSub::SendState::appearSysInfo(const char*, long)=0x804FFAF0
NWC24MessengerSub::SendState::isEndSysInfoMini(void) const=0x804FFB80
NWC24MessengerSub::SendState::setNerveAfterSysInfoWindowMiniDisappear(const Nerve*)=0x804FFBA0
MR::SendMailObj::__ct(const char*)=0x804FFC00
MR::SendMailObj::setMessageDirect(const wchar_t*)=0x804FFC30
MR::SendMailObj::setSenderID(const char*)=0x804FFC40
MR::SendMailObj::setImage(const unsigned char*, unsigned long)=0x804FFC80
MR::SendMailObj::setBGEnable(void)=0x804FFC90
MR::SendMailObj::setBGDisable(void)=0x804FFCA0
MR::SendMailObj::send(void)=0x804FFCB0
MR::termMail(const char*)=0x804FFD10
MR::isMailSent(const char*)=0x804FFD50
MR::isMailErrorHappened(const char*)=0x804FFD90
NWC24Messenger::__dt(void)=0x804FFDD0
NWC24MessengerSub::SendState::__dt(void)=0x804FFE30
short::(nit_\NWC24Messenger_cpp)=0x804FFE90
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvWait::__ct(void)=0x804FFF30
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRetry::__ct(void)=0x804FFF40
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvOpenBG::__ct(void)=0x804FFF50
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRunBG::__ct(void)=0x804FFF60
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvCloseBG::__ct(void)=0x804FFF70
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvOpenFG::__ct(void)=0x804FFF80
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRunFG::__ct(void)=0x804FFF90
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvCloseFG::__ct(void)=0x804FFFA0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvUpdateLimitFG::__ct(void)=0x804FFFB0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRetryErrorFG::__ct(void)=0x804FFFC0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvOpenErrorFG::__ct(void)=0x804FFFD0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvSendFatalErrorFG::__ct(void)=0x804FFFE0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvCloseErrorFG::__ct(void)=0x804FFFF0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvSendFullErrorFG::__ct(void)=0x80500000
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvWaitCloseSysInfoMini::__ct(void)=0x80500010
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvWaitCloseSysInfoMini::execute(Spine*) const=0x80500020
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvSendFullErrorFG::execute(Spine*) const=0x80500030
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvCloseErrorFG::execute(Spine*) const=0x80500040
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvSendFatalErrorFG::execute(Spine*) const=0x80500050
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvOpenErrorFG::execute(Spine*) const=0x80500060
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRetryErrorFG::execute(Spine*) const=0x80500070
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvUpdateLimitFG::execute(Spine*) const=0x80500080
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvCloseFG::execute(Spine*) const=0x80500090
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRunFG::execute(Spine*) const=0x805000A0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvOpenFG::execute(Spine*) const=0x805000B0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvCloseBG::execute(Spine*) const=0x805000C0
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRunBG::execute(Spine*) const=0x80500110
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvOpenBG::execute(Spine*) const=0x80500120
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvRetry::execute(Spine*) const=0x80500130
NWC24MessengerSub::@unnamed@NWC24Messenger_cpp@::SendStateNrvWait::execute(Spine*) const=0x80500180
NWC24SendThread::__ct(long, JKRHeap*)=0x80500190
NWC24SendThread::requestSend(const unsigned short*, const unsigned short*, const unsigned char*, unsigned long, const unsigned char*, unsigned long, unsigned short, bool, unsigned char)=0x80500260
NWC24SendThread::isDone(NWC24Err*, unsigned long*)=0x80500330
NWC24SendThread::threadProc(void*)=0x805003B0
NWC24SendThread::initMsgSendStatus(void)=0x80500410
NWC24SendThread::sendMessage(NWC24SendThread::MsgSendStatus*, unsigned long*)=0x80500450
NWC24SendThread::checkTotalSize(NWC24SendThread::MsgSendStatus*)=0x80500620
NWC24SendThread::setToMyself(NWC24MsgObj*)=0x80500680
NWC24System::__ct(JKRHeap*, long)=0x805006D0
NWC24System::open(NWC24Err*, long*)=0x80500770
NWC24System::close(NWC24Err*)=0x80500800
NWC24System::send(const unsigned short*, const unsigned short*, const unsigned char*, unsigned long, const unsigned char*, unsigned long, unsigned short, bool, unsigned char)=0x80500860
NWC24System::isSent(NWC24Err*, unsigned long*)=0x805008A0
ReceiverTagMail::update(void)=0x80500A10
ReceiverTagMail::isDone(void) const=0x80500A70
ReceiverTagMail::isError(void) const=0x80500A90
MR::strlenUTF16(const unsigned short*)=0x80500AA0
WiiMessageBoardMailSenderState::__ct(void)=0x80500AE0
WiiMessageBoardMailSender::__ct(void)=0x80500D50
WiiMessageBoardMailSenderState::__dt(void)=0x80500E90
WiiMessageBoardMailSender::__dt(void)=0x80500EF0
short::(nit_\WiiMessageBoardMailSender_cpp)=0x80500F50
JKRHeap::__ct(void*, unsigned long, JKRHeap*, bool)=0x80500FF0
JSUTree<JKRHeap>::__dt(void)=0x80501110
JKRHeap::__dt(void)=0x80501190
JKRHeap::initArena(char*, unsigned long*, int)=0x80501290
JKRHeap::becomeSystemHeap(void)=0x80501360
JKRHeap::becomeCurrentHeap(void)=0x80501370
JKRHeap::destroy(JKRHeap*, _0)=0x80501380
JKRHeap::destroy(JKRHeap*, _1)=0x80501390
JKRHeap::alloc(unsigned long, int, JKRHeap*)=0x805013A0
JKRHeap::alloc(unsigned long, int)=0x805013E0
JKRHeap::free(void*, JKRHeap*)=0x805013F0
JKRHeap::free(void*)=0x80501450
JKRHeap::callAllDisposer(void)=0x80501460
JKRHeap::freeAll(void)=0x805014B0
JKRHeap::freeTail(void)=0x805014C0
JKRHeap::fillFreeArea(void)=0x805014D0
JKRHeap::resize(void*, unsigned long)=0x805014E0
JKRHeap::getSize(void*)=0x805014F0
JKRHeap::getFreeSize(void)=0x80501500
JKRHeap::getMaxFreeBlock(void, _3)=0x80501510
JKRHeap::getTotalFreeSize(void, _0)=0x80501520
JKRHeap::findFromRoot(void*)=0x80501530
JKRHeap::find(void*) const=0x80501580
JSUTreeIterator<JKRHeap>::__pp(void)=0x80501630
JKRHeap::findAllHeap(void*) const=0x80501650
JKRHeap::dispose_subroutine(unsigned long, unsigned long)=0x80501700
JSUListIterator<JKRDisposer>::__pp(int)=0x805017C0
JKRHeap::dispose(void*, unsigned long)=0x805017E0
JKRHeap::dispose(void*, void*)=0x80501810
JKRHeap::dispose(void)=0x80501820
JKRHeap::copyMemory(void*, void*, unsigned long)=0x80501870
JKRHeap::setErrorHandler(void(void*, unsigned long, int))=0x805018C0
JKRHeap::state_register(JKRHeap::TState*, unsigned long) const=0x80501950
JKRHeap::state_compare(const JKRHeap::TState&, const JKRHeap::TState&) const=0x80501960
JKRHeap::state_dump(const JKRHeap::TState&) const=0x80501980
JKRHeap::setAltAramStartAdr(unsigned long)=0x80501990
JKRHeap::getAltAramStartAdr(void)=0x805019A0
JKRExpHeap::createRoot(int, bool)=0x80501A80
JKRExpHeap::create(unsigned long, JKRHeap*, bool)=0x80501B00
JKRExpHeap::create(void*, unsigned long, JKRHeap*, bool)=0x80501BE0
JKRExpHeap::do_destroy(void)=0x80501C90
JKRExpHeap::__ct(void*, unsigned long, JKRHeap*, bool)=0x80501D20
JKRExpHeap::__dt(void)=0x80501DB0
JKRExpHeap::do_alloc(unsigned long, int)=0x80501E20
JKRExpHeap::allocFromHead(unsigned long, int)=0x80501F30
JKRExpHeap::allocFromHead(unsigned long)=0x805021A0
JKRExpHeap::allocFromTail(unsigned long, int)=0x80502290
JKRExpHeap::allocFromTail(unsigned long)=0x805023F0
JKRExpHeap::do_free(void*)=0x805024D0
JKRExpHeap::do_freeAll(void)=0x80502560
JKRExpHeap::do_freeTail(void)=0x805025E0
JKRExpHeap::do_fillFreeArea(void)=0x80502680
JKRExpHeap::do_changeGroupID(unsigned char)=0x80502690
JKRExpHeap::do_resize(void*, unsigned long)=0x805026E0
JKRExpHeap::do_getSize(void*)=0x805028A0
JKRExpHeap::do_getFreeSize(void)=0x80502930
JKRExpHeap::do_getMaxFreeBlock(void)=0x805029A0
JKRExpHeap::do_getTotalFreeSize(void)=0x80502A20
JKRExpHeap::getUsedSize(unsigned char) const=0x80502A90
JKRExpHeap::isEmpty(void)=0x80502B10
JKRExpHeap::appendUsedList(JKRExpHeap::CMemBlock*)=0x80502B60
JKRExpHeap::setFreeBlock(JKRExpHeap::CMemBlock*, JKRExpHeap::CMemBlock*, JKRExpHeap::CMemBlock*)=0x80502C00
JKRExpHeap::removeFreeBlock(JKRExpHeap::CMemBlock*)=0x80502C50
JKRExpHeap::removeUsedBlock(JKRExpHeap::CMemBlock*)=0x80502C90
JKRExpHeap::recycleFreeBlock(JKRExpHeap::CMemBlock*)=0x80502CD0
JKRExpHeap::joinTwoBlocks(JKRExpHeap::CMemBlock*)=0x80502E70
JKRExpHeap::check(void)=0x80502F50
JKRExpHeap::dump(void)=0x80503140
JKRExpHeap::dump_sort(void)=0x80503310
JKRExpHeap::CMemBlock::initiate(JKRExpHeap::CMemBlock*, JKRExpHeap::CMemBlock*, unsigned long, unsigned char, unsigned char)=0x80503510
JKRExpHeap::CMemBlock::allocFore(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)=0x80503530
JKRExpHeap::CMemBlock::allocBack(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)=0x80503580
JKRExpHeap::CMemBlock::getHeapBlock(void*)=0x805035E0
JKRExpHeap::state_register(JKRHeap::TState*, unsigned long) const=0x80503600
JKRExpHeap::state_compare(const JKRHeap::TState&, const JKRHeap::TState&) const=0x805036B0
JKRExpHeap::do_getCurrentGroupId(void)=0x805036E0
JKRExpHeap::getHeapType(void)=0x805036F0
JKRSolidHeap::create(unsigned long, JKRHeap*, bool)=0x80503700
JKRSolidHeap::do_destroy(void)=0x805037B0
JKRSolidHeap::__ct(void*, unsigned long, JKRHeap*, bool)=0x80503810
JKRSolidHeap::__dt(void)=0x80503870
JKRSolidHeap::do_alloc(unsigned long, int)=0x80503990
JKRSolidHeap::allocFromHead(unsigned long, int)=0x80503A40
JKRSolidHeap::allocFromTail(unsigned long, int)=0x80503B10
JKRSolidHeap::do_freeAll(void)=0x80503BD0
JKRSolidHeap::do_freeTail(void)=0x80503C30
JKRSolidHeap::do_fillFreeArea(void)=0x80503CC0
JKRSolidHeap::do_resize(void*, unsigned long)=0x80503CD0
JKRSolidHeap::do_getSize(void*)=0x80503D00
JKRSolidHeap::check(void)=0x80503D30
JKRSolidHeap::dump(void)=0x80503DC0
JKRSolidHeap::state_register(JKRHeap::TState*, unsigned long) const=0x80503EC0
JKRSolidHeap::state_compare(const JKRHeap::TState&, const JKRHeap::TState&) const=0x80503F20
JKRSolidHeap::do_getMaxFreeBlock(void)=0x80503F60
JKRSolidHeap::do_getFreeSize(void)=0x80503F70
JKRSolidHeap::getHeapType(void)=0x80503F80
JKRUnitHeap::create(unsigned long, unsigned long, unsigned long, JKRHeap*, bool)=0x80503F90
JKRUnitHeap::do_destroy(void)=0x805040F0
JKRUnitHeap::__ct(unsigned char*, unsigned char*, unsigned long, unsigned long, unsigned long, unsigned long, JKRHeap*, bool)=0x80504150
JKRUnitHeap::__dt(void)=0x805041F0
JKRUnitHeap::clearBatArea(void)=0x80504260
JKRUnitHeap::find1FreeBlock(int)=0x80504300
JKRUnitHeap::findFreeBlock(int, unsigned long)=0x805043F0
JKRUnitHeap::findFreeBlock_fromHead(unsigned long)=0x80504420
JKRUnitHeap::findFreeBlock_fromTail(unsigned long)=0x805045B0
JKRUnitHeap::do_freeAll(void)=0x80504730
JKRUnitHeap::do_freeTail(void)=0x80504770
JKRUnitHeap::do_fillFreeArea(void)=0x80504780
JKRUnitHeap::do_resize(void*, unsigned long)=0x80504790
JKRUnitHeap::do_getSize(void*)=0x805047A0
JKRUnitHeap::do_getFreeSize(void)=0x805047F0
JKRUnitHeap::do_getMaxFreeBlock(void)=0x80504830
JKRUnitHeap::do_getTotalFreeSize(void, _0)=0x80504870
JKRUnitHeap::indexToAddress(int)=0x80504880
JKRUnitHeap::addressToIndex(void*)=0x805048B0
JKRUnitHeap::isUnitUsed(int) const=0x80504900
JKRUnitHeap::setUnitUsed(int)=0x80504950
JKRUnitHeap::check(void)=0x805049A0
JKRUnitHeap::dump(void)=0x80504A70
JKRUnitHeap::state_register(JKRHeap::TState*, unsigned long) const=0x80504B20
JKRUnitHeap::state_compare(const JKRHeap::TState&, const JKRHeap::TState&) const=0x80504BA0
JKRUnitHeap::getHeapType(void)=0x80504BD0
JKRDisposer::__ct(void)=0x80504BE0
JKRDisposer::__dt(void)=0x80504C40
JKRThread::__ct(unsigned long, int, int)=0x80504CD0
JKRThread::TLoad::__ct(void)=0x80504D70
JKRThread::TLoad::clear(void)=0x80504DB0
JKRThread::__ct(JKRHeap*, unsigned long, int, int)=0x80504DD0
JKRThread::__dt(void)=0x80504E70
JKRThread::setCommon_mesgQueue(JKRHeap*, int)=0x80504F50
JKRThread::setCommon_heapSpecified(JKRHeap*, unsigned long, int)=0x80504FC0
JKRThread::run(void)=0x80505060
JKRThread::searchThread(OSThread*)=0x80505070
JUtility::TColor::__as(const JUtility::TColor&)=0x80505130
JUtility::TColor::__ct(unsigned char, unsigned char, unsigned char, unsigned char)=0x80505160
short::(nit_\JKRThread_cpp)=0x80505180
JSUList<JKRThread>::__ct(bool)=0x805051F0
JSUList<JKRThread>::__dt(void)=0x80505220
JSUList<JKRTask>::__ct(void)=0x80505280
JSUList<JKRTask>::__dt(void)=0x805052B0
JKRAram::create(unsigned long, unsigned long, long, long, long)=0x80505310
JKRAram::__dt(void)=0x805053B0
JKRAram::run(void)=0x80505450
JKRAram::checkOkAddress(unsigned char*, unsigned long, JKRAramBlock*, unsigned long)=0x805054B0
JKRAram::changeGroupIdIfNeed(unsigned char*, int)=0x80505550
JKRAram::mainRamToAram(unsigned char*, unsigned long, unsigned long, JKRExpandSwitch, unsigned long, JKRHeap*, int, unsigned long*)=0x805055B0
JKRAram::decideAramGroupId(int)=0x80505840
JKRAram::aramToMainRam(unsigned long, unsigned char*, unsigned long, JKRExpandSwitch, unsigned long, JKRHeap*, int, unsigned long*)=0x80505860
short::(nit_\JKRAram_cpp)=0x80505F80
JSUList<JKRAMCommand>::__ct(void)=0x80505FD0
JSUList<JKRAMCommand>::__dt(void)=0x80506000
JKRAramHeap::__ct(unsigned long, unsigned long)=0x80506060
JKRAramHeap::__dt(void)=0x80506130
JSUListIterator<JKRAramBlock>::__pp(int)=0x805061E0
JKRAramHeap::alloc(unsigned long, JKRAramHeap::EAllocMode)=0x80506200
JKRAramHeap::allocFromHead(unsigned long)=0x80506280
JKRAramHeap::allocFromTail(unsigned long)=0x805062F0
short::(nit_\JKRAramHeap_cpp)=0x80506350
JSUList<JKRAramBlock>::__ct(void)=0x805063A0
JSUList<JKRAramBlock>::__dt(void)=0x805063D0
JKRAramBlock::__ct(unsigned long, unsigned long, unsigned long, unsigned char, bool)=0x80506430
JKRAramBlock::__dt(void)=0x805064B0
JKRAramBlock::allocHead(unsigned long, unsigned char, JKRAramHeap*)=0x80506570
JKRAramBlock::allocTail(unsigned long, unsigned char, JKRAramHeap*)=0x80506610
JKRAramPiece::prepareCommand(int, unsigned long, unsigned long, unsigned long, JKRAramBlock*, void(unsigned long))=0x805066C0
JKRAramPiece::sendCommand(JKRAMCommand*)=0x80506740
JKRAramPiece::orderAsync(int, unsigned long, unsigned long, unsigned long, JKRAramBlock*, void(unsigned long))=0x80506750
JKRAramPiece::sync(JKRAMCommand*, int)=0x80506890
JKRAramPiece::orderSync(int, unsigned long, unsigned long, unsigned long, JKRAramBlock*)=0x80506950
JKRAramPiece::startDMA(JKRAMCommand*)=0x805069E0
JKRAramPiece::doneDMA(unsigned long)=0x80506A50
JKRAMCommand::__ct(void)=0x80506AB0
JKRAMCommand::__dt(void)=0x80506B20
short::(nit_\JKRAramPiece_cpp)=0x80506BD0
JKRAramStream::create(long)=0x80506C20
JKRAramStream::__ct(long)=0x80506C90
JKRAramStream::__dt(void)=0x80506CE0
JKRAramStream::run(void)=0x80506D40
JKRAramStream::writeToAram(JKRAramStreamCommand*)=0x80506D90
JKRAramStream::write_StreamToAram_Async(JSUFileInputStream*, unsigned long, unsigned long, unsigned long, unsigned long*)=0x80506F90
JKRAramStream::sync(JKRAramStreamCommand*, int)=0x80507070
JKRAramStream::setTransBuffer(unsigned char*, unsigned long, JKRHeap*)=0x80507110
JKRFileLoader::__ct(void)=0x80507170
JKRFileLoader::__dt(void)=0x805071D0
JKRFileLoader::unmount(void)=0x80507250
JKRFileLoader::getGlbResource(const char*, JKRFileLoader*)=0x80507290
JKRFileLoader::initializeVolumeList(void)=0x80507330
JKRFileLoader::prependVolumeList(JSULink<JKRFileLoader>*)=0x80507340
JKRFileLoader::removeVolumeList(JSULink<JKRFileLoader>*)=0x805073A0
short::(nit_\JKRFileLoader_cpp)=0x80507400
JSUList<JKRFileLoader>::__ct(void)=0x80507450
JSUList<JKRFileLoader>::__dt(void)=0x80507480
JKRArcFinder::__ct(JKRArchive*, long, long)=0x805074E0
JKRFileFinder::__ct(void)=0x80507570
JKRArcFinder::findNextFile(void)=0x80507590
JKRArcFinder::__dt(void)=0x80507630
JKRArchive::check_mount_already(long)=0x80507670
JKRArchive::check_mount_already(long, JKRHeap*)=0x805076D0
JKRArchive::mount(const char*, JKRArchive::EMountMode, JKRHeap*, JKRArchive::EMountDirection)=0x80507740
JKRArchive::mount(long, JKRArchive::EMountMode, JKRHeap*, JKRArchive::EMountDirection)=0x805077A0
JKRArchive::becomeCurrent(const char*)=0x805078E0
JKRArchive::getDirEntry(JKRArchive::SDirEntry*, unsigned long) const=0x80507970
JKRArchive::getResource(const char*)=0x805079F0
JKRArchive::getResource(unsigned long, const char*)=0x80507A70
JKRArchive::getIdxResource(unsigned long)=0x80507AF0
JKRArchive::getResource(unsigned short)=0x80507B50
JKRArchive::readResource(void*, unsigned long, unsigned long, const char*)=0x80507BB0
JKRArchive::readResource(void*, unsigned long, const char*)=0x80507C60
JKRArchive::readResource(void*, unsigned long, unsigned short)=0x80507D00
JKRArchive::removeResourceAll(void)=0x80507D80
JKRArchive::removeResource(void*)=0x80507E10
JKRArchive::detachResource(void*)=0x80507E70
JKRArchive::getResSize(const void*) const=0x80507EB0
JKRArchive::countResource(void) const=0x80507EF0
JKRArchive::countFile(const char*) const=0x80507F40
JKRArchive::getFirstFile(const char*) const=0x80507FA0
JKRArchive::getFileAttribute(unsigned long) const=0x80508050
JKRArchive::__ct(void)=0x80508090
JKRArchive::__ct(long, JKRArchive::EMountMode)=0x805080E0
JKRArchive::__dt(void)=0x80508180
JKRArchive::findResType(unsigned long) const=0x805081E0
JKRArchive::findDirectory(const char*, unsigned long) const=0x80508220
JKRArchive::findTypeResource(unsigned long, const char*) const=0x80508300
JKRArchive::findFsResource(const char*, unsigned long) const=0x805083C0
JKRArchive::findIdxResource(unsigned long) const=0x805084B0
JKRArchive::findNameResource(const char*) const=0x805084E0
JKRArchive::findPtrResource(const void*) const=0x80508570
JKRArchive::findIdResource(unsigned short) const=0x805085B0
JKRArchive::CArcName::store(const char*)=0x80508630
JKRArchive::CArcName::store(const char*, char)=0x80508690
JKRArchive::setExpandSize(JKRArchive::SDIFileEntry*, unsigned long)=0x80508710
JKRArchive::getExpandSize(JKRArchive::SDIFileEntry*) const=0x80508750
JKRMemArchive::__ct(void)=0x80508790
JKRMemArchive::__ct(long, JKRArchive::EMountDirection)=0x805087D0
JKRMemArchive::__dt(void)=0x80508880
JKRMemArchive::fixedInit(long)=0x80508930
JKRMemArchive::mountFixed(void*, JKRMemBreakFlag)=0x80508970
JKRMemArchive::open(long, JKRArchive::EMountDirection)=0x80508A40
JKRMemArchive::open(void*, unsigned long, JKRMemBreakFlag)=0x80508B90
JKRMemArchive::fetchResource(JKRArchive::SDIFileEntry*, unsigned long*)=0x80508C30
JKRMemArchive::fetchResource(void*, unsigned long, JKRArchive::SDIFileEntry*, unsigned long*)=0x80508C70
JKRMemArchive::removeResourceAll(void)=0x80508D30
JKRMemArchive::removeResource(void*)=0x80508D80
JKRMemArchive::fetchResource_subroutine(unsigned char*, unsigned long, unsigned char*, unsigned long, int)=0x80508DC0
JKRMemArchive::getExpandedResSize(const void*) const=0x80508E90
JKRAramArchive::__ct(long, JKRArchive::EMountDirection)=0x80508F10
JKRAramArchive::__dt(void)=0x80508FC0
JKRFile::__dt(void)=0x80509100
JKRAramArchive::open(long)=0x80509160
JKRAramArchive::fetchResource(JKRArchive::SDIFileEntry*, unsigned long*)=0x80509480
JKRAramArchive::fetchResource(void*, unsigned long, JKRArchive::SDIFileEntry*, unsigned long*)=0x805095A0
JKRAramArchive::fetchResource_subroutine(unsigned long, unsigned long, unsigned char*, unsigned long, int)=0x80509690
JKRAramArchive::fetchResource_subroutine(unsigned long, unsigned long, JKRHeap*, int, unsigned char*)=0x80509750
JKRAramArchive::getExpandedResSize(const void*) const=0x80509890
JKRDvdArchive::__ct(long, JKRArchive::EMountDirection)=0x805099B0
JKRDvdArchive::__dt(void)=0x80509A60
JKRDvdArchive::open(long)=0x80509B80
JKRDvdArchive::fetchResource(JKRArchive::SDIFileEntry*, unsigned long*)=0x80509E00
JKRDvdArchive::fetchResource(void*, unsigned long, JKRArchive::SDIFileEntry*, unsigned long*)=0x80509F00
JKRDvdArchive::fetchResource_subroutine(long, unsigned long, unsigned long, unsigned char*, unsigned long, int, int)=0x80509FF0
JKRDvdArchive::fetchResource_subroutine(long, unsigned long, unsigned long, JKRHeap*, int, int, unsigned char*)=0x8050A1E0
JKRDvdArchive::getExpandedResSize(const void*) const=0x8050A3E0
JKRCompArchive::__ct(long, JKRArchive::EMountDirection)=0x8050A510
JKRCompArchive::__dt(void)=0x8050A5C0
JKRCompArchive::open(long)=0x8050A700
JKRCompArchive::fetchResource(JKRArchive::SDIFileEntry*, unsigned long*)=0x8050AC40
JKRCompArchive::fetchResource(void*, unsigned long, JKRArchive::SDIFileEntry*, unsigned long*)=0x8050ADC0
JKRCompArchive::removeResourceAll(void)=0x8050AF50
JKRCompArchive::removeResource(void*)=0x8050AFF0
JKRCompArchive::getExpandedResSize(const void*) const=0x8050B060
JKRDvdFile::__ct(void)=0x8050B200
JKRFile::__ct(void)=0x8050B250
JKRDvdFile::__ct(long)=0x8050B2A0
JKRDvdFile::__dt(void)=0x8050B320
JKRDvdFile::initiate(void)=0x8050B3B0
JKRDvdFile::open(const char*)=0x8050B420
JKRDvdFile::open(long)=0x8050B490
JKRDvdFile::close(void)=0x8050B500
JKRDvdFile::readData(void*, long, long)=0x8050B580
JKRDvdFile::writeData(const void*, long, long)=0x8050B640
JKRDvdFile::sync(void)=0x8050B650
JKRDvdFile::doneProcess(long, DVDFileInfo*)=0x8050B6B0
short::(nit_\JKRDvdFile_cpp)=0x8050B6E0
JSUList<JKRDvdFile>::__ct(void)=0x8050B730
JSUList<JKRDvdFile>::__dt(void)=0x8050B760
JKRDvdRipper::loadToMainRAM(const char*, unsigned char*, JKRExpandSwitch, unsigned long, JKRHeap*, JKRDvdRipper::EAllocDirection, unsigned long, int*, unsigned long*)=0x8050B7C0
JKRDvdRipper::loadToMainRAM(long, unsigned char*, JKRExpandSwitch, unsigned long, JKRHeap*, JKRDvdRipper::EAllocDirection, unsigned long, int*, unsigned long*)=0x8050B880
JKRDvdRipper::loadToMainRAM(JKRDvdFile*, unsigned char*, JKRExpandSwitch, unsigned long, JKRHeap*, JKRDvdRipper::EAllocDirection, unsigned long, int*, unsigned long*)=0x8050B940
short::(nit_\JKRDvdRipper_cpp)=0x8050C330
JSUList<JKRDMCommand>::__ct(void)=0x8050C380
JSUList<JKRDMCommand>::__dt(void)=0x8050C3B0
JKRDvdAramRipper::loadToAram(long, unsigned long, JKRExpandSwitch, unsigned long, unsigned long, unsigned long*)=0x8050C410
JKRDvdAramRipper::loadToAram(JKRDvdFile*, unsigned long, JKRExpandSwitch, unsigned long, unsigned long, unsigned long*)=0x8050C4C0
JKRDvdAramRipper::loadToAram_Async(JKRDvdFile*, unsigned long, JKRExpandSwitch, void(unsigned long), unsigned long, unsigned long, unsigned long*)=0x8050C570
JKRDvdAramRipper::callCommand_Async(JKRADCommand*)=0x8050C630
JSUFileInputStream::__dt(void)=0x8050C990
JKRDvdAramRipper::syncAram(JKRADCommand*, int)=0x8050C9F0
JKRADCommand::__ct(void)=0x8050CAD0
JKRADCommand::__dt(void)=0x8050CB10
short::(nit_\JKRDvdAramRipper_cpp)=0x8050D0F0
JSUList<JKRADCommand>::__ct(void)=0x8050D140
JSUList<JKRADCommand>::__dt(void)=0x8050D170
JKRDecomp::create(long)=0x8050D1D0
JKRDecomp::__ct(long)=0x8050D230
JKRDecomp::__dt(void)=0x8050D280
JKRDecomp::run(void)=0x8050D2E0
JKRDecomp::prepareCommand(unsigned char*, unsigned char*, unsigned long, unsigned long, void(unsigned long))=0x8050D3A0
JKRDecomp::sendCommand(JKRDecompCommand*)=0x8050D410
JKRDecomp::sync(JKRDecompCommand*, int)=0x8050D430
JKRDecomp::orderSync(unsigned char*, unsigned char*, unsigned long, unsigned long)=0x8050D490
JKRDecomp::decode(unsigned char*, unsigned char*, unsigned long, unsigned long)=0x8050D500
JKRDecomp::decodeSZP(unsigned char*, unsigned char*, unsigned long, unsigned long)=0x8050D580
JKRDecomp::decodeSZS(unsigned char*, unsigned char*, unsigned long, unsigned long)=0x8050D730
JKRDecomp::checkCompressed(unsigned char*)=0x8050D820
JKRDecompCommand::__ct(void)=0x8050D8A0
JSUPtrLink::__ct(void*)=0x8050D8F0
JSUPtrLink::__dt(void)=0x8050D910
JSUPtrList::__ct(bool)=0x8050D980
JSUPtrList::__dt(void)=0x8050D9C0
JSUPtrList::initiate(void)=0x8050DA30
JSUPtrList::setFirst(JSUPtrLink*)=0x8050DA50
JSUPtrList::append(JSUPtrLink*)=0x8050DA80
JSUPtrList::prepend(JSUPtrLink*)=0x8050DB30
JSUPtrList::insert(JSUPtrLink*, JSUPtrLink*)=0x8050DBE0
JSUPtrList::remove(JSUPtrLink*)=0x8050DCB0
JSUInputStream::read(void*, long)=0x8050DD60
JSUIosBase::setState(JSUIosBase::EIoState)=0x8050DDC0
JSUInputStream::skip(long)=0x8050DDE0
JSURandomInputStream::skip(long)=0x8050DE60
JSURandomInputStream::seek(long, JSUStreamSeekFrom)=0x8050DED0
JSUOutputStream::write(const void*, long)=0x8050DF20
JSUOutputStream::skip(long, Sc)=0x8050DF80
JSURandomOutputStream::seek(long, JSUStreamSeekFrom)=0x8050E010
JSURandomOutputStream::getAvailable(void) const=0x8050E060
JSUMemoryInputStream::setBuffer(const void*, long)=0x8050E0C0
JSUMemoryInputStream::readData(void*, long)=0x8050E0E0
JSUMemoryInputStream::seekPos(long, JSUStreamSeekFrom)=0x8050E160
JSUMemoryOutputStream::setBuffer(void*, long)=0x8050E1E0
JSUMemoryOutputStream::writeData(const void*, long)=0x8050E200
JSUMemoryOutputStream::seekPos(long, JSUStreamSeekFrom)=0x8050E280
JSUMemoryOutputStream::getLength(void) const=0x8050E300
JSUMemoryInputStream::getPosition(void) const=0x8050E310
JSUMemoryInputStream::getLength(void) const=0x8050E320
JSUFileInputStream::__ct(JKRFile*)=0x8050E330
JSUFileInputStream::readData(void*, long)=0x8050E350
JSUFileInputStream::seekPos(long, JSUStreamSeekFrom)=0x8050E430
JSUFileInputStream::getPosition(void) const=0x8050E510
JSUFileInputStream::getLength(void) const=0x8050E520
JGadget::getHashCode(const char*)=0x8050E540
JGadget::TNodeLinkList::__dt(void)=0x8050E580
JGadget::TNodeLinkList::splice(JGadget::TNodeLinkList::iterator, JGadget::TNodeLinkList&, JGadget::TNodeLinkList::iterator)=0x8050E5E0
JGadget::TNodeLinkList::Insert(JGadget::TNodeLinkList::iterator, JGadget::TLinkListNode*)=0x8050E670
JGadget::TNodeLinkList::Erase(JGadget::TLinkListNode*)=0x8050E6A0
JGadget::TNodeLinkList::Remove(JGadget::TLinkListNode*)=0x8050E6D0
JUTTexture::__ct(int, int, _GXTexFmt)=0x8050E770
JUTTexture::__dt(void)=0x8050E870
JUTTexture::storeTIMG(const ResTIMG*, unsigned char)=0x8050E8F0
JUTTexture::setEmbPaletteDelFlag(bool)=0x8050EA70
JUTTexture::storeTIMG(const ResTIMG*, JUTPalette*)=0x8050EA90
JUTTexture::storeTIMG(const ResTIMG*, JUTPalette*, _GXTlut)=0x8050EAB0
JUTTexture::attachPalette(JUTPalette*)=0x8050EBC0
JUTTexture::init(void)=0x8050EC00
JUTTexture::initTexObj(void)=0x8050EC30
JUTTexture::initTexObj(_GXTlut)=0x8050ED30
JUTTexture::load(_GXTexMapID)=0x8050EE30
JUTTexture::capture(int, int, _GXTexFmt, bool, unsigned char)=0x8050EE90
JUTPalette::storeTLUT(_GXTlut, ResTLUT*)=0x8050EF50
JUTPalette::storeTLUT(_GXTlut, _GXTlutFmt, JUTTransparency, unsigned short, void*)=0x8050EFE0
JUTPalette::load(void)=0x8050F010
JUTNameTab::__ct(void)=0x8050F050
JUTNameTab::__ct(const ResNTAB*)=0x8050F090
JUTNameTab::setResource(const ResNTAB*)=0x8050F0D0
JUTNameTab::getIndex(const char*) const=0x8050F110
JUTNameTab::getName(unsigned short) const=0x8050F1B0
JUTNameTab::calcKeyCode(const char*) const=0x8050F1E0
JUTNameTab::__dt(void)=0x8050F210
JUTFont::setCharColor(JUtility::TColor)=0x8050F250
JUTFont::drawString_size_scale(float, float, float, float, const char*, unsigned long, bool)=0x8050F2B0
JUTException::__ct(JUTDirectPrint*)=0x8050F3D0
JUTException::create(JUTDirectPrint*)=0x8050F4B0
JUTException::run(void)=0x8050F520
JUTException::errorHandler(unsigned short, OSContext*, unsigned long, unsigned long)=0x8050F640
JUTException::panic_f_va(const char*, int, const char*, __va_list_struct*)=0x8050F730
JUTException::panic_f(const char*, int, const char*, e)=0x8050F860
JUTException::showFloatSub(int, float)=0x8050F8F0
JUTException::showFloat(OSContext*)=0x8050F9F0
JUTException::searchPartialModule(unsigned long, unsigned long*, unsigned long*, unsigned long*, unsigned long*)=0x8050FB00
JUTException::showStack(OSContext*)=0x8050FBC0
JUTException::showMainInfo(unsigned short, OSContext*, unsigned long, unsigned long)=0x8050FCB0
JUTException::showGPR(OSContext*)=0x8050FEF0
JUTException::showMapInfo_subroutine(unsigned long, bool)=0x8050FFA0
JUTException::showGPRMap(OSContext*)=0x80510150
JUTException::showSRR0Map(OSContext*)=0x80510250
JUTException::printDebugInfo(JUTException::EInfoPage, unsigned short, OSContext*, unsigned long, unsigned long)=0x80510310
JUTException::isEnablePad(void) const=0x805103C0
JUTException::printContext(unsigned short, OSContext*, unsigned long, unsigned long)=0x80510400
JUTException::waitTime(long)=0x805108A0
JUTException::createFB(void)=0x80510930
JUTException::setPreUserCallback(void(unsigned short, OSContext*, unsigned long, unsigned long))=0x80510A10
JUTException::queryMapAddress(char*, unsigned long, long, unsigned long*, unsigned long*, char*, unsigned long, bool, bool)=0x80510A20
JUTException::createConsole(void*, unsigned long)=0x80510B00
JUTExternalFB::__ct(_GXRenderModeObj*, _GXGamma, void*, unsigned long)=0x80510BE0
JUTException::__dt(void)=0x80510C00
short::(nit_\JUTException_cpp)=0x80510C60
JSUList<JUTException::JUTExMapFile>::__ct(bool)=0x80510CB0
JSUList<JUTException::JUTExMapFile>::__dt(void)=0x80510CE0
JUTDirectPrint::start(void)=0x80510D40
JUTDirectPrint::erase(int, int, int, int)=0x80510DC0
JUTDirectPrint::drawChar(int, int, int)=0x80510E60
JUTDirectPrint::changeFrameBuffer(void*, unsigned short, unsigned short)=0x805110B0
JUTDirectPrint::printSub(unsigned short, unsigned short, const char*, __va_list_struct*, bool)=0x805110E0
JUTDirectPrint::drawString(unsigned short, unsigned short, char*)=0x80511210
JUTDirectPrint::drawString_f(unsigned short, unsigned short, const char*, e)=0x80511220
JUTDirectPrint::setCharColor(JUtility::TColor)=0x805112B0
JUTDirectPrint::setCharColor(unsigned char, unsigned char, unsigned char)=0x805112D0
JUTAssertion::create(void)=0x80511450
JUTAssertion::flush_subroutine(void)=0x80511460
JUTAssertion::flushMessage(void)=0x805114A0
JUTAssertion::flushMessage_dbPrint(void)=0x80511560
JUTAssertion::changeDisplayTime(unsigned long)=0x80511730
JUTAssertion::changeDevice(unsigned long)=0x80511740
JUTAssertion::setVisible(bool)=0x80511750
JUTVideo::createManager(const _GXRenderModeObj*)=0x80511760
JUTVideo::destroyManager(void)=0x805117C0
JUTVideo::__ct(const _GXRenderModeObj*)=0x80511810
JUTVideo::__dt(void)=0x80511900
JUTVideo::preRetraceProc(unsigned long)=0x80511970
JUTXfb::getDisplayingXfb(void) const=0x80511B30
JUTVideo::drawDoneStart(void)=0x80511B50
JUTVideo::dummyNoDrawWait(void)=0x80511B60
JUTVideo::drawDoneCallback(void)=0x80511B70
JUTXfb::getDrawnXfb(void) const=0x80511BF0
JUTVideo::postRetraceProc(unsigned long)=0x80511C10
JUTVideo::setRenderMode(const _GXRenderModeObj*)=0x80511C60
JUTVideo::waitRetraceIfNeed(void)=0x80511CE0
JUTXfb::clearIndex(void)=0x80511CF0
JUTXfb::__dt(void)=0x80511D10
JUTXfb::delXfb(int)=0x80511D90
JUTXfb::createManager(void*, void*, void*)=0x80511DC0
JUTXfb::destroyManager(void)=0x80511E50
JUTXfb::initiate(void*, void*, void*, JUTXfb::EXfbNumber)=0x80511E80
JUTConsole::create(unsigned int, void*, unsigned long)=0x80511EC0
JUTConsole::__ct(unsigned int, unsigned int, bool)=0x80511F40
JUTConsole::__dt(void)=0x80512050
JUTConsole::getLineFromObjectSize(unsigned long, unsigned int)=0x805120D0
JUTConsole::clear(void)=0x805120E0
JUTConsole::getLinePtr(int) const=0x80512140
JUTConsole::doDraw(JUTConsole::EConsoleType) const=0x80512160
JUTFont::drawString_scale(float, float, float, float, const char*, bool)=0x80512620
JUTConsole::print_f(const char*, e)=0x80512700
JUTConsole::print(const char*)=0x805127C0
JUTConsole::scroll(int)=0x80512A80
JUTConsole::getUsedLine(void) const=0x80512B60
JUTConsole::getLineOffset(void) const=0x80512B90
JUTConsoleManager::__ct(void)=0x80512BC0
JUTConsoleManager::createManager(JKRHeap*)=0x80512BE0
JUTConsoleManager::appendConsole(JUTConsole*)=0x80512C30
JGadget::TLinkList<JUTConsole,-24>::end(void)=0x80512C90
JUTConsoleManager::removeConsole(JUTConsole*)=0x80512CA0
JGadget::TLinkList<JUTConsole,-24>::begin(void)=0x80512D60
JUTConsoleManager::draw(void) const=0x80512D70
JUTConsoleManager::drawDirect(bool) const=0x80512DF0
JUTConsoleManager::setDirectConsole(JUTConsole*)=0x80512E70
J2DGrafContext::setColor(JUtility::TColor)=0x80513040
JGeometry::TBox2<float>::__ct(const JGeometry::TBox2<float>&)=0x80513090
J2DGrafContext::__ct(float, float, float, float)=0x805130C0
J2DGrafContext::setPort(void)=0x805131B0
J2DGrafContext::setup2D(void)=0x80513260
J2DGrafContext::setScissor(void)=0x80513440
JGeometry::TVec2<float>::setMax(const JGeometry::TVec2<float>&)=0x80513620
JGeometry::TVec2<float>::setMin(const JGeometry::TVec2<float>&)=0x80513660
JGeometry::TBox<JGeometry::TVec2<float>>::isValid(void) const=0x805136A0
JGeometry::TBox2<float>::__as(const JGeometry::TBox2<float>&)=0x805136E0
J2DGrafContext::place(const JGeometry::TBox2<float>&)=0x80513710
J2DGrafContext::setColor(JUtility::TColor, JUtility::TColor, JUtility::TColor, JUtility::TColor)=0x80513760
J2DGrafContext::fillBox(const JGeometry::TBox2<float>&)=0x80513860
J2DGrafContext::setLookat(void)=0x80513980
J2DGrafContext::getGrafType(void) const=0x80513990
J2DOrthoGraph::__ct(void)=0x805139A0
JGeometry::TBox2<float>::set(float, float, float, float)=0x80513A00
J2DOrthoGraph::__ct(float, float, float, float, float, float)=0x80513A20
J2DOrthoGraph::setPort(void)=0x80513B00
J2DOrthoGraph::setOrtho(const JGeometry::TBox2<float>&, float, float)=0x80513B60
J2DOrthoGraph::setLookat(void)=0x80513BC0
JUTTexture::__ct(void)=0x80513C60
JUTTexture::setCaptureFlag(bool)=0x80513CA0
J2DPane::__ct(void)=0x80513CC0
J2DPane::calcMtx(void)=0x80513D70
J2DPane::makeMatrix(float, float)=0x80513DA0
JSUTree<J2DPane>::__ct(J2DPane*)=0x80513DC0
JSUTree<J2DPane>::__dt(void)=0x80513E10
J2DPane::initiate(void)=0x80513E90
JGeometry::TBox2<float>::set(const JGeometry::TBox<JGeometry::TVec2<float>>&)=0x80513F00
J2DPane::changeUseTrans(J2DPane*)=0x80513F30
JGeometry::TBox<JGeometry::TVec2<float>>::addPos(const JGeometry::TVec2<float>&)=0x805140D0
J2DPane::__dt(void)=0x80514110
J2DPane::rewriteAlpha(void)=0x805141D0
J2DPane::drawSelf(float, float, A3_A4_f)=0x805141E0
JSUTreeIterator<J2DPane>::__pp(void)=0x805141F0
J2DPane::place(const JGeometry::TBox2<float>&)=0x80514210
J2DPane::move(float, float)=0x80514450
J2DPane::add(float, float)=0x805144B0
J2DPane::resize(float, float)=0x805144E0
J2DPane::search(x)=0x805145C0
J2DPane::searchUserInfo(x)=0x80514670
J2DPane::isUsed(const ResTIMG*)=0x80514720
J2DPane::isUsed(const ResFONT*)=0x805147B0
J2DPane::makeMatrix(float, float, float, float)=0x80514840
J2DPane::setCullBack(_GXCullMode)=0x80514980
J2DPane::setAlpha(unsigned char)=0x80514A00
J2DPane::getFirstChildPane(void)=0x80514A10
J2DPane::getNextChildPane(void)=0x80514A50
J2DPane::getParentPane(void)=0x80514A90
J2DPane::J2DCast_F32_to_S16(float, unsigned char)=0x80514AB0
J2DPane::setAnimation(J2DAnmBase*)=0x80514B70
J2DPane::setAnimation(J2DAnmColor*)=0x80514C30
J2DPane::setAnimation(J2DAnmVtxColor*)=0x80514C40
J2DPane::setAnimation(J2DAnmTextureSRTKey*)=0x80514C50
J2DPane::setAnimation(J2DAnmTexPattern*)=0x80514C60
J2DPane::setAnimation(J2DAnmVisibilityFull*)=0x80514C70
J2DPane::setAnimation(J2DAnmTevRegKey*)=0x80514C80
J2DPane::setAnimation(J2DAnmTransform*, _0)=0x80514C90
J2DPane::clearAnmTransform(void)=0x80514CA0
J2DPane::animationTransform(const J2DAnmTransform*)=0x80514D20
J2DPane::setVisibileAnimation(J2DAnmVisibilityFull*)=0x80514DC0
J2DPane::setAnimationVF(J2DAnmVisibilityFull*, _2)=0x80514E50
J2DPane::setVtxColorAnimation(J2DAnmVtxColor*)=0x80514E60
J2DPane::setAnimationVC(J2DAnmVtxColor*, _0)=0x80514EF0
J2DPane::animationPane(const J2DAnmTransform*)=0x80514F00
J2DPane::updateTransform(const J2DAnmTransform*)=0x80514FA0
J2DPane::drawSelf(float, float)=0x805150A0
J2DPane::update(void)=0x805150B0
J2DPane::setConnectParent(bool)=0x805150C0
J2DPane::setCullBack(bool)=0x805150D0
J2DPane::getTypeID(void) const=0x805150F0
short::(nit_\J2DPane_cpp)=0x80515100
J2DScreen::getNameResource(const char*)=0x80515120
J2DPicture::append(const ResTIMG*, float)=0x80515170
J2DPicture::insert(const ResTIMG*, unsigned char, float)=0x80515190
J2DPicture::append(const char*, float)=0x805151B0
J2DPicture::insert(const char*, unsigned char, float)=0x805151D0
J2DPicture::__ct(JUTTexture*)=0x805151F0
J2DPicture::append(JUTTexture*, float)=0x805152D0
J2DPicture::setBlendRatio(float, float, float, float, float, float, float, float)=0x805152F0
J2DPicture::setCornerColor(JUtility::TColor, JUtility::TColor, JUtility::TColor, JUtility::TColor)=0x80515390
J2DPicture::initiate(const ResTIMG*, const ResTLUT*)=0x80515400
J2DPicture::private_initiate(const ResTIMG*, const ResTLUT*)=0x805154A0
J2DPicture::initinfo(void)=0x805155D0
J2DPicture::__dt(void)=0x805156B0
J2DPicture::prepareTexture(unsigned char)=0x80515760
J2DPicture::insert(const ResTIMG*, JUTPalette*, unsigned char, float)=0x80515830
J2DPicture::insert(const char*, JUTPalette*, unsigned char, float)=0x80515B80
J2DPicture::insert(JUTTexture*, unsigned char, float)=0x80515BF0
J2DPicture::remove(unsigned char)=0x80515DD0
J2DPicture::remove(JUTTexture*)=0x80515EF0
J2DPicture::changeTexture(const ResTIMG*, unsigned char)=0x80515F40
J2DPicture::getTexture(unsigned char) const=0x80516030
J2DPicture::changeTexture(const char*, unsigned char)=0x80516050
J2DPicture::changeTexture(const ResTIMG*, unsigned char, JUTPalette*)=0x805160B0
J2DPicture::append(const ResTIMG*, JUTPalette*, float)=0x805161C0
J2DPicture::changeTexture(const char*, unsigned char, JUTPalette*)=0x805161E0
J2DPicture::drawSelf(float, float)=0x80516240
J2DPicture::drawSelf(float, float, A3_A4_f)=0x805162B0
J2DPicture::drawFullSet(float, float, float, float, A3_A4_f)=0x80516310
J2DPicture::draw(float, float, float, float, bool, bool, bool)=0x80516390
J2DPicture::load(unsigned char)=0x805166B0
J2DPicture::load(_GXTexMapID, unsigned char)=0x805166D0
J2DPicture::drawOut(const JGeometry::TBox2<float>&, const JGeometry::TBox2<float>&)=0x80516720
J2DPicture::drawTexCoord(float, float, float, float, short, short, short, short, short, short, short, short, A3_A4_f)=0x80516B10
J2DPicture::setTevMode(void)=0x80516D60
J2DPicture::swap(float&, float&, _0)=0x805171E0
J2DPicture::setBlendColorRatio(float, float, float, float, float, float, float, float)=0x80517200
J2DPicture::setBlendAlphaRatio(float, float, float, float, float, float, float, float)=0x80517220
J2DPicture::setBlendKonstColor(void)=0x80517240
J2DPicture::setBlendKonstAlpha(void)=0x80517310
J2DPicture::getNewColor(JUtility::TColor*)=0x805173E0
J2DPicture::setTexCoord(JGeometry::TVec2<short>*, const JUTTexture*, J2DBinding, J2DMirror, bool)=0x805174A0
J2DPicture::isUsed(const ResTIMG*)=0x805177A0
J2DPicture::getUsableTlut(unsigned char)=0x805177F0
J2DPicture::getTlutID(const ResTIMG*, unsigned char)=0x805178C0
J2DPicture::rewriteAlpha(void)=0x805178F0
J2DPicture::isUsed(const ResFONT*)=0x80517900
J2DPicture::getMaterial(void) const=0x80517910
J2DPicture::getWhite(void) const=0x80517920
J2DPicture::getBlack(void) const=0x80517930
J2DPicture::setBlackWhite(JUtility::TColor, JUtility::TColor)=0x80517940
J2DPicture::setWhite(JUtility::TColor)=0x80517990
J2DPicture::setBlack(JUtility::TColor)=0x805179C0
J2DPicture::getTextureCount(void) const=0x805179F0
J2DPicture::drawOut(float, float, float, float, float, float)=0x80517A00
J2DPicture::drawOut(float, float, float, float, float, float, float, float)=0x80517B20
J2DPicture::draw(float, float, bool, bool, bool)=0x80517BF0
J2DPicture::remove(void)=0x80517C20
J2DPicture::prepend(const ResTIMG*, float)=0x80517C40
J2DPicture::prepend(const ResTIMG*, JUTPalette*, float)=0x80517C60
J2DPicture::prepend(const char*, float)=0x80517C80
J2DPicture::prepend(const char*, JUTPalette*, float)=0x80517CA0
J2DPicture::prepend(JUTTexture*, float)=0x80517CC0
J2DPicture::append(const char*, JUTPalette*, float)=0x80517CE0
J2DPicture::getTypeID(void) const=0x80517D00
J2DDataManage::get(const char*)=0x80517D10
J3DSys::__ct(void)=0x80519670
J3DSys::drawInit(void)=0x80519960
short::(nit_\J3DSys_cpp)=0x8051A740
J3DVertexData::__ct(void)=0x8051A750
J3DVertexBuffer::init(void)=0x8051A840
J3DDisplayListObj::setSingleDisplayList(void*, unsigned long)=0x8051B520
J3DDisplayListObj::swapBuffer(void)=0x8051B540
J3DDisplayListObj::callDL(void) const=0x8051B560
J3DPacket::addChildPacket(J3DPacket*)=0x8051B690
J3DMatPacket::addShapePacket(J3DShapePacket*)=0x8051B910
J3DMatPacket::isSame(J3DMatPacket*) const=0x8051B950
J3DShapePacket::prepareDraw(void) const=0x8051BD00
J3DShapePacket::drawFast(void)=0x8051BEE0
J3DModelData::getDrawMtxIndex(unsigned short) const=0x8051CC40
J3DShapeMtxYBBoardConcatView::getType(void) const=0x8051D4A0
J3DShapeMtxBBoardConcatView::getType(void) const=0x8051D590
J3DShapeMtxMultiConcatView::getType(void) const=0x8051D630
J3DShapeMtxConcatView::getType(void) const=0x8051D6A0
J3DShapeMtxMulti::getType(void) const=0x8051D6D0
J3DShapeMtx::getType(void) const=0x8051D720
J3DShapeDraw::countVertex(unsigned long)=0x8051D730
J3DShape::isSameVcdVatCmd(J3DShape*)=0x8051DD40
J3DCurrentMtx::load(void) const=0x8051E0A0
J3DShape::loadPreDrawSetting(void) const=0x8051E100
J3DMaterial::calcSizeTevBlock(int)=0x8051F1D0
J3DMaterial::calcSizeIndBlock(int)=0x8051F220
J3DMaterial::calcSizePEBlock(unsigned long, unsigned long)=0x8051F240
J3DMaterial::initialize(void)=0x8051F2B0
BinaryDataContentHeaderSerializer::getHeaderSize(void, _1) const=0x8051F908
J3DMaterial::setCurrentMtx(void)=0x8051F930
J3DCurrentMtx::setCurrentTexMtx(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)=0x8051FBC0
J3DMaterial::copy(J3DMaterial*)=0x8051FC00
J3DMaterial::change(void)=0x8051FD20
J3DIndBlockNull::getType(void)=0x805201C0
J3DTexGenBlock4::initialize(void)=0x805205D0
J3DTevBlock1::initialize(void)=0x80520790
J3DPEBlockFogOff::initialize(void)=0x80520B10
J3DPEBlockFull::initialize(void)=0x80520B40
J3DColorBlockLightOff::countDLSize(void)=0x80520B70
J3DColorBlockAmbientOn::countDLSize(void)=0x80520B80
J3DColorBlockLightOn::countDLSize(void)=0x80520B90
J3DTexGenBlockPatched::countDLSize(void)=0x80520BA0
J3DTexGenBlock4::countDLSize(void)=0x80520BB0
J3DTexGenBlockBasic::countDLSize(void)=0x80520BC0
J3DTevBlockPatched::countDLSize(void)=0x80520BD0
J3DTevBlock1::countDLSize(void)=0x80520BE0
J3DTevBlock2::countDLSize(void)=0x80520BF0
J3DTevBlock4::countDLSize(void)=0x80520C00
J3DTevBlock16::countDLSize(void)=0x80520C10
J3DIndBlockFull::countDLSize(void)=0x80520C20
J3DColorBlockLightOff::diff(unsigned long)=0x80521390
J3DColorBlockLightOn::diff(unsigned long)=0x805214B0
J3DTexGenBlockPatched::diff(unsigned long)=0x80521920
J3DTevBlock::diff(unsigned long)=0x80522E60
J3DPEBlockFull::diff(unsigned long)=0x805244C0
J3DTevStage::__as(J3DTevStage&)=0x80524D80
J3DAlphaComp::__as(J3DAlphaComp&)=0x80525980
J3DTexCoord::resetTexMtxReg(void)=0x80525C70
J3DPEBlockFull::setFogOffset(unsigned long)=0x805260A0
J3DPEBlockFull::getFogOffset(void, _0) const=0x805260B0
J3DPEBlockFull::getDither(void) const=0x805260C0
J3DPEBlockFull::setDither(const unsigned char*)=0x805260D0
J3DPEBlockFull::setDither(unsigned char)=0x805260E0
J3DPEBlockFull::getZCompLoc(void) const=0x805260F0
J3DPEBlockFull::setZCompLoc(const unsigned char*)=0x80526100
J3DPEBlockFull::setZCompLoc(unsigned char)=0x80526110
J3DPEBlockFull::getBlend(void, _0)=0x80526150
J3DPEBlockFull::getAlphaComp(void, _1)=0x80526180
J3DAlphaComp::__as(const J3DAlphaComp&)=0x805261A0
J3DPEBlockFull::getType(void)=0x80526200
J3DPEBlockFogOff::getDither(void) const=0x80526250
J3DPEBlockFogOff::setDither(const unsigned char*)=0x80526260
J3DPEBlockFogOff::setDither(unsigned char)=0x80526270
J3DPEBlockFogOff::getZCompLoc(void) const=0x80526280
J3DPEBlockFogOff::setZCompLoc(const unsigned char*)=0x80526290
J3DPEBlockFogOff::setZCompLoc(unsigned char)=0x805262A0
J3DPEBlockFogOff::getType(void)=0x80526340
J3DPEBlockFogOff::diff(unsigned long)=0x80526350
J3DPEBlockXlu::getType(void)=0x805263B0
J3DPEBlockTexEdge::getType(void)=0x80526400
J3DPEBlockOpa::getType(void)=0x80526450
J3DIndBlockFull::getIndTexCoordScale(unsigned long)=0x805264E0
J3DIndBlockFull::getIndTexMtx(unsigned long)=0x80526530
J3DIndBlockFull::getIndTexOrder(unsigned long)=0x80526580
J3DIndBlockFull::getType(void)=0x805265F0
J3DTevBlock16::setTevRegOffset(unsigned long)=0x80526650
J3DTevBlock16::getTevRegOffset(void) const=0x80526660
J3DTevBlock16::getIndTevStage(unsigned long)=0x80526680
J3DTevBlock16::getTevSwapModeTable(unsigned long)=0x805266D0
J3DTevStage::setTevSwapModeInfo(const J3DTevSwapModeInfo&)=0x80526720
J3DTevBlock16::getTevStage(unsigned long)=0x80526770
J3DTevStage::__as(const J3DTevStage&)=0x805267A0
J3DTevBlock16::setTevStageNum(const unsigned char*)=0x80526810
J3DTevBlock16::setTevStageNum(unsigned char)=0x80526820
J3DTevBlock16::getTevKAlphaSel(unsigned long)=0x80526830
J3DTevBlock16::setTevKAlphaSel(unsigned long, unsigned char)=0x80526850
J3DTevBlock16::getTevKColorSel(unsigned long)=0x80526860
J3DTevBlock16::setTevKColorSel(unsigned long, unsigned char)=0x80526880
J3DTevBlock16::getTevKColor(unsigned long)=0x80526890
J3DTevBlock16::getTevColor(unsigned long)=0x805268E0
J3DTevBlock16::getType(void)=0x805269C0
J3DTevBlock4::getIndTevStage(unsigned long)=0x80526A50
J3DTevBlock4::getTevSwapModeTable(unsigned long)=0x80526AA0
J3DTevBlock4::getTevStage(unsigned long)=0x80526B10
J3DTevBlock4::setTevStageNum(const unsigned char*)=0x80526B70
J3DTevBlock4::setTevStageNum(unsigned char)=0x80526B80
J3DTevBlock4::getTevKAlphaSel(unsigned long)=0x80526B90
J3DTevBlock4::setTevKAlphaSel(unsigned long, unsigned char)=0x80526BB0
J3DTevBlock4::getTevKColorSel(unsigned long)=0x80526BC0
J3DTevBlock4::setTevKColorSel(unsigned long, unsigned char)=0x80526BE0
J3DTevBlock4::getTevKColor(unsigned long)=0x80526BF0
J3DTevBlock4::getTevColor(unsigned long)=0x80526C40
J3DTevBlock4::getTevOrder(unsigned long)=0x80526C90
J3DTevBlock4::getType(void)=0x80526D20
J3DTevBlock2::setTevRegOffset(unsigned long, _0)=0x80526D90
J3DTevBlock2::getTevRegOffset(void) const=0x80526DA0
J3DTevBlock2::getIndTevStage(unsigned long)=0x80526DC0
J3DTevBlock2::getTevSwapModeTable(unsigned long)=0x80526E10
J3DTevBlock2::getTevStage(unsigned long)=0x80526E80
J3DTevBlock2::getTevStageNum(void) const=0x80526ED0
J3DTevBlock2::setTevStageNum(const unsigned char*)=0x80526EE0
J3DTevBlock2::setTevStageNum(unsigned char)=0x80526EF0
J3DTevBlock2::getTevKAlphaSel(unsigned long)=0x80526F00
J3DTevBlock2::setTevKAlphaSel(unsigned long, unsigned char)=0x80526F20
J3DTevBlock2::getTevKColorSel(unsigned long)=0x80526F30
J3DTevBlock2::setTevKColorSel(unsigned long, unsigned char)=0x80526F50
J3DTevBlock2::getTevKColor(unsigned long)=0x80526F60
J3DTevBlock2::getTevColor(unsigned long)=0x80526FB0
J3DTevBlock2::getType(void)=0x80527090
J3DTevBlock1::getTevStage(unsigned long)=0x80527220
J3DTevBlock1::getTevOrder(unsigned long)=0x805272A0
J3DTevBlock1::getType(void)=0x80527330
J3DTevBlockPatched::getTevKColorSel(unsigned long)=0x805273D0
J3DTevBlockPatched::setTevKColorSel(unsigned long, unsigned char)=0x805273F0
J3DTevBlockPatched::getTevKColor(unsigned long)=0x80527400
J3DTevBlockPatched::getTevColor(unsigned long)=0x80527450
J3DTevBlockPatched::getIndTevStage(unsigned long)=0x805274A0
J3DTevBlockPatched::getTevStage(unsigned long)=0x805274F0
J3DTevBlockPatched::getTevStageNum(void) const=0x805275D0
J3DTevBlockPatched::setTevStageNum(const unsigned char*)=0x805275E0
J3DTevBlockPatched::setTevStageNum(unsigned char)=0x805275F0
J3DTevBlockPatched::getType(void)=0x80527600
J3DTexGenBlockPatched::setTexMtxOffset(unsigned long, _0)=0x80527710
J3DTexGenBlockPatched::getTexMtx(unsigned long)=0x80527730
J3DTexGenBlockPatched::setTexMtx(unsigned long, J3DTexMtx*)=0x80527740
J3DTexGenBlockPatched::getTexCoord(unsigned long)=0x80527750
J3DTexGenBlockPatched::setTexGenNum(const unsigned long*)=0x80527790
J3DTexGenBlockBasic::getType(void)=0x80527840
J3DTexGenBlock4::getType(void)=0x805278E0
J3DTexGenBlockPatched::getType(void)=0x805278F0
J3DColorBlockLightOn::setColorChanOffset(unsigned long, _0)=0x80527950
J3DColorBlockLightOn::getColorChanOffset(void, _0) const=0x80527970
J3DColorBlockLightOn::setCullMode(const unsigned char*)=0x805279A0
J3DColorBlockLightOn::setCullMode(unsigned char)=0x805279B0
J3DColorBlockLightOn::getLight(unsigned long)=0x805279C0
J3DColorBlockLightOn::setLight(unsigned long, J3DLightObj*)=0x805279D0
J3DColorBlockLightOn::getColorChan(unsigned long)=0x805279E0
J3DColorBlockLightOn::setColorChanNum(const unsigned char*)=0x80527A50
J3DColorBlockLightOn::getType(void)=0x80527B00
J3DColorBlockLightOff::getCullMode(void) const=0x80527B50
J3DColorBlockLightOff::setCullMode(const unsigned char*)=0x80527B60
J3DColorBlockLightOff::setCullMode(unsigned char)=0x80527B70
J3DColorBlockLightOff::getColorChan(unsigned long)=0x80527B80
J3DColorBlockLightOff::getColorChanNum(void, _0) const=0x80527BD0
J3DColorBlockLightOff::setColorChanNum(const unsigned char*)=0x80527BF0
J3DColorBlockAmbientOn::getAmbColor(unsigned long)=0x80527CB0
J3DColorBlockAmbientOn::getType(void)=0x80527D00
J3DColorBlockLightOff::getType(void)=0x80527D10
short::(nit_\J3DMatBlock_cpp)=0x80527D20
J3DTexMtx::calcPostTexMtx(A4_Cf)=0x80528510
J3DDrawBuffer::initialize(void)=0x80528C50
J3DDrawBuffer::calcZRatio(void)=0x80528C80
J3DDrawBuffer::allocBuffer(unsigned long)=0x80528CC0
J3DDrawBuffer::frameInit(void)=0x80528D20
J3DDrawBuffer::draw(void) const=0x80529180
J3DDrawBuffer::drawHead(void) const=0x805291E0
J3DTexMtxInfo::setEffectMtx(A4_f)=0x80529360
J3DIndTexMtxInfo::__as(const J3DIndTexMtxInfo&)=0x805293B0
J3DFogInfo::__as(const J3DFogInfo&)=0x805293E0
J3DJointTree::findImportantMtxIndex(void)=0x805297B0
J3DModelData::clear(void)=0x80529950
J3DModelData::__ct(void)=0x80529970
J3DMtxBuffer::initialize(void)=0x80529C70
J3DMtxBuffer::calcDrawMtx(unsigned long, const Vec&, A3_A4_Cf)=0x8052A430
J3DMtxBuffer::getNrmMtx(int)=0x8052A7D0
J3DModel::initialize(void)=0x8052AA00
J3DModel::entryModelData(J3DModelData*, unsigned long, unsigned long)=0x8052AA90
J3DModel::lock(void)=0x8052AEA0
J3DModel::unlock(void)=0x8052AEE0
J3DModel::calcMaterial(void)=0x8052AFC0
J3DModel::calcDiffTexMtx(void)=0x8052B130
J3DModel::update(void)=0x8052B320
J3DModel::calc(void)=0x8052B370
J3DModel::entry(void)=0x8052B4D0
J3DModel::viewCalc(void)=0x8052B5D0
J3DModel::getNrmMtxPtr(void)=0x8052B800
J3DModel::calcBumpMtx(void)=0x8052B820
J3DModel::getBumpMtxPtr(int)=0x8052B920
J3DModel::calcBBoardMtx(void)=0x8052B940
J3DModel::prepareShapePackets(void)=0x8052B960
J3DFrameCtrl::init(short)=0x8052BA10
J3DFrameCtrl::update(void)=0x8052BF80
J3DAnmColor::searchUpdateMaterialID(J3DModelData*)=0x8052E2F0
J3DAnmVisibilityFull::getVisibility(unsigned short, unsigned char*) const=0x8052E9E0
J3DAnmTexPattern::searchUpdateMaterialID(J3DModelData*)=0x8052EB10
J3DAnmTextureSRTKey::searchUpdateMaterialID(J3DMaterialTable*)=0x8052EB20
J3DAnmTextureSRTKey::searchUpdateMaterialID(J3DModelData*)=0x8052EC40
J3DAnmTevRegKey::searchUpdateMaterialID(J3DModelData*)=0x8052F2D0
J3DAnmTevRegKey::getKind(void, _1) const=0x8052F330
J3DAnmColorFull::getKind(void) const=0x8052F3F0
J3DAnmVtxColorKey::getKind(void) const=0x8052F480
J3DAnmVtxColorFull::getKind(void) const=0x8052F4F0
J3DAnmVtxColor::getKind(void) const=0x8052F570
J3DAnmClusterKey::getKind(void) const=0x8052F580
J3DAnmTextureSRTKey::getKind(void, _0) const=0x8052F6A0
J3DMaterialAnm::initialize(void)=0x8052F820
J3DMaterialAnm::setMatColorAnm(int, J3DMatColorAnm*)=0x8052FAB0
J3DMaterialAnm::setTexMtxAnm(int, J3DTexMtxAnm*)=0x8052FAF0
J3DMaterialAnm::setTexNoAnm(int, J3DTexNoAnm*)=0x8052FB30
J3DMaterialAnm::setTevColorAnm(int, J3DTevColorAnm*)=0x8052FB70
J3DMaterialAnm::setTevKColorAnm(int, J3DTevKColorAnm*)=0x8052FBB0
J3DSkinDeform::deform(J3DModel*)=0x8052FBF0
J3DVtxColorCalc::calc(J3DModel*)=0x8052FC60
J3DMtxCalcJ3DSysInitMaya::init(const Vec&, A3_A4_Cf)=0x80530730
J3DJoint::appendChild(J3DJoint*)=0x80530BD0
J3DMaterialTable::clear(void)=0x80530FB0
J3DMaterialTable::removeMatColorAnimator(J3DAnmColor*)=0x80531060
J3DMaterial::getMaterialAnm(void)=0x80531100
J3DMaterialTable::removeTexNoAnimator(J3DAnmTexPattern*)=0x80531120
J3DMaterialTable::removeTexMtxAnimator(J3DAnmTextureSRTKey*)=0x805311D0
J3DMaterialTable::removeTevRegAnimator(J3DAnmTevRegKey*)=0x805312A0
J3DMaterialTable::entryMatColorAnimator(J3DAnmColor*)=0x80531500
J3DMaterialTable::entryTexNoAnimator(J3DAnmTexPattern*)=0x805315C0
J3DMaterialTable::entryTexMtxAnimator(J3DAnmTextureSRTKey*)=0x805316A0
J3DMaterialTable::entryTevRegAnimator(J3DAnmTevRegKey*)=0x80531850
J3DMaterialFactory::__ct(const J3DMaterialBlock&)=0x805319A0
J3DMaterialFactory::countUniqueMaterials(void)=0x80531D90
J3DMaterialFactory::countStages(int) const=0x80531E20
J3DMaterialFactory::getMaterialMode(int) const=0x80532850
J3DTevStage::setTexSel(unsigned char)=0x80532870
J3DTevStage::setRasSel(unsigned char)=0x80532890
J3DMaterialFactory::calcSizeLockedMaterial(J3DMaterial*, int, unsigned long) const=0x805339D0
J3DMaterialFactory::newColorChanNum(int) const=0x80533A40
J3DMaterialFactory::newCullMode(int) const=0x80533D90
J3DMaterialFactory::newTexNo(int, int) const=0x80533DD0
J3DMaterialFactory::newTevStageNum(int) const=0x80533F40
J3DTevSwapModeTable::__ct(const J3DTevSwapModeTableInfo&)=0x805340C0
J3DMaterialFactory::newIndTexStageNum(int) const=0x805340F0
J3DMaterialFactory::newZCompLoc(int) const=0x805344B0
J3DMaterialFactory::newDither(int) const=0x805344F0
J3DPEBlockNull::getType(void)=0x80534650
J3DTevBlockNull::getType(void)=0x805346B0
J3DTexGenBlockNull::getType(void)=0x80534730
J3DColorBlockNull::getType(void)=0x80534810
J3DMaterialFactory_v21::__ct(const J3DMaterialBlock_v21&)=0x80534820
J3DMaterialFactory_v21::countUniqueMaterials(void)=0x80534B10
J3DMaterialFactory_v21::countStages(int) const=0x80534B70
J3DMaterialFactory_v21::getMaterialMode(int) const=0x80535320
J3DMaterialFactory_v21::newColorChanNum(int) const=0x80535390
J3DMaterialFactory_v21::newCullMode(int) const=0x805355E0
J3DMaterialFactory_v21::newTexNo(int, int) const=0x80535620
J3DMaterialFactory_v21::newTevStageNum(int) const=0x80535790
J3DMaterialFactory_v21::newZCompLoc(int) const=0x80535AF0
J3DMaterialFactory_v21::newDither(int) const=0x80535B30
J3DJoint::setMtxType(unsigned char)=0x80536780
J3DModelLoader::readVertex(const J3DVertexBlock*)=0x80536920
J3DModelLoader::countMaterialNum(const void*)=0x80537D70
J3DModelLoader::calcSizeJoint(const J3DJointBlock*)=0x80538240
J3DModelLoader::calcSizeDraw(const J3DDrawBlock*)=0x80538270
J3DModelLoader::calcSizeTexture(const J3DTextureBlock*)=0x80538430
J3DJointFactory::__ct(const J3DJointBlock&)=0x80538670
J3DShapeFactory::__ct(const J3DShapeBlock&)=0x80538800
J3DShapeFactory::getMtxGroupNum(int) const=0x80538A70
J3DShapeFactory::calcSizeVcdVatCmdBuffer(unsigned long)=0x80538E10
J3DAnmLoaderDataBase::load(const void*, J3DAnmLoaderDataBaseFlag)=0x80538EC0
J3DAnmTransformKey::getKind(void, _1) const=0x8053A750
JMath::TRandom_fast_::__ct(unsigned long)=0x8053AA40
short::(nit_\JMATrigonometric_cpp)=0x8053ABB0
JMath::TSinCosTable<14,float>::__ct(void)=0x8053ABF0
JMath::TAtanTable<1024,float>::__ct(void)=0x8053AD00
JMath::TAsinAcosTable<1024,float>::__ct(void)=0x8053ADC0
JPAResourceManager::__ct(const void*, JKRHeap*)=0x8053AE80
JPAResourceManager::swapTexture(const ResTIMG*, const char*)=0x8053AEE0
JPAResourceManager::registRes(JPAResource*)=0x8053AF80
JPAResourceManager::registTex(JPATexture*)=0x8053AFA0
JPAResource::__ct(void)=0x8053AFC0
JPAResource::init(JKRHeap*)=0x8053B030
JPAResource::calc(JPAEmitterWorkData*, JPABaseEmitter*)=0x8053C540
JPAFieldBase::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x8053C820
JPAList<JPABaseParticle>::erase(JPANode<JPABaseParticle>*)=0x8053C830
JPAList<JPABaseParticle>::push_front(JPANode<JPABaseParticle>*)=0x8053C8E0
JPAResource::draw(JPAEmitterWorkData*, JPABaseEmitter*)=0x8053C930
JPAResource::drawP(JPAEmitterWorkData*)=0x8053CA10
JPAResource::drawC(JPAEmitterWorkData*)=0x8053CD40
JPAResource::setPTev(void)=0x8053D030
JPAResource::setCTev(JPAEmitterWorkData*)=0x8053D2D0
JPAResource::calc_p(JPAEmitterWorkData*, JPABaseParticle*)=0x8053D440
JPAResource::calc_c(JPAEmitterWorkData*, JPABaseParticle*)=0x8053D4C0
JPAResource::calcField(JPAEmitterWorkData*, JPABaseParticle*)=0x8053D540
JPAResource::calcKey(JPAEmitterWorkData*)=0x8053D5C0
JPAResource::calcWorkData_c(JPAEmitterWorkData*)=0x8053D710
JPAResource::calcWorkData_d(JPAEmitterWorkData*)=0x8053D8C0
JPAResourceManager::load(unsigned short, _GXTexMapID)=0x8053E820
JPABaseShape::__ct(const unsigned char*, JKRHeap*)=0x8053F7C0
JPABaseShape::setGX(JPAEmitterWorkData*) const=0x8053F8D0
float::(to, u8_1)=0x8053FDF0
JPAExtraShape::__ct(const unsigned char*)=0x8053FF40
JPAExtraShape::init(void)=0x8053FF80
JPAChildShape::__ct(const unsigned char*)=0x80540210
JPAExTexShape::__ct(const unsigned char*)=0x80540300
JPARandom::get_rndm_f(void)=0x805403D0
JPABaseEmitter::checkFlag(unsigned long) const=0x80540520
JPABaseEmitter::get_r_ss(void)=0x805406D0
JPABaseEmitter::get_r_zp(void)=0x80540B40
JPADynamicsBlock::__ct(const unsigned char*)=0x80540C80
JPADynamicsBlock::init(void)=0x80540CC0
JPADynamicsBlock::create(JPAEmitterWorkData*)=0x80540D80
JPAFieldBase::calcAffect(JPAFieldBlock*, JPABaseParticle*)=0x80540F70
JPAFieldBase::calcFadeAffect(JPAFieldBlock*, float) const=0x80541040
JPAFieldGravity::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x805410E0
JPAFieldGravity::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x80541160
JPAFieldAir::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x80541170
JPAFieldMagnet::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x805411F0
JPAFieldMagnet::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x80541250
JPAFieldNewton::prepare(JPAEmitterWorkData*, JPAFieldBlock*)=0x805412C0
JPAFieldNewton::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x80541330
JPAFieldConvection::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x805413D0
JPAFieldRandom::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x805414E0
JPABaseEmitter::get_r_zh(void)=0x805415C0
JPAFieldDrag::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x80541610
JPAFieldSpin::calc(JPAEmitterWorkData*, JPAFieldBlock*, JPABaseParticle*)=0x80541690
JPAFieldBlock::__ct(const unsigned char*, JKRHeap*)=0x80541770
JPAFieldBlock::init(JKRHeap*)=0x805417B0
JPAFieldDrag::__dt(void)=0x80541A40
JPAFieldRandom::__dt(void)=0x80541A80
JPAFieldNewton::__dt(void)=0x80541AC0
JPAFieldMagnet::__dt(void)=0x80541B00
JPAFieldGravity::__dt(void)=0x80541B40
JPAKeyBlock::__ct(const unsigned char*)=0x80541B80
JPAKeyBlock::calc(float)=0x80541B90
JPATexture::__ct(const unsigned char*)=0x80541C30
JPATexture::__dt(void)=0x80541C90
JPAResourceLoader::__ct(const unsigned char*, JPAResourceManager*)=0x80541CF0
JPAResourceLoader::load_jpc(const unsigned char*, JPAResourceManager*)=0x80541D30
JPAEmitterManager::__ct(unsigned long, unsigned long, JKRHeap*, unsigned char, unsigned char)=0x805420E0
JSUList<JPABaseEmitter>::__dt(void)=0x805422F0
JPAList<JPABaseParticle>::__ct(void)=0x80542350
JPABaseEmitter::__ct(void)=0x80542370
JPABaseEmitter::__dt(void)=0x805423C0
JSUList<JPABaseEmitter>::__ct(void)=0x80542420
JPANode<JPABaseParticle>::__ct(void)=0x80542450
JPANode<JPABaseParticle>::__dt(void)=0x80542460
JPAEmitterManager::createSimpleEmitterID(const JGeometry::TVec3<float>&, unsigned short, unsigned char, unsigned char, JPAEmitterCallBack*, JPAParticleCallBack*)=0x805424A0
JPAEmitterManager::calc(unsigned char)=0x80542590
JPAEmitterManager::draw(const JPADrawInfo*, unsigned char)=0x80542610
JPAEmitterManager::forceDeleteEmitter(JPABaseEmitter*)=0x80542810
JPAEmitterManager::entryResourceManager(JPAResourceManager*, unsigned char)=0x80542880
JPAEmitterCallBack::__dt(void)=0x80542890
JPABaseEmitter::createParticle(void)=0x805428D0
JPAList<JPABaseParticle>::pop_front(void)=0x80542960
JPABaseEmitter::createChild(JPABaseParticle*)=0x805429C0
JPABaseEmitter::deleteAllParticle(void)=0x80542A40
JPAList<JPABaseParticle>::pop_back(void)=0x80542AB0
JPABaseEmitter::processTillStartFrame(void)=0x80542B10
JPABaseEmitter::processTermination(void)=0x80542B50
JPABaseEmitter::calcEmitterGlobalPosition(JGeometry::TVec3<float>*) const=0x80542BF0
JPAParticleCallBack::__dt(void)=0x80542C70
JPABaseParticle::init_p(JPAEmitterWorkData*)=0x80542CB0
JPABaseParticle::init_c(JPAEmitterWorkData*, JPABaseParticle*)=0x80543240
JPABaseParticle::calc_p(JPAEmitterWorkData*)=0x805436E0
JPABaseParticle::calc_c(JPAEmitterWorkData*)=0x80543910
JPABaseParticle::canCreateChild(JPAEmitterWorkData*)=0x80543B10
void::(umpCode)=0x80550F00
int::(_strcpy)=0x8055B66C
int::(_strlen)=0x8055B69C
int::(_memcpy)=0x8055B6F0
int::(_memset)=0x8055B6F4
int::(_strcat)=0x8055B6F8
int::(_strncat)=0x8055B748
int::(_sprintf)=0x8055BD10
int::(_vsprintf)=0x8055BD9C
int::(float, _toupper)=0x80565720
int::(float, _memset)=0x80565870
int::(float, _strlen)=0x80565970
int::(LE16_TO_U16_STR())=0x80565A70
int::(float, _w_strlen)=0x80566100
int::(double, m_bpb_get_fsinfo_information)=0x80567340
int::(double, m_bpb_check_fsinfo_sector)=0x805675A0
int::(double, m_mbr_get_table)=0x8056A460
_N::(NDRead)=0x80582060
_N::(NDWrite)=0x80582410
int::(nanddrv_init_drv_tbl)=0x80583190
int::(InitSDWrok)=0x805834F0
JASCalc::imixcopy(const short*, const short*, short*, unsigned long)=0x80583500
JASCalc::bcopyfast(const void*, void*, unsigned long)=0x80583530
JASCalc::bcopy(const void*, void*, unsigned long)=0x80583570
JASCalc::bzerofast(void*, unsigned long)=0x80583650
JASCalc::bzero(void*, unsigned long)=0x80583680
JASCalc::pow2(float)=0x80583750
JASMemChunkPool<1024,JASThreadingModel::ObjectLevelLockable>::alloc(unsigned long)=0x80583AC0
JASMemChunkPool<1024,JASThreadingModel::ObjectLevelLockable>::MemoryChunk::__ct(JASMemChunkPool<1024,JASThreadingModel::ObjectLevelLockable>::MemoryChunk*, _2)=0x80583C10
JASTaskThread::sendCmdMsg(void(void*), const void*, unsigned long)=0x80583C90
JASHeap::__ct(JASDisposer*)=0x80584080
JASHeap::initRootHeap(void*, unsigned long)=0x805840F0
JASGenericMemPool::newMemPool(unsigned long, int)=0x80584970
JASGenericMemPool::alloc(unsigned long)=0x805849F0
JASGenericMemPool::free(void*, unsigned long)=0x80584A40
JASKernel::getSystemHeap(void)=0x80584B60
JASKernel::getCommandHeap(void)=0x80584B70
JASKernel::setupAramHeap(unsigned long, unsigned long)=0x80584B80
short::(nit_\JASHeapCtrl_cpp)=0x80584C10
JASResArcLoader::getResSize(const JKRArchive*, unsigned short)=0x80584C60
JASResArcLoader::TLoadResInfo::__ct(JKRArchive*, unsigned short, void*, unsigned long)=0x80584D40
JASPortCmd::execAllCommand(void)=0x805850D0
JASPortCmd::TPortHead::execCommandOnce(void)=0x80585110
JASPortCmd::TPortHead::execCommandStay(void)=0x80585190
short::(nit_\JASCmdStack_cpp)=0x80585200
JASPortCmd::TPortHead::__ct(void)=0x80585270
JASPortCmd::TPortHead::__dt(void)=0x805852A0
JASTrack::__ct(void)=0x80585300
JGadget::TLinkListNode::__ct(void)=0x80585390
JASTrack::__dt(void)=0x805853A0
JASPoolAllocObject_MultiThreaded<JASTrack::TChannelMgr>::__dl(void*, unsigned long)=0x80585420
JASThreadingModel::InterruptsDisable<JASMemPool_MultiThreaded<JASTrack::TChannelMgr>>::Lock::__ct(const JASMemPool_MultiThreaded<JASTrack::TChannelMgr>&)=0x805854A0
JASTrack::setChannelMgrCount(unsigned long)=0x805855A0
JASPoolAllocObject_MultiThreaded<JASTrack::TChannelMgr>::__nw(unsigned long)=0x80585680
JASTrack::init(void)=0x805856F0
JASTrack::initTimed(void)=0x80585930
JASTrack::inherit(const JASTrack&)=0x80585980
JASTrack::assignExtBuffer(unsigned long, JASSoundParams*)=0x80585A30
JASTrack::setSeqData(void*, unsigned long)=0x80585A50
JASTrack::startSeq(void)=0x80585A60
JASCriticalSection::__ct(void)=0x80585AC0
JASTrack::start(void)=0x80585B50
JASTrack::close(void)=0x80585B60
JASTrack::connectChild(unsigned long, JASTrack*)=0x80585C30
JASTrack::connectBus(int, int)=0x80585E70
JASChannel::setKey(long)=0x80586150
JASChannel::setVelocity(unsigned long)=0x80586160
JASTrack::checkNoteStop(unsigned long) const=0x80586200
JASTrack::updateTempo(void)=0x805864D0
JASTrack::setParam(unsigned long, float, unsigned long)=0x805866E0
JASTrack::setOscScale(unsigned long, float)=0x805867C0
JASTrack::setOscTable(unsigned long, const JASOscillator::Point*)=0x805867D0
JASTrack::getTransposeTotal(void) const=0x80586A70
JASTrack::isMute(void) const=0x80586AD0
JASLfo::setDepth(float)=0x80586CB0
JASTrack::getRootTrack(void)=0x80586DF0
JASTrack::TList::append(JASTrack*)=0x80587020
JGadget::TNodeLinkList::end(void)=0x80587120
JGadget::TLinkList<JASTrack,-584>::Element_toNode(JASTrack*)=0x80587200
JGadget::TLinkList<JASTrack,-584>::Element_toValue(JGadget::TLinkListNode*)=0x80587510
JGadget::__eq(JGadget::TNodeLinkList::iterator, JGadget::TNodeLinkList::iterator)=0x805875F0
JASTrack::TChannelMgr::__ct(JASTrack*)=0x80587610
JASTrack::TChannelMgr::init(void)=0x805876D0
JASTrack::TChannelMgr::releaseAll(void)=0x80587780
short::(nit_\JASTrack_cpp)=0x80587920
JASDefaultBankTable::__ct(void)=0x80587A00
JASDefaultBankTable::__dt(void)=0x80587BD0
JASTrack::TList::__ct(void)=0x80587C30
JASTrack::TList::__dt(void)=0x80587D40
JASTrackPort::init(void)=0x80587DA0
JASTrackPort::checkImport(unsigned long) const=0x80587E90
JASTrackPort::checkExport(unsigned long) const=0x80587EB0
JASRegisterParam::__ct(void)=0x80587ED0
JASRegisterParam::init(void)=0x80587EF0
JASSeqCtrl::__ct(void)=0x80588110
JASSeqCtrl::init(void)=0x80588180
JASSeqCtrl::start(void*, unsigned long)=0x805881E0
JASSeqCtrl::retIntr(void)=0x805883A0
short::(nit_\JASSeqCtrl_cpp)=0x80588520
JASSeqParser::__ct(void)=0x80588530
JASSeqParser::cmdJmp(JASTrack*, unsigned long*)=0x80588B60
JASSeqParser::cmdJmpTable(JASTrack*, unsigned long*)=0x80588BE0
JASSeqParser::cmdNote(JASTrack*, unsigned long*)=0x80588CD0
JASSeqParser::cmdNoteOn(JASTrack*, unsigned long*)=0x80588D20
JASSeqParser::cmdNoteOff(JASTrack*, unsigned long*)=0x80588D60
JASSeqParser::cmdWaitByte(JASTrack*, unsigned long*)=0x805890A0
JASSeqParser::cmdSetIntTable(JASTrack*, unsigned long*)=0x80589220
JASSeqParser::cmdIntTimer(JASTrack*, unsigned long*)=0x80589300
JASSeqParser::cmdBankPrg(JASTrack*, unsigned long*)=0x805894D0
JASSeqParser::cmdBank(JASTrack*, unsigned long*)=0x805894F0
JASSeqParser::cmdPrg(JASTrack*, unsigned long*)=0x80589510
JASSeqParser::execNoteOnGate(JASTrack*, unsigned long, unsigned long, unsigned long, unsigned long)=0x80589D40
JASSeqParser::execNoteOnMidi(JASTrack*, unsigned long, unsigned long, unsigned long)=0x80589DF0
JASSeqParser::execNoteOff(JASTrack*, unsigned long)=0x80589E10
JASSeqParser::execCommand(JASTrack*, M12JASSeqParserFPCvPvP8JASTrackPUl_lUlPUl)=0x80589E20
JASSeqParser::parseNoteOff(JASTrack*, unsigned char)=0x80589E50
JASSeqParser::parseRegCommand(JASTrack*, int)=0x8058A0E0
JASSeqParser::parse(JASTrack*)=0x8058A140
short::(nit_\JASSeqParser_cpp)=0x8058A190
JASSeqReader::init(void)=0x8058A3F0
JASSeqReader::readMidiValue(void)=0x8058A5B0
JASSeqReader::getStackPtr(unsigned long) const=0x8058A620
JASAramStream::__ct(void)=0x8058A6E0
JASAramStream::init(unsigned long, unsigned long, void(unsigned long, JASAramStream*, void*), void*)=0x8058A7E0
JASAramStream::prepare(long, int)=0x8058A8A0
JASAramStream::pause(bool)=0x8058A9D0
JASAramStream::headerLoadTask(void*)=0x8058AA90
JASAramStream::channelProcCallback(void*)=0x8058B0B0
short::(nit_\JASAramStream_cpp)=0x8058BBC0
short::(nit_\JASBank_cpp)=0x8058BD60
JASBasicBank::getInst(int) const=0x8058BE90
JASVoiceBank::getType(void) const=0x8058BF50
JASBasicInst::TKeymap::__ct(void)=0x8058C290
JASBasicInst::appendEffect(JASPtrListAdaptor<JASInstEffect>*)=0x8058C2B0
JASBasicInst::getKeyRegion(int)=0x8058C2F0
JASBasicInst::getKeyRegion(int, _0)=0x8058C320
JASDrumSet::setPerc(int, JASDrumSet::TPerc*)=0x8058C670
JASDrumSet::TPerc::getVeloRegion(int)=0x8058C740
JASDrumSet::TPerc::getVeloRegion(int, _0)=0x8058C750
JASDrumSet::TPerc::appendEffect(JASPtrListAdaptor<JASInstEffect>*)=0x8058C760
JASDrumSet::getType(void) const=0x8058C7A0
JASBasicWaveBank::getWaveGroup(unsigned long)=0x8058C900
JASBasicWaveBank::getWaveHandle(unsigned long) const=0x8058CC00
JASBasicWaveBank::TWaveGroup::setWaveInfo(int, unsigned long, const JASWaveInfo&)=0x8058CEB0
JASSimpleWaveBank::getWaveHandle(unsigned long) const=0x8058D1A0
JASSimpleWaveBank::setWaveInfo(unsigned long, const JASWaveInfo&)=0x8058D1D0
JASSimpleWaveBank::getWaveArc(unsigned long)=0x8058D260
JASInstSense::setParams(int, int, float, float)=0x8058D4B0
JASWSParser::getGroupCount(const void*)=0x8058D610
JASWSParser::createWaveBank(const void*, JKRHeap*)=0x8058D630
JASBNKParser::createBank(const void*, JKRHeap*)=0x8058DBA0
JASBNKParser::Ver1::findChunk(const void*, unsigned long)=0x8058DC60
JASBNKParser::Ver0::getOscTableEndPtr(const JASOscillator::Point*)=0x8058EB30
JASWaveArcLoader::getCurrentDir(void)=0x8058EBD0
JASWaveArc::__ct(void)=0x8058EBE0
JASWaveArc::setEntryNum(long)=0x8058F070
JASChannel::release(unsigned short)=0x8058F380
JASChannel::setMixConfig(unsigned long, unsigned short)=0x8058F430
JASChannel::free(void)=0x80590360
short::(nit_\JASChannel_cpp)=0x80590490
JASLfo::__ct(void)=0x805904F0
short::(nit_\JASLfo_cpp)=0x80590650
JASOscillator::__ct(void)=0x80590660
JASOscillator::getValue(void) const=0x80590770
JASCalc::clamp<short,long>(long, _s)=0x805911E0
short::(nit_\JASAudioThread_cpp)=0x80591720
JASAudioReseter::__ct(void)=0x80591780
JASDSPChannel::__ct(void)=0x805919C0
JASDSPChannel::start(void)=0x80591A00
JASDsp::setFilterTable(short*, short*, unsigned long)=0x80592110
JASDsp::TChannel::playStop(void)=0x805923D0
JASDsp::TChannel::replyFinishRequest(void)=0x805923E0
JASDsp::TChannel::forceStop(void)=0x805923F0
JASDsp::TChannel::isFinish(void) const=0x80592400
JASDsp::TChannel::setOscInfo(unsigned long)=0x80592530
JASDsp::TChannel::initAutoMixer(void)=0x80592550
JASDsp::TChannel::setAutoMixer(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char)=0x80592580
JASDsp::TChannel::setPitch(unsigned short)=0x805925B0
JASDsp::TChannel::setMixerInitVolume(unsigned char, short)=0x805925D0
JASDsp::TChannel::setMixerVolume(unsigned char, short)=0x805925F0
JASDsp::TChannel::setFilterMode(unsigned short)=0x805926A0
JASDsp::TChannel::setDistFilter(short)=0x80592700
JASDriver::waitSubFrame(void)=0x805927C0
JASDriver::rejectCallback(long(void*), void*)=0x80592800
JASDriver::registerSubFrameCallback(long(void*), void*)=0x805928A0
short::(nit_\JASDriverIF_cpp)=0x805928F0
JASCallbackMgr::__ct(void, _0)=0x80592940
JASSoundParams::combine(const JASSoundParams&, const JASSoundParams&)=0x80592970
JASSoundParams::__ct(void)=0x80593700
JAISe::getTrack(void)=0x80593E40
JAISe::getChildTrack(int)=0x80593E50
JAISe::getTempoMgr(void)=0x80593E70
JAISeqDataRegion::intersects(const JAISeqData&) const=0x80593F70
JAISeMgr::__ct(bool)=0x805945C0
JAISoundParamsMove::init(void)=0x805946C0
JAISoundParamsTransition::TTransition::zero(void)=0x80594720
JAISeMgr::stop(void)=0x80594880
JAISeMgr::stopSoundID(JAISoundID)=0x80594940
JAISeMgr::initParams(void)=0x805949B0
JAISeMgr::setAudience(JAIAudience*)=0x80594A10
JAISeMgr::resetSeqDataMgr(void)=0x80594A90
JAISeMgr::calc(void)=0x80594BB0
JAISeMgr::mixOut(void)=0x80594C30
JAISeMgr::getNumActiveSe(void) const=0x80594E30
short::(nit_\JAISeMgr_cpp)=0x80594E60
JASMemPool<JAISe>::__ct(void)=0x80594EC0
JASMemPool<JAISe>::__dt(void)=0x80594EF0
JAISeq::getNumChild(void) const=0x80595910
JAISeq::getTrack(void, _0)=0x80595A40
JAISeq::getChildTrack(int)=0x80595A50
JAISeq::getTempoMgr(void)=0x80595AA0
short::(nit_\JAISeq_cpp)=0x80595AB0
JASMemPool<JAISoundChild>::__ct(void)=0x80595B50
JASMemPool<JAISoundChild>::__dt(void)=0x80595B80
JAISeqDataMgr::__dt(void)=0x80595C20
JAISeqMgr::__ct(bool)=0x80595D50
JAISeqMgr::calc(void)=0x80596040
JAISeqMgr::stop(void)=0x805960F0
JAISeqMgr::stopSoundID(JAISoundID)=0x80596180
JAISeqMgr::mixOut(void)=0x805961F0
short::(nit_\JAISeqMgr_cpp)=0x80596330
JASMemPool<JAISeq>::__ct(void)=0x80596390
JASMemPool<JAISeq>::__dt(void)=0x805963C0
JAISoundHandle::releaseSound(void)=0x80596420
JAISound::releaseHandle(void)=0x80596440
JAISound::attachHandle(JAISoundHandle*)=0x80596460
JAISoundStatus_::lockWhenPrepared(void)=0x805964D0
JAISoundStatus_::unlockIfLocked(void)=0x80596500
JAISoundParams::mixOutAll(const JASSoundParams&, JASSoundParams*, float)=0x80596540
JAISound::__ct(void)=0x805965C0
JAISound::stop(unsigned long)=0x80596710
JAISound::stop(void)=0x805967A0
JAISound::asSe(void)=0x805967E0
JAISound::asSeq(void)=0x805967F0
JAISound::asStream(void)=0x80596800
JAISoundChild::init(void)=0x805969A0
JAISoundChild::mixOut(JASTrack*)=0x80596A00
JAISoundChild::calc(void)=0x80596A40
JAISoundHandles::getHandleSoundID(JAISoundID)=0x80596AC0
JAISoundHandles::getHandleUserData(unsigned long)=0x80596B10
JAISoundHandles::setPos(const JGeometry::TVec3<float>&)=0x80596BA0
JAISoundInfo::__ct(bool)=0x80596C00
JASGlobalInstance<JAISoundInfo>::__dt(void)=0x80596C20
JAISoundInfo::__dt(void)=0x80596C80
JAISoundParamsMove::moveVolume(float, unsigned long)=0x80596CE0
JAISoundParamsTransition::TTransition::set(float, float, unsigned long)=0x80596D10
JAISoundParamsMove::movePitch(float, unsigned long)=0x80596D50
JAISoundParamsMove::moveFxMix(float, unsigned long)=0x80596D80
JAISoundStarter::__ct(bool)=0x80596DB0
JASGlobalInstance<JAISoundStarter>::__dt(void)=0x80596DD0
JAISoundStarter::__dt(void)=0x80596E30
JAISoundStarter::startLevelSound(JAISoundID, JAISoundHandle*, const JGeometry::TVec3<float>*)=0x80596E90
JAIStream::__ct(JAIStreamMgr*, JAISoundStrategyMgr<JAIStream>*)=0x80596FA0
JAIStream::getNumChild(void) const=0x805977A0
JAIStream::getChild(int)=0x805977B0
JAIStream::releaseChild(int)=0x80597830
JAIStream::getTrack(void)=0x80597880
JAIStream::getChildTrack(int)=0x80597890
JAIStream::asStream(void)=0x805978A0
JAIStream::getTempoMgr(void)=0x805978B0
short::(nit_\JAIStream_cpp)=0x805978C0
JAIStreamDataMgr::__dt(void)=0x80597920
JAIStreamAramMgr::__dt(void)=0x80597960
JAIStreamMgr::__ct(bool)=0x805979A0
JAIStreamMgr::startSound(JAISoundID, JAISoundHandle*, const JGeometry::TVec3<float>*)=0x80597A40
JAIStreamMgr::calc(void)=0x80597C30
JAIStreamMgr::stop(void)=0x80597CE0
JAIStreamMgr::stop(unsigned long)=0x80597D20
JAIStreamMgr::stopSoundID(JAISoundID)=0x80597D70
JAIStreamMgr::mixOut(void)=0x80597DD0
short::(nit_\JAIStreamMgr_cpp)=0x80597ED0
JASMemPool<JAIStream>::__ct(void)=0x80597F30
JASMemPool<JAIStream>::__dt(void)=0x80597F60
JAUAudience3DSetting::init(void)=0x80597FC0
short::(nit_\JAUAudience_cpp)=0x80598030
JASMemPool<JAUDopplerAudible<4>>::__ct(void)=0x805981A0
JASMemPool<JAUDopplerAudible<4>>::__dt(void)=0x805981D0
JASMemPool<JAUDopplerAudible<2>>::__ct(void)=0x80598230
JASMemPool<JAUDopplerAudible<2>>::__dt(void)=0x80598260
JASMemPool<JAUDopplerAudible<1>>::__ct(void)=0x805982C0
JASMemPool<JAUDopplerAudible<1>>::__dt(void)=0x805982F0
JASMemPool<JAUAudible<4>>::__ct(void)=0x80598350
JASMemPool<JAUAudible<4>>::__dt(void)=0x80598380
JASMemPool<JAUAudible<2>>::__ct(void)=0x805983E0
JASMemPool<JAUAudible<2>>::__dt(void)=0x80598410
JASMemPool<JAUAudible<1>>::__ct(void)=0x80598470
JASMemPool<JAUAudible<1>>::__dt(void)=0x805984A0
JAUAudioArcInterpreter::__ct(void)=0x80598500
JAUAudioArcInterpreter::__dt(void)=0x80598520
JAUAudioArcInterpreter::parse(const void*)=0x80598560
JAUAudioArcInterpreter::readCommandMore(unsigned long)=0x805985D0
JAUAudioArcLoader::__ct(JAUSection*)=0x805989A0
JAUAudioArcLoader::load(const void*)=0x805989F0
JAUAudioArcLoader::load(const char*)=0x80598A00
JAUAudioArcLoader::readWS(unsigned long, const void*, unsigned long)=0x80598A70
JAUAudioArcLoader::readBNK(unsigned long, const void*)=0x80598AD0
JAUAudioArcLoader::readBSC(const void*, unsigned long)=0x80598AF0
JAUAudioArcLoader::readBST(const void*, unsigned long)=0x80598B00
JAUAudioArcLoader::readBSTN(const void*, unsigned long)=0x80598B10
JAUAudioArcLoader::readBMS(unsigned long, const void*, unsigned long)=0x80598B20
JAUAudioArcLoader::readBMS_fromArchive(unsigned long)=0x80598B50
JAUAudioArcLoader::newVoiceBank(unsigned long, unsigned long)=0x80598B80
JAUAudioArcLoader::newDynamicSeqBlock(unsigned long)=0x80598BA0
JAUSection::asSectionHeap(void)=0x80598BE0
JAUAudioArcLoader::readBSFT(const void*)=0x80598C00
JAUAudioArcLoader::beginBNKList(unsigned long, unsigned long)=0x80598C10
JAUAudioArcLoader::endBNKList(void)=0x80598C20
JAUAudioArcLoader::readMaxSeCategory(int, int, int)=0x80598C30
JAUBankTable::getBank(unsigned long) const=0x80598C60
JAU_JASInitializer::__ct(void)=0x80598C90
JAU_JAIInitializer::__ct(void)=0x80598CF0
JAU_JAIInitializer::initJAInterface(void)=0x80598D20
short::(nit_\JAUInitializer_cpp)=0x80598DB0
JAUSection::TSectionData::__ct(void)=0x80598F20
std::bitset<255>::__ct(void)=0x80599080
JAUSection::TSectionData::resetRegisteredBankTables(void)=0x80599100
std::bitset<255>::reset(unsigned long)=0x80599150
JAUSection::TSectionData::resetRegisteredWaveBankTables(void)=0x805991D0
JAUSection::__ct(JAUSectionHeap*, unsigned long, long)=0x80599220
JAUSection::finishBuild(void)=0x80599350
@unnamed@JAUSectionHeap_cpp@::TPushCurrentHeap::__dt(void)=0x805993C0
std::bitset<255>::test(unsigned long) const=0x80599420
JAUSection::newSoundTable(const void*, unsigned long, bool)=0x805995F0
JAUSection::newSoundNameTable(const void*, unsigned long, bool)=0x805996C0
JAUSection::newStreamFileTable(const void*, bool)=0x80599790
JAUSection::newSeSeqCollection(const void*, unsigned long)=0x80599920
JAUSection::newStaticSeqData(JAISoundID, const void*, unsigned long)=0x80599B10
JAUSection::newStaticSeqData(JAISoundID)=0x80599B80
JAUSection::loadDVDFile(const char*, bool, JKRExpandSwitch)=0x80599C50
JAUSection::newCopy(const void*, unsigned long, long)=0x80599CF0
JAUSection::newWaveBank(unsigned long, const void*)=0x80599D60
std::bitset<255>::set(unsigned long, bool)=0x80599E40
JAUSection::loadWaveArc(unsigned long, unsigned long)=0x80599EE0
JAUSection::loadWaveArc(unsigned long)=0x80599FB0
JAUSection::newBank(const void*, unsigned long)=0x8059A080
JAUSection::newVoiceBank(unsigned long, unsigned long)=0x8059A190
JAUSection::beginNewBankTable(unsigned long, unsigned long)=0x8059A280
JAUSection::endNewBankTable(void)=0x8059A370
JAUSectionHeap::TSectionHeapData::__ct(void)=0x8059A3C0
JAUSectionHeap::setSeqDataArchive(JKRArchive*)=0x8059A430
JAUSectionHeap::__ct(JKRSolidHeap*, bool, long)=0x8059A560
JAUSection::__dt(void)=0x8059A610
JAUSectionHeap::getOpenSection(void)=0x8059A760
JAUSectionHeap::getSoundTable(void)=0x8059A770
JAUSectionHeap::setSeqDataUser(JAISeqDataUser*)=0x8059A780
JAUSectionHeap::newDynamicSeqBlock(unsigned long)=0x8059A790
JAUSectionHeap::newDynamicSeqBlocks(unsigned long, int)=0x8059A8D0
JAUSectionHeap::getSeqData(JAISoundID, JAISeqData*)=0x8059A940
JAUSectionHeap::releaseSeqData(void)=0x8059A9E0
JAUSectionHeap::isWaveLoaded(unsigned long, unsigned long)=0x8059A9F0
@unnamed@JAUSectionHeap_cpp@::TStreamDataMgr::getStreamFileEntry(JAISoundID)=0x8059AA60
JAUSeqCollection::init(const void*)=0x8059ABC0
JAUSeqCollection::getSeqData(int, int, JAISeqData*)=0x8059AC10
JAUSeqCollection::getSeqDataRegion(JAISeqDataRegion*)=0x8059AC70
JAUSeqDataMgr_SeqCollection::__ct(void)=0x8059ACA0
JAUSeqDataMgr_SeqCollection::setSeqDataUser(JAISeqDataUser*)=0x8059ACC0
JAUSeqDataMgr_SeqCollection::releaseSeqData(void)=0x8059ACD0
JAUSeqDataMgr_SeqCollection::getSeqData(JAISoundID, JAISeqData*)=0x8059AD30
JAUSeqDataMgr_SeqCollection::__dt(void)=0x8059AD90
JAUSeqDataBlock::__ct(void)=0x8059ADF0
JAUSeqDataBlocks::getSeqData(JAISoundID)=0x8059AE30
JAUSeqDataBlocks::seekFreeBlock(unsigned long)=0x8059AE80
JAUSeqDataBlocks::hasFailedBlock(JAISoundID)=0x8059AEE0
JAUDynamicSeqDataBlocks::__ct(void)=0x8059AF20
JAUSeqDataBlocks::__ct(void)=0x8059AF70
JAUDynamicSeqDataBlocks::setSeqDataArchive(JKRArchive*)=0x8059AFA0
JAUDynamicSeqDataBlocks::getSeqData(JAISoundID, JAISeqDataUser*, JAISeqData*, bool)=0x8059AFB0
JAUDynamicSeqDataBlocks::appendDynamicSeqDataBlock(JAUSeqDataBlock*)=0x8059B090
JAUDynamicSeqDataBlocks::loadDynamicSeq(JAISoundID, bool, JAISeqDataUser*)=0x8059B130
JAUSoundAnimation::getStartSoundIndex(float) const=0x8059B3F0
JAUSoundAnimation::getEndSoundIndex(float) const=0x8059B480
JAUSoundAnimator::__ct(JAISoundHandles*)=0x8059B500
JAUSoundAnimator::removeAnimation(void)=0x8059B520
JAUSoundAnimator::startAnimation(const JAUSoundAnimation*, bool, float, float)=0x8059B5E0
JAUSoundAnimationSound::isNoting(float) const=0x8059B8E0
JAUSoundAnimator::getFreeHandle(const JAUSoundAnimationSound*)=0x8059B940
JAUSoundAnimator::getSoundID(const JAUSoundAnimationSound*, const JGeometry::TVec3<float>&, float)=0x8059B980
JAUSoundAnimator::playsSound(const JAUSoundAnimationSound*, const JGeometry::TVec3<float>&, float)=0x8059B990
JAUSoundAnimator::modifySoundParams(JASSoundParams*, const JAUSoundAnimationSound*, float)=0x8059BA20
JAUSoundMgr::__ct(void)=0x8059BB20
JAUSoundMgr::startSound(JAISoundID, JAISoundHandle*, const JGeometry::TVec3<float>*)=0x8059BB90
JAUSoundMgr::setAudience(JAIAudience*)=0x8059BC80
JAUSoundMgr::calc(void)=0x8059BCD0
JAUSoundMgr::mixOut(void)=0x8059BD10
JAUSoundMgr::stopSoundID(JAISoundID)=0x8059BD50
JAUSoundMgr::stopSync(void)=0x8059BDC0
JAUSoundMgr::stop(unsigned long)=0x8059BE60
JAUSoundMgr::initParams(void)=0x8059BEC0
JAUSoundMgr::getNumActiveSounds(void) const=0x8059BF00
JAUSoundObject::__ct(JGeometry::TVec3<float>*, unsigned char, JKRHeap*)=0x8059BF50
JAISoundHandle::__ct(void)=0x8059BFF0
JAUSoundObject::__dt(void)=0x8059C000
JAUSoundObject::dispose(void)=0x8059C080
JAUSoundObject::stopOK(JAISoundHandle&)=0x8059C130
JAUSoundObject::process(void)=0x8059C140
JAUSoundObject::startSoundIndex(JAISoundID, unsigned char)=0x8059C160
JAISound::setLifeTime(unsigned long, bool)=0x8059C1E0
JAUSoundObject::startLevelSoundIndex(JAISoundID, unsigned char)=0x8059C220
JAUSoundObject::stopSound(JAISoundID, unsigned long)=0x8059C2F0
JAUSoundObject::getLowPrioSound(JAISoundID)=0x8059C340
JAUSoundObject::getFreeHandleNotReserved(void)=0x8059C430
JAUSoundTable::init(const void*)=0x8059C490
JAUSoundTable::getTypeID(JAISoundID) const=0x8059C4E0
JAUSoundTable_<JAUSoundTableRoot,JAUSoundTableSection,JAUSoundTableGroup,void>::getSection(int) const=0x8059C5A0
JAUSoundTable_<JAUSoundTableRoot,JAUSoundTableSection,JAUSoundTableGroup,void>::getGroup(const JAUSoundTableSection*, int) const=0x8059C5F0
JAUSoundTable::getData(JAISoundID) const=0x8059C660
JAUSoundTable_<JAUSoundNameTableRoot,JAUSoundNameTableSection,JAUSoundNameTableGroup,char>::getSection(int) const=0x8059C740
JAUSoundTable_<JAUSoundNameTableRoot,JAUSoundNameTableSection,JAUSoundNameTableGroup,char>::getGroup(const JAUSoundNameTableSection*, int) const=0x8059C790
JAUSoundTable_<JAUSoundNameTableRoot,JAUSoundNameTableSection,JAUSoundNameTableGroup,char>::getItem(const JAUSoundNameTableGroup*, int) const=0x8059C800
JAUSoundNameTable::init(const void*)=0x8059C900
JAUSoundNameTable::getName(JAISoundID) const=0x8059C950
JAUStdSoundInfo::getBgmSeqResourceID(JAISoundID) const=0x8059C9F0
JAUStdSoundInfo::getSoundType(JAISoundID) const=0x8059CA70
JAUStdSoundInfo::getCategory(JAISoundID) const=0x8059CAB0
JAUStdSoundInfo::getAudibleSw(JAISoundID) const=0x8059CAC0
JAUStdSoundInfo::getPriority(JAISoundID) const=0x8059CB40
JAUStdSoundInfo::getSeInfo(JAISoundID, JAISe*) const=0x8059CBB0
JAUStdSoundInfo::getSeqInfo(JAISoundID, JAISeq*) const=0x8059CBF0
JAUStdSoundInfo::getStreamInfo(JAISoundID, JAIStream*) const=0x8059CC20
JAUStdSoundInfo::getStreamFilePath(JAISoundID)=0x8059CE10
JAUStdSoundInfo::getStreamFileEntry(JAISoundID)=0x8059CE90
JAUStreamFileTable::__ct(void)=0x8059CEE0
JAUStreamFileTable::init(const void*)=0x8059CEF0
JAUStreamFileTable::getNumFiles(void) const=0x8059CF40
JAUStreamFileTable::getFilePath(int) const=0x8059CF50
JAUStreamDataMgr_StreamFileTable::getStreamFileEntry(JAISoundID)=0x8059CF80
JAUStreamDataMgr_StreamFileTable::__dt(void)=0x8059CFC0
nw4r::ut::List_Init(nw4r::ut::List*, unsigned short)=0x8059D460
nw4r::ut::List_Append(nw4r::ut::List*, void*)=0x8059D480
nw4r::ut::List_Remove(nw4r::ut::List*, void*)=0x8059D4F0
nw4r::ut::List_GetNext(const nw4r::ut::List*, const void*)=0x8059D560
nw4r::ut::detail::LinkListImpl::__dt(void)=0x8059D580
nw4r::ut::detail::LinkListImpl::Erase(nw4r::ut::detail::LinkListImpl::Iterator)=0x8059D610
nw4r::ut::detail::LinkListImpl::Insert(nw4r::ut::detail::LinkListImpl::Iterator, nw4r::ut::LinkListNode*)=0x8059D660
nw4r::ut::detail::LinkListImpl::Erase(nw4r::ut::LinkListNode*)=0x8059D690
nw4r::ut::IsValidBinaryFile(const nw4r::ut::BinaryFileHeader*, unsigned long, unsigned short, unsigned short)=0x8059D6C0
nw4r::ut::CharStrmReader::ReadNextCharUTF8(void)=0x8059D740
nw4r::ut::CharStrmReader::ReadNextCharUTF16(void)=0x8059D7C0
nw4r::ut::CharStrmReader::ReadNextCharCP1252(void)=0x8059D7E0
nw4r::ut::CharStrmReader::ReadNextCharSJIS(void)=0x8059D800
nw4r::ut::TagProcessorBase<char>::__ct(void)=0x8059D860
nw4r::ut::TagProcessorBase<char>::__dt(void)=0x8059D870
nw4r::ut::TagProcessorBase<char>::Process(unsigned short, nw4r::ut::PrintContext<char>*)=0x8059D8B0
nw4r::ut::TagProcessorBase<char>::CalcRect(nw4r::ut::Rect*, unsigned short, nw4r::ut::PrintContext<char>*)=0x8059D9E0
nw4r::ut::TagProcessorBase<char>::ProcessLinefeed(nw4r::ut::PrintContext<char>*)=0x8059DBD0
nw4r::ut::TagProcessorBase<char>::ProcessTab(nw4r::ut::PrintContext<char>*)=0x8059DC40
nw4r::ut::TagProcessorBase<wchar_t>::__ct(void)=0x8059DD10
nw4r::ut::TagProcessorBase<wchar_t>::__dt(void)=0x8059DD20
nw4r::ut::TagProcessorBase<wchar_t>::Process(unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x8059DD60
nw4r::ut::TagProcessorBase<wchar_t>::CalcRect(nw4r::ut::Rect*, unsigned short, nw4r::ut::PrintContext<wchar_t>*)=0x8059DE90
nw4r::ut::TagProcessorBase<wchar_t>::ProcessLinefeed(nw4r::ut::PrintContext<wchar_t>*)=0x8059E080
nw4r::ut::TagProcessorBase<wchar_t>::ProcessTab(nw4r::ut::PrintContext<wchar_t>*)=0x8059E0F0
nw4r::ut::Font::InitReaderFunc(nw4r::ut::FontEncoding)=0x8059E1C0
nw4r::ut::Font::__dt(void)=0x8059E270
nw4r::ut::detail::ResFontBase::__ct(void)=0x8059E2B0
nw4r::ut::detail::ResFontBase::__dt(void)=0x8059E310
nw4r::ut::detail::ResFontBase::SetResourceBuffer(void*, nw4r::ut::FontInformation*)=0x8059E350
nw4r::ut::detail::ResFontBase::RemoveResourceBuffer(void)=0x8059E360
nw4r::ut::detail::ResFontBase::GetWidth(void) const=0x8059E380
nw4r::ut::detail::ResFontBase::GetHeight(void) const=0x8059E390
nw4r::ut::detail::ResFontBase::GetAscent(void) const=0x8059E3A0
nw4r::ut::detail::ResFontBase::GetDescent(void) const=0x8059E3B0
nw4r::ut::detail::ResFontBase::GetBaselinePos(void) const=0x8059E3D0
nw4r::ut::detail::ResFontBase::GetCellHeight(void) const=0x8059E3F0
nw4r::ut::detail::ResFontBase::GetCellWidth(void) const=0x8059E400
nw4r::ut::detail::ResFontBase::GetMaxCharWidth(void) const=0x8059E410
nw4r::ut::detail::ResFontBase::GetType(void) const=0x8059E420
nw4r::ut::detail::ResFontBase::GetTextureFormat(void) const=0x8059E430
nw4r::ut::detail::ResFontBase::GetLineFeed(void) const=0x8059E440
nw4r::ut::detail::ResFontBase::GetDefaultCharWidths(void) const=0x8059E450
nw4r::ut::detail::ResFontBase::SetDefaultCharWidths(const nw4r::ut::CharWidths&)=0x8059E470
nw4r::ut::detail::ResFontBase::SetAlternateChar(unsigned short)=0x8059E490
nw4r::ut::detail::ResFontBase::SetLineFeed(int)=0x8059E550
nw4r::ut::detail::ResFontBase::GetCharWidth(unsigned short) const=0x8059E560
nw4r::ut::detail::ResFontBase::GetCharWidths(unsigned short) const=0x8059E5B0
nw4r::ut::detail::ResFontBase::GetGlyph(nw4r::ut::Glyph*, unsigned short) const=0x8059E6D0
nw4r::ut::detail::ResFontBase::HasGlyph(unsigned short) const=0x8059E7A0
nw4r::ut::detail::ResFontBase::GetEncoding(void) const=0x8059E860
nw4r::ut::detail::ResFontBase::FindGlyphIndex(const nw4r::ut::FontCodeMap*, unsigned short) const=0x8059E870
nw4r::ut::detail::ResFontBase::GetGlyphFromIndex(nw4r::ut::Glyph*, unsigned short) const=0x8059E940
nw4r::ut::ResFont::__ct(void)=0x8059EA50
nw4r::ut::ResFont::__dt(void)=0x8059EA90
nw4r::ut::ResFont::SetResource(void*)=0x8059EAF0
nw4r::ut::ResFont::RemoveResource(void)=0x8059EC40
nw4r::ut::ResFont::Rebuild(nw4r::ut::BinaryFileHeader*)=0x8059EC50
nw4r::ut::CharWriter::__ct(void)=0x8059ED60
nw4r::ut::CharWriter::__dt(void)=0x8059F0E0
nw4r::ut::CharWriter::SetFontSize(float, float)=0x8059F120
nw4r::ut::CharWriter::SetFontSize(float)=0x8059F1F0
nw4r::ut::CharWriter::GetFontWidth(void) const=0x8059F270
nw4r::ut::CharWriter::GetFontHeight(void) const=0x8059F2D0
nw4r::ut::CharWriter::GetFontAscent(void) const=0x8059F330
nw4r::ut::CharWriter::Print(unsigned short)=0x8059F390
nw4r::ut::CharWriter::PrintGlyph(float, float, float, const nw4r::ut::Glyph&)=0x8059F4C0
nw4r::ut::CharWriter::UpdateVertexColor(void)=0x8059F740
nw4r::ut::CharWriter::SetupVertexFormat(void)=0x8059F890
nw4r::ut::CharWriter::SetupGXDefault(void)=0x8059F920
nw4r::ut::CharWriter::SetupGXWithColorMapping(nw4r::ut::Color, nw4r::ut::Color)=0x8059FAE0
nw4r::ut::CharWriter::SetupGXForI(void)=0x8059FDD0
nw4r::ut::CharWriter::SetupGXForRGBA(void)=0x8059FFF0
nw4r::ut::TextWriterBase<char>::__ct(void)=0x805A01B0
nw4r::ut::TextWriterBase<char>::__dt(void)=0x805A0210
nw4r::ut::TextWriterBase<char>::SetLineHeight(float)=0x805A0270
nw4r::ut::TextWriterBase<char>::GetLineHeight(void) const=0x805A0300
nw4r::ut::TextWriterBase<char>::CalcFormatStringWidth(const char*, e) const=0x805A0380
nw4r::ut::TextWriterBase<char>::CalcFormatStringHeight(const char*, e) const=0x805A0590
nw4r::ut::TextWriterBase<char>::CalcFormatStringRect(nw4r::ut::Rect*, const char*, e) const=0x805A07A0
nw4r::ut::TextWriterBase<char>::CalcVStringRect(nw4r::ut::Rect*, const char*, __va_list_struct*) const=0x805A0980
nw4r::ut::TextWriterBase<char>::CalcStringWidth(const char*, int) const=0x805A0B00
nw4r::ut::TextWriterBase<char>::CalcStringHeight(const char*, int) const=0x805A0C50
nw4r::ut::TextWriterBase<char>::CalcStringRect(nw4r::ut::Rect*, const char*, int) const=0x805A0DA0
nw4r::ut::TextWriterBase<char>::Printf(const char*, e)=0x805A0EC0
nw4r::ut::TextWriterBase<char>::VPrintf(const char*, __va_list_struct*)=0x805A10E0
nw4r::ut::TextWriterBase<char>::Print(const char*, int)=0x805A12A0
nw4r::ut::TextWriterBase<char>::PrintfMutable(const char*, e)=0x805A13E0
nw4r::ut::TextWriterBase<char>::VPrintfMutable(const char*, __va_list_struct*)=0x805A14F0
nw4r::ut::TextWriterBase<char>::PrintMutable(const char*, int)=0x805A15A0
nw4r::ut::TextWriterBase<char>::VSNPrintf(char*, unsigned long, const char*, __va_list_struct*)=0x805A15B0
nw4r::ut::TextWriterBase<char>::CalcLineWidth(const char*, int)=0x805A15C0
nw4r::ut::TextWriterBase<char>::CalcLineRectImpl(nw4r::ut::Rect*, const char*, int)=0x805A1720
nw4r::ut::TextWriterBase<wchar_t>::GetCharSpace(void) const=0x805A1CE0
nw4r::ut::TextWriterBase<char>::CalcStringRectImpl(nw4r::ut::Rect*, const char*, int)=0x805A1CF0
nw4r::ut::TextWriterBase<char>::PrintImpl(const char*, int, bool)=0x805A1E00
nw4r::ut::TextWriterBase<char>::AdjustCursor(float*, float*, const char*, int)=0x805A2610
nw4r::ut::TextWriterBase<char>::IsDrawFlagSet(unsigned long, unsigned long) const=0x805A2AF0
nw4r::ut::TextWriterBase<wchar_t>::__ct(void)=0x805A2B10
nw4r::ut::TextWriterBase<wchar_t>::__dt(void)=0x805A2B70
nw4r::ut::TextWriterBase<wchar_t>::SetLineHeight(float)=0x805A2BD0
nw4r::ut::TextWriterBase<wchar_t>::GetLineHeight(void) const=0x805A2C60
nw4r::ut::TextWriterBase<wchar_t>::CalcFormatStringWidth(const wchar_t*, e) const=0x805A2CE0
nw4r::ut::TextWriterBase<wchar_t>::CalcFormatStringHeight(const wchar_t*, e) const=0x805A2EF0
nw4r::ut::TextWriterBase<wchar_t>::CalcFormatStringRect(nw4r::ut::Rect*, const wchar_t*, e) const=0x805A3100
nw4r::ut::TextWriterBase<wchar_t>::CalcVStringRect(nw4r::ut::Rect*, const wchar_t*, __va_list_struct*) const=0x805A32E0
nw4r::ut::TextWriterBase<wchar_t>::CalcStringWidth(const wchar_t*, int) const=0x805A3460
nw4r::ut::TextWriterBase<wchar_t>::CalcStringHeight(const wchar_t*, int) const=0x805A35B0
nw4r::ut::TextWriterBase<wchar_t>::CalcStringRect(nw4r::ut::Rect*, const wchar_t*, int) const=0x805A3700
nw4r::ut::TextWriterBase<wchar_t>::Printf(const wchar_t*, e)=0x805A3820
nw4r::ut::TextWriterBase<wchar_t>::VPrintf(const wchar_t*, __va_list_struct*)=0x805A3A40
nw4r::ut::TextWriterBase<wchar_t>::Print(const wchar_t*, int)=0x805A3C00
nw4r::ut::TextWriterBase<wchar_t>::PrintfMutable(const wchar_t*, e)=0x805A3D40
nw4r::ut::TextWriterBase<wchar_t>::VPrintfMutable(const wchar_t*, __va_list_struct*)=0x805A3E50
nw4r::ut::TextWriterBase<wchar_t>::PrintMutable(const wchar_t*, int)=0x805A3F00
nw4r::ut::TextWriterBase<wchar_t>::VSNPrintf(wchar_t*, unsigned long, const wchar_t*, __va_list_struct*)=0x805A3F10
nw4r::ut::TextWriterBase<wchar_t>::CalcLineWidth(const wchar_t*, int)=0x805A3F20
nw4r::ut::TextWriterBase<wchar_t>::CalcLineRectImpl(nw4r::ut::Rect*, const wchar_t*, int)=0x805A4080
nw4r::ut::TextWriterBase<wchar_t>::CalcStringRectImpl(nw4r::ut::Rect*, const wchar_t*, int)=0x805A4640
nw4r::ut::TextWriterBase<wchar_t>::AdjustCursor(float*, float*, const wchar_t*, int)=0x805A4760
short::(nit_\ut_TextWriterBase_cpp)=0x805A4C60
nw4r::db::Console_Printf(nw4r::db::detail::ConsoleHead*, const char*, e)=0x805A4CF0
nw4r::db::Console_GetTotalLines(nw4r::db::detail::ConsoleHead*)=0x805A4D60
nw4r::db::DbgPrintBase<char>::GetInstance(void)=0x805A4DD0
nw4r::db::DbgPrintBase<char>::Initialize(void*, unsigned long, nw4r::ut::Color)=0x805A4DE0
nw4r::db::DbgPrintBase<char>::Initialize(void*, unsigned long, const nw4r::ut::Font&, nw4r::ut::Color)=0x805A4E70
nw4r::db::DbgPrintBase<char>::SetFont(const nw4r::ut::Font&)=0x805A4F10
nw4r::db::DbgPrintBase<char>::GetFont(void) const=0x805A4F20
nw4r::db::DbgPrintBase<char>::SetTextColor(nw4r::ut::Color)=0x805A4F30
nw4r::db::DbgPrintBase<char>::GetTextColor(void) const=0x805A4F60
nw4r::db::DbgPrintBase<char>::SetFontSize(float)=0x805A4F70
nw4r::db::DbgPrintBase<char>::GetFontSize(void) const=0x805A4F80
nw4r::db::DbgPrintBase<char>::SetVisible(bool)=0x805A4F90
nw4r::db::DbgPrintBase<char>::IsVisible(void) const=0x805A4FA0
nw4r::db::DbgPrintBase<char>::Registerf(int, int, const char*, e)=0x805A4FB0
nw4r::db::DbgPrintBase<char>::Registerf(int, int, int, const char*, e)=0x805A50C0
nw4r::db::DbgPrintBase<char>::VRegisterf(int, int, int, const char*, __va_list_struct*)=0x805A51E0
nw4r::db::DbgPrintBase<char>::Register(int, int, int, const char*, int)=0x805A52B0
nw4r::db::DbgPrintBase<char>::Registf(int, int, const char*, e)=0x805A5360
nw4r::db::DbgPrintBase<char>::Registf(int, int, int, const char*, e)=0x805A5470
nw4r::db::DbgPrintBase<char>::VRegistf(int, int, int, const char*, __va_list_struct*)=0x805A5590
nw4r::db::DbgPrintBase<char>::Regist(int, int, int, const char*, int)=0x805A5660
nw4r::db::DbgPrintBase<char>::Reset(void)=0x805A5670
nw4r::db::DbgPrintBase<char>::Flush(void)=0x805A5710
nw4r::db::DbgPrintBase<char>::Flush(int, int, int, int)=0x805A58A0
nw4r::db::DbgPrintBase<char>::__ct(nw4r::ut::Color, const nw4r::ut::Font*)=0x805A5960
nw4r::db::DbgPrintBase<char>::__dt(void)=0x805A59C0
nw4r::db::DbgPrintBase<char>::GetFirstText(void)=0x805A5A10
nw4r::db::DbgPrintBase<char>::GetNextText(nw4r::db::DbgPrintBase<char>::DbgText*)=0x805A5A20
nw4r::db::DbgPrintBase<char>::Unregister(nw4r::db::DbgPrintBase<char>::DbgText*)=0x805A5A30
nw4r::db::DbgPrintBase<char>::SetBuffer(void*, unsigned long)=0x805A5A70
nw4r::db::DbgPrintBase<char>::ReleaseBuffer(void)=0x805A5AA0
nw4r::db::DbgPrintBase<char>::__nw(unsigned long)=0x805A5B00
nw4r::db::DbgPrintBase<char>::__dl(void*)=0x805A5B50
nw4r::db::DbgPrintBase<wchar_t>::GetInstance(void)=0x805A5B60
nw4r::db::DbgPrintBase<wchar_t>::Initialize(void*, unsigned long, nw4r::ut::Color)=0x805A5B70
nw4r::db::DbgPrintBase<wchar_t>::Initialize(void*, unsigned long, const nw4r::ut::Font&, nw4r::ut::Color)=0x805A5C00
nw4r::db::DbgPrintBase<wchar_t>::SetFont(const nw4r::ut::Font&)=0x805A5CA0
nw4r::db::DbgPrintBase<wchar_t>::GetFont(void) const=0x805A5CB0
nw4r::db::DbgPrintBase<wchar_t>::SetTextColor(nw4r::ut::Color)=0x805A5CC0
nw4r::db::DbgPrintBase<wchar_t>::GetTextColor(void) const=0x805A5CF0
nw4r::db::DbgPrintBase<wchar_t>::SetFontSize(float)=0x805A5D00
nw4r::db::DbgPrintBase<wchar_t>::GetFontSize(void) const=0x805A5D10
nw4r::db::DbgPrintBase<wchar_t>::SetVisible(bool)=0x805A5D20
nw4r::db::DbgPrintBase<wchar_t>::IsVisible(void) const=0x805A5D30
nw4r::db::DbgPrintBase<wchar_t>::Registerf(int, int, const wchar_t*, e)=0x805A5D40
nw4r::db::DbgPrintBase<wchar_t>::Registerf(int, int, int, const wchar_t*, e)=0x805A5E50
nw4r::db::DbgPrintBase<wchar_t>::VRegisterf(int, int, int, const wchar_t*, __va_list_struct*)=0x805A5F70
nw4r::db::DbgPrintBase<wchar_t>::Register(int, int, int, const wchar_t*, int)=0x805A6040
nw4r::db::DbgPrintBase<wchar_t>::Registf(int, int, const wchar_t*, e)=0x805A60F0
nw4r::db::DbgPrintBase<wchar_t>::Registf(int, int, int, const wchar_t*, e)=0x805A6200
nw4r::db::DbgPrintBase<wchar_t>::VRegistf(int, int, int, const wchar_t*, __va_list_struct*)=0x805A6320
nw4r::db::DbgPrintBase<wchar_t>::Regist(int, int, int, const wchar_t*, int)=0x805A63F0
nw4r::db::DbgPrintBase<wchar_t>::Reset(void)=0x805A6400
nw4r::db::DbgPrintBase<wchar_t>::Flush(void)=0x805A64A0
nw4r::db::DbgPrintBase<wchar_t>::Flush(int, int, int, int)=0x805A6630
nw4r::db::DbgPrintBase<wchar_t>::__ct(nw4r::ut::Color, const nw4r::ut::Font*)=0x805A66F0
nw4r::db::DbgPrintBase<wchar_t>::__dt(void)=0x805A6750
nw4r::db::DbgPrintBase<wchar_t>::GetFirstText(void)=0x805A67A0
nw4r::db::DbgPrintBase<wchar_t>::GetNextText(nw4r::db::DbgPrintBase<wchar_t>::DbgText*)=0x805A67B0
nw4r::db::DbgPrintBase<wchar_t>::Unregister(nw4r::db::DbgPrintBase<wchar_t>::DbgText*)=0x805A67C0
nw4r::db::DbgPrintBase<wchar_t>::SetBuffer(void*, unsigned long)=0x805A6800
nw4r::db::DbgPrintBase<wchar_t>::ReleaseBuffer(void)=0x805A6830
nw4r::db::DbgPrintBase<wchar_t>::__nw(unsigned long)=0x805A6890
nw4r::db::DbgPrintBase<wchar_t>::__dl(void*)=0x805A68E0
nw4r::db::Panic(const char*, int, const char*, e)=0x805A6B00
nw4r::db::Warning(const char*, int, const char*, e)=0x805A6BA0
nw4r::math::SinFIdx(float)=0x805A6D60
nw4r::math::CosFIdx(float)=0x805A6DE0
nw4r::math::VEC3TransformNormal(nw4r::math::VEC3*, const nw4r::math::MTX34*, const nw4r::math::VEC3*)=0x805A6E50
nw4r::lyt::LytInit(void)=0x805A6EE0
nw4r::lyt::Pane::__ct(const nw4r::lyt::res::Pane*)=0x805A6F40
nw4r::lyt::Pane::__dt(void)=0x805A7070
nw4r::lyt::Pane::SetName(const char*)=0x805A71B0
nw4r::lyt::Pane::AppendChild(nw4r::lyt::Pane*)=0x805A71F0
nw4r::lyt::Pane::RemoveChild(nw4r::lyt::Pane*)=0x805A7240
nw4r::lyt::Pane::GetVtxColor(unsigned long) const=0x805A7280
nw4r::lyt::Pane::SetVtxColor(unsigned long, nw4r::ut::Color)=0x805A7290
nw4r::lyt::Pane::GetColorElement(unsigned long) const=0x805A72A0
nw4r::lyt::Pane::SetColorElement(unsigned long, unsigned char)=0x805A72D0
nw4r::lyt::Pane::GetVtxColorElement(unsigned long) const=0x805A7300
nw4r::lyt::Pane::SetVtxColorElement(unsigned long, unsigned char)=0x805A7310
nw4r::lyt::Pane::FindPaneByName(const char*, bool)=0x805A7320
nw4r::lyt::Pane::FindMaterialByName(const char*, bool)=0x805A73D0
nw4r::lyt::Pane::CalculateMtx(const nw4r::lyt::DrawInfo&)=0x805A7490
nw4r::lyt::Pane::Draw(const nw4r::lyt::DrawInfo&)=0x805A7790
nw4r::lyt::Pane::DrawSelf(const nw4r::lyt::DrawInfo&)=0x805A7820
nw4r::lyt::Pane::Animate(unsigned long)=0x805A7830
nw4r::lyt::Pane::AnimateSelf(unsigned long)=0x805A78C0
nw4r::lyt::Pane::BindAnimation(nw4r::lyt::AnimTransform*, bool)=0x805A7980
nw4r::lyt::Pane::UnbindAnimation(nw4r::lyt::AnimTransform*, bool)=0x805A79A0
nw4r::lyt::Pane::UnbindAllAnimation(bool)=0x805A7A30
nw4r::lyt::Pane::UnbindAnimationSelf(nw4r::lyt::AnimTransform*)=0x805A7A50
nw4r::lyt::Pane::AddAnimationLink(nw4r::lyt::AnimationLink*)=0x805A7AB0
nw4r::lyt::Pane::FindAnimationLinkSelf(nw4r::lyt::AnimTransform*)=0x805A7AF0
nw4r::lyt::Pane::FindAnimationLinkSelf(const nw4r::lyt::AnimResource&)=0x805A7B00
nw4r::lyt::Pane::SetAnimationEnable(nw4r::lyt::AnimTransform*, bool, bool)=0x805A7B10
nw4r::lyt::Pane::SetAnimationEnable(const nw4r::lyt::AnimResource&, bool, bool)=0x805A7C10
nw4r::lyt::Pane::LoadMtx(const nw4r::lyt::DrawInfo&)=0x805A7D10
nw4r::lyt::Pane::GetVtxPos(void) const=0x805A7D70
nw4r::lyt::Pane::GetMaterialNum(void) const=0x805A7E40
nw4r::lyt::Pane::GetMaterial(void) const=0x805A7E60
nw4r::lyt::Pane::GetMaterial(unsigned long) const=0x805A7E70
nw4r::lyt::Pane::FindExtUserDataByName(const char*)=0x805A7E90
short::(nit_\lyt_pane_cpp)=0x805A7F50
nw4r::lyt::Group::__ct(const nw4r::lyt::res::Group*, nw4r::lyt::Pane*)=0x805A7F60
nw4r::lyt::Group::__dt(void)=0x805A8080
nw4r::lyt::GroupContainer::__dt(void)=0x805A8130
nw4r::lyt::GroupContainer::AppendGroup(nw4r::lyt::Group*)=0x805A8200
nw4r::lyt::GroupContainer::FindGroupByName(const char*)=0x805A8240
@unnamed@lyt_layout_cpp@::SetTagProcessorImpl(nw4r::lyt::Pane*, nw4r::ut::TagProcessorBase<wchar_t>*)=0x805A82C0
nw4r::lyt::@unnamed@lyt_layout_cpp@::IsIncludeAnimationGroupRef(nw4r::lyt::GroupContainer*, const nw4r::lyt::AnimationGroupRef*, unsigned short, bool, nw4r::lyt::Pane*)=0x805A8480
nw4r::lyt::Layout::__ct(void)=0x805A8550
nw4r::lyt::Layout::__dt(void)=0x805A8590
nw4r::lyt::Layout::Build(const void*, nw4r::lyt::ResourceAccessor*)=0x805A86C0
nw4r::lyt::Layout::CreateAnimTransform(void)=0x805A8A10
nw4r::lyt::Layout::CreateAnimTransform(const void*, nw4r::lyt::ResourceAccessor*)=0x805A8A90
nw4r::lyt::Layout::CreateAnimTransform(const nw4r::lyt::AnimResource&, nw4r::lyt::ResourceAccessor*)=0x805A8AF0
nw4r::lyt::Layout::BindAnimation(nw4r::lyt::AnimTransform*)=0x805A8B80
nw4r::lyt::Layout::UnbindAnimation(nw4r::lyt::AnimTransform*)=0x805A8BB0
nw4r::lyt::Layout::UnbindAllAnimation(void)=0x805A8BE0
nw4r::lyt::Layout::BindAnimationAuto(const nw4r::lyt::AnimResource&, nw4r::lyt::ResourceAccessor*)=0x805A8C00
nw4r::lyt::Layout::SetAnimationEnable(nw4r::lyt::AnimTransform*, bool)=0x805A8EA0
nw4r::lyt::Layout::CalculateMtx(const nw4r::lyt::DrawInfo&)=0x805A8ED0
nw4r::lyt::Layout::Draw(const nw4r::lyt::DrawInfo&)=0x805A8EF0
nw4r::lyt::Layout::Animate(unsigned long)=0x805A8F10
nw4r::lyt::Layout::GetLayoutRect(void) const=0x805A8F30
nw4r::lyt::Layout::SetTagProcessor(nw4r::ut::TagProcessorBase<wchar_t>*)=0x805A8F70
nw4r::lyt::Layout::BuildPaneObj(long, const void*, const nw4r::lyt::ResBlockSet&)=0x805A9130
nw4r::ut::Color::__ct(void)=0x805A9320
nw4r::lyt::Picture::__ct(const nw4r::lyt::res::Picture*, const nw4r::lyt::ResBlockSet&)=0x805A9330
nw4r::lyt::Picture::__dt(void)=0x805A9480
nw4r::lyt::Picture::Append(const nw4r::lyt::TexMap&)=0x805A9560
nw4r::lyt::Picture::GetVtxColor(unsigned long) const=0x805A9720
nw4r::lyt::Picture::SetVtxColor(unsigned long, nw4r::ut::Color)=0x805A9740
nw4r::lyt::Picture::GetVtxColorElement(unsigned long) const=0x805A9770
nw4r::lyt::Picture::SetVtxColorElement(unsigned long, unsigned char)=0x805A9790
nw4r::lyt::Picture::DrawSelf(const nw4r::lyt::DrawInfo&)=0x805A97B0
nw4r::lyt::Picture::GetRuntimeTypeInfo(void) const=0x805A9890
short::(nit_\lyt_picture_cpp)=0x805A98A0
nw4r::lyt::TextBox::__ct(const nw4r::lyt::res::TextBox*, const nw4r::lyt::ResBlockSet&)=0x805A98B0
nw4r::lyt::TextBox::__dt(void)=0x805A9BA0
nw4r::lyt::TextBox::GetVtxColor(unsigned long) const=0x805A9D40
nw4r::lyt::TextBox::SetVtxColor(unsigned long, nw4r::ut::Color)=0x805A9D60
nw4r::lyt::TextBox::GetVtxColorElement(unsigned long) const=0x805A9DA0
nw4r::lyt::TextBox::SetVtxColorElement(unsigned long, unsigned char)=0x805A9DC0
nw4r::lyt::TextBox::GetTextDrawRect(void) const=0x805A9DE0
nw4r::lyt::TextBox::GetTextDrawRect(const nw4r::lyt::DrawInfo&) const=0x805A9E40
nw4r::lyt::TextBox::DrawSelf(const nw4r::lyt::DrawInfo&)=0x805A9EA0
nw4r::lyt::@unnamed@lyt_textBox_cpp@::CalcLineRectImpl<wchar_t>(nw4r::ut::Rect*, nw4r::ut::TextWriterBase<wchar_t>*, const wchar_t*, int, float, bool*, _i)=0x805AA430
nw4r::lyt::TextBox::AllocStringBuffer(unsigned short)=0x805AA810
nw4r::lyt::TextBox::FreeStringBuffer(void)=0x805AA8E0
nw4r::lyt::TextBox::SetString(const wchar_t*, unsigned short)=0x805AA930
nw4r::lyt::TextBox::SetString(const wchar_t*, unsigned short, unsigned short)=0x805AAA10
nw4r::lyt::TextBox::GetFont(void) const=0x805AAAE0
nw4r::lyt::TextBox::SetFont(const nw4r::ut::Font*)=0x805AAAF0
nw4r::lyt::TextBox::LoadMtx(const nw4r::lyt::DrawInfo&)=0x805AAC20
nw4r::lyt::TextBox::GetTextDrawRect(nw4r::ut::TextWriterBase<wchar_t>*) const=0x805AACB0
nw4r::lyt::@unnamed@lyt_textBox_cpp@::CalcStringRectImpl<wchar_t>(nw4r::ut::Rect*, nw4r::ut::TextWriterBase<wchar_t>*, const wchar_t*, int, float, _v)=0x805AAF60
nw4r::lyt::TextBox::GetRuntimeTypeInfo(void) const=0x805AB140
short::(nit_\lyt_textBox_cpp)=0x805AB150
nw4r::lyt::Window::__ct(const nw4r::lyt::res::Window*, const nw4r::lyt::ResBlockSet&)=0x805AB160
nw4r::lyt::Window::__dt(void)=0x805AB3F0
nw4r::lyt::Window::FindMaterialByName(const char*, bool)=0x805AB540
nw4r::lyt::Window::GetVtxColor(unsigned long) const=0x805AB640
nw4r::lyt::Window::SetVtxColor(unsigned long, nw4r::ut::Color)=0x805AB660
nw4r::lyt::Window::GetVtxColorElement(unsigned long) const=0x805AB690
nw4r::lyt::Window::SetVtxColorElement(unsigned long, unsigned char)=0x805AB6B0
nw4r::lyt::Window::DrawSelf(const nw4r::lyt::DrawInfo&)=0x805AB6D0
nw4r::lyt::Window::AnimateSelf(unsigned long)=0x805AB8B0
nw4r::lyt::Window::UnbindAnimationSelf(nw4r::lyt::AnimTransform*)=0x805AB940
nw4r::lyt::Window::DrawContent(const nw4r::math::VEC2&, const nw4r::lyt::WindowFrameSize&, unsigned char)=0x805AB9D0
nw4r::lyt::Window::DrawFrame(const nw4r::math::VEC2&, const nw4r::lyt::Window::Frame&, const nw4r::lyt::WindowFrameSize&, unsigned char)=0x805ABAE0
nw4r::lyt::Window::DrawFrame4(const nw4r::math::VEC2&, const nw4r::lyt::Window::Frame*, const nw4r::lyt::WindowFrameSize&, unsigned char)=0x805AC0F0
nw4r::lyt::Window::DrawFrame8(const nw4r::math::VEC2&, const nw4r::lyt::Window::Frame*, const nw4r::lyt::WindowFrameSize&, unsigned char)=0x805AC830
nw4r::lyt::Window::GetMaterialNum(void) const=0x805AD660
nw4r::lyt::Window::GetMaterial(unsigned long) const=0x805AD670
nw4r::lyt::Window::GetFrameMaterial(unsigned long) const=0x805AD6A0
nw4r::lyt::Window::GetContentMaterial(void) const=0x805AD6D0
nw4r::lyt::Window::GetRuntimeTypeInfo(void) const=0x805AD6E0
short::(nit_\lyt_window_cpp)=0x805AD6F0
nw4r::lyt::Bounding::__ct(const nw4r::lyt::res::Bounding*, const nw4r::lyt::ResBlockSet&)=0x805AD700
nw4r::lyt::Bounding::__dt(void)=0x805AD740
nw4r::lyt::Bounding::DrawSelf(const nw4r::lyt::DrawInfo&)=0x805AD7A0
nw4r::lyt::Bounding::GetRuntimeTypeInfo(void) const=0x805AD7B0
short::(nit_\lyt_bounding_cpp)=0x805AD7C0
nw4r::lyt::@unnamed@lyt_material_cpp@::CalcTextureMtx(nw4r::math::MTX34*, const nw4r::lyt::TexSRT&)=0x805AD7D0
nw4r::lyt::@unnamed@lyt_material_cpp@::SetIndTexMtx(_GXIndTexMtxID, A3_Cf)=0x805AD8E0
nw4r::ut::LinkList<nw4r::lyt::AnimationLink,0>::__ct(void)=0x805ADAE0
nw4r::lyt::Material::__ct(const nw4r::lyt::res::Material*, const nw4r::lyt::ResBlockSet&)=0x805ADB00
_GXColorS10::__as(const _GXColorS10&)=0x805AE170
nw4r::ut::Color::__as(const _GXColor&)=0x805AE1A0
nw4r::lyt::res::MaterialResourceNum::GetTexMapNum(void) const=0x805AE1B0
nw4r::lyt::res::MaterialResourceNum::GetTexSRTNum(void) const=0x805AE1C0
nw4r::lyt::res::MaterialResourceNum::GetTexCoordGenNum(void) const=0x805AE1D0
nw4r::lyt::res::MaterialResourceNum::GetChanCtrlNum(void) const=0x805AE1E0
nw4r::lyt::res::MaterialResourceNum::GetMatColNum(void) const=0x805AE1F0
nw4r::lyt::res::MaterialResourceNum::HasTevSwapTable(void) const=0x805AE200
nw4r::lyt::res::MaterialResourceNum::HasAlphaCompare(void) const=0x805AE210
nw4r::lyt::res::MaterialResourceNum::HasBlendMode(void) const=0x805AE220
nw4r::lyt::res::MaterialResourceNum::GetIndTexSRTNum(void) const=0x805AE230
nw4r::lyt::res::MaterialResourceNum::GetIndTexStageNum(void) const=0x805AE240
nw4r::lyt::res::MaterialResourceNum::GetTevStageNum(void) const=0x805AE250
nw4r::lyt::TexMap::SetWrapMode(_GXTexWrapMode, _GXTexWrapMode)=0x805AE260
nw4r::lyt::res::TexMap::GetWarpModeS(void) const=0x805AE280
nw4r::lyt::res::TexMap::GetWarpModeT(void) const=0x805AE290
nw4r::lyt::TexMap::SetFilter(_GXTexFilter, _GXTexFilter)=0x805AE2A0
nw4r::lyt::res::TexMap::GetMinFilter(void) const=0x805AE2C0
nw4r::lyt::res::TexMap::GetMagFilter(void) const=0x805AE2E0
nw4r::lyt::TexCoordGen::__as(const nw4r::lyt::TexCoordGen&)=0x805AE300
nw4r::lyt::ChanCtrl::__as(const nw4r::lyt::ChanCtrl&)=0x805AE330
nw4r::ut::Color::__as(const nw4r::ut::Color&)=0x805AE360
nw4r::lyt::TevSwapMode::__as(const nw4r::lyt::TevSwapMode&)=0x805AE390
nw4r::lyt::TexSRT::__as(const nw4r::lyt::TexSRT&)=0x805AE3A0
nw4r::lyt::IndirectStage::__as(const nw4r::lyt::IndirectStage&)=0x805AE3D0
nw4r::lyt::TevStage::__as(const nw4r::lyt::TevStage&)=0x805AE400
nw4r::lyt::AlphaCompare::__as(const nw4r::lyt::AlphaCompare&)=0x805AE470
nw4r::lyt::BlendMode::__as(const nw4r::lyt::BlendMode&)=0x805AE4A0
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::BlendMode>(const void*, unsigned int, _PCQ34nw4r3lyt9BlendMode)=0x805AE4D0
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::AlphaCompare>(const void*, unsigned int, _PCQ34nw4r3lyt12AlphaCompare)=0x805AE4E0
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::TevStage>(const void*, unsigned int, _PCQ34nw4r3lyt8TevStage)=0x805AE4F0
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::IndirectStage>(const void*, unsigned int, _PCQ34nw4r3lyt13IndirectStage)=0x805AE500
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::TevSwapMode>(const void*, unsigned int, _PCQ34nw4r3lyt11TevSwapMode)=0x805AE510
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::ut::Color>(const void*, unsigned int, _PCQ34nw4r2ut5Color)=0x805AE520
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::ChanCtrl>(const void*, unsigned int, _PCQ34nw4r3lyt8ChanCtrl)=0x805AE530
nw4r::lyt::detail::ConvertOffsToPtr<char>(const void*, unsigned int, _PCc)=0x805AE540
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::res::Texture>(const void*, unsigned int, _PCQ44nw4r3lyt3res7Texture)=0x805AE550
nw4r::ut::@unnamed@lyt_material_cpp@::Min<unsigned char>(unsigned char, unsigned char, _Uc)=0x805AE560
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::TexCoordGen>(const void*, unsigned int, _PCQ34nw4r3lyt11TexCoordGen)=0x805AE570
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::TexSRT>(const void*, unsigned int, _PCQ34nw4r3lyt6TexSRT)=0x805AE580
nw4r::lyt::detail::ConvertOffsToPtr<nw4r::lyt::res::TexMap>(const void*, unsigned int, _PCQ44nw4r3lyt3res6TexMap)=0x805AE590
nw4r::lyt::Material::Init(void)=0x805AE5A0
nw4r::lyt::Material::__dt(void)=0x805AE610
nw4r::lyt::Material::ReserveGXMem(unsigned char, unsigned char, unsigned char, unsigned char, bool, unsigned char, unsigned char, bool, bool, bool, bool)=0x805AE6C0
nw4r::lyt::Material::GetTexMapAry(void) const=0x805AED50
nw4r::lyt::Material::GetTexMapAry(void)=0x805AED60
nw4r::lyt::Material::GetTexSRTAry(void)=0x805AED70
nw4r::lyt::Material::GetTexCoordGenAry(void)=0x805AED90
nw4r::lyt::Material::GetChanCtrlAry(void)=0x805AEDC0
nw4r::lyt::Material::GetMatColAry(void)=0x805AEDF0
nw4r::lyt::Material::GetTevSwapAry(void)=0x805AEE30
nw4r::lyt::Material::GetAlphaComparePtr(void)=0x805AEE70
nw4r::lyt::Material::GetBlendModePtr(void)=0x805AEEC0
nw4r::lyt::Material::GetIndirectStageAry(void)=0x805AEF10
nw4r::lyt::Material::GetIndTexSRTAry(void)=0x805AEF70
nw4r::lyt::Material::GetTevStageAry(void)=0x805AEFD0
nw4r::lyt::Material::SetName(const char*)=0x805AF040
nw4r::lyt::Material::SetTextureNum(unsigned char)=0x805AF080
nw4r::lyt::Material::SetTexCoordGenNum(unsigned char)=0x805AF110
nw4r::lyt::Material::SetTevStageNum(unsigned char)=0x805AF1A0
nw4r::lyt::Material::SetIndStageNum(unsigned char)=0x805AF2D0
nw4r::lyt::Material::SetColorElement(unsigned long, short)=0x805AF3A0
nw4r::lyt::Material::SetupGX(bool, unsigned char)=0x805AF560
nw4r::lyt::Material::BindAnimation(nw4r::lyt::AnimTransform*)=0x805B0370
nw4r::lyt::Material::UnbindAnimation(nw4r::lyt::AnimTransform*)=0x805B0390
nw4r::lyt::Material::UnbindAllAnimation(void)=0x805B03A0
nw4r::lyt::Material::Animate(void)=0x805B03C0
nw4r::lyt::Material::AddAnimationLink(nw4r::lyt::AnimationLink*)=0x805B0440
nw4r::lyt::Material::FindAnimationLink(nw4r::lyt::AnimTransform*)=0x805B0480
nw4r::lyt::Material::FindAnimationLink(const nw4r::lyt::AnimResource&)=0x805B0490
nw4r::lyt::Material::SetAnimationEnable(nw4r::lyt::AnimTransform*, bool)=0x805B04A0
nw4r::lyt::Material::SetAnimationEnable(const nw4r::lyt::AnimResource&, bool)=0x805B04F0
nw4r::lyt::detail::GetTextureSize(nw4r::lyt::Material*, unsigned char)=0x805B0540
nw4r::lyt::TexMap::Get(_GXTexObj*) const=0x805B05B0
nw4r::lyt::TexMap::Get(_GXTlutObj*) const=0x805B06A0
nw4r::lyt::TexMap::Set(const _GXTexObj&)=0x805B06C0
nw4r::lyt::TexMap::ReplaceImage(TPLPalette*, unsigned long)=0x805B0810
nw4r::lyt::DrawInfo::__ct(void)=0x805B08E0
nw4r::lyt::DrawInfo::__dt(void)=0x805B0960
nw4r::lyt::@unnamed@lyt_animation_cpp@::GetStepCurveValue(float, const nw4r::lyt::res::StepKey*, unsigned long)=0x805B09A0
nw4r::lyt::@unnamed@lyt_animation_cpp@::GetHermiteCurveValue(float, const nw4r::lyt::res::HermiteKey*, unsigned long)=0x805B0A90
nw4r::lyt::AnimTransform::GetFrameSize(void) const=0x805B0C50
nw4r::lyt::AnimTransform::IsLoopData(void) const=0x805B0C60
nw4r::lyt::AnimTransformBasic::__ct(void)=0x805B0C80
nw4r::lyt::AnimTransformBasic::__dt(void)=0x805B0CC0
nw4r::lyt::AnimTransformBasic::SetResource(const nw4r::lyt::res::AnimationBlock*, nw4r::lyt::ResourceAccessor*)=0x805B0D50
nw4r::lyt::AnimTransformBasic::SetResource(const nw4r::lyt::res::AnimationBlock*, nw4r::lyt::ResourceAccessor*, unsigned short)=0x805B0D70
nw4r::lyt::AnimTransformBasic::Bind(nw4r::lyt::Pane*, bool, bool)=0x805B0EE0
nw4r::lyt::AnimTransformBasic::Bind(nw4r::lyt::Material*, bool)=0x805B10B0
nw4r::lyt::AnimTransformBasic::Animate(unsigned long, nw4r::lyt::Pane*)=0x805B11D0
nw4r::lyt::AnimTransformBasic::Animate(unsigned long, nw4r::lyt::Material*)=0x805B13B0
nw4r::lyt::AnimResource::__ct(void)=0x805B16A0
nw4r::lyt::AnimResource::Set(const void*)=0x805B16C0
nw4r::lyt::AnimResource::GetGroupNum(void) const=0x805B17D0
nw4r::lyt::AnimResource::GetGroupArray(void) const=0x805B17F0
nw4r::lyt::AnimResource::IsDescendingBind(void) const=0x805B1810
nw4r::lyt::AnimResource::GetAnimationShareInfoNum(void) const=0x805B1830
nw4r::lyt::AnimResource::GetAnimationShareInfoArray(void) const=0x805B1850
nw4r::lyt::AnimResource::CalcAnimationNum(nw4r::lyt::Pane*, bool) const=0x805B1870
nw4r::lyt::AnimResource::CalcAnimationNum(nw4r::lyt::Group*, bool) const=0x805B1950
nw4r::lyt::detail::AnimPaneTree::Init(void)=0x805B19C0
nw4r::lyt::detail::AnimPaneTree::Set(nw4r::lyt::Pane*, const nw4r::lyt::AnimResource&)=0x805B1A00
nw4r::lyt::detail::AnimPaneTree::Bind(nw4r::lyt::Layout*, nw4r::lyt::Pane*, nw4r::lyt::ResourceAccessor*) const=0x805B1C60
nw4r::lyt::detail::FindAnimationLink(nw4r::ut::LinkList<nw4r::lyt::AnimationLink,0>*, nw4r::lyt::AnimTransform*)=0x805B1E50
nw4r::lyt::detail::FindAnimationLink(nw4r::ut::LinkList<nw4r::lyt::AnimationLink,0>*, const nw4r::lyt::AnimResource&)=0x805B1E90
nw4r::lyt::detail::UnbindAnimationLink(nw4r::ut::LinkList<nw4r::lyt::AnimationLink,0>*, nw4r::lyt::AnimTransform*)=0x805B1ED0
nw4r::lyt::ResourceAccessor::__dt(void)=0x805B1F60
nw4r::lyt::ResourceAccessor::__ct(void)=0x805B1FA0
nw4r::lyt::ResourceAccessor::GetFont(const char*)=0x805B1FB0
nw4r::lyt::detail::EqualsResName(const char*, const char*)=0x805B1FC0
nw4r::lyt::detail::EqualsMaterialName(const char*, const char*)=0x805B1FF0
nw4r::lyt::detail::TestFileHeader(const nw4r::lyt::res::BinaryFileHeader&, unsigned long)=0x805B2020
nw4r::lyt::detail::TexCoordAry::__ct(void)=0x805B2050
nw4r::lyt::detail::TexCoordAry::Free(void)=0x805B2070
nw4r::lyt::detail::TexCoordAry::Reserve(unsigned char)=0x805B20C0
nw4r::lyt::detail::TexCoordAry::SetSize(unsigned char)=0x805B2160
nw4r::lyt::detail::TexCoordAry::Copy(const void*, unsigned char)=0x805B2250
nw4r::lyt::detail::IsModulateVertexColor(nw4r::ut::Color*, unsigned char)=0x805B22F0
nw4r::lyt::detail::MultipleAlpha(nw4r::ut::Color, unsigned char)=0x805B2360
nw4r::lyt::detail::SetVertexFormat(bool, unsigned char)=0x805B23A0
nw4r::lyt::detail::DrawQuad(const nw4r::math::VEC2&, const nw4r::lyt::Size&, unsigned char, A4_CQ34nw4r4math4VEC2PCQ34nw4r2ut5Color)=0x805B2490
nw4r::lyt::detail::DrawQuad(const nw4r::math::VEC2&, const nw4r::lyt::Size&, unsigned char, A4_CQ34nw4r4math4VEC2PCQ34nw4r2ut5ColorUc)=0x805B29F0
nw4r::lyt::BindAnimation(nw4r::lyt::Group*, nw4r::lyt::AnimTransform*, bool, bool)=0x805B2B20
short::(rtAlarm)=0x805B4300
char::(ementerExceptionCallback)=0x805B4770
char::(ementerExceptionHandler)=0x805B49F0
const long::(arContext)=0x805B5DC0
char::(Args)=0x805B6A60
float::(ToArg)=0x805B6BE0
char::(InstallerArgs)=0x805B6D40
long::(bool, ack)=0x805B6F50
long::(bool, ack)=0x805B6F90
long::()=0x805B87F0
char::(double, e)=0x805B8F20
int::(eSramCallback)=0x805BBAF0
long::(char, kSram)=0x805BBE30
short::(emCallVector)=0x805BC5A0
float::(ultSwitchThreadCallback)=0x805BC620
short::(tRun)=0x805BC9B0
long::(char, tThread)=0x805BCC60
long*::(yTimeIsLimited)=0x805BF850
int::(int, t_user)=0x805C0380
int::(int, t_cpp)=0x805C03A0
int::()=0x805C03F0
const long::(arVtxDesc)=0x805CB430
int*::(ModeSync)=0x805CC1C0
const long::(arBoundingBox)=0x805CD690
const long::(arGPMetric)=0x805D1380
long::(teItemByID)=0x805E1930
const long::(Init)=0x805E4500
int::(short, _Ipc2)=0x805E4640
short::(long, long, ocAligned)=0x805E5E40
const long::(arControlBlock)=0x805E9CA0
int::(float, oCallback)=0x805EBBB0
double::(double, const bool)=0x805EE190
int::(int, alizeUART)=0x805FF080
int::(eUARTN)=0x805FF0D0
int::(int, nit_free_queue)=0x80600850
int::(bool, uffer_init)=0x80600A70
int::(timers_init)=0x80601CF0
int::(u_h2_usb_cback)=0x80602590
int::(u_h2_receive_msg)=0x806025B0
int::(u_h2_send_msg_now)=0x80602950
int::(u_h2_init)=0x80602B00
int::(u_h2_open)=0x80602B30
int::(u_h2_close)=0x80602BA0
int::(u_h2_send)=0x80602BE0
int::(u_h2_handle_event)=0x80602C10
short::(_CloseDeviceCB)=0x80602C60
short::(_ReadIntrDataCB)=0x80602D00
short::(_ReadBulkDataCB)=0x80602EB0
short::(_WriteCtrlDataCB)=0x80603050
short::(_WriteBulkDataCB)=0x80603140
char::(y)=0x80604134
char::(p)=0x80604168
int::(_init)=0x806046A0
int::(_timer_update)=0x806046EC
int::(_start_timer)=0x806047A0
int::(_stop_timer)=0x80604840
long::(float, reebuf)=0x80604880
short::(double, _hcic_inquiry)=0x806169BC
short::(double, _hcic_inq_cancel)=0x80616A64
short::(double, _hcic_per_inq_mode)=0x80616AC4
short::(double, _hcic_create_conn)=0x80616B84
short::(double, _hcic_disconnect)=0x80616C64
short::(double, _hcic_add_SCO_conn)=0x80616CEC
short::(double, _hcic_accept_conn)=0x80616D78
short::(double, _hcic_reject_conn)=0x80616DD8
short::(double, _hcic_link_key_req_reply)=0x80616E34
short::(double, _hcic_link_key_neg_reply)=0x80616FD4
short::(double, _hcic_pin_code_req_reply)=0x80617074
short::(double, _hcic_pin_code_neg_reply)=0x80617258
short::(double, _hcic_change_conn_type)=0x806172F8
short::(double, _hcic_auth_request)=0x80617388
short::(double, _hcic_set_conn_encrypt)=0x80617404
short::(double, _hcic_rmt_name_req)=0x80617490
short::(double, _hcic_rmt_name_req_cancel)=0x80617568
short::(double, _hcic_rmt_features_req)=0x80617608
short::(double, _hcic_rmt_ver_req)=0x80617684
short::(double, _hcic_read_rmt_clk_offset)=0x80617700
short::(double, _hcic_setup_esco_conn)=0x8061777C
short::(double, _hcic_accept_esco_conn)=0x80617878
short::(double, _hcic_reject_esco_conn)=0x80617960
short::(double, _hcic_hold_mode)=0x806179C0
short::(double, _hcic_sniff_mode)=0x80617A74
short::(double, _hcic_exit_sniff_mode)=0x80617B40
short::(double, _hcic_park_mode)=0x80617BC4
short::(double, _hcic_exit_park_mode)=0x80617C78
short::(double, _hcic_switch_role)=0x80617CFC
short::(double, _hcic_write_policy_set)=0x80617DAC
short::(double, _hcic_reset)=0x80617E40
short::(double, _hcic_set_event_filter)=0x80617E9C
short::(double, _hcic_write_pin_type)=0x80618058
short::(double, _hcic_read_stored_key)=0x806180CC
short::(double, _hcic_write_stored_key)=0x8061812C
short::(double, _hcic_delete_stored_key)=0x806182EC
short::(double, _hcic_change_name)=0x8061839C
short::(double, _hcic_write_page_tout)=0x806184DC
short::(double, _hcic_write_scan_enable)=0x80618514
short::(double, _hcic_write_pagescan_cfg)=0x80618544
short::(double, _hcic_write_inqscan_cfg)=0x80618588
short::(double, _hcic_write_auth_enable)=0x806185CC
short::(double, _hcic_write_encr_mode)=0x80618640
short::(double, _hcic_write_dev_class)=0x806186B4
short::(double, _hcic_write_auto_flush_tout)=0x806186F8
short::(double, _hcic_set_host_buf_size)=0x8061873C
short::(double, _hcic_write_link_super_tout)=0x806187F8
short::(double, _hcic_write_cur_iac_lap)=0x8061888C
short::(double, _hcic_read_local_ver)=0x806188FC
short::(double, _hcic_read_local_features)=0x8061895C
short::(double, _hcic_read_buffer_size)=0x806189B8
short::(double, _hcic_read_bd_addr)=0x806189E0
short::(double, _hcic_get_link_quality)=0x80618A40
short::(double, _hcic_read_rssi)=0x80618ABC
short::(double, _hcic_set_afh_channels)=0x80618B34
short::(double, _hcic_write_inqscan_type)=0x80618F54
short::(double, _hcic_write_inquiry_mode)=0x80618F84
short::(double, _hcic_write_pagescan_type)=0x80618FB4
short::(double, _hcic_vendor_spec_cmd)=0x80618FE4
double::(_conn_initiate)=0x80619140
double::(_proc_repage_timeout)=0x80619200
double::(_pm_set_now)=0x806192C8
double::(_pm_proc_mode_change)=0x806194A0
double::(_pm_inact_timeout)=0x806195F8
double::(_search_callback)=0x8061970C
double::(_conn_reg)=0x8061A3C4
double::(_conn_disconnect)=0x8061A51C
double::(_sec_check_complete_term)=0x8061A5C0
double::(_l2cif_connect_ind)=0x8061A6F0
double::(_proc_repage_timeout)=0x8061A948
double::(_sec_check_complete_orig)=0x8061AA94
double::(_l2cif_connect_cfm)=0x8061ACA8
double::(_l2cif_config_ind)=0x8061AFF0
double::(_l2cif_config_cfm)=0x8061B298
double::(_l2cif_disconnect_ind)=0x8061B5A4
double::(_l2cif_disconnect_cfm)=0x8061B868
double::(_l2cif_cong_ind)=0x8061BAB0
double::(_l2cif_data_ind)=0x8061BCA8
double::(_conn_snd_data)=0x8061C040
double::(_conn_initiate)=0x8061C2DC
double::(_conn_dereg)=0x8061C3D8
char::(char, short, m_execute)=0x8061CFD0
char::(long, int, nk_hci_conn_req)=0x8061E4AC
char::(long, int, nk_hci_conn_comp)=0x8061E600
char::(long, int, nk_sec_comp)=0x8061E838
char::(long, int, nk_hci_disc_comp)=0x8061E8EC
char::(long, int, nk_hci_qos_violation)=0x8061E9A8
char::(long, int, nk_timeout)=0x8061EA18
char::(long, int, nk_send_to_lower)=0x8061EB8C
char::(long, int, nk_check_send_pkts)=0x8061EC94
char::(long, int, nk_adjust_allocation)=0x8061EF60
char::(long, int, nk_process_num_completed_pkts)=0x8061F0F8
char::(long, int, nk_processs_num_bufs)=0x8061F1DC
char::(p_link_chk_pkt_start)=0x8061F1F0
char::(p_link_chk_pkt_end)=0x8061F3C0
char::(long, int, nk_role_changed)=0x8061F42C
char::(long, int, nk_role_change_failed)=0x8061F4AC
char::(long, int, nk_segments_xmitted)=0x8061F518
char::(pin_code_request)=0x8061F5F4
char::(int, nit)=0x8061F638
char::(rcv_acl_data)=0x8061F74C
char::(process_timeout)=0x806204EC
char::(process_held_packets)=0x8062053C
char::(_allocate_lcb)=0x80620668
char::(_release_lcb)=0x8062073C
char::(_find_lcb_by_bd_addr)=0x8062083C
char::(_find_lcb_by_handle)=0x806208C4
char::(_get_conn_role)=0x80620954
char::(_build_header)=0x80620964
char::(_send_peer_cmd_reject)=0x80620A28
char::(_send_peer_connect_req)=0x80620B24
char::(_send_peer_connect_rsp)=0x80620BE8
char::(_reject_connection)=0x80620CC0
char::(_send_peer_config_req)=0x80620D80
char::(_send_peer_config_rsp)=0x80621078
char::(_send_peer_config_rej)=0x80621370
char::(_send_peer_disc_req)=0x80621524
char::(_send_peer_disc_rsp)=0x806215F8
char::(_send_peer_echo_req)=0x806216B8
char::(_send_peer_echo_rsp)=0x80621828
char::(_send_peer_info_rsp)=0x806219C4
char::(_allocate_ccb)=0x80621A68
char::(_release_ccb)=0x80621B74
char::(_find_ccb_by_cid)=0x80621D18
char::(_allocate_rcb)=0x80621D74
char::(_release_rcb)=0x80621DC0
char::(_find_rcb_by_psm)=0x80621DD0
char::(_process_peer_cfg_req)=0x80621E88
char::(_process_peer_cfg_rsp)=0x80621FD0
char::(_process_our_cfg_req)=0x80622010
char::(_process_our_cfg_rsp)=0x80622120
char::(_device_reset)=0x80622160
char::(_create_conn)=0x806221CC
char::(_create_conn_after_switch)=0x806222E4
char::(_find_lcb_by_state)=0x806223B4
char::(_lcb_disconnecting)=0x80622444
char::(mm_l2cap_if_init)=0x80623F50
char::(short, ave_lcid_mcb)=0x80624868
char::(mx_sm_execute)=0x80624884
char::(mx_conf_cnf)=0x806252E4
char::(mx_conf_ind)=0x806253D8
char::(port_sm_execute)=0x806254C8
char::(process_pn)=0x80625E7C
char::(process_rpn)=0x80625F64
char::(process_msc)=0x80626270
char::(process_rls)=0x806263DC
char::(process_nsc)=0x80626468
char::(process_test_rsp)=0x8062646C
char::(process_fcon)=0x80626474
char::(process_fcoff)=0x806264D8
char::(process_l2cap_congestion)=0x8062653C
char::(short, et_port_state)=0x806265C4
char::(short, end_sabme)=0x80626B94
char::(short, end_ua)=0x80626C44
char::(short, end_dm)=0x80626CF4
char::(short, end_disc)=0x80626DB8
char::(short, end_buf_uih)=0x80626E68
char::(short, end_pn)=0x80627000
char::(short, end_fcon)=0x806270E8
char::(short, end_fcoff)=0x8062716C
char::(short, end_msc)=0x806271F0
char::(short, end_rls)=0x80627310
char::(short, end_rpn)=0x806273C0
char::(short, end_test)=0x806274DC
char::(short, end_credit)=0x80627584
char::(parse_data)=0x80627644
char::(process_mx_message)=0x80627BB8
char::(char, alc_fcs)=0x806281DC
char::(char, heck_fcs)=0x80628214
char::(alloc_multiplexer_channel)=0x80628260
char::(release_multiplexer_channel)=0x806283B8
char::(timer_start)=0x80628440
char::(timer_stop)=0x806284B4
char::(port_timer_start)=0x8062850C
char::(port_timer_stop)=0x8062858C
char::(char, heck_mcb_active)=0x806285E4
char::(mm_process_timeout)=0x806286A8
char::(short, ec_check_complete)=0x806286E4
char::(port_closed)=0x80628738
char::(int, nc_credit)=0x80628890
char::(double, ec_credit)=0x8062891C
char::(char, heck_send_cmd)=0x80628958
void::(_attr_seq)=0x8062AF44
double::(record)=0x8062B130
double::(attr)=0x8062B1D0
void::(_arg)=0x8062E040
double::(short, troy_global_chain)=0x8062E120
char::(nstruct_new_array)=0x8062E168
__partial_array_destructor::__dt(void)=0x8062E26C
char::(nstruct_array)=0x8062E328
double::(short, troy_arr)=0x8062E420
double::(short, troy_new_array)=0x8062E498
char::(t_fp2unsigned)=0x8062E5AC
short::(void, e_fpr)=0x8062E608
short::(void, e_fpr23)=0x8062E62C
short::(void, e_fpr24)=0x8062E630
short::(void, e_fpr26)=0x8062E638
short::(void, e_fpr27)=0x8062E63C
short::(void, e_fpr28)=0x8062E640
short::(void, e_fpr29)=0x8062E644
short::(void, e_gpr)=0x8062E6A0
double::(void, u)=0x8062E738
double::(void, i)=0x8062E824
short::(long, i)=0x8062EB4C
short::(r2u)=0x8062EB70
char::(t_sll_dbl)=0x8062EB94
char::(t_ull_dbl)=0x8062EC44
char::(t_dbl_usll)=0x8062ECF8
char::(t_dbl_ull)=0x8062EDC4
int::(int, t_cpp_exceptions)=0x8062EE6C
float::(ni_cpp_exceptions)=0x8062EEA8
short::(short, _free)=0x8062EF50
bool::(long, ock_merge_next)=0x8062F158
char::(ose_all)=0x8062F51C
float::(ush_all)=0x8062F5C0
short::(r2dec)=0x8062F990
long::(short, short, _dec)=0x8062FE7C
double::(char, nu, m)=0x80630760
float::(ush_buffer)=0x80630EE4
float::(rite)=0x80630F9C
long::(short, e)=0x806312A4
long::(short, h)=0x80631360
short::(ek)=0x80631540
wchar_t::(tomb_noconv)=0x80631768
short::(owcs)=0x80631784
short::(ombs)=0x80631844
char::(py_longs_aligned)=0x80631A6C
char::(py_longs_rev_aligned)=0x80631B28
char::(py_longs_unaligned)=0x80631BD0
char::(py_longs_rev_unaligned)=0x80631C90
float::(char, long, assifyf)=0x80631D3C
short::(gnbitd)=0x80631D9C
float::(char, long, assifyd)=0x80631DB4
short::(double, int, o_atexit)=0x80631E30
short::(ormatter)=0x80634994
char::(nf)=0x806356B4
int::(e)=0x806357E4
short::(rtold)=0x80635BFC
short::(rtoul)=0x80636F20
short::(rtoull)=0x80637334
wchar_t::(float, ormatter)=0x8063961C
wchar_t::(tringWrite)=0x80639FA8
wchar_t::(rintf)=0x8063A10C
short::(en)=0x8063A228
short::(py)=0x8063A244
short::(char, py)=0x8063A260
short::(mp)=0x8063A2A4
short::(hr)=0x8063A2D8
int::(e)=0x8063A304
wchar_t::(int, te_console)=0x8063A37C
int::(ee754_acos)=0x8063A4E0
int::(ee754_asin)=0x8063A7AC
int::(ee754_atan2)=0x8063AA44
int::(ee754_fmod)=0x8063AC9C
int::(ee754_log)=0x8063B01C
int::(ee754_log10)=0x8063B2D0
int::(ee754_pow)=0x8063B3E4
int::(ee754_rem_pio2)=0x8063BBF8
int::()=0x8063DC84
int::()=0x8063E350
int::(ee754_sqrt)=0x8063E364
int::(MetroTRK)=0x8063F0F4
int::(MetroTRK_BBA)=0x8063F18C
int::(MetroTRKCommTable)=0x8063F4D8
short::(rveEXI2Port)=0x8063F720
int::(int, alizeProgramEndTrap)=0x8063F760
int::(eFPSCR)=0x806434BC
const long::(short, e)=0x80643AF8
BattanKingCollisionPress::__ct(const char*)=0x8066B540
SimpleEffectOb::__vt()=0x80680DD8
PlaneZeroGravityCreator::__vt(eator) const=0x80693354
BrightSun::__vt(_vt__9BrightSun)=0x8069BAA8
ClipAreaShapeCylinder::__vt(void)=0x8069CB90
@unnamed@ut_CharWriter_cpp@::@GUARD@SetupGXCommon(void, @fog)=0x8072E750
@unnamed@ut_CharWriter_cpp@::@LOCAL@SetupGXCommon(void, @fog)=0x8072E754
